/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRedux = __webpack_require__(160);

	var _redux = __webpack_require__(166);

	var _app = __webpack_require__(199);

	var _app2 = _interopRequireDefault(_app);

	var _reducers = __webpack_require__(600);

	var _reducers2 = _interopRequireDefault(_reducers);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createStoreWithMiddleware = (0, _redux.applyMiddleware)()(_redux.createStore);

	_reactDom2.default.render(_react2.default.createElement(
	  _reactRedux.Provider,
	  { store: createStoreWithMiddleware(_reducers2.default) },
	  _react2.default.createElement(_app2.default, null)
	), document.querySelector('.container'));

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(4);
	var ReactDOMServer = __webpack_require__(149);
	var ReactIsomorphic = __webpack_require__(153);

	var assign = __webpack_require__(40);
	var deprecated = __webpack_require__(158);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(6);
	var ReactDOMTextComponent = __webpack_require__(7);
	var ReactDefaultInjection = __webpack_require__(72);
	var ReactInstanceHandles = __webpack_require__(46);
	var ReactMount = __webpack_require__(29);
	var ReactPerf = __webpack_require__(19);
	var ReactReconciler = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(55);
	var ReactVersion = __webpack_require__(147);

	var findDOMNode = __webpack_require__(92);
	var renderSubtreeIntoContainer = __webpack_require__(148);
	var warning = __webpack_require__(26);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(10);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(8);
	var DOMPropertyOperations = __webpack_require__(23);
	var ReactComponentBrowserEnvironment = __webpack_require__(27);
	var ReactMount = __webpack_require__(29);

	var assign = __webpack_require__(40);
	var escapeTextContentForBrowser = __webpack_require__(22);
	var setTextContent = __webpack_require__(21);
	var validateDOMNesting = __webpack_require__(71);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(9);
	var ReactMultiChildUpdateTypes = __webpack_require__(17);
	var ReactPerf = __webpack_require__(19);

	var setInnerHTML = __webpack_require__(20);
	var setTextContent = __webpack_require__(21);
	var invariant = __webpack_require__(14);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var createNodesFromMarkup = __webpack_require__(11);
	var emptyFunction = __webpack_require__(16);
	var getMarkupWrap = __webpack_require__(15);
	var invariant = __webpack_require__(14);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var createArrayFromMixed = __webpack_require__(12);
	var getMarkupWrap = __webpack_require__(15);
	var invariant = __webpack_require__(14);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(13);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var invariant = __webpack_require__(14);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(18);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);
	var escapeTextContentForBrowser = __webpack_require__(22);
	var setInnerHTML = __webpack_require__(20);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);
	var ReactPerf = __webpack_require__(19);

	var quoteAttributeValueForBrowser = __webpack_require__(25);
	var warning = __webpack_require__(26);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(22);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(16);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(28);
	var ReactMount = __webpack_require__(29);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(8);
	var DOMPropertyOperations = __webpack_require__(23);
	var ReactMount = __webpack_require__(29);
	var ReactPerf = __webpack_require__(19);

	var invariant = __webpack_require__(14);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);
	var ReactBrowserEventEmitter = __webpack_require__(30);
	var ReactCurrentOwner = __webpack_require__(6);
	var ReactDOMFeatureFlags = __webpack_require__(42);
	var ReactElement = __webpack_require__(43);
	var ReactEmptyComponentRegistry = __webpack_require__(45);
	var ReactInstanceHandles = __webpack_require__(46);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactMarkupChecksum = __webpack_require__(49);
	var ReactPerf = __webpack_require__(19);
	var ReactReconciler = __webpack_require__(51);
	var ReactUpdateQueue = __webpack_require__(54);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var emptyObject = __webpack_require__(59);
	var containsNode = __webpack_require__(60);
	var instantiateReactComponent = __webpack_require__(63);
	var invariant = __webpack_require__(14);
	var setInnerHTML = __webpack_require__(20);
	var shouldUpdateReactComponent = __webpack_require__(68);
	var validateDOMNesting = __webpack_require__(71);
	var warning = __webpack_require__(26);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPluginHub = __webpack_require__(32);
	var EventPluginRegistry = __webpack_require__(33);
	var ReactEventEmitterMixin = __webpack_require__(38);
	var ReactPerf = __webpack_require__(19);
	var ViewportMetrics = __webpack_require__(39);

	var assign = __webpack_require__(40);
	var isEventSupported = __webpack_require__(41);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(18);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(33);
	var EventPluginUtils = __webpack_require__(34);
	var ReactErrorUtils = __webpack_require__(35);

	var accumulateInto = __webpack_require__(36);
	var forEachAccumulated = __webpack_require__(37);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var ReactErrorUtils = __webpack_require__(35);

	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(32);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(6);

	var assign = __webpack_require__(40);
	var canDefineProperty = __webpack_require__(44);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 45 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(47);

	var invariant = __webpack_require__(14);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(50);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(52);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(53);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(6);
	var ReactElement = __webpack_require__(43);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(56);
	var PooledClass = __webpack_require__(57);
	var ReactPerf = __webpack_require__(19);
	var ReactReconciler = __webpack_require__(51);
	var Transaction = __webpack_require__(58);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(57);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(61);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(62);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(64);
	var ReactEmptyComponent = __webpack_require__(69);
	var ReactNativeComponent = __webpack_require__(70);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(65);
	var ReactCurrentOwner = __webpack_require__(6);
	var ReactElement = __webpack_require__(43);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactPerf = __webpack_require__(19);
	var ReactPropTypeLocations = __webpack_require__(66);
	var ReactPropTypeLocationNames = __webpack_require__(67);
	var ReactReconciler = __webpack_require__(51);
	var ReactUpdateQueue = __webpack_require__(54);

	var assign = __webpack_require__(40);
	var emptyObject = __webpack_require__(59);
	var invariant = __webpack_require__(14);
	var shouldUpdateReactComponent = __webpack_require__(68);
	var warning = __webpack_require__(26);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(14);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(18);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 68 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(43);
	var ReactEmptyComponentRegistry = __webpack_require__(45);
	var ReactReconciler = __webpack_require__(51);

	var assign = __webpack_require__(40);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(40);
	var emptyFunction = __webpack_require__(16);
	var warning = __webpack_require__(26);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(73);
	var ChangeEventPlugin = __webpack_require__(81);
	var ClientReactRootIndex = __webpack_require__(84);
	var DefaultEventPluginOrder = __webpack_require__(85);
	var EnterLeaveEventPlugin = __webpack_require__(86);
	var ExecutionEnvironment = __webpack_require__(10);
	var HTMLDOMPropertyConfig = __webpack_require__(90);
	var ReactBrowserComponentMixin = __webpack_require__(91);
	var ReactComponentBrowserEnvironment = __webpack_require__(27);
	var ReactDefaultBatchingStrategy = __webpack_require__(93);
	var ReactDOMComponent = __webpack_require__(94);
	var ReactDOMTextComponent = __webpack_require__(7);
	var ReactEventListener = __webpack_require__(119);
	var ReactInjection = __webpack_require__(122);
	var ReactInstanceHandles = __webpack_require__(46);
	var ReactMount = __webpack_require__(29);
	var ReactReconcileTransaction = __webpack_require__(126);
	var SelectEventPlugin = __webpack_require__(131);
	var ServerReactRootIndex = __webpack_require__(132);
	var SimpleEventPlugin = __webpack_require__(133);
	var SVGDOMPropertyConfig = __webpack_require__(142);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(143);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPropagators = __webpack_require__(74);
	var ExecutionEnvironment = __webpack_require__(10);
	var FallbackCompositionState = __webpack_require__(75);
	var SyntheticCompositionEvent = __webpack_require__(77);
	var SyntheticInputEvent = __webpack_require__(79);

	var keyOf = __webpack_require__(80);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPluginHub = __webpack_require__(32);

	var warning = __webpack_require__(26);

	var accumulateInto = __webpack_require__(36);
	var forEachAccumulated = __webpack_require__(37);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(57);

	var assign = __webpack_require__(40);
	var getTextContentAccessor = __webpack_require__(76);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(78);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(57);

	var assign = __webpack_require__(40);
	var emptyFunction = __webpack_require__(16);
	var warning = __webpack_require__(26);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(78);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPluginHub = __webpack_require__(32);
	var EventPropagators = __webpack_require__(74);
	var ExecutionEnvironment = __webpack_require__(10);
	var ReactUpdates = __webpack_require__(55);
	var SyntheticEvent = __webpack_require__(78);

	var getEventTarget = __webpack_require__(82);
	var isEventSupported = __webpack_require__(41);
	var isTextInputElement = __webpack_require__(83);
	var keyOf = __webpack_require__(80);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ }),
/* 84 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(80);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPropagators = __webpack_require__(74);
	var SyntheticMouseEvent = __webpack_require__(87);

	var ReactMount = __webpack_require__(29);
	var keyOf = __webpack_require__(80);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(88);
	var ViewportMetrics = __webpack_require__(39);

	var getEventModifierState = __webpack_require__(89);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(78);

	var getEventTarget = __webpack_require__(82);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);
	var ExecutionEnvironment = __webpack_require__(10);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(48);

	var findDOMNode = __webpack_require__(92);
	var warning = __webpack_require__(26);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(6);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactMount = __webpack_require__(29);

	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(55);
	var Transaction = __webpack_require__(58);

	var assign = __webpack_require__(40);
	var emptyFunction = __webpack_require__(16);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(95);
	var CSSPropertyOperations = __webpack_require__(97);
	var DOMProperty = __webpack_require__(24);
	var DOMPropertyOperations = __webpack_require__(23);
	var EventConstants = __webpack_require__(31);
	var ReactBrowserEventEmitter = __webpack_require__(30);
	var ReactComponentBrowserEnvironment = __webpack_require__(27);
	var ReactDOMButton = __webpack_require__(105);
	var ReactDOMInput = __webpack_require__(106);
	var ReactDOMOption = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(113);
	var ReactDOMTextarea = __webpack_require__(114);
	var ReactMount = __webpack_require__(29);
	var ReactMultiChild = __webpack_require__(115);
	var ReactPerf = __webpack_require__(19);
	var ReactUpdateQueue = __webpack_require__(54);

	var assign = __webpack_require__(40);
	var canDefineProperty = __webpack_require__(44);
	var escapeTextContentForBrowser = __webpack_require__(22);
	var invariant = __webpack_require__(14);
	var isEventSupported = __webpack_require__(41);
	var keyOf = __webpack_require__(80);
	var setInnerHTML = __webpack_require__(20);
	var setTextContent = __webpack_require__(21);
	var shallowEqual = __webpack_require__(118);
	var validateDOMNesting = __webpack_require__(71);
	var warning = __webpack_require__(26);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(29);

	var findDOMNode = __webpack_require__(92);
	var focusNode = __webpack_require__(96);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(98);
	var ExecutionEnvironment = __webpack_require__(10);
	var ReactPerf = __webpack_require__(19);

	var camelizeStyleName = __webpack_require__(99);
	var dangerousStyleValue = __webpack_require__(101);
	var hyphenateStyleName = __webpack_require__(102);
	var memoizeStringOnly = __webpack_require__(104);
	var warning = __webpack_require__(26);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(100);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(98);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(103);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ }),
/* 103 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(28);
	var LinkedValueUtils = __webpack_require__(107);
	var ReactMount = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(108);
	var ReactPropTypeLocations = __webpack_require__(66);

	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(43);
	var ReactPropTypeLocationNames = __webpack_require__(67);

	var emptyFunction = __webpack_require__(16);
	var getIteratorFn = __webpack_require__(109);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED') == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ }),
/* 109 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(113);

	var assign = __webpack_require__(40);
	var warning = __webpack_require__(26);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(57);
	var ReactElement = __webpack_require__(43);

	var emptyFunction = __webpack_require__(16);
	var traverseAllChildren = __webpack_require__(112);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(6);
	var ReactElement = __webpack_require__(43);
	var ReactInstanceHandles = __webpack_require__(46);

	var getIteratorFn = __webpack_require__(109);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(107);
	var ReactMount = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var warning = __webpack_require__(26);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(107);
	var ReactDOMIDOperations = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(65);
	var ReactMultiChildUpdateTypes = __webpack_require__(17);

	var ReactCurrentOwner = __webpack_require__(6);
	var ReactReconciler = __webpack_require__(51);
	var ReactChildReconciler = __webpack_require__(116);

	var flattenChildren = __webpack_require__(117);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(51);

	var instantiateReactComponent = __webpack_require__(63);
	var shouldUpdateReactComponent = __webpack_require__(68);
	var traverseAllChildren = __webpack_require__(112);
	var warning = __webpack_require__(26);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(112);
	var warning = __webpack_require__(26);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(120);
	var ExecutionEnvironment = __webpack_require__(10);
	var PooledClass = __webpack_require__(57);
	var ReactInstanceHandles = __webpack_require__(46);
	var ReactMount = __webpack_require__(29);
	var ReactUpdates = __webpack_require__(55);

	var assign = __webpack_require__(40);
	var getEventTarget = __webpack_require__(82);
	var getUnboundedScrollPosition = __webpack_require__(121);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(16);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 121 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);
	var EventPluginHub = __webpack_require__(32);
	var ReactComponentEnvironment = __webpack_require__(65);
	var ReactClass = __webpack_require__(123);
	var ReactEmptyComponent = __webpack_require__(69);
	var ReactBrowserEventEmitter = __webpack_require__(30);
	var ReactNativeComponent = __webpack_require__(70);
	var ReactPerf = __webpack_require__(19);
	var ReactRootIndex = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(55);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(124);
	var ReactElement = __webpack_require__(43);
	var ReactPropTypeLocations = __webpack_require__(66);
	var ReactPropTypeLocationNames = __webpack_require__(67);
	var ReactNoopUpdateQueue = __webpack_require__(125);

	var assign = __webpack_require__(40);
	var emptyObject = __webpack_require__(59);
	var invariant = __webpack_require__(14);
	var keyMirror = __webpack_require__(18);
	var keyOf = __webpack_require__(80);
	var warning = __webpack_require__(26);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(125);

	var canDefineProperty = __webpack_require__(44);
	var emptyObject = __webpack_require__(59);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(26);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(56);
	var PooledClass = __webpack_require__(57);
	var ReactBrowserEventEmitter = __webpack_require__(30);
	var ReactDOMFeatureFlags = __webpack_require__(42);
	var ReactInputSelection = __webpack_require__(127);
	var Transaction = __webpack_require__(58);

	var assign = __webpack_require__(40);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(128);

	var containsNode = __webpack_require__(60);
	var focusNode = __webpack_require__(96);
	var getActiveElement = __webpack_require__(130);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var getNodeForCharacterOffset = __webpack_require__(129);
	var getTextContentAccessor = __webpack_require__(76);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventPropagators = __webpack_require__(74);
	var ExecutionEnvironment = __webpack_require__(10);
	var ReactInputSelection = __webpack_require__(127);
	var SyntheticEvent = __webpack_require__(78);

	var getActiveElement = __webpack_require__(130);
	var isTextInputElement = __webpack_require__(83);
	var keyOf = __webpack_require__(80);
	var shallowEqual = __webpack_require__(118);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(31);
	var EventListener = __webpack_require__(120);
	var EventPropagators = __webpack_require__(74);
	var ReactMount = __webpack_require__(29);
	var SyntheticClipboardEvent = __webpack_require__(134);
	var SyntheticEvent = __webpack_require__(78);
	var SyntheticFocusEvent = __webpack_require__(135);
	var SyntheticKeyboardEvent = __webpack_require__(136);
	var SyntheticMouseEvent = __webpack_require__(87);
	var SyntheticDragEvent = __webpack_require__(139);
	var SyntheticTouchEvent = __webpack_require__(140);
	var SyntheticUIEvent = __webpack_require__(88);
	var SyntheticWheelEvent = __webpack_require__(141);

	var emptyFunction = __webpack_require__(16);
	var getEventCharCode = __webpack_require__(137);
	var invariant = __webpack_require__(14);
	var keyOf = __webpack_require__(80);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(78);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(88);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(88);

	var getEventCharCode = __webpack_require__(137);
	var getEventKey = __webpack_require__(138);
	var getEventModifierState = __webpack_require__(89);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(137);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(87);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(88);

	var getEventModifierState = __webpack_require__(89);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(87);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(24);
	var ReactDefaultPerfAnalysis = __webpack_require__(144);
	var ReactMount = __webpack_require__(29);
	var ReactPerf = __webpack_require__(19);

	var performanceNow = __webpack_require__(145);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(40);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(146);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(10);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.9';

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(29);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(72);
	var ReactServerRendering = __webpack_require__(150);
	var ReactVersion = __webpack_require__(147);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(93);
	var ReactElement = __webpack_require__(43);
	var ReactInstanceHandles = __webpack_require__(46);
	var ReactMarkupChecksum = __webpack_require__(49);
	var ReactServerBatchingStrategy = __webpack_require__(151);
	var ReactServerRenderingTransaction = __webpack_require__(152);
	var ReactUpdates = __webpack_require__(55);

	var emptyObject = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(63);
	var invariant = __webpack_require__(14);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 151 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(57);
	var CallbackQueue = __webpack_require__(56);
	var Transaction = __webpack_require__(58);

	var assign = __webpack_require__(40);
	var emptyFunction = __webpack_require__(16);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(111);
	var ReactComponent = __webpack_require__(124);
	var ReactClass = __webpack_require__(123);
	var ReactDOMFactories = __webpack_require__(154);
	var ReactElement = __webpack_require__(43);
	var ReactElementValidator = __webpack_require__(155);
	var ReactPropTypes = __webpack_require__(108);
	var ReactVersion = __webpack_require__(147);

	var assign = __webpack_require__(40);
	var onlyChild = __webpack_require__(157);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(43);
	var ReactElementValidator = __webpack_require__(155);

	var mapObject = __webpack_require__(156);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(43);
	var ReactPropTypeLocations = __webpack_require__(66);
	var ReactPropTypeLocationNames = __webpack_require__(67);
	var ReactCurrentOwner = __webpack_require__(6);

	var canDefineProperty = __webpack_require__(44);
	var getIteratorFn = __webpack_require__(109);
	var invariant = __webpack_require__(14);
	var warning = __webpack_require__(26);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 156 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(43);

	var invariant = __webpack_require__(14);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(40);
	var warning = __webpack_require__(26);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(4);


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(161);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(163);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(2);

	var _storeShape = __webpack_require__(162);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/rackt/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	  }
	  /* eslint-disable no-console */
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    var children = this.props.children;

	    return _react.Children.only(children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;

	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;

	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _react.PropTypes.element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	exports["default"] = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  dispatch: _react.PropTypes.func.isRequired,
	  getState: _react.PropTypes.func.isRequired
	});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = connect;

	var _react = __webpack_require__(2);

	var _storeShape = __webpack_require__(162);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(164);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(165);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _isPlainObject = __webpack_require__(187);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(197);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function checkStateShape(stateProps, dispatch) {
	  (0, _invariant2["default"])((0, _isPlainObject2["default"])(stateProps), '`%sToProps` must return an object. Instead received %s.', dispatch ? 'mapDispatch' : 'mapState', stateProps);
	  return stateProps;
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;
	  var mapDispatch = (0, _isPlainObject2["default"])(mapDispatchToProps) ? (0, _wrapActionCreators2["default"])(mapDispatchToProps) : mapDispatchToProps || defaultMapDispatchToProps;

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var checkMergedEquals = finalMergeProps !== defaultMergeProps;
	  var _options$pure = options.pure;
	  var pure = _options$pure === undefined ? true : _options$pure;
	  var _options$withRef = options.withRef;
	  var withRef = _options$withRef === undefined ? false : _options$withRef;

	  // Helps track hot reloading.

	  var version = nextVersion++;

	  function computeMergedProps(stateProps, dispatchProps, parentProps) {
	    var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	    (0, _invariant2["default"])((0, _isPlainObject2["default"])(mergedProps), '`mergeProps` must return an object. Instead received %s.', mergedProps);
	    return mergedProps;
	  }

	  return function wrapWithConnect(WrappedComponent) {
	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + _this.constructor.displayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + _this.constructor.displayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        return checkStateShape(stateProps);
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        return isFactory ? this.computeStateProps(store, props) : checkStateShape(mappedState);
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        return checkStateShape(dispatchProps, true);
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        return isFactory ? this.computeDispatchProps(store, props) : checkStateShape(mappedDispatch, true);
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var prevStoreState = this.state.storeState;
	        var storeState = this.store.getState();

	        if (!pure || prevStoreState !== storeState) {
	          this.hasStoreStateChanged = true;
	          this.setState({ storeState: storeState });
	        }
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged;
	        var hasStoreStateChanged = this.hasStoreStateChanged;
	        var renderedElement = this.renderedElement;

	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 164 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(166);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(167);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(182);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(184);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(185);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(186);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(183);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;

	var _isPlainObject = __webpack_require__(168);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _symbolObservable = __webpack_require__(178);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'

	  /**
	   * Creates a Redux store that holds the state tree.
	   * The only way to change the data in the store is to call `dispatch()` on it.
	   *
	   * There should only be a single store in your app. To specify how different
	   * parts of the state tree respond to actions, you may combine several reducers
	   * into a single reducer function by using `combineReducers`.
	   *
	   * @param {Function} reducer A function that returns the next state tree, given
	   * the current state tree and the action to handle.
	   *
	   * @param {any} [preloadedState] The initial state. You may optionally specify it
	   * to hydrate the state from the server in universal apps, or to restore a
	   * previously serialized user session.
	   * If you use `combineReducers` to produce the root reducer function, this must be
	   * an object with the same shape as `combineReducers` keys.
	   *
	   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	   * to enhance the store with third-party capabilities such as middleware,
	   * time travel, persistence, etc. The only store enhancer that ships with Redux
	   * is `applyMiddleware()`.
	   *
	   * @returns {Store} A Redux store that lets you read the state, dispatch actions
	   * and subscribe to changes.
	   */
	};function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(169),
	    getPrototype = __webpack_require__(175),
	    isObjectLike = __webpack_require__(177);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(170),
	    getRawTag = __webpack_require__(173),
	    objectToString = __webpack_require__(174);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(171);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(172);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(170);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(176);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }),
/* 177 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(179);


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(181);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(180)(module)))

/***/ }),
/* 180 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 181 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = combineReducers;

	var _createStore = __webpack_require__(167);

	var _isPlainObject = __webpack_require__(168);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(183);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var unexpectedKeyCache = void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError = void 0;
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination() {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var action = arguments[1];

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 183 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = applyMiddleware;

	var _compose = __webpack_require__(186);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(188),
	    getPrototype = __webpack_require__(194),
	    isObjectLike = __webpack_require__(196);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(189),
	    getRawTag = __webpack_require__(192),
	    objectToString = __webpack_require__(193);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(190);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(191);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(189);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ }),
/* 193 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(195);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ }),
/* 195 */
/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 197 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRedux = __webpack_require__(160);

	var _redux = __webpack_require__(166);

	var _reduxThunk = __webpack_require__(200);

	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

	var _router = __webpack_require__(201);

	var _router2 = _interopRequireDefault(_router);

	var _reducers = __webpack_require__(600);

	var _reducers2 = _interopRequireDefault(_reducers);

	var _MuiThemeProvider = __webpack_require__(602);

	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var createStoreWithMiddleware = (0, _redux.applyMiddleware)(_reduxThunk2.default)(_redux.createStore);

	var App = function (_Component) {
	    _inherits(App, _Component);

	    function App() {
	        _classCallCheck(this, App);

	        return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
	    }

	    _createClass(App, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _reactRedux.Provider,
	                { store: createStoreWithMiddleware(_reducers2.default) },
	                _react2.default.createElement(
	                    _MuiThemeProvider2.default,
	                    null,
	                    _react2.default.createElement(_router2.default, null)
	                )
	            );
	        }
	    }]);

	    return App;
	}(_react.Component);

	exports.default = App;

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	exports['default'] = thunk;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = Router;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouterDom = __webpack_require__(202);

	var _index = __webpack_require__(248);

	var _index2 = _interopRequireDefault(_index);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function Router() {
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(
	      _reactRouterDom.BrowserRouter,
	      null,
	      _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _reactRouterDom.Switch,
	          null,
	          _react2.default.createElement(_reactRouterDom.Route, { path: '/', component: _index2.default })
	        )
	      )
	    )
	  );
	}

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

	var _BrowserRouter2 = __webpack_require__(203);

	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);

	var _HashRouter2 = __webpack_require__(223);

	var _HashRouter3 = _interopRequireDefault(_HashRouter2);

	var _Link2 = __webpack_require__(225);

	var _Link3 = _interopRequireDefault(_Link2);

	var _MemoryRouter2 = __webpack_require__(226);

	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);

	var _NavLink2 = __webpack_require__(229);

	var _NavLink3 = _interopRequireDefault(_NavLink2);

	var _Prompt2 = __webpack_require__(235);

	var _Prompt3 = _interopRequireDefault(_Prompt2);

	var _Redirect2 = __webpack_require__(237);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(230);

	var _Route3 = _interopRequireDefault(_Route2);

	var _Router2 = __webpack_require__(221);

	var _Router3 = _interopRequireDefault(_Router2);

	var _StaticRouter2 = __webpack_require__(240);

	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);

	var _Switch2 = __webpack_require__(242);

	var _Switch3 = _interopRequireDefault(_Switch2);

	var _matchPath2 = __webpack_require__(244);

	var _matchPath3 = _interopRequireDefault(_matchPath2);

	var _withRouter2 = __webpack_require__(245);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createBrowserHistory = __webpack_require__(214);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _Router = __webpack_require__(221);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, BrowserRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createBrowserHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, '<BrowserRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { BrowserRouter as Router }`.');
	  };

	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return BrowserRouter;
	}(_react2.default.Component);

	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(206)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(213)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(207);
	var invariant = __webpack_require__(208);
	var warning = __webpack_require__(209);
	var assign = __webpack_require__(210);

	var ReactPropTypesSecret = __webpack_require__(211);
	var checkPropTypes = __webpack_require__(212);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(207);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 211 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(208);
	  var warning = __webpack_require__(209);
	  var ReactPropTypesSecret = __webpack_require__(211);
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(207);
	var invariant = __webpack_require__(208);
	var ReactPropTypesSecret = __webpack_require__(211);

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };

	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(215);

	var _PathUtils = __webpack_require__(218);

	var _createTransitionManager = __webpack_require__(219);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(220);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};

	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;


	    var path = pathname + search + hash;

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path, state, key);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

	    handlePop(getDOMLocation(event.state));
	  };

	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };

	  var forceNextPop = false;

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allKeys.indexOf(fromLocation.key);

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];

	  // Public interface

	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	          nextKeys.push(location.key);
	          allKeys = nextKeys;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

	        window.location.href = href;
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);

	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

	        window.location.replace(href);
	      }
	    });
	  };

	  var go = function go(n) {
	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createBrowserHistory;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _resolvePathname = __webpack_require__(216);

	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

	var _valueEqual = __webpack_require__(217);

	var _valueEqual2 = _interopRequireDefault(_valueEqual);

	var _PathUtils = __webpack_require__(218);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ }),
/* 216 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	exports.default = resolvePathname;
	module.exports = exports['default'];

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function valueEqual(a, b) {
	  if (a === b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }

	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (aType !== bType) return false;

	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);

	    if (aKeys.length !== bKeys.length) return false;

	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	exports.default = valueEqual;
	module.exports = exports['default'];

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};

	var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
	  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
	};

	var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	};

	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;


	  var path = pathname || '/';

	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

	  return path;
	};

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;

	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

	    prompt = nextPrompt;

	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };

	  var listeners = [];

	  var appendListener = function appendListener(fn) {
	    var isActive = true;

	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };

	    listeners.push(listener);

	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};

	exports.default = createTransitionManager;

/***/ }),
/* 220 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _Router = __webpack_require__(222);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Router2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: '/',
	      url: '/',
	      params: {},
	      isExact: pathname === '/'
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, 'A <Router> may have only one child element');

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, 'You cannot change <Router history>');
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? _react2.default.Children.only(children) : null;
	  };

	  return Router;
	}(_react2.default.Component);

	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createHashHistory = __webpack_require__(224);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _Router = __webpack_require__(221);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createHashHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, '<HashRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { HashRouter as Router }`.');
	  };

	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(_react2.default.Component);

	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(['hashbang', 'noslash', 'slash']),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(215);

	var _PathUtils = __webpack_require__(218);

	var _createTransitionManager = __webpack_require__(219);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(220);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;


	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var forceNextPop = false;
	  var ignorePath = null;

	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;

	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;

	      handlePop(location);
	    }
	  };

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

	  // Public interface

	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);

	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	        nextPaths.push(path);
	        allPaths = nextPaths;

	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

	        setState();
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

	      if (prevIndex !== -1) allPaths[prevIndex] = path;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createHashHistory;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	/**
	 * The public API for rendering a history-aware <a>.
	 */

	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);

	  function Link() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Link);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore right clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();

	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;


	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        innerRef = _props.innerRef,
	        props = _objectWithoutProperties(_props, ['replace', 'to', 'innerRef']); // eslint-disable-line no-unused-vars

	    (0, _invariant2.default)(this.context.router, 'You should not use <Link> outside a <Router>');

	    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
	  };

	  return Link;
	}(_react2.default.Component);

	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
	  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _MemoryRouter = __webpack_require__(227);

	var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _createMemoryHistory = __webpack_require__(228);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _Router = __webpack_require__(222);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MemoryRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createMemoryHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.');
	  };

	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return MemoryRouter;
	}(_react2.default.Component);

	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(218);

	var _LocationUtils = __webpack_require__(215);

	var _createTransitionManager = __webpack_require__(219);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};

	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });

	  // Public interface

	  var createHref = _PathUtils.createPath;

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;

	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      history.entries[history.index] = location;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

	    var action = 'POP';
	    var location = history.entries[nextIndex];

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };

	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createMemoryHistory;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Route = __webpack_require__(230);

	var _Route2 = _interopRequireDefault(_Route);

	var _Link = __webpack_require__(225);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      ariaCurrent = _ref.ariaCurrent,
	      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive', 'ariaCurrent']);

	  return _react2.default.createElement(_Route2.default, {
	    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;

	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [className, activeClassName].filter(function (i) {
	          return i;
	        }).join(' ') : className,
	        style: isActive ? _extends({}, style, activeStyle) : style,
	        'aria-current': isActive && ariaCurrent
	      }, rest));
	    }
	  });
	};

	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func,
	  ariaCurrent: _propTypes2.default.oneOf(['page', 'step', 'location', 'true'])
	};

	NavLink.defaultProps = {
	  activeClassName: 'active',
	  ariaCurrent: 'true'
	};

	exports.default = NavLink;

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _Route = __webpack_require__(231);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Route2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _matchPath = __webpack_require__(232);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return _react2.default.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    (0, _invariant2.default)(router, 'You should not use <Route> or withRouter() outside a <Router>');

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return path ? (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }) : route.match;
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');

	    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');

	    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    return component ? // component prop gets first priority, only called if there's a match
	    match ? _react2.default.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
	    match ? render(props) : null : children ? // children come last, always called
	    typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? _react2.default.Children.only(children) : null : null;
	  };

	  return Route;
	}(_react2.default.Component);

	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  sensitive: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(233);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = '' + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (typeof options === 'string') options = { path: options };

	  var _options = options,
	      _options$path = _options.path,
	      path = _options$path === undefined ? '/' : _options$path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	exports.default = matchPath;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(234)

	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }

	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'

	      keys.push(token)

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ }),
/* 234 */
/***/ (function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _Prompt = __webpack_require__(236);

	var _Prompt2 = _interopRequireDefault(_Prompt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);

	  function Prompt() {
	    _classCallCheck(this, Prompt);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();

	    this.unblock = this.context.router.history.block(message);
	  };

	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };

	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, 'You should not use <Prompt> outside a <Router>');

	    if (this.props.when) this.enable(this.props.message);
	  };

	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };

	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };

	  Prompt.prototype.render = function render() {
	    return null;
	  };

	  return Prompt;
	}(_react2.default.Component);

	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _Redirect = __webpack_require__(238);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(239);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, 'You should not use <Redirect> outside a <Router>');

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = (0, _history.createLocation)(prevProps.to);
	    var nextTo = (0, _history.createLocation)(this.props.to);

	    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
	      (0, _warning2.default)(false, 'You tried to redirect to the same route you\'re currently on: ' + ('"' + nextTo.pathname + nextTo.search + '"'));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var _props = this.props,
	        push = _props.push,
	        to = _props.to;


	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(_react2.default.Component);

	Redirect.propTypes = {
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

	var _LocationUtils = __webpack_require__(215);

	Object.defineProperty(exports, 'createLocation', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.createLocation;
	  }
	});
	Object.defineProperty(exports, 'locationsAreEqual', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.locationsAreEqual;
	  }
	});

	var _PathUtils = __webpack_require__(218);

	Object.defineProperty(exports, 'parsePath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.parsePath;
	  }
	});
	Object.defineProperty(exports, 'createPath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.createPath;
	  }
	});

	var _createBrowserHistory2 = __webpack_require__(214);

	var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

	var _createHashHistory2 = __webpack_require__(224);

	var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

	var _createMemoryHistory2 = __webpack_require__(228);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.createBrowserHistory = _createBrowserHistory3.default;
	exports.createHashHistory = _createHashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _StaticRouter = __webpack_require__(241);

	var _StaticRouter2 = _interopRequireDefault(_StaticRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _PathUtils = __webpack_require__(218);

	var _Router = __webpack_require__(222);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var normalizeLocation = function normalizeLocation(object) {
	  var _object$pathname = object.pathname,
	      pathname = _object$pathname === undefined ? '/' : _object$pathname,
	      _object$search = object.search,
	      search = _object$search === undefined ? '' : _object$search,
	      _object$hash = object.hash,
	      hash = _object$hash === undefined ? '' : _object$hash;


	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;

	  return _extends({}, location, {
	    pathname: (0, _PathUtils.addLeadingSlash)(basename) + location.pathname
	  });
	};

	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;

	  var base = (0, _PathUtils.addLeadingSlash)(basename);

	  if (location.pathname.indexOf(base) !== 0) return location;

	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};

	var createLocation = function createLocation(location) {
	  return typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : normalizeLocation(location);
	};

	var createURL = function createURL(location) {
	  return typeof location === 'string' ? location : (0, _PathUtils.createPath)(location);
	};

	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, 'You cannot %s with <StaticRouter>', methodName);
	  };
	};

	var noop = function noop() {};

	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */

	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, StaticRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return (0, _PathUtils.addLeadingSlash)(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;

	      context.action = 'PUSH';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;

	      context.action = 'REPLACE';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };

	  StaticRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.');
	  };

	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);

	    var history = {
	      createHref: this.createHref,
	      action: 'POP',
	      location: stripBasename(basename, createLocation(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler('go'),
	      goBack: staticHandler('goBack'),
	      goForward: staticHandler('goForward'),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };

	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };

	  return StaticRouter;
	}(_react2.default.Component);

	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: '',
	  location: '/'
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _Switch = __webpack_require__(243);

	var _Switch2 = _interopRequireDefault(_Switch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(198);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _matchPath = __webpack_require__(232);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck(this, Switch);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, 'You should not use <Switch> outside a <Router>');
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (!_react2.default.isValidElement(element)) return;

	      var _element$props = element.props,
	          pathProp = _element$props.path,
	          exact = _element$props.exact,
	          strict = _element$props.strict,
	          sensitive = _element$props.sensitive,
	          from = _element$props.from;

	      var path = pathProp || from;

	      if (match == null) {
	        child = element;
	        match = path ? (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : route.match;
	      }
	    });

	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(_react2.default.Component);

	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _matchPath = __webpack_require__(232);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _withRouter = __webpack_require__(246);

	var _withRouter2 = _interopRequireDefault(_withRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _hoistNonReactStatics = __webpack_require__(247);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _Route = __webpack_require__(231);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);

	    return _react2.default.createElement(_Route2.default, { render: function render(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
	      } });
	  };

	  C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };

	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};

	exports.default = withRouter;

/***/ }),
/* 247 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	};


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(160);

	var _actions = __webpack_require__(249);

	var _agGridReact = __webpack_require__(279);

	var _Card = __webpack_require__(424);

	var _FlatButton = __webpack_require__(572);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	var _dailog = __webpack_require__(576);

	var _CircularProgress = __webpack_require__(598);

	var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Pokedux = function (_Component) {
	    _inherits(Pokedux, _Component);

	    function Pokedux(props) {
	        _classCallCheck(this, Pokedux);

	        var _this = _possibleConstructorReturn(this, (Pokedux.__proto__ || Object.getPrototypeOf(Pokedux)).call(this, props));

	        _this.handleClose = function () {
	            _this.setState({ open: false });
	        };

	        _this.state = {
	            open: false,
	            columnDefs: [{
	                headerName: "Name",
	                field: "name",
	                width: 500,
	                filter: 'text'
	            }, {
	                headerName: "View",
	                field: "url",
	                width: 90,
	                cellRenderer: _this.renderLink,
	                filter: 'set',
	                suppressMenu: true

	            }],
	            autoGroupColumnDef: {
	                headerName: "Group",
	                width: 200,
	                field: "name",
	                valueGetter: function valueGetter(params) {
	                    if (params.node.group) {
	                        return params.node.key;
	                    } else {
	                        return params.data[params.colDef.field];
	                    }
	                },
	                headerCheckboxSelection: true,
	                cellRenderer: "group",
	                cellRendererParams: { checkbox: true }
	            },
	            rowSelection: "multiple",
	            rowGroupPanelShow: "always",
	            pivotPanelShow: "always"
	        };
	        return _this;
	    }

	    /*
	     @method: handleClose
	     @desc: close dailog box
	     */


	    _createClass(Pokedux, [{
	        key: 'onPageSizeChanged',


	        /*
	        @method: onPageSizeChanged
	        @desc: setting page size
	        */
	        value: function onPageSizeChanged(newPageSize) {
	            var value = document.getElementById("page-size").value;
	            this.gridApi.paginationSetPageSize(Number(value));
	        }

	        /*
	        @method: renderLink
	        @desc: render link
	        */

	    }, {
	        key: 'renderLink',
	        value: function renderLink() {
	            var returnHtml = "";
	            returnHtml = '<input type="button"  href="javascript:void(0);" class="btn btn-primary"  value="View" title="View">';
	            return returnHtml;
	        }

	        /*
	        @method: viewDetails
	        @desc: view detail
	        */

	    }, {
	        key: 'viewDetails',
	        value: function viewDetails(event) {
	            var _this2 = this;

	            this.props.fetchPokidexDataById(event.value, function () {
	                _this2.setState({ open: true });
	            });
	        }

	        /*
	        @method: onGridReady
	        @desc: setting grid option
	        */

	    }, {
	        key: 'onGridReady',
	        value: function onGridReady(params) {
	            var _this3 = this;

	            this.gridApi = params.api;
	            this.gridColumnApi = params.columnApi;
	            var updateData = function updateData(data) {
	                params.api.setRowData(data);
	            };
	            this.props.fetchPokidexData(function () {
	                updateData(_this3.props.pokedux_data);
	            });
	        }

	        /*
	        @method: renderAgGrid
	        @desc: render ag grid
	        */

	    }, {
	        key: 'renderAgGrid',
	        value: function renderAgGrid() {

	            if (this.props.loading) {
	                return _react2.default.createElement(
	                    'div',
	                    { style: { align: 'center' } },
	                    _react2.default.createElement(_CircularProgress2.default, { size: 60, thickness: 7 })
	                );
	            } else {
	                return _react2.default.createElement(_agGridReact.AgGridReact, {
	                    id: 'myGrid',
	                    columnDefs: this.state.columnDefs,
	                    enableSorting: true,
	                    enableFilter: true,
	                    floatingFilter: true,
	                    suppressRowClickSelection: true,
	                    groupSelectsChildren: true,
	                    debug: true,
	                    rowSelection: this.state.rowSelection,
	                    enableColResize: true,
	                    enableRangeSelection: true,
	                    pagination: true,
	                    onCellClicked: this.viewDetails.bind(this),
	                    onGridReady: this.onGridReady.bind(this)
	                });
	            }
	        }

	        /*
	        @method: renderTableGrid
	        @desc: render table grid
	        */

	    }, {
	        key: 'renderTableGrid',
	        value: function renderTableGrid() {
	            var actions = [_react2.default.createElement(_FlatButton2.default, {
	                label: 'Close',
	                primary: true,
	                keyboardFocused: true,
	                onClick: this.handleClose
	            })];
	            var containerStyle = {
	                height: 400,
	                width: null
	            };
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(_Card.CardHeader, {
	                    title: 'Pokemon',
	                    subtitle: 'pokedex'
	                }),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(_dailog.DailogBox, { actions: actions, open: this.state.open, handleClose: this.handleClose, pokeduxDetails: this.props.pokedux_details })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    'Page Size:',
	                    _react2.default.createElement(
	                        'select',
	                        { onChange: this.onPageSizeChanged.bind(this), id: 'page-size' },
	                        _react2.default.createElement(
	                            'option',
	                            { value: '10', selected: '' },
	                            '10'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '100' },
	                            '100'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '500' },
	                            '500'
	                        ),
	                        _react2.default.createElement(
	                            'option',
	                            { value: '1000' },
	                            '1000'
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    {
	                        style: containerStyle, className: 'ag-fresh'
	                    },
	                    this.renderAgGrid()
	                )
	            );
	        }

	        /*
	        @method: render
	        @desc:
	        */

	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _Card.Card,
	                null,
	                this.renderTableGrid()
	            );
	        }
	    }]);

	    return Pokedux;
	}(_react.Component);

	var mapStateToProps = function mapStateToProps(_ref) {
	    var pokedux = _ref.pokedux;
	    var pokedux_data = pokedux.pokedux_data,
	        error = pokedux.error,
	        loading = pokedux.loading,
	        pokedux_details = pokedux.pokedux_details;

	    return { pokedux_data: pokedux_data, error: error, loading: loading, pokedux_details: pokedux_details };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, { fetchPokidexData: _actions.fetchPokidexData, fetchPokidexDataById: _actions.fetchPokidexDataById })(Pokedux);

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _pokedex_actions = __webpack_require__(250);

	Object.keys(_pokedex_actions).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _pokedex_actions[key];
	    }
	  });
	});

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.fetchPokidexData = fetchPokidexData;
	exports.fetchPokidexDataById = fetchPokidexDataById;

	var _types = __webpack_require__(251);

	var _axios = __webpack_require__(252);

	var _axios2 = _interopRequireDefault(_axios);

	var _config = __webpack_require__(278);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*
	@method: fetchPokidexData
	@desc: Get fetch pokedex data
	*/
	function fetchPokidexData(callback) {
	    return function (dispatch) {
	        _axios2.default.get(_config.ROOT_URL).then(function (response) {
	            onSuccess(dispatch, response.data.results);
	            dispatch({ type: _types.FETCH_END });
	            callback();
	        }).catch(function (err) {
	            onFail(dispatch);
	            dispatch({ type: _types.FETCH_END });
	            callback();
	        });
	    };
	}

	/*
	@method: fetchPokidexDataById
	@desc: Get fetch pokedex data by id
	*/
	function fetchPokidexDataById(url, callback) {
	    return function (dispatch) {
	        dispatch({ type: _types.FETCH_START });
	        _axios2.default.get(url).then(function (response) {
	            dispatch({ type: _types.FETCH_GETBYID_SUCCESS, payload: response.data });
	            callback();
	        }).catch(function (err) {
	            onFail(dispatch);
	            dispatch({ type: _types.FETCH_END });
	            callback();
	        });
	    };
	}

	/*
	@method: onSuccess
	@desc: set success status and data
	*/
	var onSuccess = function onSuccess(dispatch, response) {
	    dispatch({ type: _types.FETCH_GET_SUCCESS, payload: response });
	};

	/*
	@method: onFail
	@desc: set fail status
	*/
	var onFail = function onFail(dispatch) {
	    dispatch({ type: _types.FETCH_GET_FAIL });
	};

/***/ }),
/* 251 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var FETCH_START = exports.FETCH_START = 'fetch_start';
	var FETCH_END = exports.FETCH_END = 'fetch_end';
	var FETCH_GET_SUCCESS = exports.FETCH_GET_SUCCESS = 'fetch_get_success';
	var FETCH_GETBYID_SUCCESS = exports.FETCH_GETBYID_SUCCESS = 'fetch_getbyid_success';
	var FETCH_GET_FAIL = exports.FETCH_GET_FAIL = 'fetch_get_fail';

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(253);

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);
	var bind = __webpack_require__(255);
	var Axios = __webpack_require__(257);
	var defaults = __webpack_require__(258);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(275);
	axios.CancelToken = __webpack_require__(276);
	axios.isCancel = __webpack_require__(272);

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(277);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(255);
	var isBuffer = __webpack_require__(256);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 255 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 256 */
/***/ (function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(258);
	var utils = __webpack_require__(254);
	var InterceptorManager = __webpack_require__(269);
	var dispatchRequest = __webpack_require__(270);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	  config.method = config.method.toLowerCase();

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(254);
	var normalizeHeaderName = __webpack_require__(259);

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(260);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(260);
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	module.exports = defaults;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(254);
	var settle = __webpack_require__(261);
	var buildURL = __webpack_require__(264);
	var parseHeaders = __webpack_require__(265);
	var isURLSameOrigin = __webpack_require__(266);
	var createError = __webpack_require__(262);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(267);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(268);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(262);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(263);

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};


/***/ }),
/* 263 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);
	var transformData = __webpack_require__(271);
	var isCancel = __webpack_require__(272);
	var defaults = __webpack_require__(258);
	var isAbsoluteURL = __webpack_require__(273);
	var combineURLs = __webpack_require__(274);

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(254);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 272 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 273 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 274 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};


/***/ }),
/* 275 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	module.exports = Cancel;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Cancel = __webpack_require__(275);

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	module.exports = CancelToken;


/***/ }),
/* 277 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var ROOT_URL = exports.ROOT_URL = 'https://pokeapi.co/api/v2/pokemon/?limit=1000';

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	exports.AgGridReact = __webpack_require__(280).AgGridReact;
	exports.AgGridColumn = __webpack_require__(423).AgGridColumn;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-react v14.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var reactFrameworkComponentWrapper_1 = __webpack_require__(281);
	var DOM = __webpack_require__(422);
	var react_1 = __webpack_require__(2);
	var PropTypes = __webpack_require__(205);
	var AgGrid = __webpack_require__(282);
	var agGridColumn_1 = __webpack_require__(423);
	var AgGridReact = /** @class */ (function (_super) {
	    __extends(AgGridReact, _super);
	    function AgGridReact(props, state) {
	        var _this = _super.call(this, props, state) || this;
	        _this.props = props;
	        _this.state = state;
	        return _this;
	    }
	    AgGridReact.prototype.render = function () {
	        var _this = this;
	        return DOM.div({
	            style: this.createStyleForDiv(),
	            ref: function (e) {
	                _this.eGridDiv = e;
	            }
	        });
	    };
	    AgGridReact.prototype.createStyleForDiv = function () {
	        var style = { height: '100%' };
	        // allow user to override styles
	        var containerStyle = this.props.containerStyle;
	        if (containerStyle) {
	            Object.keys(containerStyle).forEach(function (key) {
	                style[key] = containerStyle[key];
	            });
	        }
	        return style;
	    };
	    AgGridReact.prototype.componentDidMount = function () {
	        var gridParams = {
	            seedBeanInstances: {
	                agGridReact: this
	            }
	        };
	        var gridOptions = this.props.gridOptions || {};
	        if (agGridColumn_1.AgGridColumn.hasChildColumns(this.props)) {
	            gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(this.props);
	        }
	        this.gridOptions = AgGrid.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);
	        AgGrid.Grid.setFrameworkBeans([reactFrameworkComponentWrapper_1.ReactFrameworkComponentWrapper]);
	        // don't need the return value
	        new AgGrid.Grid(this.eGridDiv, this.gridOptions, gridParams);
	        this.api = this.gridOptions.api;
	        this.columnApi = this.gridOptions.columnApi;
	    };
	    AgGridReact.prototype.shouldComponentUpdate = function () {
	        // we want full control of the dom, as ag-Grid doesn't use React internally,
	        // so for performance reasons we tell React we don't need render called after
	        // property changes.
	        return false;
	    };
	    AgGridReact.prototype.componentWillReceiveProps = function (nextProps) {
	        var _this = this;
	        var debugLogging = !!nextProps.debug;
	        // keeping consistent with web components, put changing
	        // values in currentValue and previousValue pairs and
	        // not include items that have not changed.
	        var changes = {};
	        AgGrid.ComponentUtil.ALL_PROPERTIES.forEach(function (propKey) {
	            if (!_this.areEquivalent(_this.props[propKey], nextProps[propKey])) {
	                if (debugLogging) {
	                    console.log("agGridReact: [" + propKey + "] property changed");
	                }
	                changes[propKey] = {
	                    previousValue: _this.props[propKey],
	                    currentValue: nextProps[propKey]
	                };
	            }
	        });
	        AgGrid.ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (_this.props[funcName] !== nextProps[funcName]) {
	                if (debugLogging) {
	                    console.log("agGridReact: [" + funcName + "] event callback changed");
	                }
	                changes[funcName] = {
	                    previousValue: _this.props[funcName],
	                    currentValue: nextProps[funcName]
	                };
	            }
	        });
	        AgGrid.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
	    };
	    AgGridReact.prototype.componentWillUnmount = function () {
	        if (this.api) {
	            this.api.destroy();
	        }
	    };
	    /*
	     * deeper object comparison - taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
	     */
	    AgGridReact.unwrapStringOrNumber = function (obj) {
	        return (obj instanceof Number || obj instanceof String
	            ? obj.valueOf()
	            : obj);
	    };
	    // sigh, here for ie compatibility
	    AgGridReact.prototype.copy = function (value) {
	        if (!value) {
	            return value;
	        }
	        if (Array.isArray(value)) {
	            return value.slice();
	        }
	        // for anything without keys (boolean, string etc).
	        // Object.keys - chrome will swallow them, IE will fail (correctly, imho)
	        if (typeof value !== "object") {
	            return value;
	        }
	        return [{}, value].reduce(function (r, o) {
	            Object.keys(o).forEach(function (k) {
	                r[k] = o[k];
	            });
	            return r;
	        }, {});
	    };
	    AgGridReact.prototype.areEquivalent = function (a, b) {
	        return AgGridReact.areEquivalent(this.copy(a), this.copy(b));
	    };
	    AgGridReact.areEquivalent = function (a, b) {
	        a = AgGridReact.unwrapStringOrNumber(a);
	        b = AgGridReact.unwrapStringOrNumber(b);
	        if (a === b)
	            return true; //e.g. a and b both null
	        if (a === null || b === null || typeof (a) !== typeof (b))
	            return false;
	        if (a instanceof Date) {
	            return b instanceof Date && a.valueOf() === b.valueOf();
	        }
	        if (typeof a === "function") {
	            return a.toString() === b.toString();
	        }
	        if (typeof (a) !== "object") {
	            return a == b; //for boolean, number, string, function, xml
	        }
	        var newA = (a.areEquivalent_Eq_91_2_34 === undefined), newB = (b.areEquivalent_Eq_91_2_34 === undefined);
	        try {
	            var prop = void 0;
	            if (newA) {
	                a.areEquivalent_Eq_91_2_34 = [];
	            }
	            else if (a.areEquivalent_Eq_91_2_34.some(function (other) {
	                return other === b;
	            }))
	                return true;
	            if (newB) {
	                b.areEquivalent_Eq_91_2_34 = [];
	            }
	            else if (b.areEquivalent_Eq_91_2_34.some(function (other) { return other === a; })) {
	                return true;
	            }
	            a.areEquivalent_Eq_91_2_34.push(b);
	            b.areEquivalent_Eq_91_2_34.push(a);
	            var tmp = {};
	            for (prop in a)
	                if (prop != "areEquivalent_Eq_91_2_34") {
	                    tmp[prop] = null;
	                }
	            for (prop in b)
	                if (prop != "areEquivalent_Eq_91_2_34") {
	                    tmp[prop] = null;
	                }
	            for (prop in tmp) {
	                if (!this.areEquivalent(a[prop], b[prop])) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        finally {
	            if (newA)
	                delete a.areEquivalent_Eq_91_2_34;
	            if (newB)
	                delete b.areEquivalent_Eq_91_2_34;
	        }
	    };
	    return AgGridReact;
	}(react_1.Component));
	exports.AgGridReact = AgGridReact;
	AgGridReact.propTypes = {
	    gridOptions: PropTypes.object,
	};
	addProperties(AgGrid.ComponentUtil.getEventCallbacks(), PropTypes.func);
	addProperties(AgGrid.ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);
	addProperties(AgGrid.ComponentUtil.STRING_PROPERTIES, PropTypes.string);
	addProperties(AgGrid.ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);
	addProperties(AgGrid.ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);
	addProperties(AgGrid.ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);
	addProperties(AgGrid.ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);
	function addProperties(listOfProps, propType) {
	    listOfProps.forEach(function (propKey) {
	        AgGridReact[propKey] = propType;
	    });
	}


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-react v14.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(282);
	var agReactComponent_1 = __webpack_require__(421);
	var agGridReact_1 = __webpack_require__(280);
	var ReactFrameworkComponentWrapper = /** @class */ (function (_super) {
	    __extends(ReactFrameworkComponentWrapper, _super);
	    function ReactFrameworkComponentWrapper() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ReactFrameworkComponentWrapper.prototype.createWrapper = function (ReactComponent) {
	        var _self = this;
	        var DynamicAgReactComponent = /** @class */ (function (_super) {
	            __extends(DynamicAgReactComponent, _super);
	            function DynamicAgReactComponent() {
	                return _super.call(this, ReactComponent, _self.agGridReact) || this;
	            }
	            DynamicAgReactComponent.prototype.init = function (params) {
	                return _super.prototype.init.call(this, params);
	            };
	            DynamicAgReactComponent.prototype.hasMethod = function (name) {
	                var frameworkComponentInstance = wrapper.getFrameworkComponentInstance();
	                if (frameworkComponentInstance == null) {
	                    return true;
	                }
	                return frameworkComponentInstance[name] != null;
	            };
	            DynamicAgReactComponent.prototype.callMethod = function (name, args) {
	                var _this = this;
	                var frameworkComponentInstance = this.getFrameworkComponentInstance();
	                if (frameworkComponentInstance == null) {
	                    setTimeout(function () { return _this.callMethod(name, args); }, 100);
	                }
	                else {
	                    var method = wrapper.getFrameworkComponentInstance()[name];
	                    if (method == null)
	                        return null;
	                    return method.apply(frameworkComponentInstance, args);
	                }
	            };
	            DynamicAgReactComponent.prototype.addMethod = function (name, callback) {
	                wrapper[name] = callback;
	            };
	            return DynamicAgReactComponent;
	        }(agReactComponent_1.AgReactComponent));
	        var wrapper = new DynamicAgReactComponent();
	        return wrapper;
	    };
	    __decorate([
	        ag_grid_1.Autowired('agGridReact'),
	        __metadata("design:type", agGridReact_1.AgGridReact)
	    ], ReactFrameworkComponentWrapper.prototype, "agGridReact", void 0);
	    ReactFrameworkComponentWrapper = __decorate([
	        ag_grid_1.Bean('frameworkComponentWrapper')
	    ], ReactFrameworkComponentWrapper);
	    return ReactFrameworkComponentWrapper;
	}(ag_grid_1.BaseComponentWrapper));
	exports.ReactFrameworkComponentWrapper = ReactFrameworkComponentWrapper;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var globalObj = typeof global === 'undefined' ? {} : global;
	globalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;
	globalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;
	globalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;
	globalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;
	globalObj.Node = typeof Node === 'undefined' ? {} : Node;
	// columnController
	var balancedColumnTreeBuilder_1 = __webpack_require__(283);
	exports.BalancedColumnTreeBuilder = balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder;
	var columnController_1 = __webpack_require__(297);
	exports.ColumnController = columnController_1.ColumnController;
	var columnKeyCreator_1 = __webpack_require__(391);
	exports.ColumnKeyCreator = columnKeyCreator_1.ColumnKeyCreator;
	var columnUtils_1 = __webpack_require__(300);
	exports.ColumnUtils = columnUtils_1.ColumnUtils;
	var displayedGroupCreator_1 = __webpack_require__(303);
	exports.DisplayedGroupCreator = displayedGroupCreator_1.DisplayedGroupCreator;
	var groupInstanceIdCreator_1 = __webpack_require__(387);
	exports.GroupInstanceIdCreator = groupInstanceIdCreator_1.GroupInstanceIdCreator;
	// components
	var componentUtil_1 = __webpack_require__(290);
	exports.ComponentUtil = componentUtil_1.ComponentUtil;
	var colDefUtil_1 = __webpack_require__(393);
	exports.ColDefUtil = colDefUtil_1.ColDefUtil;
	var componentProvider_1 = __webpack_require__(338);
	exports.ComponentProvider = componentProvider_1.ComponentProvider;
	var agGridNg1_1 = __webpack_require__(394);
	exports.initialiseAgGridWithAngular1 = agGridNg1_1.initialiseAgGridWithAngular1;
	var agGridWebComponent_1 = __webpack_require__(415);
	exports.initialiseAgGridWithWebComponents = agGridWebComponent_1.initialiseAgGridWithWebComponents;
	// context
	var beanStub_1 = __webpack_require__(318);
	exports.BeanStub = beanStub_1.BeanStub;
	var context_1 = __webpack_require__(287);
	exports.Context = context_1.Context;
	exports.Autowired = context_1.Autowired;
	exports.PostConstruct = context_1.PostConstruct;
	exports.PreConstruct = context_1.PreConstruct;
	exports.Optional = context_1.Optional;
	exports.Bean = context_1.Bean;
	exports.Qualifier = context_1.Qualifier;
	exports.PreDestroy = context_1.PreDestroy;
	var componentAnnotations_1 = __webpack_require__(330);
	exports.QuerySelector = componentAnnotations_1.QuerySelector;
	exports.Listener = componentAnnotations_1.Listener;
	exports.RefSelector = componentAnnotations_1.RefSelector;
	// dragAndDrop
	var dragAndDropService_1 = __webpack_require__(373);
	exports.DragAndDropService = dragAndDropService_1.DragAndDropService;
	exports.DragSourceType = dragAndDropService_1.DragSourceType;
	exports.HDirection = dragAndDropService_1.HDirection;
	exports.VDirection = dragAndDropService_1.VDirection;
	var dragService_1 = __webpack_require__(308);
	exports.DragService = dragService_1.DragService;
	// entities
	var column_1 = __webpack_require__(299);
	exports.Column = column_1.Column;
	var columnGroup_1 = __webpack_require__(298);
	exports.ColumnGroup = columnGroup_1.ColumnGroup;
	var gridCell_1 = __webpack_require__(315);
	exports.GridCell = gridCell_1.GridCell;
	var gridRow_1 = __webpack_require__(316);
	exports.GridRow = gridRow_1.GridRow;
	var originalColumnGroup_1 = __webpack_require__(301);
	exports.OriginalColumnGroup = originalColumnGroup_1.OriginalColumnGroup;
	var rowNode_1 = __webpack_require__(312);
	exports.RowNode = rowNode_1.RowNode;
	// filter
	var baseFilter_1 = __webpack_require__(341);
	exports.BaseFilter = baseFilter_1.BaseFilter;
	var dateFilter_1 = __webpack_require__(340);
	exports.DateFilter = dateFilter_1.DateFilter;
	var filterManager_1 = __webpack_require__(334);
	exports.FilterManager = filterManager_1.FilterManager;
	var numberFilter_1 = __webpack_require__(366);
	exports.NumberFilter = numberFilter_1.NumberFilter;
	var textFilter_1 = __webpack_require__(365);
	exports.TextFilter = textFilter_1.TextFilter;
	// gridPanel
	var gridPanel_1 = __webpack_require__(306);
	exports.GridPanel = gridPanel_1.GridPanel;
	var scrollVisibleService_1 = __webpack_require__(321);
	exports.ScrollVisibleService = scrollVisibleService_1.ScrollVisibleService;
	var mouseEventService_1 = __webpack_require__(310);
	exports.MouseEventService = mouseEventService_1.MouseEventService;
	// headerRendering
	var bodyDropPivotTarget_1 = __webpack_require__(386);
	exports.BodyDropPivotTarget = bodyDropPivotTarget_1.BodyDropPivotTarget;
	var bodyDropTarget_1 = __webpack_require__(384);
	exports.BodyDropTarget = bodyDropTarget_1.BodyDropTarget;
	var cssClassApplier_1 = __webpack_require__(379);
	exports.CssClassApplier = cssClassApplier_1.CssClassApplier;
	var headerContainer_1 = __webpack_require__(372);
	exports.HeaderContainer = headerContainer_1.HeaderContainer;
	var headerRenderer_1 = __webpack_require__(371);
	exports.HeaderRenderer = headerRenderer_1.HeaderRenderer;
	var headerRowComp_1 = __webpack_require__(375);
	exports.HeaderRowComp = headerRowComp_1.HeaderRowComp;
	var headerTemplateLoader_1 = __webpack_require__(377);
	exports.HeaderTemplateLoader = headerTemplateLoader_1.HeaderTemplateLoader;
	var horizontalDragService_1 = __webpack_require__(378);
	exports.HorizontalDragService = horizontalDragService_1.HorizontalDragService;
	var moveColumnController_1 = __webpack_require__(385);
	exports.MoveColumnController = moveColumnController_1.MoveColumnController;
	var renderedHeaderCell_1 = __webpack_require__(376);
	exports.RenderedHeaderCell = renderedHeaderCell_1.RenderedHeaderCell;
	var standardMenu_1 = __webpack_require__(396);
	exports.StandardMenuFactory = standardMenu_1.StandardMenuFactory;
	// layout
	var borderLayout_1 = __webpack_require__(307);
	exports.BorderLayout = borderLayout_1.BorderLayout;
	var tabbedLayout_1 = __webpack_require__(416);
	exports.TabbedLayout = tabbedLayout_1.TabbedLayout;
	var verticalStack_1 = __webpack_require__(417);
	exports.VerticalStack = verticalStack_1.VerticalStack;
	// misc
	var simpleHttpRequest_1 = __webpack_require__(418);
	exports.simpleHttpRequest = simpleHttpRequest_1.simpleHttpRequest;
	var largeTextCellEditor_1 = __webpack_require__(364);
	exports.LargeTextCellEditor = largeTextCellEditor_1.LargeTextCellEditor;
	var popupEditorWrapper_1 = __webpack_require__(324);
	exports.PopupEditorWrapper = popupEditorWrapper_1.PopupEditorWrapper;
	var popupSelectCellEditor_1 = __webpack_require__(363);
	exports.PopupSelectCellEditor = popupSelectCellEditor_1.PopupSelectCellEditor;
	var popupTextCellEditor_1 = __webpack_require__(362);
	exports.PopupTextCellEditor = popupTextCellEditor_1.PopupTextCellEditor;
	var selectCellEditor_1 = __webpack_require__(361);
	exports.SelectCellEditor = selectCellEditor_1.SelectCellEditor;
	var textCellEditor_1 = __webpack_require__(339);
	exports.TextCellEditor = textCellEditor_1.TextCellEditor;
	var animateShowChangeCellRenderer_1 = __webpack_require__(355);
	exports.AnimateShowChangeCellRenderer = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;
	var animateSlideCellRenderer_1 = __webpack_require__(354);
	exports.AnimateSlideCellRenderer = animateSlideCellRenderer_1.AnimateSlideCellRenderer;
	var groupCellRenderer_1 = __webpack_require__(356);
	exports.GroupCellRenderer = groupCellRenderer_1.GroupCellRenderer;
	// features
	var setLeftFeature_1 = __webpack_require__(349);
	exports.SetLeftFeature = setLeftFeature_1.SetLeftFeature;
	// rendering
	var autoWidthCalculator_1 = __webpack_require__(304);
	exports.AutoWidthCalculator = autoWidthCalculator_1.AutoWidthCalculator;
	var cellEditorFactory_1 = __webpack_require__(352);
	exports.CellEditorFactory = cellEditorFactory_1.CellEditorFactory;
	var cellRendererFactory_1 = __webpack_require__(353);
	exports.CellRendererFactory = cellRendererFactory_1.CellRendererFactory;
	var cellRendererService_1 = __webpack_require__(357);
	exports.CellRendererService = cellRendererService_1.CellRendererService;
	var checkboxSelectionComponent_1 = __webpack_require__(319);
	exports.CheckboxSelectionComponent = checkboxSelectionComponent_1.CheckboxSelectionComponent;
	var cellComp_1 = __webpack_require__(311);
	exports.CellComp = cellComp_1.CellComp;
	var rowComp_1 = __webpack_require__(329);
	exports.RowComp = rowComp_1.RowComp;
	var rowRenderer_1 = __webpack_require__(305);
	exports.RowRenderer = rowRenderer_1.RowRenderer;
	var valueFormatterService_1 = __webpack_require__(358);
	exports.ValueFormatterService = valueFormatterService_1.ValueFormatterService;
	// rowControllers/inMemory
	var filterStage_1 = __webpack_require__(397);
	exports.FilterStage = filterStage_1.FilterStage;
	var flattenStage_1 = __webpack_require__(401);
	exports.FlattenStage = flattenStage_1.FlattenStage;
	var sortStage_1 = __webpack_require__(399);
	exports.SortStage = sortStage_1.SortStage;
	// row models
	var pinnedRowModel_1 = __webpack_require__(326);
	exports.PinnedRowModel = pinnedRowModel_1.PinnedRowModel;
	var inMemoryRowModel_1 = __webpack_require__(408);
	exports.InMemoryRowModel = inMemoryRowModel_1.InMemoryRowModel;
	var changedPath_1 = __webpack_require__(410);
	exports.ChangedPath = changedPath_1.ChangedPath;
	var inMemoryNodeManager_1 = __webpack_require__(409);
	exports.InMemoryNodeManager = inMemoryNodeManager_1.InMemoryNodeManager;
	var infiniteRowModel_1 = __webpack_require__(402);
	exports.InfiniteRowModel = infiniteRowModel_1.InfiniteRowModel;
	var rowNodeBlock_1 = __webpack_require__(405);
	exports.RowNodeBlock = rowNodeBlock_1.RowNodeBlock;
	var rowNodeBlockLoader_1 = __webpack_require__(407);
	exports.RowNodeBlockLoader = rowNodeBlockLoader_1.RowNodeBlockLoader;
	var rowNodeCache_1 = __webpack_require__(406);
	exports.RowNodeCache = rowNodeCache_1.RowNodeCache;
	//styling
	var stylingService_1 = __webpack_require__(359);
	exports.StylingService = stylingService_1.StylingService;
	// widgets
	var agCheckbox_1 = __webpack_require__(381);
	exports.AgCheckbox = agCheckbox_1.AgCheckbox;
	var component_1 = __webpack_require__(317);
	exports.Component = component_1.Component;
	var popupService_1 = __webpack_require__(335);
	exports.PopupService = popupService_1.PopupService;
	var touchListener_1 = __webpack_require__(345);
	exports.TouchListener = touchListener_1.TouchListener;
	// root
	var baseFrameworkFactory_1 = __webpack_require__(411);
	exports.BaseFrameworkFactory = baseFrameworkFactory_1.BaseFrameworkFactory;
	var cellNavigationService_1 = __webpack_require__(370);
	exports.CellNavigationService = cellNavigationService_1.CellNavigationService;
	var alignedGridsService_1 = __webpack_require__(325);
	exports.AlignedGridsService = alignedGridsService_1.AlignedGridsService;
	var constants_1 = __webpack_require__(289);
	exports.Constants = constants_1.Constants;
	var csvCreator_1 = __webpack_require__(295);
	exports.CsvCreator = csvCreator_1.CsvCreator;
	exports.BaseCreator = csvCreator_1.BaseCreator;
	var downloader_1 = __webpack_require__(389);
	exports.Downloader = downloader_1.Downloader;
	var grid_1 = __webpack_require__(395);
	exports.Grid = grid_1.Grid;
	var gridApi_1 = __webpack_require__(294);
	exports.GridApi = gridApi_1.GridApi;
	var events_1 = __webpack_require__(291);
	exports.Events = events_1.Events;
	var focusedCellController_1 = __webpack_require__(320);
	exports.FocusedCellController = focusedCellController_1.FocusedCellController;
	var functions_1 = __webpack_require__(419);
	exports.defaultGroupComparator = functions_1.defaultGroupComparator;
	var gridOptionsWrapper_1 = __webpack_require__(284);
	exports.GridOptionsWrapper = gridOptionsWrapper_1.GridOptionsWrapper;
	var eventService_1 = __webpack_require__(285);
	exports.EventService = eventService_1.EventService;
	var gridCore_1 = __webpack_require__(333);
	exports.GridCore = gridCore_1.GridCore;
	var logger_1 = __webpack_require__(286);
	exports.Logger = logger_1.Logger;
	var selectionController_1 = __webpack_require__(309);
	exports.SelectionController = selectionController_1.SelectionController;
	var sortController_1 = __webpack_require__(344);
	exports.SortController = sortController_1.SortController;
	var templateService_1 = __webpack_require__(332);
	exports.TemplateService = templateService_1.TemplateService;
	var utils_1 = __webpack_require__(288);
	exports.Utils = utils_1.Utils;
	exports.NumberSequence = utils_1.NumberSequence;
	exports._ = utils_1._;
	exports.Promise = utils_1.Promise;
	var valueService_1 = __webpack_require__(313);
	exports.ValueService = valueService_1.ValueService;
	var expressionService_1 = __webpack_require__(302);
	exports.ExpressionService = expressionService_1.ExpressionService;
	var xmlFactory_1 = __webpack_require__(412);
	exports.XmlFactory = xmlFactory_1.XmlFactory;
	var gridSerializer_1 = __webpack_require__(296);
	exports.GridSerializer = gridSerializer_1.GridSerializer;
	exports.BaseGridSerializingSession = gridSerializer_1.BaseGridSerializingSession;
	exports.RowType = gridSerializer_1.RowType;
	var logger_2 = __webpack_require__(286);
	exports.LoggerFactory = logger_2.LoggerFactory;
	var columnController_2 = __webpack_require__(297);
	exports.ColumnApi = columnController_2.ColumnApi;
	var frameworkComponentWrapper_1 = __webpack_require__(420);
	exports.BaseComponentWrapper = frameworkComponentWrapper_1.BaseComponentWrapper;
	var environment_1 = __webpack_require__(374);
	exports.Environment = environment_1.Environment;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var logger_1 = __webpack_require__(286);
	var columnUtils_1 = __webpack_require__(300);
	var columnKeyCreator_1 = __webpack_require__(391);
	var originalColumnGroup_1 = __webpack_require__(301);
	var column_1 = __webpack_require__(299);
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var defaultColumnTypes_1 = __webpack_require__(392);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var BalancedColumnTreeBuilder = (function () {
	    function BalancedColumnTreeBuilder() {
	    }
	    BalancedColumnTreeBuilder.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('BalancedColumnTreeBuilder');
	    };
	    BalancedColumnTreeBuilder.prototype.createBalancedColumnGroups = function (abstractColDefs, primaryColumns) {
	        // column key creator dishes out unique column id's in a deterministic way,
	        // so if we have two grids (that cold be master/slave) with same column definitions,
	        // then this ensures the two grids use identical id's.
	        var columnKeyCreator = new columnKeyCreator_1.ColumnKeyCreator();
	        // create am unbalanced tree that maps the provided definitions
	        var unbalancedTree = this.recursivelyCreateColumns(abstractColDefs, 0, columnKeyCreator, primaryColumns);
	        var treeDept = this.findMaxDept(unbalancedTree, 0);
	        this.logger.log('Number of levels for grouped columns is ' + treeDept);
	        var balancedTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
	        this.columnUtils.depthFirstOriginalTreeSearch(balancedTree, function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                child.setupExpandable();
	            }
	        });
	        return {
	            balancedTree: balancedTree,
	            treeDept: treeDept
	        };
	    };
	    BalancedColumnTreeBuilder.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {
	        var _this = this;
	        var result = [];
	        // go through each child, for groups, recurse a level deeper,
	        // for columns we need to pad
	        unbalancedTree.forEach(function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalGroup = child;
	                var newChildren = _this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
	                originalGroup.setChildren(newChildren);
	                result.push(originalGroup);
	            }
	            else {
	                var newChild = child;
	                for (var i = columnDept - 1; i >= currentDept; i--) {
	                    var newColId = columnKeyCreator.getUniqueKey(null, null);
	                    var colGroupDefMerged = _this.createMergedColGroupDef(null);
	                    var paddedGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, newColId, true);
	                    _this.context.wireBean(paddedGroup);
	                    paddedGroup.setChildren([newChild]);
	                    newChild = paddedGroup;
	                }
	                result.push(newChild);
	            }
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.findMaxDept = function (treeChildren, dept) {
	        var maxDeptThisLevel = dept;
	        for (var i = 0; i < treeChildren.length; i++) {
	            var abstractColumn = treeChildren[i];
	            if (abstractColumn instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalGroup = abstractColumn;
	                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
	                if (maxDeptThisLevel < newDept) {
	                    maxDeptThisLevel = newDept;
	                }
	            }
	        }
	        return maxDeptThisLevel;
	    };
	    BalancedColumnTreeBuilder.prototype.recursivelyCreateColumns = function (abstractColDefs, level, columnKeyCreator, primaryColumns) {
	        var _this = this;
	        var result = [];
	        if (!abstractColDefs) {
	            return result;
	        }
	        abstractColDefs.forEach(function (abstractColDef) {
	            var newGroupOrColumn;
	            if (_this.isColumnGroup(abstractColDef)) {
	                newGroupOrColumn = _this.createColumnGroup(columnKeyCreator, primaryColumns, abstractColDef, level);
	            }
	            else {
	                newGroupOrColumn = _this.createColumn(columnKeyCreator, primaryColumns, abstractColDef);
	            }
	            result.push(newGroupOrColumn);
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumnGroup = function (columnKeyCreator, primaryColumns, colGroupDef, level) {
	        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
	        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);
	        var originalGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, groupId, false);
	        this.context.wireBean(originalGroup);
	        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, columnKeyCreator, primaryColumns);
	        originalGroup.setChildren(children);
	        return originalGroup;
	    };
	    BalancedColumnTreeBuilder.prototype.createMergedColGroupDef = function (colGroupDef) {
	        var colGroupDefMerged = {};
	        utils_1.Utils.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
	        utils_1.Utils.assign(colGroupDefMerged, colGroupDef);
	        this.checkForDeprecatedItems(colGroupDefMerged);
	        return colGroupDefMerged;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumn = function (columnKeyCreator, primaryColumns, colDef) {
	        var colDefMerged = this.mergeColDefs(colDef);
	        this.checkForDeprecatedItems(colDefMerged);
	        var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
	        var column = new column_1.Column(colDefMerged, colId, primaryColumns);
	        this.context.wireBean(column);
	        return column;
	    };
	    BalancedColumnTreeBuilder.prototype.mergeColDefs = function (colDef) {
	        // start with empty merged definition
	        var colDefMerged = {};
	        // merge properties from default column definitions
	        utils_1.Utils.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());
	        // merge properties from column type properties
	        if (colDef.type) {
	            this.assignColumnTypes(colDef, colDefMerged);
	        }
	        // merge properties from column definitions
	        utils_1.Utils.assign(colDefMerged, colDef);
	        return colDefMerged;
	    };
	    BalancedColumnTreeBuilder.prototype.assignColumnTypes = function (colDef, colDefMerged) {
	        var typeKeys;
	        if (colDef.type instanceof Array) {
	            var invalidArray = colDef.type.some(function (a) { return typeof a !== 'string'; });
	            if (invalidArray) {
	                console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
	            }
	            else {
	                typeKeys = colDef.type;
	            }
	        }
	        else if (typeof colDef.type === 'string') {
	            typeKeys = colDef.type.split(',');
	        }
	        else {
	            console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
	            return;
	        }
	        // merge user defined with default column types
	        var allColumnTypes = utils_1.Utils.assign({}, this.gridOptionsWrapper.getColumnTypes(), defaultColumnTypes_1.DefaultColumnTypes);
	        typeKeys.forEach(function (t) {
	            var typeColDef = allColumnTypes[t.trim()];
	            if (typeColDef) {
	                utils_1.Utils.assign(colDefMerged, typeColDef);
	            }
	            else {
	                console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
	            }
	        });
	    };
	    BalancedColumnTreeBuilder.prototype.checkForDeprecatedItems = function (colDef) {
	        if (colDef) {
	            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
	            if (colDefNoType.group !== undefined) {
	                console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroup !== undefined) {
	                console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroupShow !== undefined) {
	                console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.suppressRowGroup !== undefined) {
	                console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressAggregation !== undefined) {
	                console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
	                console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');
	            }
	            if (colDefNoType.displayName) {
	                console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
	                colDefNoType.headerName = colDefNoType.displayName;
	            }
	        }
	    };
	    // if object has children, we assume it's a group
	    BalancedColumnTreeBuilder.prototype.isColumnGroup = function (abstractColDef) {
	        return abstractColDef.children !== undefined;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BalancedColumnTreeBuilder.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], BalancedColumnTreeBuilder.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BalancedColumnTreeBuilder.prototype, "context", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], BalancedColumnTreeBuilder.prototype, "setBeans", null);
	    BalancedColumnTreeBuilder = __decorate([
	        context_1.Bean('balancedColumnTreeBuilder')
	    ], BalancedColumnTreeBuilder);
	    return BalancedColumnTreeBuilder;
	}());
	exports.BalancedColumnTreeBuilder = BalancedColumnTreeBuilder;


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var constants_1 = __webpack_require__(289);
	var componentUtil_1 = __webpack_require__(290);
	var gridApi_1 = __webpack_require__(294);
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var utils_1 = __webpack_require__(288);
	var environment_1 = __webpack_require__(374);
	var DEFAULT_ROW_HEIGHT = 25;
	var DEFAULT_DETAIL_ROW_HEIGHT = 300;
	var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
	var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
	var legacyThemes = [
	    'ag-fresh',
	    'ag-bootstrap',
	    'ag-blue',
	    'ag-dark',
	    'ag-material'
	];
	function isTrue(value) {
	    return value === true || value === 'true';
	}
	function zeroOrGreater(value, defaultValue) {
	    if (value >= 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	function oneOrGreater(value, defaultValue) {
	    if (value > 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	var GridOptionsWrapper = (function () {
	    function GridOptionsWrapper() {
	        this.propertyEventService = new eventService_1.EventService();
	        this.domDataKey = '__AG_' + Math.random().toString();
	    }
	    GridOptionsWrapper_1 = GridOptionsWrapper;
	    GridOptionsWrapper.prototype.agWire = function (gridApi, columnApi) {
	        this.gridOptions.api = gridApi;
	        this.gridOptions.columnApi = columnApi;
	        this.checkForDeprecated();
	    };
	    GridOptionsWrapper.prototype.destroy = function () {
	        // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
	        // remove the references in case the user keeps the grid options, we want the rest
	        // of the grid to be picked up by the garbage collector
	        this.gridOptions.api = null;
	        this.gridOptions.columnApi = null;
	    };
	    GridOptionsWrapper.prototype.init = function () {
	        var async = this.useAsyncEvents();
	        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
	        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
	            console.warn('ag-Grid: groupSelectsChildren does not work wth suppressParentsInRowNodes, this selection method needs the part in rowNode to work');
	        }
	        if (this.isGroupSelectsChildren()) {
	            if (!this.isRowSelectionMulti()) {
	                console.warn("ag-Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
	            }
	            if (this.isRowModelEnterprise()) {
	                console.warn('ag-Grid: group selects children is NOT support for Enterprise Row Model. ' +
	                    'This is because the rows are lazy loaded, so selecting a group is not possible as' +
	                    'the grid has no way of knowing what the children are.');
	            }
	        }
	        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
	            console.warn('ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don\'t ask us how to us these together on our support forum either you will get the same answer!');
	        }
	    };
	    // returns the dom data, or undefined if not found
	    GridOptionsWrapper.prototype.getDomData = function (element, key) {
	        var domData = element[this.domDataKey];
	        if (domData) {
	            return domData[key];
	        }
	        else {
	            return undefined;
	        }
	    };
	    GridOptionsWrapper.prototype.setDomData = function (element, key, value) {
	        var domData = element[this.domDataKey];
	        if (utils_1.Utils.missing(domData)) {
	            domData = {};
	            element[this.domDataKey] = domData;
	        }
	        domData[key] = value;
	    };
	    GridOptionsWrapper.prototype.isEnterprise = function () { return this.enterprise; };
	    GridOptionsWrapper.prototype.isRowSelection = function () { return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple"; };
	    GridOptionsWrapper.prototype.isRowDeselection = function () { return isTrue(this.gridOptions.rowDeselection); };
	    GridOptionsWrapper.prototype.isRowSelectionMulti = function () { return this.gridOptions.rowSelection === 'multiple'; };
	    GridOptionsWrapper.prototype.getContext = function () { return this.gridOptions.context; };
	    GridOptionsWrapper.prototype.isPivotMode = function () { return isTrue(this.gridOptions.pivotMode); };
	    GridOptionsWrapper.prototype.isPivotTotals = function () { return isTrue(this.gridOptions.pivotTotals); };
	    GridOptionsWrapper.prototype.isRowModelInfinite = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_INFINITE; };
	    GridOptionsWrapper.prototype.isRowModelViewport = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT; };
	    GridOptionsWrapper.prototype.isRowModelEnterprise = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE; };
	    GridOptionsWrapper.prototype.isRowModelDefault = function () {
	        return utils_1.Utils.missing(this.gridOptions.rowModelType) ||
	            this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY ||
	            this.gridOptions.rowModelType === constants_1.Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL;
	    };
	    GridOptionsWrapper.prototype.isFullRowEdit = function () { return this.gridOptions.editType === 'fullRow'; };
	    GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function () { return isTrue(this.gridOptions.suppressFocusAfterRefresh); };
	    GridOptionsWrapper.prototype.isShowToolPanel = function () { return isTrue(this.gridOptions.showToolPanel); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressValues = function () { return isTrue(this.gridOptions.toolPanelSuppressValues); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivots = function () {
	        // we don't allow pivots when doing tree data
	        return isTrue(this.gridOptions.toolPanelSuppressPivots) || this.isTreeData();
	    };
	    GridOptionsWrapper.prototype.isToolPanelSuppressRowGroups = function () {
	        // we don't allow row grouping when doing tree data
	        return isTrue(this.gridOptions.toolPanelSuppressRowGroups) || this.isTreeData();
	    };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivotMode = function () {
	        return isTrue(this.gridOptions.toolPanelSuppressPivotMode) || this.isTreeData();
	    };
	    GridOptionsWrapper.prototype.isSuppressTouch = function () { return isTrue(this.gridOptions.suppressTouch); };
	    GridOptionsWrapper.prototype.useAsyncEvents = function () { return !isTrue(this.gridOptions.suppressAsyncEvents); };
	    GridOptionsWrapper.prototype.isEnableCellChangeFlash = function () { return isTrue(this.gridOptions.enableCellChangeFlash); };
	    GridOptionsWrapper.prototype.isGroupSelectsChildren = function () {
	        var result = isTrue(this.gridOptions.groupSelectsChildren);
	        if (result && this.isTreeData()) {
	            console.warn('ag-Grid: groupSelectsChildren does not work with tree data');
	            return false;
	        }
	        else {
	            return result;
	        }
	    };
	    GridOptionsWrapper.prototype.isGroupSelectsFiltered = function () { return isTrue(this.gridOptions.groupSelectsFiltered); };
	    GridOptionsWrapper.prototype.isGroupHideOpenParents = function () { return isTrue(this.gridOptions.groupHideOpenParents); };
	    // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work
	    GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function () { return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents); };
	    GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function () { return isTrue(this.gridOptions.groupRemoveSingleChildren); };
	    GridOptionsWrapper.prototype.isGroupRemoveLowestSingleChildren = function () { return isTrue(this.gridOptions.groupRemoveLowestSingleChildren); };
	    GridOptionsWrapper.prototype.isGroupIncludeFooter = function () { return isTrue(this.gridOptions.groupIncludeFooter); };
	    GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () { return isTrue(this.gridOptions.groupSuppressBlankHeader); };
	    GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () { return isTrue(this.gridOptions.suppressRowClickSelection); };
	    GridOptionsWrapper.prototype.isSuppressCellSelection = function () { return isTrue(this.gridOptions.suppressCellSelection); };
	    GridOptionsWrapper.prototype.isSuppressMultiSort = function () { return isTrue(this.gridOptions.suppressMultiSort); };
	    GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () { return isTrue(this.gridOptions.groupSuppressAutoColumn); };
	    GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function () { return isTrue(this.gridOptions.suppressDragLeaveHidesColumns); };
	    GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function () { return isTrue(this.gridOptions.suppressScrollOnNewData); };
	    GridOptionsWrapper.prototype.isForPrint = function () { return this.gridOptions.domLayout === 'forPrint'; };
	    GridOptionsWrapper.prototype.isAutoHeight = function () { return this.gridOptions.domLayout === 'autoHeight'; };
	    GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () { return isTrue(this.gridOptions.suppressHorizontalScroll); };
	    GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () { return isTrue(this.gridOptions.suppressLoadingOverlay); };
	    GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () { return isTrue(this.gridOptions.suppressNoRowsOverlay); };
	    GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function () { return isTrue(this.gridOptions.suppressFieldDotNotation); };
	    GridOptionsWrapper.prototype.getPinnedTopRowData = function () { return this.gridOptions.pinnedTopRowData; };
	    GridOptionsWrapper.prototype.getPinnedBottomRowData = function () { return this.gridOptions.pinnedBottomRowData; };
	    GridOptionsWrapper.prototype.isFunctionsPassive = function () { return isTrue(this.gridOptions.functionsPassive); };
	    GridOptionsWrapper.prototype.isSuppressTabbing = function () { return isTrue(this.gridOptions.suppressTabbing); };
	    GridOptionsWrapper.prototype.isSuppressChangeDetection = function () { return isTrue(this.gridOptions.suppressChangeDetection); };
	    GridOptionsWrapper.prototype.isSuppressAnimationFrame = function () { return isTrue(this.gridOptions.suppressAnimationFrame); };
	    GridOptionsWrapper.prototype.getQuickFilterText = function () { return this.gridOptions.quickFilterText; };
	    GridOptionsWrapper.prototype.isCacheQuickFilter = function () { return isTrue(this.gridOptions.cacheQuickFilter); };
	    GridOptionsWrapper.prototype.isUnSortIcon = function () { return isTrue(this.gridOptions.unSortIcon); };
	    GridOptionsWrapper.prototype.isSuppressMenuHide = function () { return isTrue(this.gridOptions.suppressMenuHide); };
	    GridOptionsWrapper.prototype.getRowStyle = function () { return this.gridOptions.rowStyle; };
	    GridOptionsWrapper.prototype.getRowClass = function () { return this.gridOptions.rowClass; };
	    GridOptionsWrapper.prototype.getRowStyleFunc = function () { return this.gridOptions.getRowStyle; };
	    GridOptionsWrapper.prototype.getRowClassFunc = function () { return this.gridOptions.getRowClass; };
	    GridOptionsWrapper.prototype.rowClassRules = function () { return this.gridOptions.rowClassRules; };
	    GridOptionsWrapper.prototype.getPostProcessPopupFunc = function () { return this.gridOptions.postProcessPopup; };
	    GridOptionsWrapper.prototype.getDoesDataFlowerFunc = function () { return this.gridOptions.doesDataFlower; };
	    GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function () { return this.gridOptions.paginationNumberFormatter; };
	    GridOptionsWrapper.prototype.getChildCountFunc = function () { return this.gridOptions.getChildCount; };
	    GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function () { return this.gridOptions.isFullWidthCell; };
	    GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function () { return this.gridOptions.fullWidthCellRendererParams; };
	    GridOptionsWrapper.prototype.isEmbedFullWidthRows = function () {
	        // if autoHeight, we always embed fullWidth rows, otherwise we let the user decide
	        return this.isAutoHeight() || isTrue(this.gridOptions.embedFullWidthRows);
	    };
	    GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () { return this.gridOptions.getBusinessKeyForNode; };
	    GridOptionsWrapper.prototype.getHeaderCellRenderer = function () { return this.gridOptions.headerCellRenderer; };
	    GridOptionsWrapper.prototype.getApi = function () { return this.gridOptions.api; };
	    GridOptionsWrapper.prototype.getColumnApi = function () { return this.gridOptions.columnApi; };
	    GridOptionsWrapper.prototype.isDeltaRowDataMode = function () { return isTrue(this.gridOptions.deltaRowDataMode); };
	    GridOptionsWrapper.prototype.isEnsureDomOrder = function () { return isTrue(this.gridOptions.ensureDomOrder); };
	    GridOptionsWrapper.prototype.isEnableColResize = function () { return isTrue(this.gridOptions.enableColResize); };
	    GridOptionsWrapper.prototype.isSingleClickEdit = function () { return isTrue(this.gridOptions.singleClickEdit); };
	    GridOptionsWrapper.prototype.isSuppressClickEdit = function () { return isTrue(this.gridOptions.suppressClickEdit); };
	    GridOptionsWrapper.prototype.isStopEditingWhenGridLosesFocus = function () { return isTrue(this.gridOptions.stopEditingWhenGridLosesFocus); };
	    GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () { return this.gridOptions.groupDefaultExpanded; };
	    GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function () { return this.gridOptions.maxConcurrentDatasourceRequests; };
	    GridOptionsWrapper.prototype.getMaxBlocksInCache = function () { return this.gridOptions.maxBlocksInCache; };
	    GridOptionsWrapper.prototype.getCacheOverflowSize = function () { return this.gridOptions.cacheOverflowSize; };
	    GridOptionsWrapper.prototype.getPaginationPageSize = function () { return this.gridOptions.paginationPageSize; };
	    GridOptionsWrapper.prototype.getCacheBlockSize = function () { return this.gridOptions.cacheBlockSize; };
	    GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function () { return this.gridOptions.infiniteInitialRowCount; };
	    GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function () { return isTrue(this.gridOptions.purgeClosedRowNodes); };
	    GridOptionsWrapper.prototype.isSuppressPaginationPanel = function () { return isTrue(this.gridOptions.suppressPaginationPanel); };
	    GridOptionsWrapper.prototype.getRowData = function () { return this.gridOptions.rowData; };
	    GridOptionsWrapper.prototype.isGroupUseEntireRow = function () { return isTrue(this.gridOptions.groupUseEntireRow); };
	    GridOptionsWrapper.prototype.isEnableRtl = function () { return isTrue(this.gridOptions.enableRtl); };
	    GridOptionsWrapper.prototype.getAutoGroupColumnDef = function () { return this.gridOptions.autoGroupColumnDef; };
	    GridOptionsWrapper.prototype.isGroupSuppressRow = function () { return isTrue(this.gridOptions.groupSuppressRow); };
	    GridOptionsWrapper.prototype.getRowGroupPanelShow = function () { return this.gridOptions.rowGroupPanelShow; };
	    GridOptionsWrapper.prototype.getPivotPanelShow = function () { return this.gridOptions.pivotPanelShow; };
	    GridOptionsWrapper.prototype.isAngularCompileRows = function () { return isTrue(this.gridOptions.angularCompileRows); };
	    GridOptionsWrapper.prototype.isAngularCompileFilters = function () { return isTrue(this.gridOptions.angularCompileFilters); };
	    GridOptionsWrapper.prototype.isAngularCompileHeaders = function () { return isTrue(this.gridOptions.angularCompileHeaders); };
	    GridOptionsWrapper.prototype.isDebug = function () { return isTrue(this.gridOptions.debug); };
	    GridOptionsWrapper.prototype.getColumnDefs = function () { return this.gridOptions.columnDefs; };
	    GridOptionsWrapper.prototype.getColumnTypes = function () { return this.gridOptions.columnTypes; };
	    GridOptionsWrapper.prototype.getDatasource = function () { return this.gridOptions.datasource; };
	    GridOptionsWrapper.prototype.getViewportDatasource = function () { return this.gridOptions.viewportDatasource; };
	    GridOptionsWrapper.prototype.getEnterpriseDatasource = function () { return this.gridOptions.enterpriseDatasource; };
	    GridOptionsWrapper.prototype.isEnableSorting = function () { return isTrue(this.gridOptions.enableSorting) || isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isAccentedSort = function () { return isTrue(this.gridOptions.accentedSort); };
	    GridOptionsWrapper.prototype.isEnableCellExpressions = function () { return isTrue(this.gridOptions.enableCellExpressions); };
	    GridOptionsWrapper.prototype.isEnableGroupEdit = function () { return isTrue(this.gridOptions.enableGroupEdit); };
	    GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function () { return isTrue(this.gridOptions.suppressMiddleClickScrolls); };
	    GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function () { return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel); };
	    GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function () { return isTrue(this.gridOptions.suppressColumnVirtualisation); };
	    GridOptionsWrapper.prototype.isSuppressContextMenu = function () { return isTrue(this.gridOptions.suppressContextMenu); };
	    GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function () { return isTrue(this.gridOptions.allowContextMenuWithControlKey); };
	    GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function () { return isTrue(this.gridOptions.suppressCopyRowsToClipboard); };
	    GridOptionsWrapper.prototype.isEnableFilter = function () { return isTrue(this.gridOptions.enableFilter) || isTrue(this.gridOptions.enableServerSideFilter); };
	    GridOptionsWrapper.prototype.isPagination = function () { return isTrue(this.gridOptions.pagination); };
	    // these are deprecated, should remove them when we take out server side pagination
	    GridOptionsWrapper.prototype.isEnableServerSideFilter = function () { return this.gridOptions.enableServerSideFilter; };
	    GridOptionsWrapper.prototype.isEnableServerSideSorting = function () { return isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isSuppressMovableColumns = function () { return isTrue(this.gridOptions.suppressMovableColumns); };
	    GridOptionsWrapper.prototype.isAnimateRows = function () {
	        // never allow animating if enforcing the row order
	        if (this.isEnsureDomOrder()) {
	            return false;
	        }
	        return isTrue(this.gridOptions.animateRows);
	    };
	    GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function () { return isTrue(this.gridOptions.suppressColumnMoveAnimation); };
	    GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function () { return isTrue(this.gridOptions.suppressAggFuncInHeader); };
	    GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function () { return isTrue(this.gridOptions.suppressAggAtRootLevel); };
	    GridOptionsWrapper.prototype.isEnableRangeSelection = function () { return isTrue(this.gridOptions.enableRangeSelection); };
	    GridOptionsWrapper.prototype.isPaginationAutoPageSize = function () { return isTrue(this.gridOptions.paginationAutoPageSize); };
	    GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function () { return isTrue(this.gridOptions.rememberGroupStateWhenNewData); };
	    GridOptionsWrapper.prototype.getIcons = function () { return this.gridOptions.icons; };
	    GridOptionsWrapper.prototype.getAggFuncs = function () { return this.gridOptions.aggFuncs; };
	    GridOptionsWrapper.prototype.getSortingOrder = function () { return this.gridOptions.sortingOrder; };
	    GridOptionsWrapper.prototype.getAlignedGrids = function () { return this.gridOptions.alignedGrids; };
	    GridOptionsWrapper.prototype.isMasterDetail = function () {
	        var _this = this;
	        var usingMasterDetail = isTrue(this.gridOptions.masterDetail);
	        utils_1.Utils.doOnce(function () {
	            if (usingMasterDetail && !_this.enterprise) {
	                console.warn('ag-grid: Master Detail is an Enterprise feature of ag-Grid.');
	            }
	        }, 'MasterDetailEnterpriseCheck');
	        return usingMasterDetail && this.enterprise;
	    };
	    GridOptionsWrapper.prototype.getIsRowMasterFunc = function () { return this.gridOptions.isRowMaster; };
	    GridOptionsWrapper.prototype.getGroupRowRendererParams = function () { return this.gridOptions.groupRowRendererParams; };
	    GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () { return this.gridOptions.overlayLoadingTemplate; };
	    GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () { return this.gridOptions.overlayNoRowsTemplate; };
	    GridOptionsWrapper.prototype.isSuppressAutoSize = function () { return isTrue(this.gridOptions.suppressAutoSize); };
	    GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () { return isTrue(this.gridOptions.suppressParentsInRowNodes); };
	    GridOptionsWrapper.prototype.isEnableStatusBar = function () { return isTrue(this.gridOptions.enableStatusBar); };
	    GridOptionsWrapper.prototype.isAlwaysShowStatusBar = function () { return isTrue(this.gridOptions.alwaysShowStatusBar); };
	    GridOptionsWrapper.prototype.isFunctionsReadOnly = function () { return isTrue(this.gridOptions.functionsReadOnly); };
	    GridOptionsWrapper.prototype.isFloatingFilter = function () { return this.gridOptions.floatingFilter; };
	    // public isFloatingFilter(): boolean { return true; }
	    GridOptionsWrapper.prototype.getDefaultColDef = function () { return this.gridOptions.defaultColDef; };
	    GridOptionsWrapper.prototype.getDefaultColGroupDef = function () { return this.gridOptions.defaultColGroupDef; };
	    GridOptionsWrapper.prototype.getDefaultExportParams = function () { return this.gridOptions.defaultExportParams; };
	    GridOptionsWrapper.prototype.isSuppressCsvExport = function () { return isTrue(this.gridOptions.suppressCsvExport); };
	    GridOptionsWrapper.prototype.isSuppressExcelExport = function () { return isTrue(this.gridOptions.suppressExcelExport); };
	    GridOptionsWrapper.prototype.getHeaderCellTemplate = function () { return this.gridOptions.headerCellTemplate; };
	    GridOptionsWrapper.prototype.getHeaderCellTemplateFunc = function () { return this.gridOptions.getHeaderCellTemplate; };
	    GridOptionsWrapper.prototype.getNodeChildDetailsFunc = function () { return this.gridOptions.getNodeChildDetails; };
	    GridOptionsWrapper.prototype.getDataPathFunc = function () { return this.gridOptions.getDataPath; };
	    // public getIsGroupFunc(): ((dataItem: any) => boolean) { return this.gridOptions.isGroup }
	    GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function () { return this.gridOptions.groupRowAggNodes; };
	    GridOptionsWrapper.prototype.getContextMenuItemsFunc = function () { return this.gridOptions.getContextMenuItems; };
	    GridOptionsWrapper.prototype.getMainMenuItemsFunc = function () { return this.gridOptions.getMainMenuItems; };
	    GridOptionsWrapper.prototype.getRowNodeIdFunc = function () { return this.gridOptions.getRowNodeId; };
	    GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function () { return this.gridOptions.navigateToNextCell; };
	    GridOptionsWrapper.prototype.getTabToNextCellFunc = function () { return this.gridOptions.tabToNextCell; };
	    GridOptionsWrapper.prototype.isTreeData = function () { return isTrue(this.gridOptions.treeData); };
	    GridOptionsWrapper.prototype.isValueCache = function () { return isTrue(this.gridOptions.valueCache); };
	    GridOptionsWrapper.prototype.isValueCacheNeverExpires = function () { return isTrue(this.gridOptions.valueCacheNeverExpires); };
	    GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function () { return isTrue(this.gridOptions.aggregateOnlyChangedColumns); };
	    GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function () { return this.gridOptions.processSecondaryColDef; };
	    GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function () { return this.gridOptions.processSecondaryColGroupDef; };
	    GridOptionsWrapper.prototype.getSendToClipboardFunc = function () { return this.gridOptions.sendToClipboard; };
	    GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function () { return this.gridOptions.processRowPostCreate; };
	    GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function () { return this.gridOptions.processCellForClipboard; };
	    GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function () { return this.gridOptions.processCellFromClipboard; };
	    GridOptionsWrapper.prototype.getViewportRowModelPageSize = function () { return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE); };
	    GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function () { return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE); };
	    // public getCellRenderers(): {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} { return this.gridOptions.cellRenderers; }
	    // public getCellEditors(): {[key: string]: {new(): ICellEditor}} { return this.gridOptions.cellEditors; }
	    GridOptionsWrapper.prototype.getClipboardDeliminator = function () {
	        return utils_1.Utils.exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : '\t';
	    };
	    GridOptionsWrapper.prototype.setProperty = function (key, value) {
	        var gridOptionsNoType = this.gridOptions;
	        var previousValue = gridOptionsNoType[key];
	        if (previousValue !== value) {
	            gridOptionsNoType[key] = value;
	            var event_1 = {
	                type: key,
	                currentValue: value,
	                previousValue: previousValue
	            };
	            this.propertyEventService.dispatchEvent(event_1);
	        }
	    };
	    GridOptionsWrapper.prototype.addEventListener = function (key, listener) {
	        this.propertyEventService.addEventListener(key, listener);
	    };
	    GridOptionsWrapper.prototype.removeEventListener = function (key, listener) {
	        this.propertyEventService.removeEventListener(key, listener);
	    };
	    GridOptionsWrapper.prototype.getAutoSizePadding = function () {
	        return this.gridOptions.autoSizePadding > 0 ? this.gridOptions.autoSizePadding : 0;
	    };
	    // properties
	    GridOptionsWrapper.prototype.getHeaderHeight = function () {
	        if (typeof this.gridOptions.headerHeight === 'number') {
	            return this.gridOptions.headerHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 'headerHeight');
	        }
	    };
	    GridOptionsWrapper.prototype.getFloatingFiltersHeight = function () {
	        if (typeof this.gridOptions.floatingFiltersHeight === 'number') {
	            return this.gridOptions.floatingFiltersHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 'headerHeight');
	        }
	    };
	    GridOptionsWrapper.prototype.getGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.groupHeaderHeight === 'number') {
	            return this.gridOptions.groupHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotHeaderHeight === 'number') {
	            return this.gridOptions.pivotHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {
	            return this.gridOptions.pivotGroupHeaderHeight;
	        }
	        else {
	            return this.getGroupHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
	        if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
	            return this.gridOptions.isExternalFilterPresent();
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
	        if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
	            return this.gridOptions.doesExternalFilterPass(node);
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.getDocument = function () {
	        // if user is providing document, we use the users one,
	        // otherwise we use the document on the global namespace.
	        var result;
	        if (utils_1.Utils.exists(this.gridOptions.getDocument)) {
	            result = this.gridOptions.getDocument();
	        }
	        if (utils_1.Utils.exists(result)) {
	            return result;
	        }
	        else {
	            return document;
	        }
	    };
	    GridOptionsWrapper.prototype.getLayoutInterval = function () {
	        if (typeof this.gridOptions.layoutInterval === 'number') {
	            return this.gridOptions.layoutInterval;
	        }
	        else {
	            return constants_1.Constants.LAYOUT_INTERVAL;
	        }
	    };
	    GridOptionsWrapper.prototype.getMinColWidth = function () {
	        if (this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.minColWidth;
	        }
	        else {
	            return GridOptionsWrapper_1.MIN_COL_WIDTH;
	        }
	    };
	    GridOptionsWrapper.prototype.getMaxColWidth = function () {
	        if (this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.maxColWidth;
	        }
	        else {
	            return null;
	        }
	    };
	    GridOptionsWrapper.prototype.getColWidth = function () {
	        if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return 200;
	        }
	        else {
	            return this.gridOptions.colWidth;
	        }
	    };
	    GridOptionsWrapper.prototype.getRowBuffer = function () {
	        if (typeof this.gridOptions.rowBuffer === 'number') {
	            if (this.gridOptions.rowBuffer < 0) {
	                console.warn('ag-Grid: rowBuffer should not be negative');
	            }
	            return this.gridOptions.rowBuffer;
	        }
	        else {
	            return constants_1.Constants.ROW_BUFFER_SIZE;
	        }
	    };
	    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
	    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
	    // allow the user to provide the scroll width before we work it out.
	    GridOptionsWrapper.prototype.getScrollbarWidth = function () {
	        var scrollbarWidth = this.gridOptions.scrollbarWidth;
	        if (typeof scrollbarWidth !== 'number' || scrollbarWidth < 0) {
	            scrollbarWidth = utils_1.Utils.getScrollbarWidth();
	        }
	        return scrollbarWidth;
	    };
	    GridOptionsWrapper.prototype.checkForDeprecated = function () {
	        // casting to generic object, so typescript compiles even though
	        // we are looking for attributes that don't exist
	        var options = this.gridOptions;
	        if (options.suppressUnSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortingOrder instead.');
	        }
	        if (options.suppressDescSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortingOrder instead.');
	        }
	        if (options.groupAggFields) {
	            console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');
	        }
	        if (options.groupHidePivotColumns) {
	            console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');
	        }
	        if (options.groupKeys) {
	            console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');
	        }
	        if (typeof options.groupDefaultExpanded === 'boolean') {
	            console.warn('ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups');
	        }
	        if (options.onRowDeselected || options.rowDeselected) {
	            console.warn('ag-grid: since version 3.4 event rowDeselected no longer exists, please check the docs');
	        }
	        if (options.rowsAlreadyGrouped) {
	            console.warn('ag-grid: since version 3.4 rowsAlreadyGrouped no longer exists, please use getNodeChildDetails() instead');
	        }
	        if (options.groupAggFunction) {
	            console.warn('ag-grid: since version 4.3.x groupAggFunction is now called groupRowAggNodes');
	        }
	        if (options.checkboxSelection) {
	            console.warn('ag-grid: since version 8.0.x checkboxSelection is not supported as a grid option. ' +
	                'If you want this on all columns, use defaultColDef instead and set it there');
	        }
	        if (options.paginationInitialRowCount) {
	            console.warn('ag-grid: since version 9.0.x paginationInitialRowCount is now called infiniteInitialRowCount');
	        }
	        if (options.infinitePageSize) {
	            console.warn('ag-grid: since version 9.0.x infinitePageSize is now called cacheBlockSize');
	        }
	        if (options.infiniteBlockSize) {
	            console.warn('ag-grid: since version 10.0.x infiniteBlockSize is now called cacheBlockSize');
	        }
	        if (options.maxPagesInCache) {
	            console.warn('ag-grid: since version 10.0.x maxPagesInCache is now called maxBlocksInCache');
	        }
	        if (options.paginationOverflowSize) {
	            console.warn('ag-grid: since version 10.0.x paginationOverflowSize is now called cacheOverflowSize');
	        }
	        if (options.forPrint) {
	            console.warn('ag-grid: since version 10.1.x, use property domLayout="forPrint" instead of forPrint=true');
	        }
	        if (options.suppressMenuFilterPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','columnsMenuTab'] instead of suppressMenuFilterPanel=true");
	        }
	        if (options.suppressMenuMainPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['filterMenuTab','columnsMenuTab'] instead of suppressMenuMainPanel=true");
	        }
	        if (options.suppressMenuColumnPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','filterMenuTab'] instead of suppressMenuColumnPanel=true");
	        }
	        if (options.suppressUseColIdForGroups) {
	            console.warn("ag-grid: since version 11.0.x, this is not in use anymore. You should be able to remove it from your definition");
	        }
	        if (options.groupColumnDef) {
	            console.warn("ag-grid: since version 11.0.x, groupColumnDef has been renamed, this property is now called autoGroupColumnDef. Please change your configuration accordingly");
	        }
	        if (options.slaveGrids) {
	            console.warn("ag-grid: since version 12.x, slaveGrids has been renamed, this property is now called alignedGrids. Please change your configuration accordingly");
	        }
	        if (options.floatingTopRowData) {
	            console.warn("ag-grid: since version 12.x, floatingTopRowData is now called pinnedTopRowData");
	        }
	        if (options.floatingBottomRowData) {
	            console.warn("ag-grid: since version 12.x, floatingBottomRowData is now called pinnedBottomRowData");
	        }
	        if (options.paginationStartPage) {
	            console.warn("ag-grid: since version 12.x, paginationStartPage is gone, please call api.paginationGoToPage(" + options.paginationStartPage + ") instead.");
	        }
	    };
	    GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
	        if (this.gridOptions.localeTextFunc) {
	            return this.gridOptions.localeTextFunc;
	        }
	        var that = this;
	        return function (key, defaultValue) {
	            var localeText = that.gridOptions.localeText;
	            if (localeText && localeText[key]) {
	                return localeText[key];
	            }
	            else {
	                return defaultValue;
	            }
	        };
	    };
	    // responsible for calling the onXXX functions on gridOptions
	    GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
	        var callbackMethodName = componentUtil_1.ComponentUtil.getCallbackForEvent(eventName);
	        if (typeof this.gridOptions[callbackMethodName] === 'function') {
	            this.gridOptions[callbackMethodName](event);
	        }
	    };
	    // we don't allow dynamic row height for virtual paging
	    GridOptionsWrapper.prototype.getRowHeightAsNumber = function () {
	        var rowHeight = this.gridOptions.rowHeight;
	        if (utils_1.Utils.missing(rowHeight)) {
	            return this.getDefaultRowHeight();
	        }
	        else if (this.isNumeric(this.gridOptions.rowHeight)) {
	            return this.gridOptions.rowHeight;
	        }
	        else {
	            console.warn('ag-Grid row height must be a number if not using standard row model');
	            return this.getDefaultRowHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode) {
	        // check the function first, in case use set both function and
	        // number, when using virtual pagination then function can be
	        // used for pinned rows and the number for the body rows.
	        if (typeof this.gridOptions.getRowHeight === 'function') {
	            var params = {
	                node: rowNode,
	                data: rowNode.data,
	                api: this.gridOptions.api,
	                context: this.gridOptions.context
	            };
	            return this.gridOptions.getRowHeight(params);
	        }
	        else if (rowNode.detail && this.isMasterDetail()) {
	            if (this.isNumeric(this.gridOptions.detailRowHeight)) {
	                return this.gridOptions.detailRowHeight;
	            }
	            else {
	                return DEFAULT_DETAIL_ROW_HEIGHT;
	            }
	        }
	        else if (this.isNumeric(this.gridOptions.rowHeight)) {
	            return this.gridOptions.rowHeight;
	        }
	        else {
	            return this.getDefaultRowHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.isDynamicRowHeight = function () {
	        return typeof this.gridOptions.getRowHeight === 'function';
	    };
	    GridOptionsWrapper.prototype.getVirtualItemHeight = function () {
	        return this.specialForNewMaterial(20, 'virtualItemHeight');
	    };
	    GridOptionsWrapper.prototype.isNumeric = function (value) {
	        return !isNaN(value) && typeof value === 'number';
	    };
	    // Material data table has strict guidelines about whitespace, and these values are different than the ones 
	    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box
	    GridOptionsWrapper.prototype.specialForNewMaterial = function (defaultValue, sassVariableName) {
	        var theme = this.environment.getTheme();
	        if (theme.indexOf('ag-theme') === 0) {
	            return this.environment.getSassVariable(theme, sassVariableName);
	        }
	        else {
	            return defaultValue;
	        }
	    };
	    GridOptionsWrapper.prototype.getDefaultRowHeight = function () {
	        return this.specialForNewMaterial(DEFAULT_ROW_HEIGHT, 'rowHeight');
	    };
	    GridOptionsWrapper.MIN_COL_WIDTH = 10;
	    GridOptionsWrapper.PROP_HEADER_HEIGHT = 'headerHeight';
	    GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';
	    GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = 'groupRemoveLowestSingleChildren';
	    GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';
	    GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';
	    GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';
	    GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';
	    __decorate([
	        context_1.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridOptionsWrapper.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridOptionsWrapper.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], GridOptionsWrapper.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridOptionsWrapper.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridOptionsWrapper.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('environment'),
	        __metadata("design:type", environment_1.Environment)
	    ], GridOptionsWrapper.prototype, "environment", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('gridApi')), __param(1, context_1.Qualifier('columnApi')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridApi_1.GridApi, columnController_1.ColumnApi]),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "agWire", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "destroy", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "init", null);
	    GridOptionsWrapper = GridOptionsWrapper_1 = __decorate([
	        context_1.Bean('gridOptionsWrapper')
	    ], GridOptionsWrapper);
	    return GridOptionsWrapper;
	    var GridOptionsWrapper_1;
	}());
	exports.GridOptionsWrapper = GridOptionsWrapper;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(286);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var EventService = (function () {
	    function EventService() {
	        this.allSyncListeners = {};
	        this.allAsyncListeners = {};
	        this.globalSyncListeners = [];
	        this.globalAsyncListeners = [];
	        this.asyncFunctionsQueue = [];
	        this.scheduled = false;
	    }
	    EventService_1 = EventService;
	    // because this class is used both inside the context and outside the context, we do not
	    // use autowired attributes, as that would be confusing, as sometimes the attributes
	    // would be wired, and sometimes not.
	    //
	    // the global event servers used by ag-Grid is autowired by the context once, and this
	    // setBeans method gets called once.
	    //
	    // the times when this class is used outside of the context (eg RowNode has an instance of this
	    // class) then it is not a bean, and this setBeans method is not called.
	    EventService.prototype.setBeans = function (loggerFactory, gridOptionsWrapper, globalEventListener) {
	        if (globalEventListener === void 0) { globalEventListener = null; }
	        this.logger = loggerFactory.create('EventService');
	        if (globalEventListener) {
	            var async = gridOptionsWrapper.useAsyncEvents();
	            this.addGlobalListener(globalEventListener, async);
	        }
	    };
	    EventService.prototype.getListenerList = function (eventType, async) {
	        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
	        var listenerList = listenerMap[eventType];
	        if (!listenerList) {
	            listenerList = [];
	            listenerMap[eventType] = listenerList;
	        }
	        return listenerList;
	    };
	    EventService.prototype.addEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        if (!this.assertNotDeprecated(eventType))
	            return;
	        var listenerList = this.getListenerList(eventType, async);
	        if (listenerList.indexOf(listener) < 0) {
	            listenerList.push(listener);
	        }
	    };
	    EventService.prototype.assertNotDeprecated = function (eventType) {
	        if (eventType === 'floatingRowDataChanged') {
	            console.warn('ag-Grid: floatingRowDataChanged is now called pinnedRowDataChanged');
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    // for some events, it's important that the model gets to hear about them before the view,
	    // as the model may need to update before the view works on the info. if you register
	    // via this method, you get notified before the view parts
	    EventService.prototype.addModalPriorityEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        if (!this.assertNotDeprecated(eventType))
	            return;
	        this.addEventListener(eventType + EventService_1.PRIORITY, listener, async);
	    };
	    EventService.prototype.addGlobalListener = function (listener, async) {
	        if (async === void 0) { async = false; }
	        if (async) {
	            this.globalAsyncListeners.push(listener);
	        }
	        else {
	            this.globalSyncListeners.push(listener);
	        }
	    };
	    EventService.prototype.removeEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        var listenerList = this.getListenerList(eventType, async);
	        utils_1.Utils.removeFromArray(listenerList, listener);
	    };
	    EventService.prototype.removeGlobalListener = function (listener) {
	        utils_1.Utils.removeFromArray(this.globalSyncListeners, listener);
	    };
	    // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
	    // type is not in other types of events???
	    EventService.prototype.dispatchEvent = function (event) {
	        // console.log(`dispatching ${eventType}: ${event}`);
	        this.dispatchToListeners(event, true);
	        this.dispatchToListeners(event, false);
	    };
	    EventService.prototype.dispatchToListeners = function (event, async) {
	        var _this = this;
	        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
	        var eventType = event.type;
	        // this allows the columnController to get events before anyone else
	        var p1ListenerList = this.getListenerList(eventType + EventService_1.PRIORITY, async);
	        utils_1.Utils.forEachSnapshotFirst(p1ListenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        var listenerList = this.getListenerList(eventType, async);
	        utils_1.Utils.forEachSnapshotFirst(listenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        utils_1.Utils.forEachSnapshotFirst(globalListeners, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(eventType, event); });
	            }
	            else {
	                listener(eventType, event);
	            }
	        });
	    };
	    // this gets called inside the grid's thread, for each event that it
	    // wants to set async. the grid then batches the events into one setTimeout()
	    // because setTimeout() is an expensive operation. ideally we would have
	    // each event in it's own setTimeout(), but we batch for performance.
	    EventService.prototype.dispatchAsync = function (func) {
	        // add to the queue for executing later in the next VM turn
	        this.asyncFunctionsQueue.push(func);
	        // check if timeout is already scheduled. the first time the grid calls
	        // this within it's thread turn, this should be false, so it will schedule
	        // the 'flush queue' method the first time it comes here. then the flag is
	        // set to 'true' so it will know it's already scheduled for subsequent calls.
	        if (!this.scheduled) {
	            // if not scheduled, schedule one
	            setTimeout(this.flushAsyncQueue.bind(this), 0);
	            // mark that it is scheduled
	            this.scheduled = true;
	        }
	    };
	    // this happens in the next VM turn only, and empties the queue of events
	    EventService.prototype.flushAsyncQueue = function () {
	        this.scheduled = false;
	        // we take a copy, because the event listener could be using
	        // the grid, which would cause more events, which would be potentially
	        // added to the queue, so safe to take a copy, the new events will
	        // get executed in a later VM turn rather than risk updating the
	        // queue as we are flushing it.
	        var queueCopy = this.asyncFunctionsQueue.slice();
	        this.asyncFunctionsQueue = [];
	        // execute the queue
	        queueCopy.forEach(function (func) { return func(); });
	    };
	    // this is an old idea niall had, should really take it out, was to do with ordering who gets to process
	    // events first, to give model and service objects preference over the view
	    EventService.PRIORITY = '-P1';
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __param(1, context_2.Qualifier('gridOptionsWrapper')),
	        __param(2, context_2.Qualifier('globalEventListener')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory,
	            gridOptionsWrapper_1.GridOptionsWrapper,
	            Function]),
	        __metadata("design:returntype", void 0)
	    ], EventService.prototype, "setBeans", null);
	    EventService = EventService_1 = __decorate([
	        context_1.Bean('eventService')
	    ], EventService);
	    return EventService;
	    var EventService_1;
	}());
	exports.EventService = EventService;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var LoggerFactory = (function () {
	    function LoggerFactory() {
	    }
	    LoggerFactory.prototype.setBeans = function (gridOptionsWrapper) {
	        this.logging = gridOptionsWrapper.isDebug();
	    };
	    LoggerFactory.prototype.create = function (name) {
	        return new Logger(name, this.isLogging.bind(this));
	    };
	    LoggerFactory.prototype.isLogging = function () {
	        return this.logging;
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('gridOptionsWrapper')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridOptionsWrapper_1.GridOptionsWrapper]),
	        __metadata("design:returntype", void 0)
	    ], LoggerFactory.prototype, "setBeans", null);
	    LoggerFactory = __decorate([
	        context_1.Bean('loggerFactory')
	    ], LoggerFactory);
	    return LoggerFactory;
	}());
	exports.LoggerFactory = LoggerFactory;
	var Logger = (function () {
	    function Logger(name, isLoggingFunc) {
	        this.name = name;
	        this.isLoggingFunc = isLoggingFunc;
	    }
	    Logger.prototype.isLogging = function () {
	        return this.isLoggingFunc();
	    };
	    Logger.prototype.log = function (message) {
	        if (this.isLoggingFunc()) {
	            console.log('ag-Grid.' + this.name + ': ' + message);
	        }
	    };
	    return Logger;
	}());
	exports.Logger = Logger;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var Context = (function () {
	    function Context(params, logger) {
	        this.beans = {};
	        this.componentsMappedByName = {};
	        this.destroyed = false;
	        if (!params || !params.beans) {
	            return;
	        }
	        this.contextParams = params;
	        this.logger = logger;
	        this.logger.log('>> creating ag-Application Context');
	        this.setupComponents();
	        this.createBeans();
	        var beans = utils_1.Utils.mapObject(this.beans, function (beanEntry) { return beanEntry.beanInstance; });
	        this.wireBeans(beans);
	        this.logger.log('>> ag-Application Context ready - component is alive');
	    }
	    Context.prototype.setupComponents = function () {
	        var _this = this;
	        if (this.contextParams.components) {
	            this.contextParams.components.forEach(function (componentMeta) { return _this.addComponent(componentMeta); });
	        }
	    };
	    Context.prototype.addComponent = function (componentMeta) {
	        // get name of the class as a string
	        // let className = _.getNameOfClass(ComponentClass);
	        // insert a dash after every capital letter
	        // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
	        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	        // put all to upper case
	        var classUpperCase = classEscaped.toUpperCase();
	        // finally store
	        this.componentsMappedByName[classUpperCase] = componentMeta.theClass;
	    };
	    Context.prototype.createComponent = function (element) {
	        var key = element.nodeName;
	        if (this.componentsMappedByName && this.componentsMappedByName[key]) {
	            var newComponent = new this.componentsMappedByName[key];
	            this.wireBean(newComponent);
	            this.copyAttributesFromNode(element, newComponent.getGui());
	            newComponent.attributesSet();
	            return newComponent;
	        }
	        else {
	            return null;
	        }
	    };
	    Context.prototype.copyAttributesFromNode = function (fromNode, toNode) {
	        if (fromNode.attributes) {
	            var count = fromNode.attributes.length;
	            for (var i = 0; i < count; i++) {
	                var attr = fromNode.attributes[i];
	                toNode.setAttribute(attr.name, attr.value);
	            }
	        }
	    };
	    Context.prototype.wireBean = function (bean) {
	        if (!bean)
	            throw Error("Can't wire to bean since it is null");
	        this.wireBeans([bean]);
	    };
	    Context.prototype.wireBeans = function (beans) {
	        this.autoWireBeans(beans);
	        this.methodWireBeans(beans);
	        this.preConstruct(beans);
	        this.postConstruct(beans);
	    };
	    Context.prototype.createBeans = function () {
	        var _this = this;
	        // register all normal beans
	        this.contextParams.beans.forEach(this.createBeanEntry.bind(this));
	        // register override beans, these will overwrite beans above of same name
	        if (this.contextParams.overrideBeans) {
	            this.contextParams.overrideBeans.forEach(this.createBeanEntry.bind(this));
	        }
	        // instantiate all beans - overridden beans will be left out
	        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var constructorParamsMeta;
	            if (beanEntry.bean.__agBeanMetaData
	                && beanEntry.bean.__agBeanMetaData.autowireMethods
	                && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
	                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
	            }
	            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
	            var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
	            beanEntry.beanInstance = newInstance;
	            _this.logger.log('bean ' + _this.getBeanName(newInstance) + ' created');
	        });
	    };
	    Context.prototype.createBeanEntry = function (Bean) {
	        var metaData = Bean.__agBeanMetaData;
	        if (!metaData) {
	            var beanName = void 0;
	            if (Bean.prototype.constructor) {
	                beanName = Bean.prototype.constructor.name;
	            }
	            else {
	                beanName = '' + Bean;
	            }
	            console.error('context item ' + beanName + ' is not a bean');
	            return;
	        }
	        var beanEntry = {
	            bean: Bean,
	            beanInstance: null,
	            beanName: metaData.beanName
	        };
	        this.beans[metaData.beanName] = beanEntry;
	    };
	    Context.prototype.autoWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) { return _this.autoWireBean(bean); });
	    };
	    Context.prototype.methodWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) {
	            if (!bean)
	                throw Error("Can't wire to bean since it is null");
	            return _this.methodWireBean(bean);
	        });
	    };
	    Context.prototype.autoWireBean = function (bean) {
	        var _this = this;
	        var currentBean = bean;
	        var _loop_1 = function () {
	            var currentConstructor = currentBean.constructor;
	            if (currentConstructor.__agBeanMetaData
	                && currentConstructor.__agBeanMetaData.agClassAttributes) {
	                var attributes = currentConstructor.__agBeanMetaData.agClassAttributes;
	                if (!attributes) {
	                    return { value: void 0 };
	                }
	                var beanName_1 = this_1.getBeanName(currentConstructor);
	                attributes.forEach(function (attribute) {
	                    var otherBean = _this.lookupBeanInstance(beanName_1, attribute.beanName, attribute.optional);
	                    bean[attribute.attributeName] = otherBean;
	                });
	            }
	            currentBean = Object.getPrototypeOf(currentBean) ? Object.getPrototypeOf(currentBean) : null;
	        };
	        var this_1 = this;
	        while (currentBean != null) {
	            var state_1 = _loop_1();
	            if (typeof state_1 === "object")
	                return state_1.value;
	        }
	    };
	    Context.prototype.getBeanName = function (constructor) {
	        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
	            return constructor.__agBeanMetaData.beanName;
	        }
	        var constructorString = constructor.toString();
	        var beanName = constructorString.substring(9, constructorString.indexOf('('));
	        return beanName;
	    };
	    Context.prototype.methodWireBean = function (bean) {
	        var _this = this;
	        var autowiredMethods;
	        if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.autowireMethods) {
	            autowiredMethods = bean.constructor.__agBeanMetaData.autowireMethods;
	        }
	        utils_1.Utils.iterateObject(autowiredMethods, function (methodName, wireParams) {
	            // skip constructor, as this is dealt with elsewhere
	            if (methodName === 'agConstructor') {
	                return;
	            }
	            var beanName = _this.getBeanName(bean.constructor);
	            var initParams = _this.getBeansForParameters(wireParams, beanName);
	            bean[methodName].apply(bean, initParams);
	        });
	    };
	    Context.prototype.getBeansForParameters = function (parameters, beanName) {
	        var _this = this;
	        var beansList = [];
	        if (parameters) {
	            utils_1.Utils.iterateObject(parameters, function (paramIndex, otherBeanName) {
	                var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
	                beansList[Number(paramIndex)] = otherBean;
	            });
	        }
	        return beansList;
	    };
	    Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {
	        if (optional === void 0) { optional = false; }
	        if (beanName === 'context') {
	            return this;
	        }
	        else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {
	            return this.contextParams.seed[beanName];
	        }
	        else {
	            var beanEntry = this.beans[beanName];
	            if (beanEntry) {
	                return beanEntry.beanInstance;
	            }
	            if (!optional) {
	                console.error('ag-Grid: unable to find bean reference ' + beanName + ' while initialising ' + wiringBean);
	            }
	            return null;
	        }
	    };
	    Context.prototype.postConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods) {
	                bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.preConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preConstructMethods) {
	                bean.constructor.__agBeanMetaData.preConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.getBean = function (name) {
	        return this.lookupBeanInstance('getBean', name, true);
	    };
	    Context.prototype.destroy = function () {
	        // should only be able to destroy once
	        if (this.destroyed) {
	            return;
	        }
	        this.logger.log('>> Shutting down ag-Application Context');
	        // try calling destroy methods
	        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var bean = beanEntry.beanInstance;
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preDestroyMethods) {
	                bean.constructor.__agBeanMetaData.preDestroyMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	        this.destroyed = true;
	        this.logger.log('>> ag-Application Context shut down - component is dead');
	    };
	    return Context;
	}());
	exports.Context = Context;
	// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
	// allows calling 'apply' on a constructor
	function applyToConstructor(constructor, argArray) {
	    var args = [null].concat(argArray);
	    var factoryFunction = constructor.bind.apply(constructor, args);
	    return new factoryFunction();
	}
	function PreConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.preConstructMethods = [];
	    }
	    props.preConstructMethods.push(methodName);
	}
	exports.PreConstruct = PreConstruct;
	function PostConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.postConstructMethods = [];
	    }
	    props.postConstructMethods.push(methodName);
	}
	exports.PostConstruct = PostConstruct;
	function PreDestroy(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.preDestroyMethods) {
	        props.preDestroyMethods = [];
	    }
	    props.preDestroyMethods.push(methodName);
	}
	exports.PreDestroy = PreDestroy;
	function Bean(beanName) {
	    return function (classConstructor) {
	        var props = getOrCreateProps(classConstructor);
	        props.beanName = beanName;
	    };
	}
	exports.Bean = Bean;
	function Autowired(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, false, target, propertyKey, null);
	    };
	}
	exports.Autowired = Autowired;
	function Optional(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, true, target, propertyKey, null);
	    };
	}
	exports.Optional = Optional;
	function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
	    if (name === null) {
	        console.error('ag-Grid: Autowired name should not be null');
	        return;
	    }
	    if (typeof index === 'number') {
	        console.error('ag-Grid: Autowired should be on an attribute');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(target.constructor);
	    if (!props.agClassAttributes) {
	        props.agClassAttributes = [];
	    }
	    props.agClassAttributes.push({
	        attributeName: methodOrAttributeName,
	        beanName: name,
	        optional: optional
	    });
	}
	function Qualifier(name) {
	    return function (classPrototype, methodOrAttributeName, index) {
	        var constructor = (typeof classPrototype == 'function') ? classPrototype : classPrototype.constructor;
	        var props;
	        if (typeof index === 'number') {
	            // it's a parameter on a method
	            var methodName = void 0;
	            if (methodOrAttributeName) {
	                props = getOrCreateProps(constructor);
	                methodName = methodOrAttributeName;
	            }
	            else {
	                props = getOrCreateProps(constructor);
	                methodName = 'agConstructor';
	            }
	            if (!props.autowireMethods) {
	                props.autowireMethods = {};
	            }
	            if (!props.autowireMethods[methodName]) {
	                props.autowireMethods[methodName] = {};
	            }
	            props.autowireMethods[methodName][index] = name;
	        }
	    };
	}
	exports.Qualifier = Qualifier;
	function getOrCreateProps(target) {
	    if (!target.hasOwnProperty('__agBeanMetaData')) {
	        target.__agBeanMetaData = {};
	    }
	    return target.__agBeanMetaData;
	}


/***/ }),
/* 288 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
	// util class, only used when debugging, for printing time to console
	var Timer = (function () {
	    function Timer() {
	        this.timestamp = new Date().getTime();
	    }
	    Timer.prototype.print = function (msg) {
	        var duration = (new Date().getTime()) - this.timestamp;
	        console.log(msg + " = " + duration);
	        this.timestamp = new Date().getTime();
	    };
	    return Timer;
	}());
	exports.Timer = Timer;
	/** HTML Escapes. */
	var HTML_ESCAPES = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	};
	var reUnescapedHtml = /[&<>"']/g;
	var Utils = (function () {
	    function Utils() {
	    }
	    // if the key was passed before, then doesn't execute the func
	    Utils.doOnce = function (func, key) {
	        if (this.doOnceFlags[key]) {
	            return;
	        }
	        func();
	        this.doOnceFlags[key] = true;
	    };
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    Utils.areEventsNear = function (e1, e2, pixelCount) {
	        // by default, we wait 4 pixels before starting the drag
	        if (pixelCount === 0) {
	            return false;
	        }
	        var diffX = Math.abs(e1.clientX - e2.clientX);
	        var diffY = Math.abs(e1.clientY - e2.clientY);
	        return Math.max(diffX, diffY) <= pixelCount;
	    };
	    Utils.shallowCompare = function (arr1, arr2) {
	        // if both are missing, then they are the same
	        if (this.missing(arr1) && this.missing(arr2)) {
	            return true;
	        }
	        // if one is present, but other is missing, then then are different
	        if (this.missing(arr1) || this.missing(arr2)) {
	            return false;
	        }
	        if (arr1.length !== arr2.length) {
	            return false;
	        }
	        for (var i = 0; i < arr1.length; i++) {
	            if (arr1[i] !== arr2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.getNameOfClass = function (TheClass) {
	        var funcNameRegex = /function (.{1,})\(/;
	        var funcAsString = TheClass.toString();
	        var results = (funcNameRegex).exec(funcAsString);
	        return (results && results.length > 1) ? results[1] : "";
	    };
	    Utils.values = function (object) {
	        var result = [];
	        this.iterateObject(object, function (key, value) {
	            result.push(value);
	        });
	        return result;
	    };
	    Utils.getValueUsingField = function (data, field, fieldContainsDots) {
	        if (!field || !data) {
	            return;
	        }
	        // if no '.', then it's not a deep value
	        if (!fieldContainsDots) {
	            return data[field];
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fields = field.split('.');
	            var currentObject = data;
	            for (var i = 0; i < fields.length; i++) {
	                currentObject = currentObject[fields[i]];
	                if (this.missing(currentObject)) {
	                    return null;
	                }
	            }
	            return currentObject;
	        }
	    };
	    Utils.getScrollLeft = function (element, rtl) {
	        var scrollLeft = element.scrollLeft;
	        if (rtl) {
	            // Absolute value - for FF that reports RTL scrolls in negative numbers
	            scrollLeft = Math.abs(scrollLeft);
	            // Get Chrome and Safari to return the same value as well
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
	            }
	        }
	        return scrollLeft;
	    };
	    Utils.cleanNumber = function (value) {
	        if (typeof value === 'string') {
	            value = parseInt(value);
	        }
	        if (typeof value === 'number') {
	            value = Math.floor(value);
	        }
	        else {
	            value = null;
	        }
	        return value;
	    };
	    Utils.setScrollLeft = function (element, value, rtl) {
	        if (rtl) {
	            // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                value = element.scrollWidth - element.clientWidth - value;
	            }
	            // Firefox uses negative numbers when doing RTL scrolling
	            if (this.isBrowserFirefox()) {
	                value *= -1;
	            }
	        }
	        element.scrollLeft = value;
	    };
	    Utils.iterateObject = function (object, callback) {
	        if (this.missing(object)) {
	            return;
	        }
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = object[key];
	            callback(key, value);
	        }
	    };
	    Utils.cloneObject = function (object) {
	        var copy = {};
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = object[key];
	            copy[key] = value;
	        }
	        return copy;
	    };
	    Utils.map = function (array, callback) {
	        var result = [];
	        for (var i = 0; i < array.length; i++) {
	            var item = array[i];
	            var mappedItem = callback(item);
	            result.push(mappedItem);
	        }
	        return result;
	    };
	    Utils.mapObject = function (object, callback) {
	        var result = [];
	        Utils.iterateObject(object, function (key, value) {
	            result.push(callback(value));
	        });
	        return result;
	    };
	    Utils.forEach = function (array, callback) {
	        if (!array) {
	            return;
	        }
	        for (var i = 0; i < array.length; i++) {
	            var value = array[i];
	            callback(value, i);
	        }
	    };
	    Utils.filter = function (array, callback) {
	        var result = [];
	        array.forEach(function (item) {
	            if (callback(item)) {
	                result.push(item);
	            }
	        });
	        return result;
	    };
	    Utils.getAllKeysInObjects = function (objects) {
	        var allValues = {};
	        objects.forEach(function (obj) {
	            if (obj) {
	                Object.keys(obj).forEach(function (key) { return allValues[key] = null; });
	            }
	        });
	        return Object.keys(allValues);
	    };
	    Utils.mergeDeep = function (dest, source) {
	        if (this.exists(source)) {
	            this.iterateObject(source, function (key, newValue) {
	                var oldValue = dest[key];
	                if (oldValue === newValue) {
	                    return;
	                }
	                if (typeof oldValue === 'object' && typeof newValue === 'object') {
	                    Utils.mergeDeep(oldValue, newValue);
	                }
	                else {
	                    dest[key] = newValue;
	                }
	            });
	        }
	    };
	    Utils.assign = function (object) {
	        var _this = this;
	        var sources = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            sources[_i - 1] = arguments[_i];
	        }
	        sources.forEach(function (source) {
	            if (_this.exists(source)) {
	                _this.iterateObject(source, function (key, value) {
	                    object[key] = value;
	                });
	            }
	        });
	        return object;
	    };
	    Utils.parseYyyyMmDdToDate = function (yyyyMmDd, separator) {
	        try {
	            if (!yyyyMmDd)
	                return null;
	            if (yyyyMmDd.indexOf(separator) === -1)
	                return null;
	            var fields = yyyyMmDd.split(separator);
	            if (fields.length != 3)
	                return null;
	            return new Date(Number(fields[0]), Number(fields[1]) - 1, Number(fields[2]));
	        }
	        catch (e) {
	            return null;
	        }
	    };
	    Utils.serializeDateToYyyyMmDd = function (date, separator) {
	        if (!date)
	            return null;
	        return date.getFullYear() + separator + Utils.pad(date.getMonth() + 1, 2) + separator + Utils.pad(date.getDate(), 2);
	    };
	    Utils.pad = function (num, totalStringSize) {
	        var asString = num + "";
	        while (asString.length < totalStringSize)
	            asString = "0" + asString;
	        return asString;
	    };
	    Utils.pushAll = function (target, source) {
	        if (this.missing(source) || this.missing(target)) {
	            return;
	        }
	        source.forEach(function (func) { return target.push(func); });
	    };
	    Utils.createArrayOfNumbers = function (first, last) {
	        var result = [];
	        for (var i = first; i <= last; i++) {
	            result.push(i);
	        }
	        return result;
	    };
	    Utils.getFunctionParameters = function (func) {
	        var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
	        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);
	        if (result === null) {
	            return [];
	        }
	        else {
	            return result;
	        }
	    };
	    Utils.find = function (collection, predicate, value) {
	        if (collection === null || collection === undefined) {
	            return null;
	        }
	        if (!Array.isArray(collection)) {
	            var objToArray = this.values(collection);
	            return this.find(objToArray, predicate, value);
	        }
	        var collectionAsArray = collection;
	        var firstMatchingItem;
	        for (var i = 0; i < collectionAsArray.length; i++) {
	            var item = collectionAsArray[i];
	            if (typeof predicate === 'string') {
	                if (item[predicate] === value) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	            else {
	                var callback = predicate;
	                if (callback(item)) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	        }
	        return firstMatchingItem;
	    };
	    Utils.toStrings = function (array) {
	        return this.map(array, function (item) {
	            if (item === undefined || item === null || !item.toString) {
	                return null;
	            }
	            else {
	                return item.toString();
	            }
	        });
	    };
	    Utils.iterateArray = function (array, callback) {
	        for (var index = 0; index < array.length; index++) {
	            var value = array[index];
	            callback(value, index);
	        }
	    };
	    //Returns true if it is a DOM node
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isNode = function (o) {
	        return (typeof Node === "function" ? o instanceof Node :
	            o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
	    };
	    //Returns true if it is a DOM element
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isElement = function (o) {
	        return (typeof HTMLElement === "function" ? o instanceof HTMLElement :
	            o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
	    };
	    Utils.isNodeOrElement = function (o) {
	        return this.isNode(o) || this.isElement(o);
	    };
	    Utils.isEventFromPrintableCharacter = function (event) {
	        var pressedChar = String.fromCharCode(event.charCode);
	        if (exports._.exists(event.key)) {
	            // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the
	            // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.
	            return event.key.length === 1;
	        }
	        else {
	            // otherwise, for older browsers, we test against a list of characters, which doesn't include
	            // accents for non-English, but don't care much, as most users are on modern browsers
	            return Utils.PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;
	        }
	    };
	    //adds all type of change listeners to an element, intended to be a text field
	    Utils.addChangeListener = function (element, listener) {
	        element.addEventListener("changed", listener);
	        element.addEventListener("paste", listener);
	        element.addEventListener("input", listener);
	        // IE doesn't fire changed for special keys (eg delete, backspace), so need to
	        // listen for this further ones
	        element.addEventListener("keydown", listener);
	        element.addEventListener("keyup", listener);
	    };
	    //if value is undefined, null or blank, returns null, otherwise returns the value
	    Utils.makeNull = function (value) {
	        if (value === null || value === undefined || value === "") {
	            return null;
	        }
	        else {
	            return value;
	        }
	    };
	    Utils.missing = function (value) {
	        return !this.exists(value);
	    };
	    Utils.missingOrEmpty = function (value) {
	        return this.missing(value) || value.length === 0;
	    };
	    Utils.missingOrEmptyObject = function (value) {
	        return this.missing(value) || Object.keys(value).length === 0;
	    };
	    Utils.exists = function (value) {
	        if (value === null || value === undefined || value === '') {
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    Utils.firstExistingValue = function () {
	        var values = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            values[_i] = arguments[_i];
	        }
	        for (var i = 0; i < values.length; i++) {
	            var value = values[i];
	            if (exports._.exists(value))
	                return value;
	        }
	        return null;
	    };
	    Utils.anyExists = function (values) {
	        if (values) {
	            for (var i = 0; i < values.length; i++) {
	                if (this.exists(values[i])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    Utils.existsAndNotEmpty = function (value) {
	        return this.exists(value) && value.length > 0;
	    };
	    Utils.removeAllChildren = function (node) {
	        if (node) {
	            while (node.hasChildNodes()) {
	                node.removeChild(node.lastChild);
	            }
	        }
	    };
	    Utils.removeElement = function (parent, cssSelector) {
	        this.removeFromParent(parent.querySelector(cssSelector));
	    };
	    Utils.removeFromParent = function (node) {
	        if (node && node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	    };
	    Utils.isVisible = function (element) {
	        return (element.offsetParent !== null);
	    };
	    /**
	     * loads the template and returns it as an element. makes up for no simple way in
	     * the dom api to load html directly, eg we cannot do this: document.createElement(template)
	     */
	    Utils.loadTemplate = function (template) {
	        var tempDiv = document.createElement("div");
	        tempDiv.innerHTML = template;
	        return tempDiv.firstChild;
	    };
	    Utils.appendHtml = function (eContainer, htmlTemplate) {
	        if (eContainer.lastChild) {
	            // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
	            // we put the items at the start, so new items appear underneath old items,
	            // so when expanding/collapsing groups, the new rows don't go on top of the
	            // rows below that are moving our of the way
	            eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	        }
	        else {
	            eContainer.innerHTML = htmlTemplate;
	        }
	    };
	    Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
	        if (addOrRemove) {
	            this.addCssClass(element, className);
	        }
	        else {
	            this.removeCssClass(element, className);
	        }
	    };
	    Utils.callIfPresent = function (func) {
	        if (func) {
	            func();
	        }
	    };
	    Utils.addCssClass = function (element, className) {
	        var _this = this;
	        if (!className || className.length === 0) {
	            return;
	        }
	        if (className.indexOf(' ') >= 0) {
	            className.split(' ').forEach(function (value) { return _this.addCssClass(element, value); });
	            return;
	        }
	        if (element.classList) {
	            element.classList.add(className);
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) < 0) {
	                    cssClasses.push(className);
	                    element.className = cssClasses.join(' ');
	                }
	            }
	            else {
	                element.className = className;
	            }
	        }
	    };
	    Utils.containsClass = function (element, className) {
	        if (element.classList) {
	            // for modern browsers
	            return element.classList.contains(className);
	        }
	        else if (element.className) {
	            // for older browsers, check against the string of class names
	            // if only one class, can check for exact match
	            var onlyClass = element.className === className;
	            // if many classes, check for class name, we have to pad with ' ' to stop other
	            // class names that are a substring of this class
	            var contains = element.className.indexOf(' ' + className + ' ') >= 0;
	            // the padding above then breaks when it's the first or last class names
	            var startsWithClass = element.className.indexOf(className + ' ') === 0;
	            var endsWithClass = element.className.lastIndexOf(' ' + className) === (element.className.length - className.length - 1);
	            return onlyClass || contains || startsWithClass || endsWithClass;
	        }
	        else {
	            // if item is not a node
	            return false;
	        }
	    };
	    Utils.getElementAttribute = function (element, attributeName) {
	        if (element.attributes) {
	            if (element.attributes[attributeName]) {
	                var attribute = element.attributes[attributeName];
	                return attribute.value;
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.offsetHeight = function (element) {
	        return element && element.clientHeight ? element.clientHeight : 0;
	    };
	    Utils.offsetWidth = function (element) {
	        return element && element.clientWidth ? element.clientWidth : 0;
	    };
	    Utils.sortNumberArray = function (numberArray) {
	        numberArray.sort(function (a, b) { return a - b; });
	    };
	    Utils.removeCssClass = function (element, className) {
	        if (element.classList) {
	            element.classList.remove(className);
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) >= 0) {
	                    // remove all instances of the item, not just the first, in case it's in more than once
	                    while (cssClasses.indexOf(className) >= 0) {
	                        cssClasses.splice(cssClasses.indexOf(className), 1);
	                    }
	                    element.className = cssClasses.join(' ');
	                }
	            }
	        }
	    };
	    Utils.removeRepeatsFromArray = function (array, object) {
	        if (!array) {
	            return;
	        }
	        for (var index = array.length - 2; index >= 0; index--) {
	            var thisOneMatches = array[index] === object;
	            var nextOneMatches = array[index + 1] === object;
	            if (thisOneMatches && nextOneMatches) {
	                array.splice(index + 1, 1);
	            }
	        }
	    };
	    Utils.removeFromArray = function (array, object) {
	        if (array.indexOf(object) >= 0) {
	            array.splice(array.indexOf(object), 1);
	        }
	    };
	    Utils.removeAllFromArray = function (array, toRemove) {
	        toRemove.forEach(function (item) {
	            if (array.indexOf(item) >= 0) {
	                array.splice(array.indexOf(item), 1);
	            }
	        });
	    };
	    Utils.insertIntoArray = function (array, object, toIndex) {
	        array.splice(toIndex, 0, object);
	    };
	    Utils.insertArrayIntoArray = function (dest, src, toIndex) {
	        if (this.missing(dest) || this.missing(src)) {
	            return;
	        }
	        // put items in backwards, otherwise inserted items end up in reverse order
	        for (var i = src.length - 1; i >= 0; i--) {
	            var item = src[i];
	            this.insertIntoArray(dest, item, toIndex);
	        }
	    };
	    Utils.moveInArray = function (array, objectsToMove, toIndex) {
	        var _this = this;
	        // first take out it items from the array
	        objectsToMove.forEach(function (obj) {
	            _this.removeFromArray(array, obj);
	        });
	        // now add the objects, in same order as provided to us, that means we start at the end
	        // as the objects will be pushed to the right as they are inserted
	        objectsToMove.slice().reverse().forEach(function (obj) {
	            _this.insertIntoArray(array, obj, toIndex);
	        });
	    };
	    Utils.defaultComparator = function (valueA, valueB, accentedCompare) {
	        if (accentedCompare === void 0) { accentedCompare = false; }
	        var valueAMissing = valueA === null || valueA === undefined;
	        var valueBMissing = valueB === null || valueB === undefined;
	        // this is for aggregations sum and avg, where the result can be a number that is wrapped.
	        // if we didn't do this, then the toString() value would be used, which would result in
	        // the strings getting used instead of the numbers.
	        if (valueA && valueA.toNumber) {
	            valueA = valueA.toNumber();
	        }
	        if (valueB && valueB.toNumber) {
	            valueB = valueB.toNumber();
	        }
	        if (valueAMissing && valueBMissing) {
	            return 0;
	        }
	        if (valueAMissing) {
	            return -1;
	        }
	        if (valueBMissing) {
	            return 1;
	        }
	        if (typeof valueA === "string") {
	            if (!accentedCompare) {
	                return doQuickCompare(valueA, valueB);
	            }
	            else {
	                try {
	                    // using local compare also allows chinese comparisons
	                    return valueA.localeCompare(valueB);
	                }
	                catch (e) {
	                    // if something wrong with localeCompare, eg not supported
	                    // by browser, then just continue with the quick one
	                    return doQuickCompare(valueA, valueB);
	                }
	            }
	        }
	        if (valueA < valueB) {
	            return -1;
	        }
	        else if (valueA > valueB) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	        function doQuickCompare(a, b) {
	            return (a > b ? 1 : (a < b ? -1 : 0));
	        }
	    };
	    Utils.compareArrays = function (array1, array2) {
	        if (this.missing(array1) && this.missing(array2)) {
	            return true;
	        }
	        if (this.missing(array1) || this.missing(array2)) {
	            return false;
	        }
	        if (array1.length !== array2.length) {
	            return false;
	        }
	        for (var i = 0; i < array1.length; i++) {
	            if (array1[i] !== array2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.ensureDomOrder = function (eContainer, eChild, eChildBefore) {
	        // if already in right order, do nothing
	        if (eChildBefore && eChildBefore.nextSibling === eChild) {
	            return;
	        }
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            // otherwise put at start
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	        }
	    };
	    Utils.insertWithDomOrder = function (eContainer, eChild, eChildBefore) {
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.appendChild(eChild);
	            }
	        }
	    };
	    Utils.insertTemplateWithDomOrder = function (eContainer, htmlTemplate, eChildBefore) {
	        var res;
	        if (eChildBefore) {
	            // if previous element exists, just slot in after the previous element
	            eChildBefore.insertAdjacentHTML('afterend', htmlTemplate);
	            res = eChildBefore.nextSibling;
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.innerHTML = htmlTemplate;
	            }
	            res = eContainer.firstChild;
	        }
	        return res;
	    };
	    Utils.toStringOrNull = function (value) {
	        if (this.exists(value) && value.toString) {
	            return value.toString();
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.formatWidth = function (width) {
	        if (typeof width === "number") {
	            return width + "px";
	        }
	        else {
	            return width;
	        }
	    };
	    Utils.formatNumberTwoDecimalPlacesAndCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return (Math.round(value * 100) / 100).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE,
	    // so we use this method instead
	    Utils.formatNumberCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    Utils.prependDC = function (parent, documentFragment) {
	        if (this.exists(parent.firstChild)) {
	            parent.insertBefore(documentFragment, parent.firstChild);
	        }
	        else {
	            parent.appendChild(documentFragment);
	        }
	    };
	    /**
	     * If icon provided, use this (either a string, or a function callback).
	     * if not, then use the default icon from the theme
	     */
	    Utils.createIcon = function (iconName, gridOptionsWrapper, column) {
	        var iconContents = this.createIconNoSpan(iconName, gridOptionsWrapper, column);
	        if (iconContents.className.indexOf('ag-icon') > -1) {
	            return iconContents;
	        }
	        else {
	            var eResult = document.createElement('span');
	            eResult.appendChild(iconContents);
	            return eResult;
	        }
	    };
	    Utils.createIconNoSpan = function (iconName, gridOptionsWrapper, column) {
	        var userProvidedIcon;
	        // check col for icon first
	        if (column && column.getColDef().icons) {
	            userProvidedIcon = column.getColDef().icons[iconName];
	        }
	        // it not in col, try grid options
	        if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
	            userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
	        }
	        // now if user provided, use it
	        if (userProvidedIcon) {
	            var rendererResult = void 0;
	            if (typeof userProvidedIcon === 'function') {
	                rendererResult = userProvidedIcon();
	            }
	            else if (typeof userProvidedIcon === 'string') {
	                rendererResult = userProvidedIcon;
	            }
	            else {
	                throw 'icon from grid options needs to be a string or a function';
	            }
	            if (typeof rendererResult === 'string') {
	                return this.loadTemplate(rendererResult);
	            }
	            else if (this.isNodeOrElement(rendererResult)) {
	                return rendererResult;
	            }
	            else {
	                throw 'iconRenderer should return back a string or a dom object';
	            }
	        }
	        else {
	            var span = document.createElement('span');
	            var cssClass = this.iconNameClassMap[iconName];
	            if (!cssClass) {
	                throw new Error(iconName + " did not find class");
	            }
	            span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
	            return span;
	        }
	    };
	    Utils.addStylesToElement = function (eElement, styles) {
	        var _this = this;
	        if (!styles) {
	            return;
	        }
	        Object.keys(styles).forEach(function (key) {
	            var keyCamelCase = _this.hyphenToCamelCase(key);
	            eElement.style[keyCamelCase] = styles[key];
	        });
	    };
	    Utils.isHorizontalScrollShowing = function (element) {
	        return element.clientWidth < element.scrollWidth;
	    };
	    Utils.isVerticalScrollShowing = function (element) {
	        return element.clientHeight < element.scrollHeight;
	    };
	    Utils.getScrollbarWidth = function () {
	        var outer = document.createElement("div");
	        outer.style.visibility = "hidden";
	        outer.style.width = "100px";
	        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	        document.body.appendChild(outer);
	        var widthNoScroll = outer.offsetWidth;
	        // force scrollbars
	        outer.style.overflow = "scroll";
	        // add innerdiv
	        var inner = document.createElement("div");
	        inner.style.width = "100%";
	        outer.appendChild(inner);
	        var widthWithScroll = inner.offsetWidth;
	        // remove divs
	        outer.parentNode.removeChild(outer);
	        return widthNoScroll - widthWithScroll;
	    };
	    Utils.isKeyPressed = function (event, keyToCheck) {
	        var pressedKey = event.which || event.keyCode;
	        return pressedKey === keyToCheck;
	    };
	    Utils.setVisible = function (element, visible) {
	        this.addOrRemoveCssClass(element, 'ag-hidden', !visible);
	    };
	    Utils.setHidden = function (element, hidden) {
	        this.addOrRemoveCssClass(element, 'ag-visibility-hidden', hidden);
	    };
	    Utils.isBrowserIE = function () {
	        if (this.isIE === undefined) {
	            this.isIE = false || !!document.documentMode; // At least IE6
	        }
	        return this.isIE;
	    };
	    Utils.isBrowserEdge = function () {
	        if (this.isEdge === undefined) {
	            this.isEdge = !this.isBrowserIE() && !!window.StyleMedia;
	        }
	        return this.isEdge;
	    };
	    Utils.isBrowserSafari = function () {
	        if (this.isSafari === undefined) {
	            var anyWindow = window;
	            // taken from https://github.com/ag-grid/ag-grid/issues/550
	            this.isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf('Constructor') > 0
	                || (function (p) {
	                    return p.toString() === "[object SafariRemoteNotification]";
	                })(!anyWindow.safari || anyWindow.safari.pushNotification);
	        }
	        return this.isSafari;
	    };
	    Utils.isBrowserChrome = function () {
	        if (this.isChrome === undefined) {
	            var anyWindow = window;
	            this.isChrome = !!anyWindow.chrome && !!anyWindow.chrome.webstore;
	        }
	        return this.isChrome;
	    };
	    Utils.isBrowserFirefox = function () {
	        if (this.isFirefox === undefined) {
	            var anyWindow = window;
	            this.isFirefox = typeof anyWindow.InstallTrigger !== 'undefined';
	        }
	        return this.isFirefox;
	    };
	    // srcElement is only available in IE. In all other browsers it is target
	    // http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean
	    Utils.getTarget = function (event) {
	        var eventNoType = event;
	        return eventNoType.target || eventNoType.srcElement;
	    };
	    Utils.isElementInEventPath = function (element, event) {
	        if (!event || !element) {
	            return false;
	        }
	        var path = exports._.getEventPath(event);
	        return path.indexOf(element) >= 0;
	    };
	    Utils.createEventPath = function (event) {
	        var res = [];
	        var pointer = exports._.getTarget(event);
	        while (pointer) {
	            res.push(pointer);
	            pointer = pointer.parentElement;
	        }
	        return res;
	    };
	    // firefox doesn't have event.path set, or any alternative to it, so we hack
	    // it in. this is needed as it's to late to work out the path when the item is
	    // removed from the dom
	    Utils.addAgGridEventPath = function (event) {
	        event.__agGridEventPath = this.getEventPath(event);
	    };
	    Utils.getEventPath = function (event) {
	        // https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js
	        // https://developer.mozilla.org/en-US/docs/Web/API/Event
	        var eventNoType = event;
	        if (event.deepPath) {
	            // IE supports deep path
	            return event.deepPath();
	        }
	        else if (eventNoType.path) {
	            // Chrome supports path
	            return eventNoType.path;
	        }
	        else if (eventNoType.composedPath) {
	            // Firefox supports composePath
	            return eventNoType.composedPath();
	        }
	        else if (eventNoType.__agGridEventPath) {
	            // Firefox supports composePath
	            return eventNoType.__agGridEventPath;
	        }
	        else {
	            // and finally, if none of the above worked,
	            // we create the path ourselves
	            return this.createEventPath(event);
	        }
	    };
	    Utils.forEachSnapshotFirst = function (list, callback) {
	        if (list) {
	            var arrayCopy = list.slice(0);
	            arrayCopy.forEach(callback);
	        }
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyWidth = function () {
	        if (document.body) {
	            return document.body.clientWidth;
	        }
	        if (window.innerHeight) {
	            return window.innerWidth;
	        }
	        if (document.documentElement && document.documentElement.clientWidth) {
	            return document.documentElement.clientWidth;
	        }
	        return -1;
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyHeight = function () {
	        if (document.body) {
	            return document.body.clientHeight;
	        }
	        if (window.innerHeight) {
	            return window.innerHeight;
	        }
	        if (document.documentElement && document.documentElement.clientHeight) {
	            return document.documentElement.clientHeight;
	        }
	        return -1;
	    };
	    Utils.setCheckboxState = function (eCheckbox, state) {
	        if (typeof state === 'boolean') {
	            eCheckbox.checked = state;
	            eCheckbox.indeterminate = false;
	        }
	        else {
	            // isNodeSelected returns back undefined if it's a group and the children
	            // are a mix of selected and unselected
	            eCheckbox.indeterminate = true;
	        }
	    };
	    Utils.traverseNodesWithKey = function (nodes, callback) {
	        var keyParts = [];
	        recursiveSearchNodes(nodes);
	        function recursiveSearchNodes(nodes) {
	            nodes.forEach(function (node) {
	                if (node.group) {
	                    keyParts.push(node.key);
	                    var key = keyParts.join('|');
	                    callback(node, key);
	                    recursiveSearchNodes(node.childrenAfterGroup);
	                    keyParts.pop();
	                }
	            });
	        }
	    };
	    // from https://gist.github.com/youssman/745578062609e8acac9f
	    Utils.camelCaseToHyphen = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/([A-Z])/g, function (g) { return '-' + g[0].toLowerCase(); });
	    };
	    // from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase
	    Utils.hyphenToCamelCase = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
	    };
	    // pas in an object eg: {color: 'black', top: '25px'} and it returns "color: black; top: 25px;" for html
	    Utils.cssStyleObjectToMarkup = function (stylesToUse) {
	        var _this = this;
	        if (!stylesToUse) {
	            return '';
	        }
	        var resParts = [];
	        this.iterateObject(stylesToUse, function (styleKey, styleValue) {
	            var styleKeyDashed = _this.camelCaseToHyphen(styleKey);
	            resParts.push(styleKeyDashed + ": " + styleValue + ";");
	        });
	        return resParts.join(' ');
	    };
	    /**
	     * From http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
	     */
	    Utils.isNumeric = function (value) {
	        if (value === '')
	            return false;
	        return !isNaN(parseFloat(value)) && isFinite(value);
	    };
	    Utils.escape = function (toEscape) {
	        if (toEscape === null || toEscape === undefined || !toEscape.replace) {
	            return toEscape;
	        }
	        return toEscape.replace(reUnescapedHtml, function (chr) { return HTML_ESCAPES[chr]; });
	    };
	    // Taken from here: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
	    /**
	     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
	     * complicated, thus this doc is long and (hopefully) detailed enough to answer
	     * your questions.
	     *
	     * If you need to react to the mouse wheel in a predictable way, this code is
	     * like your bestest friend. * hugs *
	     *
	     * As of today, there are 4 DOM event types you can listen to:
	     *
	     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
	     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
	     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
	     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
	     *
	     * So what to do?  The is the best:
	     *
	     *   normalizeWheel.getEventType();
	     *
	     * In your event callback, use this code to get sane interpretation of the
	     * deltas.  This code will return an object with properties:
	     *
	     *   spinX   -- normalized spin speed (use for zoom) - x plane
	     *   spinY   -- " - y plane
	     *   pixelX  -- normalized distance (to pixels) - x plane
	     *   pixelY  -- " - y plane
	     *
	     * Wheel values are provided by the browser assuming you are using the wheel to
	     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
	     * significantly on different platforms and browsers, forgetting that you can
	     * scroll at different speeds.  Some devices (like trackpads) emit more events
	     * at smaller increments with fine granularity, and some emit massive jumps with
	     * linear speed or acceleration.
	     *
	     * This code does its best to normalize the deltas for you:
	     *
	     *   - spin is trying to normalize how far the wheel was spun (or trackpad
	     *     dragged).  This is super useful for zoom support where you want to
	     *     throw away the chunky scroll steps on the PC and make those equal to
	     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
	     *     resolve a single slow step on a wheel to 1.
	     *
	     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
	     *     get the crazy differences between browsers, but at least it'll be in
	     *     pixels!
	     *
	     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
	     *     should translate to positive value zooming IN, negative zooming OUT.
	     *     This matches the newer 'wheel' event.
	     *
	     * Why are there spinX, spinY (or pixels)?
	     *
	     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
	     *     with a mouse.  It results in side-scrolling in the browser by default.
	     *
	     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
	     *
	     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
	     *     probably is by browsers in conjunction with fancy 3D controllers .. but
	     *     you know.
	     *
	     * Implementation info:
	     *
	     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
	     * average mouse:
	     *
	     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
	     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
	     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
	     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
	     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
	     *
	     * On the trackpad:
	     *
	     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
	     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
	     *
	     * On other/older browsers.. it's more complicated as there can be multiple and
	     * also missing delta values.
	     *
	     * The 'wheel' event is more standard:
	     *
	     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
	     *
	     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
	     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
	     * backward compatibility with older events.  Those other values help us
	     * better normalize spin speed.  Example of what the browsers provide:
	     *
	     *                          | event.wheelDelta | event.detail
	     *        ------------------+------------------+--------------
	     *          Safari v5/OS X  |       -120       |       0
	     *          Safari v5/Win7  |       -120       |       0
	     *         Chrome v17/OS X  |       -120       |       0
	     *         Chrome v17/Win7  |       -120       |       0
	     *                IE9/Win7  |       -120       |   undefined
	     *         Firefox v4/OS X  |     undefined    |       1
	     *         Firefox v4/Win7  |     undefined    |       3
	     *
	     */
	    Utils.normalizeWheel = function (event) {
	        var PIXEL_STEP = 10;
	        var LINE_HEIGHT = 40;
	        var PAGE_HEIGHT = 800;
	        // spinX, spinY
	        var sX = 0;
	        var sY = 0;
	        // pixelX, pixelY
	        var pX = 0;
	        var pY = 0;
	        // Legacy
	        if ('detail' in event) {
	            sY = event.detail;
	        }
	        if ('wheelDelta' in event) {
	            sY = -event.wheelDelta / 120;
	        }
	        if ('wheelDeltaY' in event) {
	            sY = -event.wheelDeltaY / 120;
	        }
	        if ('wheelDeltaX' in event) {
	            sX = -event.wheelDeltaX / 120;
	        }
	        // side scrolling on FF with DOMMouseScroll
	        if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
	            sX = sY;
	            sY = 0;
	        }
	        pX = sX * PIXEL_STEP;
	        pY = sY * PIXEL_STEP;
	        if ('deltaY' in event) {
	            pY = event.deltaY;
	        }
	        if ('deltaX' in event) {
	            pX = event.deltaX;
	        }
	        if ((pX || pY) && event.deltaMode) {
	            if (event.deltaMode == 1) {
	                pX *= LINE_HEIGHT;
	                pY *= LINE_HEIGHT;
	            }
	            else {
	                pX *= PAGE_HEIGHT;
	                pY *= PAGE_HEIGHT;
	            }
	        }
	        // Fall-back if spin cannot be determined
	        if (pX && !sX) {
	            sX = (pX < 1) ? -1 : 1;
	        }
	        if (pY && !sY) {
	            sY = (pY < 1) ? -1 : 1;
	        }
	        return {
	            spinX: sX,
	            spinY: sY,
	            pixelX: pX,
	            pixelY: pY
	        };
	    };
	    /**
	     * https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
	     */
	    Utils.debounce = function (func, wait, immediate) {
	        if (immediate === void 0) { immediate = false; }
	        // 'private' variable for instance
	        // The returned function will be able to reference this due to closure.
	        // Each call to the returned function will share this common timer.
	        var timeout;
	        // Calling debounce returns a new anonymous function
	        return function () {
	            // reference the context and args for the setTimeout function
	            var context = this, args = arguments;
	            // Should the function be called now? If immediate is true
	            //   and not already in a timeout then the answer is: Yes
	            var callNow = immediate && !timeout;
	            // This is the basic debounce behaviour where you can call this
	            //   function several times, but it will only execute once
	            //   [before or after imposing a delay].
	            //   Each time the returned function is called, the timer starts over.
	            clearTimeout(timeout);
	            // Set the new timeout
	            timeout = setTimeout(function () {
	                // Inside the timeout function, clear the timeout variable
	                // which will let the next execution run when in 'immediate' mode
	                timeout = null;
	                // Check if the function already ran with the immediate flag
	                if (!immediate) {
	                    // Call the original function with apply
	                    // apply lets you define the 'this' object as well as the arguments
	                    //    (both captured before setTimeout)
	                    func.apply(context, args);
	                }
	            }, wait);
	            // Immediate mode and no wait timer? Execute the function..
	            if (callNow)
	                func.apply(context, args);
	        };
	    };
	    ;
	    Utils.executeInAWhile = function (funcs) {
	        this.executeAfter(funcs, 400);
	    };
	    Utils.executeNextVMTurn = function (funcs) {
	        this.executeAfter(funcs, 0);
	    };
	    Utils.executeAfter = function (funcs, millis) {
	        if (funcs.length > 0) {
	            setTimeout(function () {
	                funcs.forEach(function (func) { return func(); });
	            }, millis);
	        }
	    };
	    Utils.referenceCompare = function (left, right) {
	        if (left == null && right == null)
	            return true;
	        if (left == null && right)
	            return false;
	        if (left && right == null)
	            return false;
	        return left === right;
	    };
	    Utils.get = function (source, expression, defaultValue) {
	        if (source == null)
	            return defaultValue;
	        if (expression.indexOf('.') > -1) {
	            var fields = expression.split('.');
	            var thisKey = fields[0];
	            var nextValue = source[thisKey];
	            if (nextValue != null) {
	                return Utils.get(nextValue, fields.slice(1, fields.length).join('.'), defaultValue);
	            }
	            else {
	                return defaultValue;
	            }
	        }
	        else {
	            var nextValue = source[expression];
	            return nextValue != null ? nextValue : defaultValue;
	        }
	    };
	    Utils.addSafePassiveEventListener = function (eElement, event, listener) {
	        eElement.addEventListener(event, listener, (Utils.passiveEvents.indexOf(event) > -1 ? { passive: true } : undefined));
	    };
	    Utils.camelCaseToHumanText = function (camelCase) {
	        if (camelCase == null)
	            return null;
	        // Who needs to learn how to code when you have stack overflow!
	        // from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression
	        var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
	        var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');
	        return words.map(function (word) { return word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : ''); }).join(' ');
	    };
	    // gets called by: a) InMemoryRowNodeManager and b) GroupStage to do sorting.
	    // when in InMemoryRowNodeManager we always have indexes (as this sorts the items the
	    // user provided) but when in GroupStage, the nodes can contain filler nodes that
	    // don't have order id's
	    Utils.sortRowNodesByOrder = function (rowNodes, rowNodeOrder) {
	        if (!rowNodes) {
	            return;
	        }
	        rowNodes.sort(function (nodeA, nodeB) {
	            var positionA = rowNodeOrder[nodeA.id];
	            var positionB = rowNodeOrder[nodeB.id];
	            var aHasIndex = positionA !== undefined;
	            var bHasIndex = positionB !== undefined;
	            var bothNodesAreUserNodes = aHasIndex && bHasIndex;
	            var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
	            if (bothNodesAreUserNodes) {
	                // when comparing two nodes the user has provided, they always
	                // have indexes
	                return positionA - positionB;
	            }
	            else if (bothNodesAreFillerNodes) {
	                // when comparing two filler nodes, we have no index to compare them
	                // against, however we want this sorting to be deterministic, so that
	                // the rows don't jump around as the user does delta updates. so we
	                // want the same sort result. so we use the id - which doesn't make sense
	                // from a sorting point of view, but does give consistent behaviour between
	                // calls. otherwise groups jump around as delta updates are done.
	                return nodeA.id > nodeB.id ? 1 : -1;
	            }
	            else if (aHasIndex) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        });
	    };
	    Utils.PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!"£$%^&*()_+-=[];\'#,./\|<>?:@~{}';
	    Utils.doOnceFlags = {};
	    // static prepend(parent: HTMLElement, child: HTMLElement): void {
	    //     if (this.exists(parent.firstChild)) {
	    //         parent.insertBefore(child, parent.firstChild);
	    //     } else {
	    //         parent.appendChild(child);
	    //     }
	    // }
	    Utils.iconNameClassMap = {
	        'columnMovePin': 'pin',
	        'columnMoveAdd': 'plus',
	        'columnMoveHide': 'eye-slash',
	        'columnMoveMove': 'arrows',
	        'columnMoveLeft': 'left',
	        'columnMoveRight': 'right',
	        'columnMoveGroup': 'group',
	        'columnMoveValue': 'aggregation',
	        'columnMovePivot': 'pivot',
	        'dropNotAllowed': 'not-allowed',
	        'groupContracted': 'expanded',
	        'groupExpanded': 'contracted',
	        'checkboxChecked': 'checkbox-checked',
	        'checkboxUnchecked': 'checkbox-unchecked',
	        'checkboxIndeterminate': 'checkbox-indeterminate',
	        'checkboxCheckedReadOnly': 'checkbox-checked-readonly',
	        'checkboxUncheckedReadOnly': 'checkbox-unchecked-readonly',
	        'checkboxIndeterminateReadOnly': 'checkbox-indeterminate-readonly',
	        'groupLoading': 'loading',
	        'menu': 'menu',
	        'filter': 'filter',
	        'columns': 'columns',
	        'menuPin': 'pin',
	        'menuValue': 'aggregation',
	        'menuAddRowGroup': 'group',
	        'menuRemoveRowGroup': 'group',
	        'clipboardCopy': 'copy',
	        'clipboardCut': 'cut',
	        'clipboardPaste': 'paste',
	        'pivotPanel': 'pivot',
	        'rowGroupPanel': 'group',
	        'valuePanel': 'aggregation',
	        'columnGroupOpened': 'expanded',
	        'columnGroupClosed': 'contracted',
	        'columnSelectClosed': 'tree-closed',
	        'columnSelectOpen': 'tree-open',
	        // from deprecated header, remove at some point
	        'sortAscending': 'asc',
	        'sortDescending': 'desc',
	        'sortUnSort': 'none'
	    };
	    Utils.passiveEvents = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];
	    return Utils;
	}());
	exports.Utils = Utils;
	var NumberSequence = (function () {
	    function NumberSequence(initValue, step) {
	        if (initValue === void 0) { initValue = 0; }
	        if (step === void 0) { step = 1; }
	        this.nextValue = initValue;
	        this.step = step;
	    }
	    NumberSequence.prototype.next = function () {
	        var valToReturn = this.nextValue;
	        this.nextValue += this.step;
	        return valToReturn;
	    };
	    NumberSequence.prototype.peek = function () {
	        return this.nextValue;
	    };
	    NumberSequence.prototype.skip = function (count) {
	        this.nextValue += count;
	    };
	    return NumberSequence;
	}());
	exports.NumberSequence = NumberSequence;
	exports._ = Utils;
	var PromiseStatus;
	(function (PromiseStatus) {
	    PromiseStatus[PromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
	    PromiseStatus[PromiseStatus["RESOLVED"] = 1] = "RESOLVED";
	})(PromiseStatus = exports.PromiseStatus || (exports.PromiseStatus = {}));
	var Promise = (function () {
	    function Promise(callback) {
	        this.status = PromiseStatus.IN_PROGRESS;
	        this.resolution = null;
	        this.listOfWaiters = [];
	        callback(this.onDone.bind(this), this.onReject.bind(this));
	    }
	    Promise.all = function (toCombine) {
	        return new Promise(function (resolve) {
	            var combinedValues = [];
	            var remainingToResolve = toCombine.length;
	            toCombine.forEach(function (source, index) {
	                source.then(function (sourceResolved) {
	                    remainingToResolve--;
	                    combinedValues[index] = sourceResolved;
	                    if (remainingToResolve == 0) {
	                        resolve(combinedValues);
	                    }
	                });
	                combinedValues.push(null);
	            });
	        });
	    };
	    Promise.resolve = function (value) {
	        return new Promise(function (resolve) { return resolve(value); });
	    };
	    Promise.external = function () {
	        var capture;
	        var promise = new Promise(function (resolve) {
	            capture = resolve;
	        });
	        return {
	            promise: promise,
	            resolve: function (value) {
	                capture(value);
	            }
	        };
	    };
	    Promise.prototype.then = function (func) {
	        if (this.status === PromiseStatus.IN_PROGRESS) {
	            this.listOfWaiters.push(func);
	        }
	        else {
	            func(this.resolution);
	        }
	    };
	    Promise.prototype.map = function (adapter) {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this.then(function (unmapped) {
	                resolve(adapter(unmapped));
	            });
	        });
	    };
	    Promise.prototype.resolveNow = function (ifNotResolvedValue, ifResolved) {
	        if (this.status == PromiseStatus.IN_PROGRESS)
	            return ifNotResolvedValue;
	        return ifResolved(this.resolution);
	    };
	    Promise.prototype.onDone = function (value) {
	        this.status = PromiseStatus.RESOLVED;
	        this.resolution = value;
	        this.listOfWaiters.forEach(function (waiter) { return waiter(value); });
	    };
	    Promise.prototype.onReject = function (params) {
	        console.warn('TBI');
	    };
	    return Promise;
	}());
	exports.Promise = Promise;


/***/ }),
/* 289 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Constants = (function () {
	    function Constants() {
	    }
	    Constants.STEP_EVERYTHING = 0;
	    Constants.STEP_FILTER = 1;
	    Constants.STEP_SORT = 2;
	    Constants.STEP_MAP = 3;
	    Constants.STEP_AGGREGATE = 4;
	    Constants.STEP_PIVOT = 5;
	    Constants.ROW_BUFFER_SIZE = 10;
	    Constants.LAYOUT_INTERVAL = 500;
	    Constants.EXPORT_TYPE_DRAG_COPY = 'dragCopy';
	    Constants.EXPORT_TYPE_CLIPBOARD = 'clipboard';
	    Constants.EXPORT_TYPE_EXCEL = 'excel';
	    Constants.EXPORT_TYPE_CSV = 'csv';
	    Constants.KEY_BACKSPACE = 8;
	    Constants.KEY_TAB = 9;
	    Constants.KEY_ENTER = 13;
	    Constants.KEY_SHIFT = 16;
	    Constants.KEY_ESCAPE = 27;
	    Constants.KEY_SPACE = 32;
	    Constants.KEY_LEFT = 37;
	    Constants.KEY_UP = 38;
	    Constants.KEY_RIGHT = 39;
	    Constants.KEY_DOWN = 40;
	    Constants.KEY_DELETE = 46;
	    Constants.KEY_A = 65;
	    Constants.KEY_C = 67;
	    Constants.KEY_V = 86;
	    Constants.KEY_D = 68;
	    Constants.KEY_F2 = 113;
	    Constants.KEY_PAGE_UP = 33;
	    Constants.KEY_PAGE_DOWN = 34;
	    Constants.KEY_PAGE_HOME = 36;
	    Constants.KEY_PAGE_END = 35;
	    Constants.ROW_MODEL_TYPE_INFINITE = 'infinite';
	    Constants.ROW_MODEL_TYPE_VIEWPORT = 'viewport';
	    Constants.ROW_MODEL_TYPE_IN_MEMORY = 'inMemory';
	    Constants.ROW_MODEL_TYPE_ENTERPRISE = 'enterprise';
	    Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL = 'normal';
	    Constants.ALWAYS = 'always';
	    Constants.ONLY_WHEN_GROUPING = 'onlyWhenGrouping';
	    Constants.PINNED_TOP = 'top';
	    Constants.PINNED_BOTTOM = 'bottom';
	    return Constants;
	}());
	exports.Constants = Constants;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var events_1 = __webpack_require__(291);
	var propertyKeys_1 = __webpack_require__(293);
	var utils_1 = __webpack_require__(288);
	var ComponentUtil = (function () {
	    function ComponentUtil() {
	    }
	    ComponentUtil.getEventCallbacks = function () {
	        if (!ComponentUtil.EVENT_CALLBACKS) {
	            ComponentUtil.EVENT_CALLBACKS = [];
	            ComponentUtil.EVENTS.forEach(function (eventName) {
	                ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));
	            });
	        }
	        return ComponentUtil.EVENT_CALLBACKS;
	    };
	    ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component) {
	        checkForDeprecated(component);
	        // create empty grid options if none were passed
	        if (typeof gridOptions !== 'object') {
	            gridOptions = {};
	        }
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // add in all the simple properties
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.FUNCTION_PROPERTIES)
	            .forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = component[key];
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (typeof component[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toNumber(component[key]);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (typeof component[funcName] !== 'undefined') {
	                pGridOptions[funcName] = component[funcName];
	            }
	        });
	        return gridOptions;
	    };
	    ComponentUtil.getCallbackForEvent = function (eventName) {
	        if (!eventName || eventName.length < 2) {
	            return eventName;
	        }
	        else {
	            return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
	        }
	    };
	    // change this method, the caller should know if it's initialised or not, plus 'initialised'
	    // is not relevant for all component types. maybe pass in the api and columnApi instead???
	    ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {
	        //if (!component._initialised || !changes) { return; }
	        if (!changes) {
	            return;
	        }
	        checkForDeprecated(changes);
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // check if any change for the simple types, and if so, then just copy in the new value
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = changes[key].currentValue;
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (changes[funcName]) {
	                pGridOptions[funcName] = changes[funcName].currentValue;
	            }
	        });
	        if (changes.showToolPanel) {
	            api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));
	        }
	        if (changes.quickFilterText) {
	            api.setQuickFilter(changes.quickFilterText.currentValue);
	        }
	        if (changes.rowData) {
	            api.setRowData(changes.rowData.currentValue);
	        }
	        if (changes.pinnedTopRowData) {
	            api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);
	        }
	        if (changes.pinnedBottomRowData) {
	            api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);
	        }
	        if (changes.columnDefs) {
	            api.setColumnDefs(changes.columnDefs.currentValue);
	        }
	        if (changes.datasource) {
	            api.setDatasource(changes.datasource.currentValue);
	        }
	        if (changes.headerHeight) {
	            api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));
	        }
	        if (changes.paginationPageSize) {
	            api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));
	        }
	        if (changes.pivotMode) {
	            columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));
	        }
	        if (changes.groupRemoveSingleChildren) {
	            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));
	        }
	        // copy changes into an event for dispatch
	        var event = {
	            type: events_1.Events.EVENT_COMPONENT_STATE_CHANGED,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        utils_1.Utils.iterateObject(changes, function (key, value) {
	            event[key] = value;
	        });
	        api.dispatchEvent(event);
	    };
	    ComponentUtil.toBoolean = function (value) {
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // for boolean, compare to empty String to allow attributes appearing with
	            // not value to be treated as 'true'
	            return value.toUpperCase() === 'TRUE' || value == '';
	        }
	        else {
	            return false;
	        }
	    };
	    ComponentUtil.toNumber = function (value) {
	        if (typeof value === 'number') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            return Number(value);
	        }
	        else {
	            return undefined;
	        }
	    };
	    // all the events are populated in here AFTER this class (at the bottom of the file).
	    ComponentUtil.EVENTS = [];
	    ComponentUtil.STRING_PROPERTIES = propertyKeys_1.PropertyKeys.STRING_PROPERTIES;
	    ComponentUtil.OBJECT_PROPERTIES = propertyKeys_1.PropertyKeys.OBJECT_PROPERTIES;
	    ComponentUtil.ARRAY_PROPERTIES = propertyKeys_1.PropertyKeys.ARRAY_PROPERTIES;
	    ComponentUtil.NUMBER_PROPERTIES = propertyKeys_1.PropertyKeys.NUMBER_PROPERTIES;
	    ComponentUtil.BOOLEAN_PROPERTIES = propertyKeys_1.PropertyKeys.BOOLEAN_PROPERTIES;
	    ComponentUtil.FUNCTION_PROPERTIES = propertyKeys_1.PropertyKeys.FUNCTION_PROPERTIES;
	    ComponentUtil.ALL_PROPERTIES = propertyKeys_1.PropertyKeys.ALL_PROPERTIES;
	    return ComponentUtil;
	}());
	exports.ComponentUtil = ComponentUtil;
	utils_1.Utils.iterateObject(events_1.Events, function (key, value) {
	    ComponentUtil.EVENTS.push(value);
	});
	function checkForDeprecated(changes) {
	    if (changes.rowDeselected || changes.onRowDeselected) {
	        console.warn('ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.');
	    }
	}


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventKeys_1 = __webpack_require__(292);
	exports.Events = eventKeys_1.Events;


/***/ }),
/* 292 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Events = (function () {
	    function Events() {
	    }
	    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/
	    Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
	    /** User has set in new columns. */
	    Events.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';
	    /** The pivot mode flag was changed */
	    Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';
	    /** A row group column was added, removed or order changed. */
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    /** A pivot column was added, removed or order changed. */
	    Events.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';
	    /** The list of grid columns has changed. */
	    Events.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';
	    /** A value column was added, removed or agg function was changed. */
	    Events.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';
	    /** A column was moved */
	    Events.EVENT_COLUMN_MOVED = 'columnMoved';
	    /** One or more columns was shown / hidden */
	    Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
	    /** One or more columns was pinned / unpinned*/
	    Events.EVENT_COLUMN_PINNED = 'columnPinned';
	    /** A column group was opened / closed */
	    Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
	    /** One or more columns was resized. If just one, the column in the event is set. */
	    Events.EVENT_COLUMN_RESIZED = 'columnResized';
	    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */
	    Events.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';
	    /** The list of virtual columns has changed, results from viewport changing */
	    Events.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';
	    /** A row group was opened / closed */
	    Events.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';
	    /** The client has set new data into the grid */
	    Events.EVENT_ROW_DATA_CHANGED = 'rowDataChanged';
	    /** The client has updated data for the grid */
	    Events.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';
	    /** The client has set new floating data into the grid */
	    Events.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';
	    /** Range selection has changed */
	    Events.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';
	    /** Model was updated - grid updates the drawn rows when this happens */
	    Events.EVENT_MODEL_UPDATED = 'modelUpdated';
	    Events.EVENT_CELL_CLICKED = 'cellClicked';
	    Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
	    Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
	    Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
	    Events.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';
	    Events.EVENT_CELL_FOCUSED = 'cellFocused';
	    Events.EVENT_ROW_SELECTED = 'rowSelected';
	    Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
	    Events.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';
	    Events.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';
	    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */
	    Events.EVENT_FILTER_CHANGED = 'filterChanged';
	    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */
	    Events.EVENT_FILTER_MODIFIED = 'filterModified';
	    Events.EVENT_SORT_CHANGED = 'sortChanged';
	    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */
	    Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
	    Events.EVENT_ROW_CLICKED = 'rowClicked';
	    Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
	    /** Gets called once after the grid has finished initialising. */
	    Events.EVENT_GRID_READY = 'gridReady';
	    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
	     * changed, so always filling the space it was given. */
	    Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
	    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */
	    Events.EVENT_VIEWPORT_CHANGED = 'viewportChanged';
	    /** A column drag has started, either resizing a column or moving a column. */
	    Events.EVENT_DRAG_STARTED = 'dragStarted';
	    /** A column drag has stopped */
	    Events.EVENT_DRAG_STOPPED = 'dragStopped';
	    Events.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';
	    Events.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';
	    Events.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';
	    Events.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';
	    /** Main body of grid has scrolled, either horizontally or vertically */
	    Events.EVENT_BODY_SCROLL = 'bodyScroll';
	    /** The displayed page for pagination has changed. For example the data was filtered or sorted,
	     * or the user has moved to a different page. */
	    Events.EVENT_PAGINATION_CHANGED = 'paginationChanged';
	    /** Only used by React, Angular 2+, Web Components, Aurelia and VueJS ag-Grid components
	     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
	     * to bound properties, this event fires after the grid has finished processing the change. */
	    Events.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';
	    /** All items from here down are used internally by the grid, not intended for external use. */
	    // not documented, either experimental, or we just don't want users using an ddepending on them
	    Events.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';
	    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';
	    Events.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';
	    Events.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';
	    Events.EVENT_FLASH_CELLS = 'flashCells';
	    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
	    // to design these better around server side functions and then release to general public when fully working with
	    // all the row models.
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';
	    Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';
	    Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';
	    Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';
	    return Events;
	}());
	exports.Events = Events;


/***/ }),
/* 293 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var PropertyKeys = (function () {
	    function PropertyKeys() {
	    }
	    PropertyKeys.STRING_PROPERTIES = [
	        'sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate',
	        'overlayNoRowsTemplate', 'headerCellTemplate', 'quickFilterText', 'rowModelType',
	        'editType', 'domLayout', 'clipboardDeliminator', 'rowGroupPanelShow'
	    ];
	    PropertyKeys.OBJECT_PROPERTIES = [
	        'components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'groupColumnDef', 'localeText',
	        'icons', 'datasource', 'enterpriseDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs',
	        'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'columnTypes',
	        'rowClassRules', 'detailGridOptions'
	        //,'cellRenderers','cellEditors'
	    ];
	    PropertyKeys.ARRAY_PROPERTIES = [
	        'slaveGrids', 'alignedGrids', 'rowData',
	        'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData'
	        // deprecated
	    ];
	    PropertyKeys.NUMBER_PROPERTIES = [
	        'rowHeight', 'detailRowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight',
	        'floatingFiltersHeight', 'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded',
	        'minColWidth', 'maxColWidth', 'viewportRowModelPageSize', 'viewportRowModelBufferSize',
	        'layoutInterval', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests',
	        'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount',
	        'scrollbarWidth', 'paginationStartPage', 'infiniteBlockSize'
	    ];
	    PropertyKeys.BOOLEAN_PROPERTIES = [
	        'toolPanelSuppressRowGroups', 'toolPanelSuppressValues', 'toolPanelSuppressPivots', 'toolPanelSuppressPivotMode',
	        'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'debug',
	        'enableColResize', 'enableCellExpressions', 'enableSorting', 'enableServerSideSorting',
	        'enableFilter', 'enableServerSideFilter', 'angularCompileRows', 'angularCompileFilters',
	        'angularCompileHeaders', 'groupSuppressAutoColumn', 'groupSelectsChildren',
	        'groupIncludeFooter', 'groupUseEntireRow', 'groupSuppressRow', 'groupSuppressBlankHeader', 'forPrint',
	        'suppressMenuHide', 'rowDeselection', 'unSortIcon', 'suppressMultiSort',
	        'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize',
	        'suppressParentsInRowNodes', 'showToolPanel', 'suppressColumnMoveAnimation', 'suppressMovableColumns',
	        'suppressFieldDotNotation', 'enableRangeSelection',
	        'pivotPanelShow', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey',
	        'suppressContextMenu', 'suppressMenuFilterPanel', 'suppressMenuMainPanel', 'suppressMenuColumnPanel',
	        'enableStatusBar', 'alwaysShowStatusBar', 'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns',
	        'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel', 'suppressUseColIdForGroups',
	        'suppressCopyRowsToClipboard', 'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel',
	        'suppressFocusAfterRefresh', 'functionsPassive', 'functionsReadOnly',
	        'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'groupRemoveLowestSingleChildren',
	        'enableRtl', 'suppressClickEdit',
	        'enableGroupEdit', 'embedFullWidthRows', 'suppressTabbing', 'suppressPaginationPanel', 'floatingFilter',
	        'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination', 'stopEditingWhenGridLosesFocus',
	        'paginationAutoPageSize', 'suppressScrollOnNewData', 'purgeClosedRowNodes', 'cacheQuickFilter',
	        'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'pivotTotals', 'suppressChangeDetection',
	        'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame',
	        'suppressExcelExport', 'suppressCsvExport', 'treeData', 'masterDetail'
	    ];
	    PropertyKeys.FUNCTION_PROPERTIES = ['headerCellRenderer', 'localeTextFunc', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework',
	        'dateComponent', 'dateComponentFramework', 'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent',
	        'getRowHeight', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle', 'getRowClassRules', 'getHeaderCellTemplate',
	        'traverseNode', 'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard',
	        'getNodeChildDetails', 'groupRowAggNodes', 'getRowNodeId', 'isFullWidthCell', 'fullWidthCellRenderer',
	        'fullWidthCellRendererFramework', 'doesDataFlower', 'processSecondaryColDef', 'processSecondaryColGroupDef',
	        'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextCell', 'tabToNextCell', 'getDetailRowData',
	        'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount', 'getDataPath'];
	    PropertyKeys.ALL_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES
	        .concat(PropertyKeys.OBJECT_PROPERTIES)
	        .concat(PropertyKeys.STRING_PROPERTIES)
	        .concat(PropertyKeys.NUMBER_PROPERTIES)
	        .concat(PropertyKeys.FUNCTION_PROPERTIES)
	        .concat(PropertyKeys.BOOLEAN_PROPERTIES);
	    return PropertyKeys;
	}());
	exports.PropertyKeys = PropertyKeys;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var csvCreator_1 = __webpack_require__(295);
	var rowRenderer_1 = __webpack_require__(305);
	var headerRenderer_1 = __webpack_require__(371);
	var filterManager_1 = __webpack_require__(334);
	var columnController_1 = __webpack_require__(297);
	var selectionController_1 = __webpack_require__(309);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var gridPanel_1 = __webpack_require__(306);
	var valueService_1 = __webpack_require__(313);
	var eventService_1 = __webpack_require__(285);
	var constants_1 = __webpack_require__(289);
	var context_1 = __webpack_require__(287);
	var gridCore_1 = __webpack_require__(333);
	var sortController_1 = __webpack_require__(344);
	var focusedCellController_1 = __webpack_require__(320);
	var gridCell_1 = __webpack_require__(315);
	var utils_1 = __webpack_require__(288);
	var cellRendererFactory_1 = __webpack_require__(353);
	var cellEditorFactory_1 = __webpack_require__(352);
	var paginationProxy_1 = __webpack_require__(323);
	var immutableService_1 = __webpack_require__(390);
	var valueCache_1 = __webpack_require__(314);
	var alignedGridsService_1 = __webpack_require__(325);
	var pinnedRowModel_1 = __webpack_require__(326);
	var GridApi = (function () {
	    function GridApi() {
	        this.detailGridInfoMap = {};
	        /*
	        Taking these out, as we want to reconsider how we register components
	        
	        public addCellRenderer(key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc): void {
	            this.cellRendererFactory.addCellRenderer(key, cellRenderer);
	        }
	        
	        public addCellEditor(key: string, cellEditor: {new(): ICellEditor}): void {
	            this.cellEditorFactory.addCellEditor(key, cellEditor);
	        }*/
	    }
	    GridApi.prototype.init = function () {
	        switch (this.rowModel.getType()) {
	            case constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY:
	                this.inMemoryRowModel = this.rowModel;
	                break;
	            case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:
	                this.infinitePageRowModel = this.rowModel;
	                break;
	            case constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE:
	                this.enterpriseRowModel = this.rowModel;
	                break;
	        }
	    };
	    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
	    GridApi.prototype.__getAlignedGridService = function () {
	        return this.alignedGridsService;
	    };
	    GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {
	        this.detailGridInfoMap[id] = gridInfo;
	    };
	    GridApi.prototype.removeDetailGridInfo = function (id) {
	        this.detailGridInfoMap[id] = undefined;
	    };
	    GridApi.prototype.getDetailGridInfo = function (id) {
	        return this.detailGridInfoMap[id];
	    };
	    GridApi.prototype.forEachDetailGridInfo = function (callback) {
	        var index = 0;
	        utils_1.Utils.iterateObject(this.detailGridInfoMap, function (id, gridInfo) {
	            // check for undefined, as old references will still be lying around
	            if (utils_1.Utils.exists(gridInfo)) {
	                callback(gridInfo, index);
	                index++;
	            }
	        });
	    };
	    GridApi.prototype.getDataAsCsv = function (params) {
	        return this.csvCreator.getDataAsCsv(params);
	    };
	    GridApi.prototype.exportDataAsCsv = function (params) {
	        this.csvCreator.exportDataAsCsv(params);
	    };
	    GridApi.prototype.getDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        return this.excelCreator.getDataAsExcelXml(params);
	    };
	    GridApi.prototype.exportDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        this.excelCreator.exportDataAsExcel(params);
	    };
	    GridApi.prototype.setEnterpriseDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelEnterprise()) {
	            // should really have an IEnterpriseRowModel interface, so we are not casting to any
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE + "'");
	        }
	    };
	    GridApi.prototype.setDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_INFINITE + "'");
	        }
	    };
	    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {
	        if (this.gridOptionsWrapper.isRowModelViewport()) {
	            // this is bad coding, because it's using an interface that's exposed in the enterprise.
	            // really we should create an interface in the core for viewportDatasource and let
	            // the enterprise implement it, rather than casting to 'any' here
	            this.rowModel.setViewportDatasource(viewportDatasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
	        }
	    };
	    GridApi.prototype.setRowData = function (rowData) {
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {
	                var _a = this.immutableService.createTransactionForRowData(rowData), transaction = _a[0], orderIdMap = _a[1];
	                this.inMemoryRowModel.updateRowData(transaction, orderIdMap);
	            }
	            else {
	                this.selectionController.reset();
	                this.inMemoryRowModel.setRowData(rowData);
	            }
	        }
	        else {
	            console.log('cannot call setRowData unless using normal row model');
	        }
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingTopRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');
	        this.setPinnedTopRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingBottomRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');
	        this.setPinnedBottomRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');
	        return this.getPinnedTopRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');
	        return this.getPinnedBottomRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');
	        return this.getPinnedTopRow(index);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');
	        return this.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setPinnedTopRowData = function (rows) {
	        this.pinnedRowModel.setPinnedTopRowData(rows);
	    };
	    GridApi.prototype.setPinnedBottomRowData = function (rows) {
	        this.pinnedRowModel.setPinnedBottomRowData(rows);
	    };
	    GridApi.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedRowModel.getPinnedTopRowCount();
	    };
	    GridApi.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedRowModel.getPinnedBottomRowCount();
	    };
	    GridApi.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedRowModel.getPinnedTopRow(index);
	    };
	    GridApi.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedRowModel.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setColumnDefs = function (colDefs) {
	        this.columnController.setColumnDefs(colDefs);
	    };
	    GridApi.prototype.expireValueCache = function () {
	        this.valueCache.expire();
	    };
	    GridApi.prototype.getVerticalPixelRange = function () {
	        return this.gridPanel.getVerticalPixelRange();
	    };
	    GridApi.prototype.refreshToolPanel = function () {
	        if (this.toolPanel) {
	            this.toolPanel.refresh();
	        }
	    };
	    GridApi.prototype.refreshCells = function (params) {
	        if (params === void 0) { params = {}; }
	        if (Array.isArray(params)) {
	            // the old version of refreshCells() took an array of rowNodes for the first argument
	            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');
	            return;
	        }
	        this.rowRenderer.refreshCells(params);
	    };
	    GridApi.prototype.redrawRows = function (params) {
	        if (params === void 0) { params = {}; }
	        if (params && params.rowNodes) {
	            this.rowRenderer.redrawRows(params.rowNodes);
	        }
	        else {
	            this.rowRenderer.redrawAfterModelUpdate();
	        }
	    };
	    GridApi.prototype.timeFullRedraw = function (count) {
	        if (count === void 0) { count = 1; }
	        var iterationCount = 0;
	        var totalProcessing = 0;
	        var totalReflow = 0;
	        var that = this;
	        doOneIteration();
	        function doOneIteration() {
	            var start = (new Date()).getTime();
	            that.rowRenderer.redrawAfterModelUpdate();
	            var endProcessing = (new Date()).getTime();
	            setTimeout(function () {
	                var endReflow = (new Date()).getTime();
	                var durationProcessing = endProcessing - start;
	                var durationReflow = endReflow - endProcessing;
	                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');
	                iterationCount++;
	                totalProcessing += durationProcessing;
	                totalReflow += durationReflow;
	                if (iterationCount < count) {
	                    // wait for 1s between tests
	                    setTimeout(doOneIteration, 1000);
	                }
	                else {
	                    finish();
	                }
	            }, 0);
	        }
	        function finish() {
	            console.log('tests complete. iteration count = ' + iterationCount);
	            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');
	            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');
	        }
	    };
	    // *** deprecated
	    GridApi.prototype.refreshView = function () {
	        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call redrawRows() instead');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.refreshRows = function (rowNodes) {
	        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');
	        this.refreshCells({ rowNodes: rowNodes });
	    };
	    // *** deprecated
	    GridApi.prototype.rowDataChanged = function (rows) {
	        console.log('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.softRefreshView = function () {
	        console.warn('ag-Grid: since v11.1, softRefreshView() is deprecated, call refreshCells(params) instead.');
	        this.refreshCells({ volatile: true });
	    };
	    // *** deprecated
	    GridApi.prototype.refreshGroupRows = function () {
	        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +
	            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +
	            'not be necessary to only refresh the group rows.');
	        this.refreshCells();
	    };
	    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {
	        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);
	    };
	    GridApi.prototype.refreshHeader = function () {
	        this.headerRenderer.refreshHeader();
	    };
	    GridApi.prototype.isAnyFilterPresent = function () {
	        return this.filterManager.isAnyFilterPresent();
	    };
	    GridApi.prototype.isAdvancedFilterPresent = function () {
	        return this.filterManager.isAdvancedFilterPresent();
	    };
	    GridApi.prototype.isQuickFilterPresent = function () {
	        return this.filterManager.isQuickFilterPresent();
	    };
	    GridApi.prototype.getModel = function () {
	        return this.rowModel;
	    };
	    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');
	        }
	        if (utils_1.Utils.exists(deprecated_refreshFromIndex)) {
	            console.log('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is not longer used, the grid will refresh all rows');
	        }
	        // we don't really want the user calling this if one one rowNode was expanded, instead they should be
	        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
	        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
	        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.
	        this.inMemoryRowModel.refreshModel({ step: constants_1.Constants.STEP_MAP });
	    };
	    GridApi.prototype.refreshInMemoryRowModel = function (step) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call refreshInMemoryRowModel unless using normal row model');
	        }
	        var paramsStep = constants_1.Constants.STEP_EVERYTHING;
	        var stepsMapped = {
	            group: constants_1.Constants.STEP_EVERYTHING,
	            filter: constants_1.Constants.STEP_FILTER,
	            map: constants_1.Constants.STEP_MAP,
	            aggregate: constants_1.Constants.STEP_AGGREGATE,
	            sort: constants_1.Constants.STEP_SORT,
	            pivot: constants_1.Constants.STEP_PIVOT
	        };
	        if (utils_1.Utils.exists(step)) {
	            paramsStep = stepsMapped[step];
	        }
	        if (utils_1.Utils.missing(paramsStep)) {
	            console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(', '));
	            return;
	        }
	        var modelParams = {
	            step: paramsStep,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        };
	        this.inMemoryRowModel.refreshModel(modelParams);
	    };
	    GridApi.prototype.getRowNode = function (id) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call getRowNode unless using normal row model');
	            return;
	        }
	        return this.inMemoryRowModel.getRowNode(id);
	    };
	    GridApi.prototype.expandAll = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call expandAll unless using normal row model');
	            return;
	        }
	        this.inMemoryRowModel.expandOrCollapseAll(true);
	    };
	    GridApi.prototype.collapseAll = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');
	            return;
	        }
	        this.inMemoryRowModel.expandOrCollapseAll(false);
	    };
	    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {
	        if (typeof eventName !== 'string') {
	            console.log('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');
	        }
	        this.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        if (eventName === 'virtualRowSelected') {
	            console.log('ag-Grid: event virtualRowSelected is deprecated, to register for individual row ' +
	                'selection events, add a listener directly to the row node.');
	        }
	        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.setQuickFilter = function (newFilter) {
	        this.filterManager.setQuickFilter(newFilter);
	    };
	    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.selectIndex(index, tryMulti);
	    };
	    GridApi.prototype.deselectIndex = function (index, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.deselectIndex(index);
	    };
	    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
	        if (tryMulti === void 0) { tryMulti = false; }
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    GridApi.prototype.deselectNode = function (node, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: false });
	    };
	    GridApi.prototype.selectAll = function () {
	        this.selectionController.selectAllRowNodes();
	    };
	    GridApi.prototype.deselectAll = function () {
	        this.selectionController.deselectAllRowNodes();
	    };
	    GridApi.prototype.selectAllFiltered = function () {
	        this.selectionController.selectAllRowNodes(true);
	    };
	    GridApi.prototype.deselectAllFiltered = function () {
	        this.selectionController.deselectAllRowNodes(true);
	    };
	    GridApi.prototype.recomputeAggregates = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call recomputeAggregates unless using normal row model');
	        }
	        this.inMemoryRowModel.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });
	    };
	    GridApi.prototype.sizeColumnsToFit = function () {
	        if (this.gridOptionsWrapper.isForPrint()) {
	            console.warn('ag-grid: sizeColumnsToFit does not work when forPrint=true');
	            return;
	        }
	        this.gridPanel.sizeColumnsToFit();
	    };
	    GridApi.prototype.showLoadingOverlay = function () {
	        this.gridPanel.showLoadingOverlay();
	    };
	    GridApi.prototype.showNoRowsOverlay = function () {
	        this.gridPanel.showNoRowsOverlay();
	    };
	    GridApi.prototype.hideOverlay = function () {
	        this.gridPanel.hideOverlay();
	    };
	    GridApi.prototype.isNodeSelected = function (node) {
	        console.log('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');
	        return node.isSelected();
	    };
	    GridApi.prototype.getSelectedNodesById = function () {
	        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');
	        return null;
	    };
	    GridApi.prototype.getSelectedNodes = function () {
	        return this.selectionController.getSelectedNodes();
	    };
	    GridApi.prototype.getSelectedRows = function () {
	        return this.selectionController.getSelectedRows();
	    };
	    GridApi.prototype.getBestCostNodeSelection = function () {
	        return this.selectionController.getBestCostNodeSelection();
	    };
	    GridApi.prototype.getRenderedNodes = function () {
	        return this.rowRenderer.getRenderedNodes();
	    };
	    GridApi.prototype.ensureColIndexVisible = function (index) {
	        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');
	    };
	    GridApi.prototype.ensureColumnVisible = function (key) {
	        this.gridPanel.ensureColumnVisible(key);
	    };
	    // Valid values for position are bottom, middle and top
	    GridApi.prototype.ensureIndexVisible = function (index, position) {
	        if (position === void 0) { position = 'top'; }
	        this.gridPanel.ensureIndexVisible(index, position);
	    };
	    // Valid values for position are bottom, middle and top
	    GridApi.prototype.ensureNodeVisible = function (comparator, position) {
	        if (position === void 0) { position = 'top'; }
	        this.gridCore.ensureNodeVisible(comparator, position);
	    };
	    GridApi.prototype.forEachLeafNode = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNode unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachLeafNode(callback);
	    };
	    GridApi.prototype.forEachNode = function (callback) {
	        this.rowModel.forEachNode(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilter = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNodeAfterFilter unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachNodeAfterFilter(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNodeAfterFilterAndSort unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachNodeAfterFilterAndSort(callback);
	    };
	    GridApi.prototype.getFilterApiForColDef = function (colDef) {
	        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
	        return this.getFilterInstance(colDef);
	    };
	    GridApi.prototype.getFilterInstance = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.getFilterComponent(column).resolveNow(null, function (filterComp) { return filterComp; });
	        }
	    };
	    GridApi.prototype.getFilterApi = function (key) {
	        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');
	        return this.getFilterInstance(key);
	    };
	    GridApi.prototype.destroyFilter = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.destroyFilter(column);
	        }
	    };
	    GridApi.prototype.getColumnDef = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return column.getColDef();
	        }
	        else {
	            return null;
	        }
	    };
	    GridApi.prototype.onFilterChanged = function () {
	        this.filterManager.onFilterChanged();
	    };
	    GridApi.prototype.onSortChanged = function () {
	        this.sortController.onSortChanged();
	    };
	    GridApi.prototype.setSortModel = function (sortModel) {
	        this.sortController.setSortModel(sortModel);
	    };
	    GridApi.prototype.getSortModel = function () {
	        return this.sortController.getSortModel();
	    };
	    GridApi.prototype.setFilterModel = function (model) {
	        this.filterManager.setFilterModel(model);
	    };
	    GridApi.prototype.getFilterModel = function () {
	        return this.filterManager.getFilterModel();
	    };
	    GridApi.prototype.getFocusedCell = function () {
	        return this.focusedCellController.getFocusedCell();
	    };
	    GridApi.prototype.clearFocusedCell = function () {
	        return this.focusedCellController.clearFocusedCell();
	    };
	    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {
	        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);
	    };
	    GridApi.prototype.setHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.showToolPanel = function (show) {
	        this.gridCore.showToolPanel(show);
	    };
	    GridApi.prototype.isToolPanelShowing = function () {
	        return this.gridCore.isToolPanelShowing();
	    };
	    GridApi.prototype.doLayout = function () {
	        this.gridCore.doLayout();
	    };
	    GridApi.prototype.resetRowHeights = function () {
	        if (utils_1.Utils.exists(this.inMemoryRowModel)) {
	            this.inMemoryRowModel.resetRowHeights();
	        }
	    };
	    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
	    };
	    GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
	    };
	    GridApi.prototype.onRowHeightChanged = function () {
	        if (utils_1.Utils.exists(this.inMemoryRowModel)) {
	            this.inMemoryRowModel.onRowHeightChanged();
	        }
	    };
	    GridApi.prototype.getValue = function (colKey, rowNode) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (utils_1.Utils.missing(column)) {
	            column = this.columnController.getGridColumn(colKey);
	        }
	        if (utils_1.Utils.missing(column)) {
	            return null;
	        }
	        else {
	            return this.valueService.getValue(column, rowNode);
	        }
	    };
	    GridApi.prototype.addEventListener = function (eventType, listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addEventListener(eventType, listener, async);
	    };
	    GridApi.prototype.addGlobalListener = function (listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addGlobalListener(listener, async);
	    };
	    GridApi.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    GridApi.prototype.removeGlobalListener = function (listener) {
	        this.eventService.removeGlobalListener(listener);
	    };
	    GridApi.prototype.dispatchEvent = function (event) {
	        this.eventService.dispatchEvent(event);
	    };
	    GridApi.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    GridApi.prototype.resetQuickFilter = function () {
	        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });
	    };
	    GridApi.prototype.getRangeSelections = function () {
	        if (this.rangeController) {
	            return this.rangeController.getCellRanges();
	        }
	        else {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	            return null;
	        }
	    };
	    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {
	        return utils_1.Utils.camelCaseToHumanText(camelCase);
	    };
	    GridApi.prototype.addRangeSelection = function (rangeSelection) {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.addRange(rangeSelection);
	    };
	    GridApi.prototype.clearRangeSelection = function () {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.clearSelection();
	    };
	    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
	    };
	    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRangeToClipboard(includeHeader);
	    };
	    GridApi.prototype.copySelectedRangeDown = function () {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copyRangeDown();
	    };
	    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
	    };
	    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
	    };
	    GridApi.prototype.tabToNextCell = function () {
	        return this.rowRenderer.tabToNextCell(false);
	    };
	    GridApi.prototype.tabToPreviousCell = function () {
	        return this.rowRenderer.tabToNextCell(true);
	    };
	    GridApi.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.rowRenderer.stopEditing(cancel);
	    };
	    GridApi.prototype.startEditingCell = function (params) {
	        var column = this.columnController.getGridColumn(params.colKey);
	        if (!column) {
	            console.warn("ag-Grid: no column found for " + params.colKey);
	            return;
	        }
	        var gridCellDef = { rowIndex: params.rowIndex, floating: null, column: column };
	        var gridCell = new gridCell_1.GridCell(gridCellDef);
	        this.gridPanel.ensureIndexVisible(params.rowIndex);
	        this.rowRenderer.startEditingCell(gridCell, params.keyPress, params.charPress);
	    };
	    GridApi.prototype.addAggFunc = function (key, aggFunc) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFunc(key, aggFunc);
	        }
	    };
	    GridApi.prototype.addAggFuncs = function (aggFuncs) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFuncs(aggFuncs);
	        }
	    };
	    GridApi.prototype.clearAggFuncs = function () {
	        if (this.aggFuncService) {
	            this.aggFuncService.clear();
	        }
	    };
	    GridApi.prototype.updateRowData = function (rowDataTransaction) {
	        var res = null;
	        if (this.inMemoryRowModel) {
	            res = this.inMemoryRowModel.updateRowData(rowDataTransaction);
	        }
	        else if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.updateRowData(rowDataTransaction);
	        }
	        else {
	            console.error('ag-Grid: updateRowData() only works with InMemoryRowModel and InfiniteRowModel.');
	        }
	        // do change detection for all present cells
	        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            this.rowRenderer.refreshCells();
	        }
	        return res;
	    };
	    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
	    };
	    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');
	        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });
	        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
	    };
	    GridApi.prototype.addItems = function (items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
	    };
	    GridApi.prototype.refreshVirtualPageCache = function () {
	        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfinitePageCache = function () {
	        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.refreshCache();
	        }
	        else {
	            console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    GridApi.prototype.purgeVirtualPageCache = function () {
	        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfinitePageCache();
	    };
	    GridApi.prototype.purgeInfinitePageCache = function () {
	        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfiniteCache();
	    };
	    GridApi.prototype.purgeInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.purgeCache();
	        }
	        else {
	            console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    GridApi.prototype.purgeEnterpriseCache = function (route) {
	        if (this.enterpriseRowModel) {
	            this.enterpriseRowModel.purgeCache(route);
	        }
	        else {
	            console.warn("ag-Grid: api.purgeEnterpriseCache is only available when rowModelType='enterprise'.");
	        }
	    };
	    GridApi.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');
	        return this.getInfiniteRowCount();
	    };
	    GridApi.prototype.getInfiniteRowCount = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getVirtualRowCount();
	        }
	        else {
	            console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.isMaxRowFound = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.isMaxRowFound();
	        }
	        else {
	            console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');
	        this.setInfiniteRowCount(rowCount, maxRowFound);
	    };
	    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);
	        }
	        else {
	            console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.getVirtualPageState = function () {
	        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getInfinitePageState = function () {
	        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getCacheBlockState = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getBlockState();
	        }
	        else if (this.enterpriseRowModel) {
	            return this.enterpriseRowModel.getBlockState();
	        }
	        else {
	            console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='enterprise'.");
	        }
	    };
	    GridApi.prototype.checkGridSize = function () {
	        this.gridPanel.setBodyAndHeaderHeights();
	    };
	    GridApi.prototype.getFirstRenderedRow = function () {
	        console.log('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');
	        return this.getFirstDisplayedRow();
	    };
	    GridApi.prototype.getFirstDisplayedRow = function () {
	        return this.rowRenderer.getFirstVirtualRenderedRow();
	    };
	    GridApi.prototype.getLastRenderedRow = function () {
	        console.log('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');
	        return this.getLastDisplayedRow();
	    };
	    GridApi.prototype.getLastDisplayedRow = function () {
	        return this.rowRenderer.getLastVirtualRenderedRow();
	    };
	    GridApi.prototype.getDisplayedRowAtIndex = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    GridApi.prototype.getDisplayedRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    GridApi.prototype.paginationIsLastPageFound = function () {
	        return this.paginationProxy.isLastPageFound();
	    };
	    GridApi.prototype.paginationGetPageSize = function () {
	        return this.paginationProxy.getPageSize();
	    };
	    GridApi.prototype.paginationSetPageSize = function (size) {
	        this.gridOptionsWrapper.setProperty('paginationPageSize', size);
	    };
	    GridApi.prototype.paginationGetCurrentPage = function () {
	        return this.paginationProxy.getCurrentPage();
	    };
	    GridApi.prototype.paginationGetTotalPages = function () {
	        return this.paginationProxy.getTotalPages();
	    };
	    GridApi.prototype.paginationGetRowCount = function () {
	        return this.paginationProxy.getTotalRowCount();
	    };
	    GridApi.prototype.paginationGoToNextPage = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    GridApi.prototype.paginationGoToPreviousPage = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    GridApi.prototype.paginationGoToFirstPage = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    GridApi.prototype.paginationGoToLastPage = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    GridApi.prototype.paginationGoToPage = function (page) {
	        this.paginationProxy.goToPage(page);
	    };
	    __decorate([
	        context_1.Autowired('immutableService'),
	        __metadata("design:type", immutableService_1.ImmutableService)
	    ], GridApi.prototype, "immutableService", void 0);
	    __decorate([
	        context_1.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator_1.CsvCreator)
	    ], GridApi.prototype, "csvCreator", void 0);
	    __decorate([
	        context_1.Optional('excelCreator'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "excelCreator", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], GridApi.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridApi.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('headerRenderer'),
	        __metadata("design:type", headerRenderer_1.HeaderRenderer)
	    ], GridApi.prototype, "headerRenderer", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], GridApi.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridApi.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridApi.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridApi.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], GridApi.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], GridApi.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService_1.AlignedGridsService)
	    ], GridApi.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridApi.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridApi.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridApi.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], GridApi.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], GridApi.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridApi.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "clipboardService", void 0);
	    __decorate([
	        context_1.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "aggFuncService", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory_1.CellRendererFactory)
	    ], GridApi.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory_1.CellEditorFactory)
	    ], GridApi.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], GridApi.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Optional('toolPanel'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "toolPanel", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridApi.prototype, "init", null);
	    GridApi = __decorate([
	        context_1.Bean('gridApi')
	    ], GridApi);
	    return GridApi;
	}());
	exports.GridApi = GridApi;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridSerializer_1 = __webpack_require__(296);
	var downloader_1 = __webpack_require__(389);
	var columnController_1 = __webpack_require__(297);
	var valueService_1 = __webpack_require__(313);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var LINE_SEPARATOR = '\r\n';
	var CsvSerializingSession = (function (_super) {
	    __extends(CsvSerializingSession, _super);
	    function CsvSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, suppressQuotes, columnSeparator) {
	        var _this = _super.call(this, columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback) || this;
	        _this.suppressQuotes = suppressQuotes;
	        _this.columnSeparator = columnSeparator;
	        _this.result = '';
	        _this.lineOpened = false;
	        return _this;
	    }
	    CsvSerializingSession.prototype.prepare = function (columnsToExport) {
	    };
	    CsvSerializingSession.prototype.addCustomHeader = function (customHeader) {
	        if (!customHeader)
	            return;
	        this.result += customHeader + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.addCustomFooter = function (customFooter) {
	        if (!customFooter)
	            return;
	        this.result += customFooter + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += header;
	        for (var i = 1; i <= span; i++) {
	            this.result += this.columnSeparator + this.putInQuotes("", this.suppressQuotes);
	        }
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewHeaderRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractHeaderValue(column), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewBodyRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewBodyRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractRowCellValue(column, index, constants_1.Constants.EXPORT_TYPE_CSV, node), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.putInQuotes = function (value, suppressQuotes) {
	        if (suppressQuotes) {
	            return value;
	        }
	        if (value === null || value === undefined) {
	            return '""';
	        }
	        var stringValue;
	        if (typeof value === 'string') {
	            stringValue = value;
	        }
	        else if (typeof value.toString === 'function') {
	            stringValue = value.toString();
	        }
	        else {
	            console.warn('unknown value type during csv conversion');
	            stringValue = '';
	        }
	        // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
	        var valueEscaped = stringValue.replace(/"/g, "\"\"");
	        return '"' + valueEscaped + '"';
	    };
	    CsvSerializingSession.prototype.parse = function () {
	        return this.result;
	    };
	    return CsvSerializingSession;
	}(gridSerializer_1.BaseGridSerializingSession));
	exports.CsvSerializingSession = CsvSerializingSession;
	var BaseCreator = (function () {
	    function BaseCreator() {
	    }
	    BaseCreator.prototype.export = function (userParams) {
	        if (this.isExportSuppressed()) {
	            console.warn("ag-grid: Export canceled. Export is not allowed as per your configuration.");
	            return "";
	        }
	        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;
	        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
	        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();
	        if (fileName.indexOf(".") === -1) {
	            fileName = fileName + "." + this.getDefaultFileExtension();
	        }
	        this.downloader.download(fileName, data, this.getMimeType());
	        return data;
	    };
	    BaseCreator.prototype.getData = function (params) {
	        return this.getMergedParamsAndData(params).data;
	    };
	    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
	        var mergedParams = this.mergeDefaultParams(userParams);
	        var data = this.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
	        return { mergedParams: mergedParams, data: data };
	    };
	    BaseCreator.prototype.mergeDefaultParams = function (userParams) {
	        var baseParams = this.gridOptionsWrapper.getDefaultExportParams();
	        var params = {};
	        utils_1._.assign(params, baseParams);
	        utils_1._.assign(params, userParams);
	        return params;
	    };
	    __decorate([
	        context_1.Autowired('downloader'),
	        __metadata("design:type", downloader_1.Downloader)
	    ], BaseCreator.prototype, "downloader", void 0);
	    __decorate([
	        context_1.Autowired('gridSerializer'),
	        __metadata("design:type", gridSerializer_1.GridSerializer)
	    ], BaseCreator.prototype, "gridSerializer", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BaseCreator.prototype, "gridOptionsWrapper", void 0);
	    return BaseCreator;
	}());
	exports.BaseCreator = BaseCreator;
	var CsvCreator = (function (_super) {
	    __extends(CsvCreator, _super);
	    function CsvCreator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CsvCreator.prototype.exportDataAsCsv = function (params) {
	        return this.export(params);
	    };
	    CsvCreator.prototype.getDataAsCsv = function (params) {
	        return this.getData(params);
	    };
	    CsvCreator.prototype.getMimeType = function () {
	        return "text/csv;charset=utf-8;";
	    };
	    CsvCreator.prototype.getDefaultFileName = function () {
	        return 'export.csv';
	    };
	    CsvCreator.prototype.getDefaultFileExtension = function () {
	        return 'csv';
	    };
	    CsvCreator.prototype.createSerializingSession = function (params) {
	        return new CsvSerializingSession(this.columnController, this.valueService, this.gridOptionsWrapper, params ? params.processCellCallback : null, params ? params.processHeaderCallback : null, params && params.suppressQuotes, (params && params.columnSeparator) || ',');
	    };
	    CsvCreator.prototype.isExportSuppressed = function () {
	        return this.gridOptionsWrapper.isSuppressCsvExport();
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], CsvCreator.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], CsvCreator.prototype, "valueService", void 0);
	    CsvCreator = __decorate([
	        context_1.Bean('csvCreator')
	    ], CsvCreator);
	    return CsvCreator;
	}(BaseCreator));
	exports.CsvCreator = CsvCreator;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var selectionController_1 = __webpack_require__(309);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var displayedGroupCreator_1 = __webpack_require__(303);
	var balancedColumnTreeBuilder_1 = __webpack_require__(283);
	var groupInstanceIdCreator_1 = __webpack_require__(387);
	var columnGroup_1 = __webpack_require__(298);
	var pinnedRowModel_1 = __webpack_require__(326);
	var BaseGridSerializingSession = (function () {
	    function BaseGridSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, cellAndHeaderEscaper) {
	        this.columnController = columnController;
	        this.valueService = valueService;
	        this.gridOptionsWrapper = gridOptionsWrapper;
	        this.processCellCallback = processCellCallback;
	        this.processHeaderCallback = processHeaderCallback;
	        this.cellAndHeaderEscaper = cellAndHeaderEscaper;
	    }
	    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
	        var nameForCol = this.getHeaderName(this.processHeaderCallback, column);
	        if (nameForCol === null || nameForCol === undefined) {
	            nameForCol = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;
	    };
	    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {
	        var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;
	        var valueForCell;
	        if (node.group && isRowGrouping && index === 0) {
	            valueForCell = this.createValueForGroupNode(node);
	        }
	        else {
	            valueForCell = this.valueService.getValue(column, node);
	        }
	        valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);
	        if (valueForCell === null || valueForCell === undefined) {
	            valueForCell = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;
	    };
	    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
	        if (callback) {
	            return callback({
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            });
	        }
	        else {
	            return this.columnController.getDisplayNameForColumn(column, 'csv', true);
	        }
	    };
	    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
	        var keys = [node.key];
	        while (node.parent) {
	            node = node.parent;
	            keys.push(node.key);
	        }
	        return keys.reverse().join(' -> ');
	    };
	    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {
	        if (processCellCallback) {
	            return processCellCallback({
	                column: column,
	                node: rowNode,
	                value: value,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext(),
	                type: type
	            });
	        }
	        else {
	            return value;
	        }
	    };
	    return BaseGridSerializingSession;
	}());
	exports.BaseGridSerializingSession = BaseGridSerializingSession;
	var GridSerializer = (function () {
	    function GridSerializer() {
	    }
	    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
	        var dontSkipRows = function () { return false; };
	        var skipGroups = params && params.skipGroups;
	        var skipHeader = params && params.skipHeader;
	        var columnGroups = params && params.columnGroups;
	        var skipFooters = params && params.skipFooters;
	        var skipPinnedTop = params && params.skipPinnedTop;
	        var skipPinnedBottom = params && params.skipPinnedBottom;
	        var includeCustomHeader = params && params.customHeader;
	        var includeCustomFooter = params && params.customFooter;
	        var allColumns = params && params.allColumns;
	        var onlySelected = params && params.onlySelected;
	        var columnKeys = params && params.columnKeys;
	        var onlySelectedAllPages = params && params.onlySelectedAllPages;
	        var rowSkipper = (params && params.shouldRowBeSkipped) || dontSkipRows;
	        var api = this.gridOptionsWrapper.getApi();
	        var context = this.gridOptionsWrapper.getContext();
	        // when in pivot mode, we always render cols on screen, never 'all columns'
	        var isPivotMode = this.columnController.isPivotMode();
	        var rowModelNormal = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;
	        var columnsToExport;
	        if (utils_1.Utils.existsAndNotEmpty(columnKeys)) {
	            columnsToExport = this.columnController.getGridColumns(columnKeys);
	        }
	        else if (allColumns && !isPivotMode) {
	            columnsToExport = this.columnController.getAllPrimaryColumns();
	        }
	        else {
	            columnsToExport = this.columnController.getAllDisplayedColumns();
	        }
	        if (!columnsToExport || columnsToExport.length === 0) {
	            return '';
	        }
	        gridSerializingSession.prepare(columnsToExport);
	        if (includeCustomHeader) {
	            gridSerializingSession.addCustomHeader(params.customHeader);
	        }
	        // first pass, put in the header names of the cols
	        if (columnGroups) {
	            var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
	            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator);
	            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);
	        }
	        if (!skipHeader) {
	            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
	            columnsToExport.forEach(function (column, index) {
	                gridRowIterator_1.onColumn(column, index, null);
	            });
	        }
	        this.pinnedRowModel.forEachPinnedTopRow(processRow);
	        if (isPivotMode) {
	            this.rowModel.forEachPivotNode(processRow);
	        }
	        else {
	            // onlySelectedAllPages: user doing pagination and wants selected items from
	            // other pages, so cannot use the standard row model as it won't have rows from
	            // other pages.
	            // onlySelectedNonStandardModel: if user wants selected in non standard row model
	            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.
	            if (onlySelectedAllPages || onlySelectedNonStandardModel) {
	                var selectedNodes = this.selectionController.getSelectedNodes();
	                selectedNodes.forEach(function (node) {
	                    processRow(node);
	                });
	            }
	            else {
	                // here is everything else - including standard row model and selected. we don't use
	                // the selection model even when just using selected, so that the result is the order
	                // of the rows appearing on the screen.
	                if (rowModelNormal) {
	                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);
	                }
	                else {
	                    this.rowModel.forEachNode(processRow);
	                }
	            }
	        }
	        this.pinnedRowModel.forEachPinnedBottomRow(processRow);
	        if (includeCustomFooter) {
	            gridSerializingSession.addCustomFooter(params.customFooter);
	        }
	        function processRow(node) {
	            if (skipGroups && node.group) {
	                return;
	            }
	            if (skipFooters && node.footer) {
	                return;
	            }
	            if (onlySelected && !node.isSelected()) {
	                return;
	            }
	            if (skipPinnedTop && node.rowPinned === 'top') {
	                return;
	            }
	            if (skipPinnedBottom && node.rowPinned === 'bottom') {
	                return;
	            }
	            // if we are in pivotMode, then the grid will show the root node only
	            // if it's not a leaf group
	            var nodeIsRootNode = node.level === -1;
	            if (nodeIsRootNode && !node.leafGroup) {
	                return;
	            }
	            var shouldRowBeSkipped = rowSkipper({
	                node: node,
	                api: api,
	                context: context
	            });
	            if (shouldRowBeSkipped)
	                return;
	            var rowAccumulator = gridSerializingSession.onNewBodyRow();
	            columnsToExport.forEach(function (column, index) {
	                rowAccumulator.onColumn(column, index, node);
	            });
	        }
	        return gridSerializingSession.parse();
	    };
	    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {
	        var directChildrenHeaderGroups = [];
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup = columnGroupChild;
	            if (!columnGroup.getChildren)
	                return;
	            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });
	        });
	        if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup_1.ColumnGroup) {
	            this.doAddHeaderHeader(gridSerializingSession, displayedGroups);
	        }
	        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
	            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);
	        }
	    };
	    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {
	        var _this = this;
	        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
	        var columnIndex = 0;
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup = columnGroupChild;
	            var colDef = columnGroup.getDefinition();
	            var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');
	            gridRowIterator.onColumn(columnName, columnIndex++, columnGroup.getLeafColumns().length - 1);
	        });
	    };
	    __decorate([
	        context_1.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)
	    ], GridSerializer.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridSerializer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridSerializer.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridSerializer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridSerializer.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder)
	    ], GridSerializer.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridSerializer.prototype, "gridOptionsWrapper", void 0);
	    GridSerializer = __decorate([
	        context_1.Bean("gridSerializer")
	    ], GridSerializer);
	    return GridSerializer;
	}());
	exports.GridSerializer = GridSerializer;
	var RowType;
	(function (RowType) {
	    RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
	    RowType[RowType["HEADER"] = 1] = "HEADER";
	    RowType[RowType["BODY"] = 2] = "BODY";
	})(RowType = exports.RowType || (exports.RowType = {}));


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var columnGroup_1 = __webpack_require__(298);
	var column_1 = __webpack_require__(299);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var expressionService_1 = __webpack_require__(302);
	var balancedColumnTreeBuilder_1 = __webpack_require__(283);
	var displayedGroupCreator_1 = __webpack_require__(303);
	var autoWidthCalculator_1 = __webpack_require__(304);
	var eventService_1 = __webpack_require__(285);
	var columnUtils_1 = __webpack_require__(300);
	var logger_1 = __webpack_require__(286);
	var events_1 = __webpack_require__(291);
	var originalColumnGroup_1 = __webpack_require__(301);
	var groupInstanceIdCreator_1 = __webpack_require__(387);
	var context_1 = __webpack_require__(287);
	var gridPanel_1 = __webpack_require__(306);
	var columnAnimationService_1 = __webpack_require__(351);
	var autoGroupColService_1 = __webpack_require__(388);
	var valueCache_1 = __webpack_require__(314);
	var gridApi_1 = __webpack_require__(294);
	var ColumnApi = (function () {
	    function ColumnApi() {
	    }
	    ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) { this._columnController.sizeColumnsToFit(gridWidth); };
	    ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) { this._columnController.setColumnGroupOpened(group, newValue); };
	    ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this._columnController.getColumnGroup(name, instanceId); };
	    ColumnApi.prototype.getOriginalColumnGroup = function (name) { return this._columnController.getOriginalColumnGroup(name); };
	    ColumnApi.prototype.getDisplayNameForColumn = function (column, location) { return this._columnController.getDisplayNameForColumn(column, location); };
	    ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) { return this._columnController.getDisplayNameForColumnGroup(columnGroup, location); };
	    ColumnApi.prototype.getColumn = function (key) { return this._columnController.getPrimaryColumn(key); };
	    ColumnApi.prototype.setColumnState = function (columnState) { return this._columnController.setColumnState(columnState); };
	    ColumnApi.prototype.getColumnState = function () { return this._columnController.getColumnState(); };
	    ColumnApi.prototype.resetColumnState = function () { this._columnController.resetColumnState(); };
	    ColumnApi.prototype.getColumnGroupState = function () { return this._columnController.getColumnGroupState(); };
	    ColumnApi.prototype.setColumnGroupState = function (stateItems) { this._columnController.setColumnGroupState(stateItems); };
	    ColumnApi.prototype.resetColumnGroupState = function () { this._columnController.resetColumnGroupState(); };
	    ColumnApi.prototype.isPinning = function () { return this._columnController.isPinningLeft() || this._columnController.isPinningRight(); };
	    ColumnApi.prototype.isPinningLeft = function () { return this._columnController.isPinningLeft(); };
	    ColumnApi.prototype.isPinningRight = function () { return this._columnController.isPinningRight(); };
	    ColumnApi.prototype.getDisplayedColAfter = function (col) { return this._columnController.getDisplayedColAfter(col); };
	    ColumnApi.prototype.getDisplayedColBefore = function (col) { return this._columnController.getDisplayedColBefore(col); };
	    ColumnApi.prototype.setColumnVisible = function (key, visible) { this._columnController.setColumnVisible(key, visible); };
	    ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this._columnController.setColumnsVisible(keys, visible); };
	    ColumnApi.prototype.setColumnPinned = function (key, pinned) { this._columnController.setColumnPinned(key, pinned); };
	    ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this._columnController.setColumnsPinned(keys, pinned); };
	    ColumnApi.prototype.getAllColumns = function () { return this._columnController.getAllPrimaryColumns(); };
	    ColumnApi.prototype.getAllGridColumns = function () { return this._columnController.getAllGridColumns(); };
	    ColumnApi.prototype.getDisplayedLeftColumns = function () { return this._columnController.getDisplayedLeftColumns(); };
	    ColumnApi.prototype.getDisplayedCenterColumns = function () { return this._columnController.getDisplayedCenterColumns(); };
	    ColumnApi.prototype.getDisplayedRightColumns = function () { return this._columnController.getDisplayedRightColumns(); };
	    ColumnApi.prototype.getAllDisplayedColumns = function () { return this._columnController.getAllDisplayedColumns(); };
	    ColumnApi.prototype.getAllDisplayedVirtualColumns = function () { return this._columnController.getAllDisplayedVirtualColumns(); };
	    ColumnApi.prototype.moveColumn = function (key, toIndex) {
	        if (typeof key === 'number') {
	            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
	            console.log('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');
	            this._columnController.moveColumnByIndex(key, toIndex);
	        }
	        else {
	            this._columnController.moveColumn(key, toIndex);
	        }
	    };
	    ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) { this._columnController.moveColumnByIndex(fromIndex, toIndex); };
	    ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) { this._columnController.moveColumns(columnsToMoveKeys, toIndex); };
	    ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this._columnController.moveRowGroupColumn(fromIndex, toIndex); };
	    ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) { this._columnController.setColumnAggFunc(column, aggFunc); };
	    ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
	        if (finished === void 0) { finished = true; }
	        this._columnController.setColumnWidth(key, newWidth, finished);
	    };
	    ColumnApi.prototype.setPivotMode = function (pivotMode) { this._columnController.setPivotMode(pivotMode); };
	    ColumnApi.prototype.isPivotMode = function () { return this._columnController.isPivotMode(); };
	    ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) { return this._columnController.getSecondaryPivotColumn(pivotKeys, valueColKey); };
	    ColumnApi.prototype.setValueColumns = function (colKeys) { this._columnController.setValueColumns(colKeys); };
	    ColumnApi.prototype.getValueColumns = function () { return this._columnController.getValueColumns(); };
	    ColumnApi.prototype.removeValueColumn = function (colKey) { this._columnController.removeValueColumn(colKey); };
	    ColumnApi.prototype.removeValueColumns = function (colKeys) { this._columnController.removeValueColumns(colKeys); };
	    ColumnApi.prototype.addValueColumn = function (colKey) { this._columnController.addValueColumn(colKey); };
	    ColumnApi.prototype.addValueColumns = function (colKeys) { this._columnController.addValueColumns(colKeys); };
	    ColumnApi.prototype.setRowGroupColumns = function (colKeys) { this._columnController.setRowGroupColumns(colKeys); };
	    ColumnApi.prototype.removeRowGroupColumn = function (colKey) { this._columnController.removeRowGroupColumn(colKey); };
	    ColumnApi.prototype.removeRowGroupColumns = function (colKeys) { this._columnController.removeRowGroupColumns(colKeys); };
	    ColumnApi.prototype.addRowGroupColumn = function (colKey) { this._columnController.addRowGroupColumn(colKey); };
	    ColumnApi.prototype.addRowGroupColumns = function (colKeys) { this._columnController.addRowGroupColumns(colKeys); };
	    ColumnApi.prototype.getRowGroupColumns = function () { return this._columnController.getRowGroupColumns(); };
	    ColumnApi.prototype.setPivotColumns = function (colKeys) { this._columnController.setPivotColumns(colKeys); };
	    ColumnApi.prototype.removePivotColumn = function (colKey) { this._columnController.removePivotColumn(colKey); };
	    ColumnApi.prototype.removePivotColumns = function (colKeys) { this._columnController.removePivotColumns(colKeys); };
	    ColumnApi.prototype.addPivotColumn = function (colKey) { this._columnController.addPivotColumn(colKey); };
	    ColumnApi.prototype.addPivotColumns = function (colKeys) { this._columnController.addPivotColumns(colKeys); };
	    ColumnApi.prototype.getPivotColumns = function () { return this._columnController.getPivotColumns(); };
	    ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this._columnController.getLeftDisplayedColumnGroups(); };
	    ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this._columnController.getCenterDisplayedColumnGroups(); };
	    ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this._columnController.getRightDisplayedColumnGroups(); };
	    ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this._columnController.getAllDisplayedColumnGroups(); };
	    ColumnApi.prototype.autoSizeColumn = function (key) { return this._columnController.autoSizeColumn(key); };
	    ColumnApi.prototype.autoSizeColumns = function (keys) { return this._columnController.autoSizeColumns(keys); };
	    ColumnApi.prototype.autoSizeAllColumns = function () { this._columnController.autoSizeAllColumns(); };
	    ColumnApi.prototype.setSecondaryColumns = function (colDefs) { this._columnController.setSecondaryColumns(colDefs); };
	    // below goes through deprecated items, prints message to user, then calls the new version of the same method
	    ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
	        console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
	        this.setColumnGroupOpened(group, newValue);
	    };
	    ColumnApi.prototype.hideColumns = function (colIds, hide) {
	        console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');
	        this._columnController.setColumnsVisible(colIds, !hide);
	    };
	    ColumnApi.prototype.hideColumn = function (colId, hide) {
	        console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');
	        this._columnController.setColumnVisible(colId, !hide);
	    };
	    ColumnApi.prototype.setState = function (columnState) {
	        console.error('ag-Grid: setState is deprecated, use setColumnState');
	        return this.setColumnState(columnState);
	    };
	    ColumnApi.prototype.getState = function () {
	        console.error('ag-Grid: getState is deprecated, use getColumnState');
	        return this.getColumnState();
	    };
	    ColumnApi.prototype.resetState = function () {
	        console.error('ag-Grid: resetState is deprecated, use resetColumnState');
	        this.resetColumnState();
	    };
	    ColumnApi.prototype.getAggregationColumns = function () {
	        console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');
	        return this._columnController.getValueColumns();
	    };
	    ColumnApi.prototype.removeAggregationColumn = function (colKey) {
	        console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');
	        this._columnController.removeValueColumn(colKey);
	    };
	    ColumnApi.prototype.removeAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');
	        this._columnController.removeValueColumns(colKeys);
	    };
	    ColumnApi.prototype.addAggregationColumn = function (colKey) {
	        console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');
	        this._columnController.addValueColumn(colKey);
	    };
	    ColumnApi.prototype.addAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');
	        this._columnController.addValueColumns(colKeys);
	    };
	    ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {
	        console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');
	        this._columnController.setColumnAggFunc(column, aggFunc);
	    };
	    ColumnApi.prototype.getDisplayNameForCol = function (column) {
	        console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');
	        return this.getDisplayNameForColumn(column, null);
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", ColumnController)
	    ], ColumnApi.prototype, "_columnController", void 0);
	    ColumnApi = __decorate([
	        context_1.Bean('columnApi')
	    ], ColumnApi);
	    return ColumnApi;
	}());
	exports.ColumnApi = ColumnApi;
	var ColumnController = (function () {
	    function ColumnController() {
	        // header row count, based on user provided columns
	        this.primaryHeaderRowCount = 0;
	        this.secondaryHeaderRowCount = 0;
	        this.secondaryColumnsPresent = false;
	        // header row count, either above, or based on pivoting if we are pivoting
	        this.gridHeaderRowCount = 0;
	        // these are the lists used by the rowRenderer to render nodes. almost the leaf nodes of the above
	        // displayed trees, however it also takes into account if the groups are open or not.
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        // all three lists above combined
	        this.allDisplayedColumns = [];
	        // same as above, except trimmed down to only columns within the viewport
	        this.allDisplayedVirtualColumns = [];
	        this.allDisplayedCenterVirtualColumns = [];
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        this.ready = false;
	        this.autoGroupsNeedBuilding = false;
	        this.pivotMode = false;
	        this.bodyWidth = 0;
	        this.leftWidth = 0;
	        this.rightWidth = 0;
	        this.bodyWidthDirty = true;
	    }
	    ColumnController.prototype.init = function () {
	        var pivotMode = this.gridOptionsWrapper.isPivotMode();
	        if (this.isPivotSettingAllowed(pivotMode)) {
	            this.pivotMode = pivotMode;
	        }
	        this.usingTreeData = this.gridOptionsWrapper.isTreeData();
	    };
	    ColumnController.prototype.setVirtualViewportLeftAndRight = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
	            this.viewportRight = this.bodyWidth - this.scrollPosition;
	        }
	        else {
	            this.viewportLeft = this.scrollPosition;
	            this.viewportRight = this.scrollWidth + this.scrollPosition;
	        }
	    };
	    // used by clipboard service, to know what columns to paste into
	    ColumnController.prototype.getDisplayedColumnsStartingAt = function (column) {
	        var currentColumn = column;
	        var result = [];
	        while (utils_1.Utils.exists(currentColumn)) {
	            result.push(currentColumn);
	            currentColumn = this.getDisplayedColAfter(currentColumn);
	        }
	        return result;
	    };
	    // checks what columns are currently displayed due to column virtualisation. fires an event
	    // if the list of columns has changed.
	    // + setColumnWidth(), setVirtualViewportPosition(), setColumnDefs(), sizeColumnsToFit()
	    ColumnController.prototype.checkDisplayedVirtualColumns = function () {
	        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
	        if (utils_1.Utils.exists(this.displayedCenterColumns)) {
	            var hashBefore = this.allDisplayedVirtualColumns.map(function (column) { return column.getId(); }).join('#');
	            this.updateVirtualSets();
	            var hashAfter = this.allDisplayedVirtualColumns.map(function (column) { return column.getId(); }).join('#');
	            if (hashBefore !== hashAfter) {
	                var event_1 = {
	                    type: events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	            }
	        }
	    };
	    ColumnController.prototype.setVirtualViewportPosition = function (scrollWidth, scrollPosition) {
	        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
	            this.scrollWidth = scrollWidth;
	            this.scrollPosition = scrollPosition;
	            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
	            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
	            // virtual columns again
	            this.bodyWidthDirty = true;
	            this.setVirtualViewportLeftAndRight();
	            if (this.ready) {
	                this.checkDisplayedVirtualColumns();
	            }
	        }
	    };
	    ColumnController.prototype.isPivotMode = function () {
	        return this.pivotMode;
	    };
	    ColumnController.prototype.isPivotSettingAllowed = function (pivot) {
	        if (pivot) {
	            if (this.gridOptionsWrapper.isTreeData()) {
	                console.warn("ag-Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
	                return false;
	            }
	            else {
	                return true;
	            }
	        }
	        else {
	            return true;
	        }
	    };
	    ColumnController.prototype.setPivotMode = function (pivotMode) {
	        if (pivotMode === this.pivotMode) {
	            return;
	        }
	        if (!this.isPivotSettingAllowed(this.pivotMode)) {
	            return;
	        }
	        this.pivotMode = pivotMode;
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
	        if (!this.secondaryColumnsPresent) {
	            return null;
	        }
	        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
	        var foundColumn = null;
	        this.secondaryColumns.forEach(function (column) {
	            var thisPivotKeys = column.getColDef().pivotKeys;
	            var pivotValueColumn = column.getColDef().pivotValueColumn;
	            var pivotKeyMatches = utils_1.Utils.compareArrays(thisPivotKeys, pivotKeys);
	            var pivotValueMatches = pivotValueColumn === valueColumnToFind;
	            if (pivotKeyMatches && pivotValueMatches) {
	                foundColumn = column;
	            }
	        });
	        return foundColumn;
	    };
	    ColumnController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ColumnController');
	    };
	    ColumnController.prototype.setFirstRightAndLastLeftPinned = function () {
	        var lastLeft;
	        var firstRight;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[this.displayedRightColumns.length - 1] : null;
	        }
	        else {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[this.displayedLeftColumns.length - 1] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
	        }
	        this.gridColumns.forEach(function (column) {
	            column.setLastLeftPinned(column === lastLeft);
	            column.setFirstRightPinned(column === firstRight);
	        });
	    };
	    ColumnController.prototype.autoSizeColumns = function (keys) {
	        // because of column virtualisation, we can only do this function on columns that are
	        // actually rendered, as non-rendered columns (outside the viewport and not rendered
	        // due to column virtualisation) are not present. this can result in all rendered columns
	        // getting narrowed, which in turn introduces more rendered columns on the RHS which
	        // did not get autosized in the original run, leaving the visible grid with columns on
	        // the LHS sized, but RHS no. so we keep looping through teh visible columns until
	        // no more cols are available (rendered) to be resized
	        var _this = this;
	        // keep track of which cols we have resized in here
	        var columnsAutosized = [];
	        // initialise with anything except 0 so that while loop executs at least once
	        var changesThisTimeAround = -1;
	        while (changesThisTimeAround !== 0) {
	            changesThisTimeAround = 0;
	            this.actionOnGridColumns(keys, function (column) {
	                // if already autosized, skip it
	                if (columnsAutosized.indexOf(column) >= 0) {
	                    return;
	                }
	                // get how wide this col should be
	                var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column);
	                // preferredWidth = -1 if this col is not on the screen
	                if (preferredWidth > 0) {
	                    var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
	                    column.setActualWidth(newWidth);
	                    columnsAutosized.push(column);
	                    changesThisTimeAround++;
	                }
	                return true;
	            });
	        }
	        if (columnsAutosized.length > 0) {
	            var event_2 = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                columns: columnsAutosized,
	                column: columnsAutosized.length === 1 ? columnsAutosized[0] : null,
	                finished: true,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	    };
	    ColumnController.prototype.autoSizeColumn = function (key) {
	        this.autoSizeColumns([key]);
	    };
	    ColumnController.prototype.autoSizeAllColumns = function () {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        this.autoSizeColumns(allDisplayedColumns);
	    };
	    ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
	        var result = [];
	        recursiveFindColumns(rootColumns);
	        return result;
	        function recursiveFindColumns(childColumns) {
	            for (var i = 0; i < childColumns.length; i++) {
	                var child = childColumns[i];
	                if (child instanceof column_1.Column) {
	                    result.push(child);
	                }
	                else if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    recursiveFindColumns(child.getChildren());
	                }
	            }
	        }
	    };
	    ColumnController.prototype.getAllDisplayedColumnGroups = function () {
	        if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
	            return this.displayedLeftColumnTree
	                .concat(this.displayedCentreColumnTree)
	                .concat(this.displayedRightColumnTree);
	        }
	        else {
	            return null;
	        }
	    };
	    // + columnSelectPanel
	    ColumnController.prototype.getPrimaryColumnTree = function () {
	        return this.primaryBalancedTree;
	    };
	    // + gridPanel -> for resizing the body and setting top margin
	    ColumnController.prototype.getHeaderRowCount = function () {
	        return this.gridHeaderRowCount;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getLeftDisplayedColumnGroups = function () {
	        return this.displayedLeftColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getRightDisplayedColumnGroups = function () {
	        return this.displayedRightColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getCenterDisplayedColumnGroups = function () {
	        return this.displayedCentreColumnTree;
	    };
	    ColumnController.prototype.getDisplayedColumnGroups = function (type) {
	        switch (type) {
	            case column_1.Column.PINNED_LEFT: return this.getLeftDisplayedColumnGroups();
	            case column_1.Column.PINNED_RIGHT: return this.getRightDisplayedColumnGroups();
	            default: return this.getCenterDisplayedColumnGroups();
	        }
	    };
	    // gridPanel -> ensureColumnVisible
	    ColumnController.prototype.isColumnDisplayed = function (column) {
	        return this.getAllDisplayedColumns().indexOf(column) >= 0;
	    };
	    // + csvCreator
	    ColumnController.prototype.getAllDisplayedColumns = function () {
	        return this.allDisplayedColumns;
	    };
	    ColumnController.prototype.getAllDisplayedVirtualColumns = function () {
	        return this.allDisplayedVirtualColumns;
	    };
	    ColumnController.prototype.getDisplayedLeftColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedLeftColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedRightColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedRightColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedColumnsForRow = function (rowNode, displayedColumns, filterCallback, gapBeforeCallback) {
	        var result = [];
	        var lastConsideredCol = null;
	        for (var i = 0; i < displayedColumns.length; i++) {
	            var col = displayedColumns[i];
	            var colSpan = col.getColSpan(rowNode);
	            if (colSpan > 1) {
	                var colsToRemove = colSpan - 1;
	                i += colsToRemove;
	            }
	            var filterPasses = filterCallback ? filterCallback(col) : true;
	            if (filterPasses) {
	                var gapBeforeColumn = gapBeforeCallback ? gapBeforeCallback(col) : false;
	                var addInPreviousColumn = result.length === 0 && gapBeforeColumn && lastConsideredCol;
	                if (addInPreviousColumn) {
	                    result.push(lastConsideredCol);
	                }
	                result.push(col);
	            }
	            lastConsideredCol = col;
	        }
	        return result;
	    };
	    // + rowRenderer
	    // if we are not column spanning, this just returns back the virtual centre columns,
	    // however if we are column spanning, then different rows can have different virtual
	    // columns, so we have to work out the list for each individual row.
	    ColumnController.prototype.getAllDisplayedCenterVirtualColumnsForRow = function (rowNode) {
	        var _this = this;
	        if (!this.colSpanActive) {
	            return this.allDisplayedCenterVirtualColumns;
	        }
	        var gapBeforeCallback = function (col) { return col.getLeft() > _this.viewportLeft; };
	        return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, this.isColumnInViewport.bind(this), gapBeforeCallback);
	    };
	    ColumnController.prototype.isColumnInViewport = function (col) {
	        var columnLeft = col.getLeft();
	        var columnRight = col.getLeft() + col.getActualWidth();
	        var columnToMuchLeft = columnLeft < this.viewportLeft && columnRight < this.viewportLeft;
	        var columnToMuchRight = columnLeft > this.viewportRight && columnRight > this.viewportRight;
	        return !columnToMuchLeft && !columnToMuchRight;
	    };
	    // used by:
	    // + angularGrid -> setting pinned body width
	    // todo: this needs to be cached
	    ColumnController.prototype.getPinnedLeftContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedLeftColumns);
	    };
	    // todo: this needs to be cached
	    ColumnController.prototype.getPinnedRightContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedRightColumns);
	    };
	    ColumnController.prototype.updatePrimaryColumnList = function (keys, masterList, actionIsAdd, columnCallback, eventType) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var atLeastOne = false;
	        keys.forEach(function (key) {
	            var columnToAdd = _this.getPrimaryColumn(key);
	            if (!columnToAdd) {
	                return;
	            }
	            if (actionIsAdd) {
	                if (masterList.indexOf(columnToAdd) >= 0) {
	                    return;
	                }
	                masterList.push(columnToAdd);
	            }
	            else {
	                if (masterList.indexOf(columnToAdd) < 0) {
	                    return;
	                }
	                utils_1.Utils.removeFromArray(masterList, columnToAdd);
	            }
	            columnCallback(columnToAdd);
	            atLeastOne = true;
	        });
	        if (!atLeastOne) {
	            return;
	        }
	        this.updateDisplayedColumns();
	        var event = {
	            type: eventType,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setRowGroupColumns = function (colKeys) {
	        this.autoGroupsNeedBuilding = true;
	        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this));
	    };
	    ColumnController.prototype.setRowGroupActive = function (active, column) {
	        if (active === column.isRowGroupActive()) {
	            return;
	        }
	        column.setRowGroupActive(active);
	        if (!active) {
	            column.setVisible(true);
	        }
	    };
	    ColumnController.prototype.addRowGroupColumn = function (key) {
	        this.addRowGroupColumns([key]);
	    };
	    ColumnController.prototype.addRowGroupColumns = function (keys) {
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED);
	    };
	    ColumnController.prototype.removeRowGroupColumns = function (keys) {
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED);
	    };
	    ColumnController.prototype.removeRowGroupColumn = function (key) {
	        this.removeRowGroupColumns([key]);
	    };
	    ColumnController.prototype.addPivotColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.pivotColumns, true, function (column) { return column.setPivotActive(true); }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED);
	    };
	    ColumnController.prototype.setPivotColumns = function (colKeys) {
	        this.setPrimaryColumnList(colKeys, this.pivotColumns, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, function (added, column) {
	            column.setPivotActive(added);
	        });
	    };
	    ColumnController.prototype.addPivotColumn = function (key) {
	        this.addPivotColumns([key]);
	    };
	    ColumnController.prototype.removePivotColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.pivotColumns, false, function (column) { return column.setPivotActive(false); }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED);
	    };
	    ColumnController.prototype.removePivotColumn = function (key) {
	        this.removePivotColumns([key]);
	    };
	    ColumnController.prototype.setPrimaryColumnList = function (colKeys, masterList, eventName, columnCallback) {
	        var _this = this;
	        masterList.length = 0;
	        if (utils_1.Utils.exists(colKeys)) {
	            colKeys.forEach(function (key) {
	                var column = _this.getPrimaryColumn(key);
	                masterList.push(column);
	            });
	        }
	        this.primaryColumns.forEach(function (column) {
	            var added = masterList.indexOf(column) >= 0;
	            columnCallback(added, column);
	        });
	        this.updateDisplayedColumns();
	        var event = {
	            type: eventName,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setValueColumns = function (colKeys) {
	        this.setPrimaryColumnList(colKeys, this.valueColumns, events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this));
	    };
	    ColumnController.prototype.setValueActive = function (active, column) {
	        if (active === column.isValueActive()) {
	            return;
	        }
	        column.setValueActive(active);
	        if (active && !column.getAggFunc()) {
	            var defaultAggFunc = this.aggFuncService.getDefaultAggFunc(column);
	            column.setAggFunc(defaultAggFunc);
	        }
	    };
	    ColumnController.prototype.addValueColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), events_1.Events.EVENT_COLUMN_VALUE_CHANGED);
	    };
	    ColumnController.prototype.addValueColumn = function (colKey) {
	        this.addValueColumns([colKey]);
	    };
	    ColumnController.prototype.removeValueColumn = function (colKey) {
	        this.removeValueColumns([colKey]);
	    };
	    ColumnController.prototype.removeValueColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), events_1.Events.EVENT_COLUMN_VALUE_CHANGED);
	    };
	    // returns the width we can set to this col, taking into consideration min and max widths
	    ColumnController.prototype.normaliseColumnWidth = function (column, newWidth) {
	        if (newWidth < column.getMinWidth()) {
	            newWidth = column.getMinWidth();
	        }
	        if (column.isGreaterThanMax(newWidth)) {
	            newWidth = column.getMaxWidth();
	        }
	        return newWidth;
	    };
	    ColumnController.prototype.getPrimaryOrGridColumn = function (key) {
	        var column = this.getPrimaryColumn(key);
	        if (column) {
	            return column;
	        }
	        else {
	            return this.getGridColumn(key);
	        }
	    };
	    ColumnController.prototype.setColumnWidth = function (key, newWidth, finished) {
	        var column = this.getPrimaryOrGridColumn(key);
	        if (!column) {
	            return;
	        }
	        newWidth = this.normaliseColumnWidth(column, newWidth);
	        var widthChanged = column.getActualWidth() !== newWidth;
	        if (widthChanged) {
	            column.setActualWidth(newWidth);
	            this.setLeftValues();
	        }
	        this.updateBodyWidths();
	        this.checkDisplayedVirtualColumns();
	        // check for change first, to avoid unnecessary firing of events
	        // however we always fire 'finished' events. this is important
	        // when groups are resized, as if the group is changing slowly,
	        // eg 1 pixel at a time, then each change will fire change events
	        // in all the columns in the group, but only one with get the pixel.
	        if (finished || widthChanged) {
	            var event_3 = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                columns: [column],
	                column: column,
	                finished: finished,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_3);
	        }
	    };
	    ColumnController.prototype.setColumnAggFunc = function (column, aggFunc) {
	        column.setAggFunc(aggFunc);
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_VALUE_CHANGED,
	            columns: [column],
	            column: column,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {
	        var column = this.rowGroupColumns[fromIndex];
	        this.rowGroupColumns.splice(fromIndex, 1);
	        this.rowGroupColumns.splice(toIndex, 0, column);
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
	            columns: this.rowGroupColumns,
	            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {
	        this.columnAnimationService.start();
	        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
	            console.warn('ag-Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);
	            console.warn('ag-Grid: remember that you should not count the moving columns when calculating the new index');
	            return;
	        }
	        // we want to pull all the columns out first and put them into an ordered list
	        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
	        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
	        if (failedRules) {
	            return;
	        }
	        utils_1.Utils.moveInArray(this.gridColumns, columnsToMove, toIndex);
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_MOVED,
	            columns: columnsToMove,
	            column: columnsToMove.length === 1 ? columnsToMove[0] : null,
	            toIndex: toIndex,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.doesMovePassRules = function (columnsToMove, toIndex) {
	        var allColumnsCopy = this.gridColumns.slice();
	        utils_1.Utils.moveInArray(allColumnsCopy, columnsToMove, toIndex);
	        var rulesPass = true;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (child) {
	            if (!(child instanceof originalColumnGroup_1.OriginalColumnGroup)) {
	                return;
	            }
	            var columnGroup = child;
	            var marryChildren = columnGroup.getColGroupDef() && columnGroup.getColGroupDef().marryChildren;
	            if (!marryChildren) {
	                return;
	            }
	            var newIndexes = [];
	            columnGroup.getLeafColumns().forEach(function (col) {
	                var newColIndex = allColumnsCopy.indexOf(col);
	                newIndexes.push(newColIndex);
	            });
	            var maxIndex = Math.max.apply(Math, newIndexes);
	            var minIndex = Math.min.apply(Math, newIndexes);
	            // width is how far the first column in this group is away from the last column
	            var spread = maxIndex - minIndex;
	            var maxSpread = columnGroup.getLeafColumns().length - 1;
	            // if the columns
	            if (spread > maxSpread) {
	                rulesPass = false;
	            }
	            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
	            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));
	        });
	        return rulesPass;
	    };
	    ColumnController.prototype.moveColumn = function (key, toIndex) {
	        this.moveColumns([key], toIndex);
	    };
	    ColumnController.prototype.moveColumnByIndex = function (fromIndex, toIndex) {
	        var column = this.gridColumns[fromIndex];
	        this.moveColumn(column, toIndex);
	    };
	    // used by:
	    // + angularGrid -> for setting body width
	    // + rowController -> setting main row widths (when inserting and resizing)
	    // need to cache this
	    ColumnController.prototype.getBodyContainerWidth = function () {
	        return this.bodyWidth;
	    };
	    ColumnController.prototype.getContainerWidth = function (pinned) {
	        switch (pinned) {
	            case column_1.Column.PINNED_LEFT: return this.leftWidth;
	            case column_1.Column.PINNED_RIGHT: return this.rightWidth;
	            default: return this.bodyWidth;
	        }
	    };
	    // after setColumnWidth or updateGroupsAndDisplayedColumns
	    ColumnController.prototype.updateBodyWidths = function () {
	        var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
	        var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
	        var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns);
	        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
	        // columns, due to RTL inverting the y coordinates
	        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
	        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
	        if (atLeastOneChanged) {
	            this.bodyWidth = newBodyWidth;
	            this.leftWidth = newLeftWidth;
	            this.rightWidth = newRightWidth;
	            // when this fires, it is picked up by the gridPanel, which ends up in
	            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setVirtualViewportPosition()
	            var event_4 = {
	                type: events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_4);
	        }
	    };
	    // + rowController
	    ColumnController.prototype.getValueColumns = function () {
	        return this.valueColumns ? this.valueColumns : [];
	    };
	    // + rowController
	    ColumnController.prototype.getPivotColumns = function () {
	        return this.pivotColumns ? this.pivotColumns : [];
	    };
	    // + inMemoryRowModel
	    ColumnController.prototype.isPivotActive = function () {
	        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
	    };
	    // + toolPanel
	    ColumnController.prototype.getRowGroupColumns = function () {
	        return this.rowGroupColumns ? this.rowGroupColumns : [];
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedCenterColumns = function () {
	        return this.displayedCenterColumns;
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedLeftColumns = function () {
	        return this.displayedLeftColumns;
	    };
	    ColumnController.prototype.getDisplayedRightColumns = function () {
	        return this.displayedRightColumns;
	    };
	    ColumnController.prototype.getDisplayedColumns = function (type) {
	        switch (type) {
	            case column_1.Column.PINNED_LEFT: return this.getDisplayedLeftColumns();
	            case column_1.Column.PINNED_RIGHT: return this.getDisplayedRightColumns();
	            default: return this.getDisplayedCenterColumns();
	        }
	    };
	    // used by:
	    // + inMemoryRowController -> sorting, building quick filter text
	    // + headerRenderer -> sorting (clearing icon)
	    ColumnController.prototype.getAllPrimaryColumns = function () {
	        return this.primaryColumns;
	    };
	    // + moveColumnController
	    ColumnController.prototype.getAllGridColumns = function () {
	        return this.gridColumns;
	    };
	    ColumnController.prototype.isEmpty = function () {
	        return utils_1.Utils.missingOrEmpty(this.gridColumns);
	    };
	    ColumnController.prototype.isRowGroupEmpty = function () {
	        return utils_1.Utils.missingOrEmpty(this.rowGroupColumns);
	    };
	    ColumnController.prototype.setColumnVisible = function (key, visible) {
	        this.setColumnsVisible([key], visible);
	    };
	    ColumnController.prototype.setColumnsVisible = function (keys, visible) {
	        var _this = this;
	        this.columnAnimationService.start();
	        this.actionOnGridColumns(keys, function (column) {
	            column.setVisible(visible);
	            return true;
	        }, function () {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_VISIBLE,
	                visible: visible,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.setColumnPinned = function (key, pinned) {
	        this.setColumnsPinned([key], pinned);
	    };
	    ColumnController.prototype.setColumnsPinned = function (keys, pinned) {
	        var _this = this;
	        this.columnAnimationService.start();
	        var actualPinned;
	        if (pinned === true || pinned === column_1.Column.PINNED_LEFT) {
	            actualPinned = column_1.Column.PINNED_LEFT;
	        }
	        else if (pinned === column_1.Column.PINNED_RIGHT) {
	            actualPinned = column_1.Column.PINNED_RIGHT;
	        }
	        else {
	            actualPinned = null;
	        }
	        this.actionOnGridColumns(keys, function (column) {
	            column.setPinned(actualPinned);
	            return true;
	        }, function () {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_PINNED,
	                pinned: actualPinned,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    // does an action on a set of columns. provides common functionality for looking up the
	    // columns based on key, getting a list of effected columns, and then updated the event
	    // with either one column (if it was just one col) or a list of columns
	    // used by: autoResize, setVisible, setPinned
	    ColumnController.prototype.actionOnGridColumns = function (// the column keys this action will be on
	        keys, 
	        // the action to do - if this returns false, the column was skipped
	        // and won't be included in the event
	        action, 
	        // should return back a column event of the right type
	        createEvent) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var updatedColumns = [];
	        keys.forEach(function (key) {
	            var column = _this.getGridColumn(key);
	            if (!column) {
	                return;
	            }
	            // need to check for false with type (ie !== instead of !=)
	            // as not returning anything (undefined) would also be false
	            var resultOfAction = action(column);
	            if (resultOfAction !== false) {
	                updatedColumns.push(column);
	            }
	        });
	        if (updatedColumns.length === 0) {
	            return;
	        }
	        this.updateDisplayedColumns();
	        if (utils_1.Utils.exists(createEvent)) {
	            var event_5 = createEvent();
	            event_5.columns = updatedColumns;
	            event_5.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
	            this.eventService.dispatchEvent(event_5);
	        }
	    };
	    ColumnController.prototype.getDisplayedColBefore = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex > 0) {
	            return allDisplayedColumns[oldIndex - 1];
	        }
	        else {
	            return null;
	        }
	    };
	    // used by:
	    // + rowRenderer -> for navigation
	    ColumnController.prototype.getDisplayedColAfter = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex < (allDisplayedColumns.length - 1)) {
	            return allDisplayedColumns[oldIndex + 1];
	        }
	        else {
	            return null;
	        }
	    };
	    ColumnController.prototype.isPinningLeft = function () {
	        return this.displayedLeftColumns.length > 0;
	    };
	    ColumnController.prototype.isPinningRight = function () {
	        return this.displayedRightColumns.length > 0;
	    };
	    ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
	        var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
	        if (utils_1.Utils.exists(this.groupAutoColumns)) {
	            this.groupAutoColumns.forEach(function (col) { return result.push(col); });
	        }
	        if (this.secondaryColumnsPresent) {
	            this.secondaryColumns.forEach(function (column) { return result.push(column); });
	        }
	        return result;
	    };
	    ColumnController.prototype.createStateItemFromColumn = function (column) {
	        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
	        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
	        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
	        var resultItem = {
	            colId: column.getColId(),
	            hide: !column.isVisible(),
	            aggFunc: aggFunc,
	            width: column.getActualWidth(),
	            pivotIndex: pivotIndex,
	            pinned: column.getPinned(),
	            rowGroupIndex: rowGroupIndex
	        };
	        return resultItem;
	    };
	    ColumnController.prototype.getColumnState = function () {
	        if (utils_1.Utils.missing(this.primaryColumns)) {
	            return [];
	        }
	        var columnStateList = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
	        if (!this.pivotMode) {
	            this.orderColumnStateList(columnStateList);
	        }
	        return columnStateList;
	    };
	    ColumnController.prototype.orderColumnStateList = function (columnStateList) {
	        var gridColumnIds = this.gridColumns.map(function (column) { return column.getColId(); });
	        columnStateList.sort(function (itemA, itemB) {
	            var posA = gridColumnIds.indexOf(itemA.colId);
	            var posB = gridColumnIds.indexOf(itemB.colId);
	            return posA - posB;
	        });
	    };
	    ColumnController.prototype.resetColumnState = function () {
	        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list
	        var primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        var state = [];
	        if (primaryColumns) {
	            primaryColumns.forEach(function (column) {
	                state.push({
	                    colId: column.getColId(),
	                    aggFunc: column.getColDef().aggFunc,
	                    hide: column.getColDef().hide,
	                    pinned: column.getColDef().pinned,
	                    rowGroupIndex: column.getColDef().rowGroupIndex,
	                    pivotIndex: column.getColDef().pivotIndex,
	                    width: column.getColDef().width
	                });
	            });
	        }
	        this.setColumnState(state);
	    };
	    ColumnController.prototype.setColumnState = function (columnState) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(this.primaryColumns)) {
	            return false;
	        }
	        this.autoGroupsNeedBuilding = true;
	        // at the end below, this list will have all columns we got no state for
	        var columnsWithNoState = this.primaryColumns.slice();
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        var success = true;
	        var rowGroupIndexes = {};
	        var pivotIndexes = {};
	        if (columnState) {
	            columnState.forEach(function (stateItem) {
	                var column = _this.getPrimaryColumn(stateItem.colId);
	                if (!column) {
	                    console.warn('ag-grid: column ' + stateItem.colId + ' not found');
	                    success = false;
	                }
	                else {
	                    _this.syncColumnWithStateItem(column, stateItem, rowGroupIndexes, pivotIndexes);
	                    utils_1.Utils.removeFromArray(columnsWithNoState, column);
	                }
	            });
	        }
	        // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
	        columnsWithNoState.forEach(this.syncColumnWithNoState.bind(this));
	        // sort the lists according to the indexes that were provided
	        this.rowGroupColumns.sort(this.sortColumnListUsingIndexes.bind(this, rowGroupIndexes));
	        this.pivotColumns.sort(this.sortColumnListUsingIndexes.bind(this, pivotIndexes));
	        this.copyDownGridColumns();
	        var orderOfColIds = columnState.map(function (stateItem) { return stateItem.colId; });
	        this.gridColumns.sort(function (colA, colB) {
	            var indexA = orderOfColIds.indexOf(colA.getId());
	            var indexB = orderOfColIds.indexOf(colB.getId());
	            return indexA - indexB;
	        });
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        return success;
	    };
	    ColumnController.prototype.sortColumnListUsingIndexes = function (indexes, colA, colB) {
	        var indexA = indexes[colA.getId()];
	        var indexB = indexes[colB.getId()];
	        return indexA - indexB;
	    };
	    ColumnController.prototype.syncColumnWithNoState = function (column) {
	        column.setVisible(false);
	        column.setAggFunc(null);
	        column.setPinned(null);
	        column.setRowGroupActive(false);
	        column.setPivotActive(false);
	        column.setValueActive(false);
	    };
	    ColumnController.prototype.syncColumnWithStateItem = function (column, stateItem, rowGroupIndexes, pivotIndexes) {
	        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
	        column.setVisible(!stateItem.hide);
	        // sets pinned to 'left' or 'right'
	        column.setPinned(stateItem.pinned);
	        // if width provided and valid, use it, otherwise stick with the old width
	        if (stateItem.width >= this.gridOptionsWrapper.getMinColWidth()) {
	            column.setActualWidth(stateItem.width);
	        }
	        if (typeof stateItem.aggFunc === 'string') {
	            column.setAggFunc(stateItem.aggFunc);
	            column.setValueActive(true);
	            this.valueColumns.push(column);
	        }
	        else {
	            if (utils_1.Utils.exists(stateItem.aggFunc)) {
	                console.warn('ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +
	                    'functions, register the functions first before using them in get/set state. This is because it is' +
	                    'intended for the column state to be stored and retrieved as simple JSON.');
	            }
	            column.setAggFunc(null);
	            column.setValueActive(false);
	        }
	        if (typeof stateItem.rowGroupIndex === 'number') {
	            this.rowGroupColumns.push(column);
	            column.setRowGroupActive(true);
	            rowGroupIndexes[column.getId()] = stateItem.rowGroupIndex;
	        }
	        else {
	            column.setRowGroupActive(false);
	        }
	        if (typeof stateItem.pivotIndex === 'number') {
	            this.pivotColumns.push(column);
	            column.setPivotActive(true);
	            pivotIndexes[column.getId()] = stateItem.pivotIndex;
	        }
	        else {
	            column.setPivotActive(false);
	        }
	    };
	    ColumnController.prototype.getGridColumns = function (keys) {
	        return this.getColumns(keys, this.getGridColumn.bind(this));
	    };
	    ColumnController.prototype.getColumns = function (keys, columnLookupCallback) {
	        var foundColumns = [];
	        if (keys) {
	            keys.forEach(function (key) {
	                var column = columnLookupCallback(key);
	                if (column) {
	                    foundColumns.push(column);
	                }
	            });
	        }
	        return foundColumns;
	    };
	    // used by growGroupPanel
	    ColumnController.prototype.getColumnWithValidation = function (key) {
	        var column = this.getPrimaryColumn(key);
	        if (!column) {
	            console.warn('ag-Grid: could not find column ' + column);
	        }
	        return column;
	    };
	    ColumnController.prototype.getPrimaryColumn = function (key) {
	        return this.getColumn(key, this.primaryColumns);
	    };
	    ColumnController.prototype.getGridColumn = function (key) {
	        return this.getColumn(key, this.gridColumns);
	    };
	    ColumnController.prototype.getColumn = function (key, columnList) {
	        if (!key) {
	            return null;
	        }
	        for (var i = 0; i < columnList.length; i++) {
	            if (this.columnsMatch(columnList[i], key)) {
	                return columnList[i];
	            }
	        }
	        return this.getAutoColumn(key);
	    };
	    ColumnController.prototype.getAutoColumn = function (key) {
	        var _this = this;
	        if (!utils_1.Utils.exists(this.groupAutoColumns) || utils_1.Utils.missing(this.groupAutoColumns)) {
	            return null;
	        }
	        return utils_1.Utils.find(this.groupAutoColumns, function (groupCol) {
	            return _this.columnsMatch(groupCol, key);
	        });
	    };
	    ColumnController.prototype.columnsMatch = function (column, key) {
	        var columnMatches = column === key;
	        var colDefMatches = column.getColDef() === key;
	        var idMatches = column.getColId() == key;
	        return columnMatches || colDefMatches || idMatches;
	    };
	    ColumnController.prototype.getDisplayNameForColumn = function (column, location, includeAggFunc) {
	        if (includeAggFunc === void 0) { includeAggFunc = false; }
	        var headerName = this.getHeaderName(column.getColDef(), column, null, location);
	        if (includeAggFunc) {
	            return this.wrapHeaderNameWithAggFunc(column, headerName);
	        }
	        else {
	            return headerName;
	        }
	    };
	    ColumnController.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
	        var colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
	        if (colGroupDef) {
	            return this.getHeaderName(colGroupDef, null, columnGroup, location);
	        }
	        else {
	            return null;
	        }
	    };
	    // location is where the column is going to appear, ie who is calling us
	    ColumnController.prototype.getHeaderName = function (colDef, column, columnGroup, location) {
	        var headerValueGetter = colDef.headerValueGetter;
	        if (headerValueGetter) {
	            var params = {
	                colDef: colDef,
	                column: column,
	                columnGroup: columnGroup,
	                location: location,
	                api: this.gridOptionsWrapper.getApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            if (typeof headerValueGetter === 'function') {
	                // valueGetter is a function, so just call it
	                return headerValueGetter(params);
	            }
	            else if (typeof headerValueGetter === 'string') {
	                // valueGetter is an expression, so execute the expression
	                return this.expressionService.evaluate(headerValueGetter, params);
	            }
	            else {
	                console.warn('ag-grid: headerValueGetter must be a function or a string');
	                return '';
	            }
	        }
	        else if (colDef.headerName != null) {
	            return colDef.headerName;
	        }
	        else if (colDef.field) {
	            return utils_1.Utils.camelCaseToHumanText(colDef.field);
	        }
	        else {
	            return '';
	        }
	    };
	    /*
	        private getHeaderGroupName(columnGroup: ColumnGroup): string {
	            let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
	            let headerValueGetter = colGroupDef.headerValueGetter;

	            if (headerValueGetter) {
	                let params = {
	                    columnGroup: columnGroup,
	                    colDef: colGroupDef,
	                    api: this.gridOptionsWrapper.getApi(),
	                    context: this.gridOptionsWrapper.getContext()
	                };

	                if (typeof headerValueGetter === 'function') {
	                    // valueGetter is a function, so just call it
	                    return headerValueGetter(params);
	                } else if (typeof headerValueGetter === 'string') {
	                    // valueGetter is an expression, so execute the expression
	                    return this.expressionService.evaluate(headerValueGetter, params);
	                } else {
	                    console.warn('ag-grid: headerValueGetter must be a function or a string');
	                    return '';
	                }
	            } else {
	                return colGroupDef.headerName;
	            }
	        }
	    */
	    ColumnController.prototype.wrapHeaderNameWithAggFunc = function (column, headerName) {
	        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
	            return headerName;
	        }
	        // only columns with aggregation active can have aggregations
	        var pivotValueColumn = column.getColDef().pivotValueColumn;
	        var pivotActiveOnThisColumn = utils_1.Utils.exists(pivotValueColumn);
	        var aggFunc = null;
	        var aggFuncFound;
	        // otherwise we have a measure that is active, and we are doing aggregation on it
	        if (pivotActiveOnThisColumn) {
	            aggFunc = pivotValueColumn.getAggFunc();
	            aggFuncFound = true;
	        }
	        else {
	            var measureActive = column.isValueActive();
	            var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
	            if (measureActive && aggregationPresent) {
	                aggFunc = column.getAggFunc();
	                aggFuncFound = true;
	            }
	            else {
	                aggFuncFound = false;
	            }
	        }
	        if (aggFuncFound) {
	            var aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';
	            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
	            return aggFuncStringTranslated + "(" + headerName + ")";
	        }
	        else {
	            return headerName;
	        }
	    };
	    // returns the group with matching colId and instanceId. If instanceId is missing,
	    // matches only on the colId.
	    ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
	        if (!colId) {
	            return null;
	        }
	        if (colId instanceof columnGroup_1.ColumnGroup) {
	            return colId;
	        }
	        var allColumnGroups = this.getAllDisplayedColumnGroups();
	        var checkInstanceId = typeof instanceId === 'number';
	        var result = null;
	        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                var columnGroup = child;
	                var matched = void 0;
	                if (checkInstanceId) {
	                    matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
	                }
	                else {
	                    matched = colId === columnGroup.getGroupId();
	                }
	                if (matched) {
	                    result = columnGroup;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.setColumnDefs = function (columnDefs) {
	        // always invalidate cache on changing columns, as the column id's for the new columns
	        // could overlap with the old id's, so the cache would return old values for new columns.
	        this.valueCache.expire();
	        // NOTE ==================
	        // we should be destroying the existing columns and groups if they exist, for example, the original column
	        // group adds a listener to the columns, it should be also removing the listeners
	        this.autoGroupsNeedBuilding = true;
	        var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(columnDefs, true);
	        this.primaryBalancedTree = balancedTreeResult.balancedTree;
	        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	        this.primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        this.extractRowGroupColumns();
	        this.extractPivotColumns();
	        this.createValueColumns();
	        this.copyDownGridColumns();
	        this.updateDisplayedColumns();
	        this.checkDisplayedVirtualColumns();
	        this.ready = true;
	        var eventEverythingChanged = {
	            type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(eventEverythingChanged);
	        var newColumnsLoadedEvent = {
	            type: events_1.Events.EVENT_NEW_COLUMNS_LOADED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(newColumnsLoadedEvent);
	    };
	    ColumnController.prototype.isReady = function () {
	        return this.ready;
	    };
	    ColumnController.prototype.extractRowGroupColumns = function () {
	        var _this = this;
	        this.rowGroupColumns.forEach(function (column) { return column.setRowGroupActive(false); });
	        this.rowGroupColumns = [];
	        // pull out items with rowGroupIndex
	        this.primaryColumns.forEach(function (column) {
	            if (typeof column.getColDef().rowGroupIndex === 'number') {
	                _this.rowGroupColumns.push(column);
	                column.setRowGroupActive(true);
	            }
	        });
	        // then sort them
	        this.rowGroupColumns.sort(function (colA, colB) {
	            return colA.getColDef().rowGroupIndex - colB.getColDef().rowGroupIndex;
	        });
	        // now just pull out items rowGroup, they will be added at the end
	        // after the indexed ones, but in the order the columns appear
	        this.primaryColumns.forEach(function (column) {
	            if (column.getColDef().rowGroup) {
	                // if user already specified rowGroupIndex then we skip it as this col already included
	                if (_this.rowGroupColumns.indexOf(column) >= 0) {
	                    return;
	                }
	                _this.rowGroupColumns.push(column);
	                column.setRowGroupActive(true);
	            }
	        });
	    };
	    ColumnController.prototype.extractPivotColumns = function () {
	        var _this = this;
	        this.pivotColumns.forEach(function (column) { return column.setPivotActive(false); });
	        this.pivotColumns = [];
	        // pull out items with pivotIndex
	        this.primaryColumns.forEach(function (column) {
	            if (typeof column.getColDef().pivotIndex === 'number') {
	                _this.pivotColumns.push(column);
	                column.setPivotActive(true);
	            }
	        });
	        // then sort them
	        this.pivotColumns.sort(function (colA, colB) {
	            return colA.getColDef().pivotIndex - colB.getColDef().pivotIndex;
	        });
	        // now check the boolean equivalent
	        this.primaryColumns.forEach(function (column) {
	            if (column.getColDef().pivot) {
	                // if user already specified pivotIndex then we skip it as this col already included
	                if (_this.pivotColumns.indexOf(column) >= 0) {
	                    return;
	                }
	                _this.pivotColumns.push(column);
	                column.setPivotActive(true);
	            }
	        });
	    };
	    ColumnController.prototype.resetColumnGroupState = function () {
	        var stateItems = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.primaryBalancedTree, function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var groupState = {
	                    groupId: child.getGroupId(),
	                    open: child.getColGroupDef().openByDefault
	                };
	                stateItems.push(groupState);
	            }
	        });
	        this.setColumnGroupState(stateItems);
	    };
	    ColumnController.prototype.getColumnGroupState = function () {
	        var columnGroupState = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalColumnGroup = node;
	                columnGroupState.push({
	                    groupId: originalColumnGroup.getGroupId(),
	                    open: originalColumnGroup.isExpanded()
	                });
	            }
	        });
	        return columnGroupState;
	    };
	    ColumnController.prototype.setColumnGroupState = function (stateItems) {
	        var _this = this;
	        this.columnAnimationService.start();
	        var impactedGroups = [];
	        stateItems.forEach(function (stateItem) {
	            var groupKey = stateItem.groupId;
	            var newValue = stateItem.open;
	            var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
	            if (!originalColumnGroup) {
	                return;
	            }
	            if (originalColumnGroup.isExpanded() === newValue) {
	                return;
	            }
	            _this.logger.log('columnGroupOpened(' + originalColumnGroup.getGroupId() + ',' + newValue + ')');
	            originalColumnGroup.setExpanded(newValue);
	            impactedGroups.push(originalColumnGroup);
	        });
	        this.updateGroupsAndDisplayedColumns();
	        impactedGroups.forEach(function (originalColumnGroup) {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_GROUP_OPENED,
	                columnGroup: originalColumnGroup,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        this.columnAnimationService.finish();
	    };
	    // called by headerRenderer - when a header is opened or closed
	    ColumnController.prototype.setColumnGroupOpened = function (key, newValue) {
	        var keyAsString;
	        if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            keyAsString = key.getId();
	        }
	        else {
	            keyAsString = key;
	        }
	        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }]);
	    };
	    ColumnController.prototype.getOriginalColumnGroup = function (key) {
	        if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            return key;
	        }
	        if (typeof key !== 'string') {
	            console.error('ag-Grid: group key must be a string');
	        }
	        // otherwise, search for the column group by id
	        var res = null;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalColumnGroup = node;
	                if (originalColumnGroup.getId() === key) {
	                    res = originalColumnGroup;
	                }
	            }
	        });
	        return res;
	    };
	    ColumnController.prototype.calculateColumnsForDisplay = function () {
	        var columnsForDisplay;
	        if (this.pivotMode && !this.secondaryColumnsPresent) {
	            // pivot mode is on, but we are not pivoting, so we only
	            // show columns we are aggregating on
	            columnsForDisplay = this.createColumnsToDisplayFromValueColumns();
	        }
	        else {
	            // otherwise continue as normal. this can be working on the primary
	            // or secondary columns, whatever the gridColumns are set to
	            columnsForDisplay = utils_1.Utils.filter(this.gridColumns, function (column) { return column.isVisible(); });
	        }
	        this.createGroupAutoColumnsIfNeeded();
	        if (utils_1.Utils.exists(this.groupAutoColumns)) {
	            columnsForDisplay = this.groupAutoColumns.concat(columnsForDisplay);
	        }
	        return columnsForDisplay;
	    };
	    ColumnController.prototype.checkColSpanActiveInCols = function (columns) {
	        var result = false;
	        columns.forEach(function (col) {
	            if (utils_1.Utils.exists(col.getColDef().colSpan)) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.calculateColumnsForGroupDisplay = function () {
	        var _this = this;
	        this.groupDisplayColumns = [];
	        var checkFunc = function (col) {
	            var colDef = col.getColDef();
	            if (colDef && utils_1.Utils.exists(colDef.showRowGroup)) {
	                _this.groupDisplayColumns.push(col);
	            }
	        };
	        this.gridColumns.forEach(checkFunc);
	        if (this.groupAutoColumns) {
	            this.groupAutoColumns.forEach(checkFunc);
	        }
	    };
	    ColumnController.prototype.getGroupDisplayColumns = function () {
	        return this.groupDisplayColumns;
	    };
	    ColumnController.prototype.createColumnsToDisplayFromValueColumns = function () {
	        var _this = this;
	        // make a copy of the value columns, so we have to side effects
	        var result = this.valueColumns.slice();
	        // order the columns as per the grid columns. having the order is
	        // important as without it, reordering of columns would have no impact
	        result.sort(function (colA, colB) {
	            return _this.gridColumns.indexOf(colA) - _this.gridColumns.indexOf(colB);
	        });
	        return result;
	    };
	    ColumnController.prototype.updateDisplayedColumns = function () {
	        var columnsForDisplay = this.calculateColumnsForDisplay();
	        this.buildDisplayedTrees(columnsForDisplay);
	        this.calculateColumnsForGroupDisplay();
	        // this is also called when a group is opened or closed
	        this.updateGroupsAndDisplayedColumns();
	        this.setFirstRightAndLastLeftPinned();
	    };
	    ColumnController.prototype.isSecondaryColumnsPresent = function () {
	        return this.secondaryColumnsPresent;
	    };
	    ColumnController.prototype.setSecondaryColumns = function (colDefs) {
	        var newColsPresent = colDefs && colDefs.length > 0;
	        // if not cols passed, and we had to cols anyway, then do nothing
	        if (!newColsPresent && !this.secondaryColumnsPresent) {
	            return;
	        }
	        if (newColsPresent) {
	            this.processSecondaryColumnDefinitions(colDefs);
	            var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(colDefs, false);
	            this.secondaryBalancedTree = balancedTreeResult.balancedTree;
	            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
	            this.secondaryColumnsPresent = true;
	        }
	        else {
	            this.secondaryBalancedTree = null;
	            this.secondaryHeaderRowCount = -1;
	            this.secondaryColumns = null;
	            this.secondaryColumnsPresent = false;
	        }
	        this.copyDownGridColumns();
	        this.updateDisplayedColumns();
	    };
	    ColumnController.prototype.processSecondaryColumnDefinitions = function (colDefs) {
	        var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
	        var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
	        if (!columnCallback && !groupCallback) {
	            return;
	        }
	        searchForColDefs(colDefs);
	        function searchForColDefs(colDefs2) {
	            colDefs2.forEach(function (abstractColDef) {
	                var isGroup = utils_1.Utils.exists(abstractColDef.children);
	                if (isGroup) {
	                    var colGroupDef = abstractColDef;
	                    if (groupCallback) {
	                        groupCallback(colGroupDef);
	                    }
	                    searchForColDefs(colGroupDef.children);
	                }
	                else {
	                    var colDef = abstractColDef;
	                    if (columnCallback) {
	                        columnCallback(colDef);
	                    }
	                }
	            });
	        }
	    };
	    // called from: setColumnState, setColumnDefs, setAlternativeColumnDefs
	    ColumnController.prototype.copyDownGridColumns = function () {
	        if (this.secondaryColumns) {
	            this.gridBalancedTree = this.secondaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.secondaryHeaderRowCount;
	            this.gridColumns = this.secondaryColumns.slice();
	        }
	        else {
	            this.gridBalancedTree = this.primaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.primaryHeaderRowCount;
	            this.gridColumns = this.primaryColumns.slice();
	        }
	        this.clearDisplayedColumns();
	        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
	        var event = {
	            type: events_1.Events.EVENT_GRID_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // gets called after we copy down grid columns, to make sure any part of the gui
	    // that tries to draw, eg the header, it will get empty lists of columns rather
	    // than stale columns. for example, the header will received gridColumnsChanged
	    // event, so will try and draw, but it will draw successfully when it acts on the
	    // virtualColumnsChanged event
	    ColumnController.prototype.clearDisplayedColumns = function () {
	        this.displayedLeftColumnTree = [];
	        this.displayedRightColumnTree = [];
	        this.displayedCentreColumnTree = [];
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        this.allDisplayedColumns = [];
	        this.allDisplayedVirtualColumns = [];
	    };
	    ColumnController.prototype.updateGroupsAndDisplayedColumns = function () {
	        this.updateGroups();
	        this.updateDisplayedColumnsFromTrees();
	        this.updateVirtualSets();
	        this.updateBodyWidths();
	        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display
	        var event = {
	            type: events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.updateDisplayedColumnsFromTrees = function () {
	        this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
	        this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
	        this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
	        this.setupAllDisplayedColumns();
	        this.setLeftValues();
	    };
	    ColumnController.prototype.setupAllDisplayedColumns = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.allDisplayedColumns = this.displayedRightColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedLeftColumns);
	        }
	        else {
	            this.allDisplayedColumns = this.displayedLeftColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedRightColumns);
	        }
	    };
	    // sets the left pixel position of each column
	    ColumnController.prototype.setLeftValues = function () {
	        this.setLeftValuesOfColumns();
	        this.setLeftValuesOfGroups();
	    };
	    ColumnController.prototype.setLeftValuesOfColumns = function () {
	        var _this = this;
	        // go through each list of displayed columns
	        var allColumns = this.primaryColumns.slice(0);
	        // let totalColumnWidth = this.getWidthOfColsInList()
	        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
	        [this.displayedLeftColumns, this.displayedRightColumns, this.displayedCenterColumns].forEach(function (columns) {
	            if (doingRtl) {
	                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
	                var left_1 = _this.getWidthOfColsInList(columns);
	                columns.forEach(function (column) {
	                    left_1 -= column.getActualWidth();
	                    column.setLeft(left_1);
	                });
	            }
	            else {
	                // otherwise normal LTR, we start at zero
	                var left_2 = 0;
	                columns.forEach(function (column) {
	                    column.setLeft(left_2);
	                    left_2 += column.getActualWidth();
	                });
	            }
	            utils_1.Utils.removeAllFromArray(allColumns, columns);
	        });
	        // items left in allColumns are columns not displayed, so remove the left position. this is
	        // important for the rows, as if a col is made visible, then taken out, then made visible again,
	        // we don't want the animation of the cell floating in from the old position, whatever that was.
	        allColumns.forEach(function (column) {
	            column.setLeft(null);
	        });
	    };
	    ColumnController.prototype.setLeftValuesOfGroups = function () {
	        // a groups left value is the lest left value of it's children
	        [this.displayedLeftColumnTree, this.displayedRightColumnTree, this.displayedCentreColumnTree].forEach(function (columns) {
	            columns.forEach(function (column) {
	                if (column instanceof columnGroup_1.ColumnGroup) {
	                    var columnGroup = column;
	                    columnGroup.checkLeft();
	                }
	            });
	        });
	    };
	    ColumnController.prototype.addToDisplayedColumns = function (displayedColumnTree, displayedColumns) {
	        displayedColumns.length = 0;
	        this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function (child) {
	            if (child instanceof column_1.Column) {
	                displayedColumns.push(child);
	            }
	        });
	    };
	    ColumnController.prototype.updateDisplayedCenterVirtualColumns = function () {
	        var skipVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation() || this.gridOptionsWrapper.isForPrint();
	        if (skipVirtualisation) {
	            // no virtualisation, so don't filter
	            this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
	        }
	        else {
	            // filter out what should be visible
	            this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
	        }
	        this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns
	            .concat(this.displayedLeftColumns)
	            .concat(this.displayedRightColumns);
	        // return map of virtual col id's, for easy lookup when building the groups.
	        // the map will be colId=>true, ie col id's mapping to 'true'.
	        var result = {};
	        this.allDisplayedVirtualColumns.forEach(function (col) {
	            result[col.getId()] = true;
	        });
	        return result;
	    };
	    ColumnController.prototype.getVirtualHeaderGroupRow = function (type, dept) {
	        var result;
	        switch (type) {
	            case column_1.Column.PINNED_LEFT:
	                result = this.displayedLeftHeaderRows[dept];
	                break;
	            case column_1.Column.PINNED_RIGHT:
	                result = this.displayedRightHeaderRows[dept];
	                break;
	            default:
	                result = this.displayedCentreHeaderRows[dept];
	                break;
	        }
	        if (utils_1.Utils.missing(result)) {
	            result = [];
	        }
	        return result;
	    };
	    ColumnController.prototype.updateDisplayedVirtualGroups = function (virtualColIds) {
	        // go through each group, see if any of it's cols are displayed, and if yes,
	        // then this group is included
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
	        testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
	        testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);
	        function testGroup(children, result, dept) {
	            var returnValue = false;
	            for (var i = 0; i < children.length; i++) {
	                // see if this item is within viewport
	                var child = children[i];
	                var addThisItem = void 0;
	                if (child instanceof column_1.Column) {
	                    // for column, test if column is included
	                    addThisItem = virtualColIds[child.getId()] === true;
	                }
	                else {
	                    // if group, base decision on children
	                    var columnGroup = child;
	                    addThisItem = testGroup(columnGroup.getDisplayedChildren(), result, dept + 1);
	                }
	                if (addThisItem) {
	                    returnValue = true;
	                    if (!result[dept]) {
	                        result[dept] = [];
	                    }
	                    result[dept].push(child);
	                }
	            }
	            return returnValue;
	        }
	    };
	    ColumnController.prototype.updateVirtualSets = function () {
	        var virtualColIds = this.updateDisplayedCenterVirtualColumns();
	        this.updateDisplayedVirtualGroups(virtualColIds);
	    };
	    ColumnController.prototype.filterOutColumnsWithinViewport = function () {
	        return utils_1.Utils.filter(this.displayedCenterColumns, this.isColumnInViewport.bind(this));
	    };
	    // called from api
	    ColumnController.prototype.sizeColumnsToFit = function (gridWidth) {
	        var _this = this;
	        // avoid divide by zero
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        if (gridWidth <= 0 || allDisplayedColumns.length === 0) {
	            return;
	        }
	        var colsToNotSpread = utils_1.Utils.filter(allDisplayedColumns, function (column) {
	            return column.getColDef().suppressSizeToFit === true;
	        });
	        var colsToSpread = utils_1.Utils.filter(allDisplayedColumns, function (column) {
	            return column.getColDef().suppressSizeToFit !== true;
	        });
	        // make a copy of the cols that are going to be resized
	        var colsToFireEventFor = colsToSpread.slice(0);
	        var finishedResizing = false;
	        while (!finishedResizing) {
	            finishedResizing = true;
	            var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
	            if (availablePixels <= 0) {
	                // no width, set everything to minimum
	                colsToSpread.forEach(function (column) {
	                    column.setMinimum();
	                });
	            }
	            else {
	                var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
	                // we set the pixels for the last col based on what's left, as otherwise
	                // we could be a pixel or two short or extra because of rounding errors.
	                var pixelsForLastCol = availablePixels;
	                // backwards through loop, as we are removing items as we go
	                for (var i = colsToSpread.length - 1; i >= 0; i--) {
	                    var column = colsToSpread[i];
	                    var newWidth = Math.round(column.getActualWidth() * scale);
	                    if (newWidth < column.getMinWidth()) {
	                        column.setMinimum();
	                        moveToNotSpread(column);
	                        finishedResizing = false;
	                    }
	                    else if (column.isGreaterThanMax(newWidth)) {
	                        column.setActualWidth(column.getMaxWidth());
	                        moveToNotSpread(column);
	                        finishedResizing = false;
	                    }
	                    else {
	                        var onLastCol = i === 0;
	                        if (onLastCol) {
	                            column.setActualWidth(pixelsForLastCol);
	                        }
	                        else {
	                            column.setActualWidth(newWidth);
	                        }
	                    }
	                    pixelsForLastCol -= newWidth;
	                }
	            }
	        }
	        this.setLeftValues();
	        this.updateBodyWidths();
	        colsToFireEventFor.forEach(function (column) {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                column: column,
	                columns: [column],
	                finished: true,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        function moveToNotSpread(column) {
	            utils_1.Utils.removeFromArray(colsToSpread, column);
	            colsToNotSpread.push(column);
	        }
	    };
	    ColumnController.prototype.buildDisplayedTrees = function (visibleColumns) {
	        var leftVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() === 'left';
	        });
	        var rightVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() === 'right';
	        });
	        var centerVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() !== 'left' && column.getPinned() !== 'right';
	        });
	        var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
	        this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedLeftColumnTree);
	        this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedRightColumnTree);
	        this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedCentreColumnTree);
	    };
	    ColumnController.prototype.updateGroups = function () {
	        var allGroups = this.getAllDisplayedColumnGroups();
	        this.columnUtils.depthFirstAllColumnTreeSearch(allGroups, function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                var group = child;
	                group.calculateDisplayedColumns();
	            }
	        });
	    };
	    ColumnController.prototype.getGroupAutoColumns = function () {
	        return this.groupAutoColumns;
	    };
	    ColumnController.prototype.createGroupAutoColumnsIfNeeded = function () {
	        if (!this.autoGroupsNeedBuilding) {
	            return;
	        }
	        this.autoGroupsNeedBuilding = false;
	        // see if we need to insert the default grouping column
	        var needAutoColumns = (this.rowGroupColumns.length > 0 || this.usingTreeData)
	            && !this.gridOptionsWrapper.isGroupSuppressAutoColumn()
	            && !this.gridOptionsWrapper.isGroupUseEntireRow()
	            && !this.gridOptionsWrapper.isGroupSuppressRow();
	        if (needAutoColumns) {
	            this.groupAutoColumns = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
	        }
	        else {
	            this.groupAutoColumns = null;
	        }
	    };
	    ColumnController.prototype.createValueColumns = function () {
	        this.valueColumns.forEach(function (column) { return column.setValueActive(false); });
	        this.valueColumns = [];
	        // override with columns that have the aggFunc specified explicitly
	        for (var i = 0; i < this.primaryColumns.length; i++) {
	            var column = this.primaryColumns[i];
	            if (column.getColDef().aggFunc) {
	                column.setAggFunc(column.getColDef().aggFunc);
	                this.valueColumns.push(column);
	                column.setValueActive(true);
	            }
	        }
	    };
	    ColumnController.prototype.getWidthOfColsInList = function (columnList) {
	        var result = 0;
	        for (var i = 0; i < columnList.length; i++) {
	            result += columnList[i].getActualWidth();
	        }
	        return result;
	    };
	    ColumnController.prototype.getGridBalancedTree = function () {
	        return this.gridBalancedTree;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ColumnController.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder)
	    ], ColumnController.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context_1.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)
	    ], ColumnController.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context_1.Autowired('autoWidthCalculator'),
	        __metadata("design:type", autoWidthCalculator_1.AutoWidthCalculator)
	    ], ColumnController.prototype, "autoWidthCalculator", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ColumnController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], ColumnController.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], ColumnController.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], ColumnController.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService_1.ColumnAnimationService)
	    ], ColumnController.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context_1.Autowired('autoGroupColService'),
	        __metadata("design:type", autoGroupColService_1.AutoGroupColService)
	    ], ColumnController.prototype, "autoGroupColService", void 0);
	    __decorate([
	        context_1.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], ColumnController.prototype, "aggFuncService", void 0);
	    __decorate([
	        context_1.Optional('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], ColumnController.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", ColumnApi)
	    ], ColumnController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnController.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "init", null);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "setBeans", null);
	    ColumnController = __decorate([
	        context_1.Bean('columnController')
	    ], ColumnController);
	    return ColumnController;
	}());
	exports.ColumnController = ColumnController;


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var column_1 = __webpack_require__(299);
	var eventService_1 = __webpack_require__(285);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var ColumnGroup = (function () {
	    function ColumnGroup(originalColumnGroup, groupId, instanceId) {
	        // depends on the open/closed state of the group, only displaying columns are stored here
	        this.displayedChildren = [];
	        this.localEventService = new eventService_1.EventService();
	        this.groupId = groupId;
	        this.instanceId = instanceId;
	        this.originalColumnGroup = originalColumnGroup;
	    }
	    // this is static, a it is used outside of this class
	    ColumnGroup.createUniqueId = function (groupId, instanceId) {
	        return groupId + '_' + instanceId;
	    };
	    // as the user is adding and removing columns, the groups are recalculated.
	    // this reset clears out all children, ready for children to be added again
	    ColumnGroup.prototype.reset = function () {
	        this.parent = null;
	        this.children = null;
	        this.displayedChildren = null;
	    };
	    ColumnGroup.prototype.getParent = function () {
	        return this.parent;
	    };
	    ColumnGroup.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    ColumnGroup.prototype.getUniqueId = function () {
	        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
	    };
	    ColumnGroup.prototype.isEmptyGroup = function () {
	        return this.displayedChildren.length === 0;
	    };
	    ColumnGroup.prototype.checkLeft = function () {
	        // first get all children to setLeft, as it impacts our decision below
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof ColumnGroup) {
	                child.checkLeft();
	            }
	        });
	        // set our left based on first displayed column
	        if (this.displayedChildren.length > 0) {
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                var lastChild = this.displayedChildren[this.displayedChildren.length - 1];
	                var lastChildLeft = lastChild.getLeft();
	                this.setLeft(lastChildLeft);
	            }
	            else {
	                var firstChildLeft = this.displayedChildren[0].getLeft();
	                this.setLeft(firstChildLeft);
	            }
	        }
	        else {
	            // this should never happen, as if we have no displayed columns, then
	            // this groups should not even exist.
	            this.setLeft(null);
	        }
	    };
	    ColumnGroup.prototype.getLeft = function () {
	        return this.left;
	    };
	    ColumnGroup.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    ColumnGroup.prototype.setLeft = function (left) {
	        this.oldLeft = left;
	        if (this.left !== left) {
	            this.left = left;
	            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
	        }
	    };
	    ColumnGroup.prototype.createAgEvent = function (type) {
	        return {
	            type: type,
	        };
	    };
	    ColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    ColumnGroup.prototype.getInstanceId = function () {
	        return this.instanceId;
	    };
	    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
	        var result = false;
	        this.children.forEach(function (foundChild) {
	            if (wantedChild === foundChild) {
	                result = true;
	            }
	            if (foundChild instanceof ColumnGroup) {
	                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
	                    result = true;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getActualWidth = function () {
	        var groupActualWidth = 0;
	        if (this.displayedChildren) {
	            this.displayedChildren.forEach(function (child) {
	                groupActualWidth += child.getActualWidth();
	            });
	        }
	        return groupActualWidth;
	    };
	    ColumnGroup.prototype.isResizable = function () {
	        if (!this.displayedChildren) {
	            return false;
	        }
	        // if at least one child is resizable, then the group is resizable
	        var result = false;
	        this.displayedChildren.forEach(function (child) {
	            if (child.isResizable()) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getMinWidth = function () {
	        var result = 0;
	        this.displayedChildren.forEach(function (groupChild) {
	            result += groupChild.getMinWidth();
	        });
	        return result;
	    };
	    ColumnGroup.prototype.addChild = function (child) {
	        if (!this.children) {
	            this.children = [];
	        }
	        this.children.push(child);
	    };
	    ColumnGroup.prototype.getDisplayedChildren = function () {
	        return this.displayedChildren;
	    };
	    ColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    ColumnGroup.prototype.getDisplayedLeafColumns = function () {
	        var result = [];
	        this.addDisplayedLeafColumns(result);
	        return result;
	    };
	    // why two methods here doing the same thing?
	    ColumnGroup.prototype.getDefinition = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.getColGroupDef = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.isPadding = function () {
	        return this.originalColumnGroup.isPadding();
	    };
	    ColumnGroup.prototype.isExpandable = function () {
	        return this.originalColumnGroup.isExpandable();
	    };
	    ColumnGroup.prototype.isExpanded = function () {
	        return this.originalColumnGroup.isExpanded();
	    };
	    ColumnGroup.prototype.setExpanded = function (expanded) {
	        this.originalColumnGroup.setExpanded(expanded);
	    };
	    ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addDisplayedLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        this.children.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    ColumnGroup.prototype.getColumnGroupShow = function () {
	        return this.originalColumnGroup.getColumnGroupShow();
	    };
	    ColumnGroup.prototype.getOriginalColumnGroup = function () {
	        return this.originalColumnGroup;
	    };
	    ColumnGroup.prototype.calculateDisplayedColumns = function () {
	        var _this = this;
	        // clear out last time we calculated
	        this.displayedChildren = [];
	        // it not expandable, everything is visible
	        if (!this.originalColumnGroup.isExpandable()) {
	            this.displayedChildren = this.children;
	        }
	        else {
	            // and calculate again
	            this.children.forEach(function (abstractColumn) {
	                var headerGroupShow = abstractColumn.getColumnGroupShow();
	                switch (headerGroupShow) {
	                    case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
	                        // when set to open, only show col if group is open
	                        if (_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
	                        // when set to open, only show col if group is open
	                        if (!_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    default:
	                        // default is always show the column
	                        _this.displayedChildren.push(abstractColumn);
	                        break;
	                }
	            });
	        }
	        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
	    };
	    ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';
	    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';
	    ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';
	    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'leftChanged';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnGroup.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnGroup.prototype, "gridApi", void 0);
	    return ColumnGroup;
	}());
	exports.ColumnGroup = ColumnGroup;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnUtils_1 = __webpack_require__(300);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	// Wrapper around a user provide column definition. The grid treats the column definition as ready only.
	// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
	// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
	// appear as a child of either the original tree or the displayed tree. However the relevant group classes
	// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
	// can only appear in OriginalColumn tree).
	var Column = (function () {
	    function Column(colDef, colId, primary) {
	        this.moving = false;
	        this.menuVisible = false;
	        this.filterActive = false;
	        this.eventService = new eventService_1.EventService();
	        this.rowGroupActive = false;
	        this.pivotActive = false;
	        this.aggregationActive = false;
	        this.colDef = colDef;
	        this.visible = !colDef.hide;
	        this.sort = colDef.sort;
	        this.sortedAt = colDef.sortedAt;
	        this.colId = colId;
	        this.primary = primary;
	    }
	    Column.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    Column.prototype.getParent = function () {
	        return this.parent;
	    };
	    // this is done after constructor as it uses gridOptionsWrapper
	    Column.prototype.initialise = function () {
	        this.setPinned(this.colDef.pinned);
	        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
	        var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
	        if (this.colDef.minWidth) {
	            this.minWidth = this.colDef.minWidth;
	        }
	        else {
	            this.minWidth = minColWidth;
	        }
	        if (this.colDef.maxWidth) {
	            this.maxWidth = this.colDef.maxWidth;
	        }
	        else {
	            this.maxWidth = maxColWidth;
	        }
	        this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
	        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
	        this.fieldContainsDots = utils_1.Utils.exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;
	        this.tooltipFieldContainsDots = utils_1.Utils.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;
	        this.validate();
	    };
	    Column.prototype.isEmptyGroup = function () {
	        return false;
	    };
	    Column.prototype.isRowGroupDisplayed = function (colId) {
	        if (utils_1.Utils.missing(this.colDef) || utils_1.Utils.missing(this.colDef.showRowGroup)) {
	            return false;
	        }
	        var showingAllGroups = this.colDef.showRowGroup === true;
	        var showingThisGroup = this.colDef.showRowGroup === colId;
	        return showingAllGroups || showingThisGroup;
	    };
	    Column.prototype.getUniqueId = function () {
	        return this.getId();
	    };
	    Column.prototype.isPrimary = function () {
	        return this.primary;
	    };
	    Column.prototype.isFilterAllowed = function () {
	        return this.primary && !this.colDef.suppressFilter;
	    };
	    Column.prototype.isFieldContainsDots = function () {
	        return this.fieldContainsDots;
	    };
	    Column.prototype.isTooltipFieldContainsDots = function () {
	        return this.tooltipFieldContainsDots;
	    };
	    Column.prototype.validate = function () {
	        var colDefAny = this.colDef;
	        if (!this.gridOptionsWrapper.isEnterprise()) {
	            var itemsNotAllowedWithoutEnterprise = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'pivot', 'pivotIndex', 'aggFunc'];
	            itemsNotAllowedWithoutEnterprise.forEach(function (item) {
	                if (utils_1.Utils.exists(colDefAny[item])) {
	                    console.warn("ag-Grid: " + item + " is only valid in ag-Grid-Enterprise, your column definition should not have " + item);
	                }
	            });
	        }
	        if (this.gridOptionsWrapper.isTreeData()) {
	            var itemsNotAllowedWithTreeData = ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'pivot', 'pivotIndex'];
	            itemsNotAllowedWithTreeData.forEach(function (item) {
	                if (utils_1.Utils.exists(colDefAny[item])) {
	                    console.warn("ag-Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item);
	                }
	            });
	        }
	        if (utils_1.Utils.exists(this.colDef.width) && typeof this.colDef.width !== 'number') {
	            console.warn('ag-Grid: colDef.width should be a number, not ' + typeof this.colDef.width);
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.restrictToOneGroup', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup');
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        if (colDefAny.floatingCellRenderer) {
	            console.warn('ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer');
	            this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;
	        }
	        if (colDefAny.floatingRendererFramework) {
	            console.warn('ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework');
	            this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;
	        }
	        if (colDefAny.floatingRendererParams) {
	            console.warn('ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams');
	            this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;
	        }
	        if (colDefAny.floatingValueFormatter) {
	            console.warn('ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter');
	            this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;
	        }
	        if (colDefAny.cellFormatter) {
	            console.warn('ag-Grid: since v12, cellFormatter is now valueFormatter');
	            if (utils_1.Utils.missing(this.colDef.valueFormatter)) {
	                this.colDef.valueFormatter = colDefAny.cellFormatter;
	            }
	        }
	    };
	    Column.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    Column.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    Column.prototype.createIsColumnFuncParams = function (rowNode) {
	        return {
	            node: rowNode,
	            column: this,
	            colDef: this.colDef,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	    };
	    Column.prototype.isSuppressNavigable = function (rowNode) {
	        // if boolean set, then just use it
	        if (typeof this.colDef.suppressNavigable === 'boolean') {
	            return this.colDef.suppressNavigable;
	        }
	        // if function, then call the function to find out
	        if (typeof this.colDef.suppressNavigable === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var userFunc = this.colDef.suppressNavigable;
	            return userFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.isCellEditable = function (rowNode) {
	        // only allow editing of groups if the user has this option enabled
	        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
	            return false;
	        }
	        return this.isColumnFunc(rowNode, this.colDef.editable);
	    };
	    Column.prototype.isSuppressPaste = function (rowNode) {
	        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
	    };
	    Column.prototype.isResizable = function () {
	        var enableColResize = this.gridOptionsWrapper.isEnableColResize();
	        var suppressResize = this.colDef && this.colDef.suppressResize;
	        return enableColResize && !suppressResize;
	    };
	    Column.prototype.isColumnFunc = function (rowNode, value) {
	        // if boolean set, then just use it
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        // if function, then call the function to find out
	        if (typeof value === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var editableFunc = value;
	            return editableFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.setMoving = function (moving) {
	        this.moving = moving;
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED));
	    };
	    Column.prototype.createColumnEvent = function (type) {
	        return {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            type: type,
	            column: this,
	            columns: [this]
	        };
	    };
	    Column.prototype.isMoving = function () {
	        return this.moving;
	    };
	    Column.prototype.getSort = function () {
	        return this.sort;
	    };
	    Column.prototype.setSort = function (sort) {
	        if (this.sort !== sort) {
	            this.sort = sort;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED));
	        }
	    };
	    Column.prototype.setMenuVisible = function (visible) {
	        if (this.menuVisible !== visible) {
	            this.menuVisible = visible;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED));
	        }
	    };
	    Column.prototype.isMenuVisible = function () {
	        return this.menuVisible;
	    };
	    Column.prototype.isSortAscending = function () {
	        return this.sort === Column.SORT_ASC;
	    };
	    Column.prototype.isSortDescending = function () {
	        return this.sort === Column.SORT_DESC;
	    };
	    Column.prototype.isSortNone = function () {
	        return utils_1.Utils.missing(this.sort);
	    };
	    Column.prototype.isSorting = function () {
	        return utils_1.Utils.exists(this.sort);
	    };
	    Column.prototype.getSortedAt = function () {
	        return this.sortedAt;
	    };
	    Column.prototype.setSortedAt = function (sortedAt) {
	        this.sortedAt = sortedAt;
	    };
	    Column.prototype.setAggFunc = function (aggFunc) {
	        this.aggFunc = aggFunc;
	    };
	    Column.prototype.getAggFunc = function () {
	        return this.aggFunc;
	    };
	    Column.prototype.getLeft = function () {
	        return this.left;
	    };
	    Column.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    Column.prototype.getRight = function () {
	        return this.left + this.actualWidth;
	    };
	    Column.prototype.setLeft = function (left) {
	        this.oldLeft = this.left;
	        if (this.left !== left) {
	            this.left = left;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED));
	        }
	    };
	    Column.prototype.isFilterActive = function () {
	        return this.filterActive;
	    };
	    Column.prototype.setFilterActive = function (active) {
	        if (this.filterActive !== active) {
	            this.filterActive = active;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED));
	        }
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_CHANGED));
	    };
	    Column.prototype.setPinned = function (pinned) {
	        // pinning is not allowed when doing 'forPrint'
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        if (pinned === true || pinned === Column.PINNED_LEFT) {
	            this.pinned = Column.PINNED_LEFT;
	        }
	        else if (pinned === Column.PINNED_RIGHT) {
	            this.pinned = Column.PINNED_RIGHT;
	        }
	        else {
	            this.pinned = null;
	        }
	        // console.log(`setColumnsPinned ${this.getColId()} ${this.pinned}`);
	    };
	    Column.prototype.setFirstRightPinned = function (firstRightPinned) {
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED));
	        }
	    };
	    Column.prototype.setLastLeftPinned = function (lastLeftPinned) {
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED));
	        }
	    };
	    Column.prototype.isFirstRightPinned = function () {
	        return this.firstRightPinned;
	    };
	    Column.prototype.isLastLeftPinned = function () {
	        return this.lastLeftPinned;
	    };
	    Column.prototype.isPinned = function () {
	        return this.pinned === Column.PINNED_LEFT || this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.isPinnedLeft = function () {
	        return this.pinned === Column.PINNED_LEFT;
	    };
	    Column.prototype.isPinnedRight = function () {
	        return this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.getPinned = function () {
	        return this.pinned;
	    };
	    Column.prototype.setVisible = function (visible) {
	        var newValue = visible === true;
	        if (this.visible !== newValue) {
	            this.visible = newValue;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED));
	        }
	    };
	    Column.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Column.prototype.getColDef = function () {
	        return this.colDef;
	    };
	    Column.prototype.getColumnGroupShow = function () {
	        return this.colDef.columnGroupShow;
	    };
	    Column.prototype.getColId = function () {
	        return this.colId;
	    };
	    Column.prototype.getId = function () {
	        return this.getColId();
	    };
	    Column.prototype.getDefinition = function () {
	        return this.colDef;
	    };
	    Column.prototype.getActualWidth = function () {
	        return this.actualWidth;
	    };
	    Column.prototype.getColSpan = function (rowNode) {
	        if (utils_1.Utils.missing(this.colDef.colSpan)) {
	            return 1;
	        }
	        else {
	            var params = {
	                node: rowNode,
	                data: rowNode.data,
	                colDef: this.colDef,
	                column: this,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            var colSpan = this.colDef.colSpan(params);
	            // colSpan must be number equal to or greater than 1
	            if (colSpan > 1) {
	                return colSpan;
	            }
	            else {
	                return 1;
	            }
	        }
	    };
	    Column.prototype.setActualWidth = function (actualWidth) {
	        if (this.actualWidth !== actualWidth) {
	            this.actualWidth = actualWidth;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED));
	        }
	    };
	    Column.prototype.isGreaterThanMax = function (width) {
	        if (this.maxWidth) {
	            return width > this.maxWidth;
	        }
	        else {
	            return false;
	        }
	    };
	    Column.prototype.getMinWidth = function () {
	        return this.minWidth;
	    };
	    Column.prototype.getMaxWidth = function () {
	        return this.maxWidth;
	    };
	    Column.prototype.setMinimum = function () {
	        this.setActualWidth(this.minWidth);
	    };
	    Column.prototype.setRowGroupActive = function (rowGroup) {
	        if (this.rowGroupActive !== rowGroup) {
	            this.rowGroupActive = rowGroup;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED));
	        }
	    };
	    Column.prototype.isRowGroupActive = function () {
	        return this.rowGroupActive;
	    };
	    Column.prototype.setPivotActive = function (pivot) {
	        if (this.pivotActive !== pivot) {
	            this.pivotActive = pivot;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED));
	        }
	    };
	    Column.prototype.isPivotActive = function () {
	        return this.pivotActive;
	    };
	    Column.prototype.isAnyFunctionActive = function () {
	        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
	    };
	    Column.prototype.isAnyFunctionAllowed = function () {
	        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
	    };
	    Column.prototype.setValueActive = function (value) {
	        if (this.aggregationActive !== value) {
	            this.aggregationActive = value;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED));
	        }
	    };
	    Column.prototype.isValueActive = function () {
	        return this.aggregationActive;
	    };
	    Column.prototype.isAllowPivot = function () {
	        return this.colDef.enablePivot === true;
	    };
	    Column.prototype.isAllowValue = function () {
	        return this.colDef.enableValue === true;
	    };
	    Column.prototype.isAllowRowGroup = function () {
	        return this.colDef.enableRowGroup === true;
	    };
	    Column.prototype.getMenuTabs = function (defaultValues) {
	        var menuTabs = this.getColDef().menuTabs;
	        if (menuTabs == null) {
	            menuTabs = defaultValues;
	        }
	        return menuTabs;
	    };
	    // + renderedHeaderCell - for making header cell transparent when moving
	    Column.EVENT_MOVING_CHANGED = 'movingChanged';
	    // + renderedCell - changing left position
	    Column.EVENT_LEFT_CHANGED = 'leftChanged';
	    // + renderedCell - changing width
	    Column.EVENT_WIDTH_CHANGED = 'widthChanged';
	    // + renderedCell - for changing pinned classes
	    Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';
	    Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';
	    // + renderedColumn - for changing visibility icon
	    Column.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    // + every time the filter changes, used in the floating filters
	    Column.EVENT_FILTER_CHANGED = 'filterChanged';
	    // + renderedHeaderCell - marks the header with filter icon
	    Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';
	    // + renderedHeaderCell - marks the header with sort icon
	    Column.EVENT_SORT_CHANGED = 'sortChanged';
	    Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_VALUE_CHANGED = 'columnValueChanged';
	    Column.PINNED_RIGHT = 'right';
	    Column.PINNED_LEFT = 'left';
	    Column.SORT_ASC = 'asc';
	    Column.SORT_DESC = 'desc';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], Column.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], Column.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], Column.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], Column.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], Column.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Column.prototype, "initialise", null);
	    return Column;
	}());
	exports.Column = Column;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnGroup_1 = __webpack_require__(298);
	var originalColumnGroup_1 = __webpack_require__(301);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var ColumnUtils = (function () {
	    function ColumnUtils() {
	    }
	    ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
	        if (!colDef.width) {
	            // if no width defined in colDef, use default
	            return this.gridOptionsWrapper.getColWidth();
	        }
	        else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {
	            // if width in col def to small, set to min width
	            return this.gridOptionsWrapper.getMinColWidth();
	        }
	        else {
	            // otherwise use the provided width
	            return colDef.width;
	        }
	    };
	    ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {
	        var result = [];
	        var found = false;
	        recursePath(originalBalancedTree, 0);
	        // we should always find the path, but in case there is a bug somewhere, returning null
	        // will make it fail rather than provide a 'hard to track down' bug
	        if (found) {
	            return result;
	        }
	        else {
	            return null;
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {
	            let result: ColumnGroup[] = [];
	            let found = false;
	    
	            recursePath(allDisplayedColumnGroups, 0);
	    
	            // we should always find the path, but in case there is a bug somewhere, returning null
	            // will make it fail rather than provide a 'hard to track down' bug
	            if (found) {
	                return result;
	            } else {
	                return null;
	            }
	    
	            function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {
	    
	                for (let i = 0; i<balancedColumnTree.length; i++) {
	                    if (found) {
	                        // quit the search, so 'result' is kept with the found result
	                        return;
	                    }
	                    let node = balancedColumnTree[i];
	                    if (node instanceof ColumnGroup) {
	                        let nextNode = <ColumnGroup> node;
	                        recursePath(nextNode.getChildren(), dept+1);
	                        result[dept] = node;
	                    } else {
	                        if (node === column) {
	                            found = true;
	                        }
	                    }
	                }
	            }
	        }*/
	    ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                _this.depthFirstOriginalTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnUtils.prototype, "gridOptionsWrapper", void 0);
	    ColumnUtils = __decorate([
	        context_1.Bean('columnUtils')
	    ], ColumnUtils);
	    return ColumnUtils;
	}());
	exports.ColumnUtils = ColumnUtils;


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var columnGroup_1 = __webpack_require__(298);
	var column_1 = __webpack_require__(299);
	var eventService_1 = __webpack_require__(285);
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var OriginalColumnGroup = (function () {
	    function OriginalColumnGroup(colGroupDef, groupId, padding) {
	        this.localEventService = new eventService_1.EventService();
	        this.expandable = false;
	        this.colGroupDef = colGroupDef;
	        this.groupId = groupId;
	        this.expanded = colGroupDef && !!colGroupDef.openByDefault;
	        this.padding = padding;
	    }
	    OriginalColumnGroup.prototype.isVisible = function () {
	        // return true if at least one child is visible
	        if (this.children) {
	            return this.children.some(function (child) { return child.isVisible(); });
	        }
	        else {
	            return false;
	        }
	    };
	    OriginalColumnGroup.prototype.isPadding = function () {
	        return this.padding;
	    };
	    OriginalColumnGroup.prototype.setExpanded = function (expanded) {
	        this.expanded = expanded;
	        var event = {
	            type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
	        };
	        this.localEventService.dispatchEvent(event);
	    };
	    OriginalColumnGroup.prototype.isExpandable = function () {
	        return this.expandable;
	    };
	    OriginalColumnGroup.prototype.isExpanded = function () {
	        return this.expanded;
	    };
	    OriginalColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    OriginalColumnGroup.prototype.getId = function () {
	        return this.getGroupId();
	    };
	    OriginalColumnGroup.prototype.setChildren = function (children) {
	        this.children = children;
	    };
	    OriginalColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    OriginalColumnGroup.prototype.getColGroupDef = function () {
	        return this.colGroupDef;
	    };
	    OriginalColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        this.children.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof OriginalColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    OriginalColumnGroup.prototype.getColumnGroupShow = function () {
	        if (!this.padding) {
	            return this.colGroupDef.columnGroupShow;
	        }
	        else {
	            // if this is padding we have exactly only child. we then
	            // take the value from the child and push it up, making
	            // this group 'invisible'.
	            return this.children[0].getColumnGroupShow();
	        }
	    };
	    // need to check that this group has at least one col showing when both expanded and contracted.
	    // if not, then we don't allow expanding and contracting on this group
	    OriginalColumnGroup.prototype.setupExpandable = function () {
	        var _this = this;
	        this.setExpandable();
	        // note - we should be removing this event listener
	        this.getLeafColumns().forEach(function (col) { return col.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this)); });
	    };
	    OriginalColumnGroup.prototype.setExpandable = function () {
	        // want to make sure the group doesn't disappear when it's open
	        var atLeastOneShowingWhenOpen = false;
	        // want to make sure the group doesn't disappear when it's closed
	        var atLeastOneShowingWhenClosed = false;
	        // want to make sure the group has something to show / hide
	        var atLeastOneChangeable = false;
	        for (var i = 0, j = this.children.length; i < j; i++) {
	            var abstractColumn = this.children[i];
	            if (!abstractColumn.isVisible()) {
	                continue;
	            }
	            // if the abstractColumn is a grid generated group, there will be no colDef
	            var headerGroupShow = abstractColumn.getColumnGroupShow();
	            if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneChangeable = true;
	            }
	            else if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
	                atLeastOneShowingWhenClosed = true;
	                atLeastOneChangeable = true;
	            }
	            else {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneShowingWhenClosed = true;
	            }
	        }
	        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
	        if (this.expandable !== expandable) {
	            this.expandable = expandable;
	            var event_1 = {
	                type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
	            };
	            this.localEventService.dispatchEvent(event_1);
	        }
	    };
	    OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {
	        this.setExpandable();
	    };
	    OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], OriginalColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], OriginalColumnGroup.prototype, "gridApi", void 0);
	    return OriginalColumnGroup;
	}());
	exports.OriginalColumnGroup = OriginalColumnGroup;


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(286);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var ExpressionService = (function () {
	    function ExpressionService() {
	        this.expressionToFunctionCache = {};
	    }
	    ExpressionService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ExpressionService');
	    };
	    ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {
	        if (typeof expressionOrFunc === 'function') {
	            // valueGetter is a function, so just call it
	            var func = expressionOrFunc;
	            return func(params);
	        }
	        else if (typeof expressionOrFunc === 'string') {
	            // valueGetter is an expression, so execute the expression
	            var expression = expressionOrFunc;
	            return this.evaluateExpression(expression, params);
	        }
	        else {
	            console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);
	        }
	    };
	    ExpressionService.prototype.evaluateExpression = function (expression, params) {
	        try {
	            var javaScriptFunction = this.createExpressionFunction(expression);
	            // the params don't have all these values, rather we add every possible
	            // value a params can have, which makes whatever is in the params available.
	            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
	            return result;
	        }
	        catch (e) {
	            // the expression failed, which can happen, as it's the client that
	            // provides the expression. so print a nice message
	            console.log('Processing of the expression failed');
	            console.log('Expression = ' + expression);
	            console.log('Exception = ' + e);
	            return null;
	        }
	    };
	    ExpressionService.prototype.createExpressionFunction = function (expression) {
	        // check cache first
	        if (this.expressionToFunctionCache[expression]) {
	            return this.expressionToFunctionCache[expression];
	        }
	        // if not found in cache, return the function
	        var functionBody = this.createFunctionBody(expression);
	        var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);
	        // store in cache
	        this.expressionToFunctionCache[expression] = theFunction;
	        return theFunction;
	    };
	    ExpressionService.prototype.createFunctionBody = function (expression) {
	        // if the expression has the 'return' word in it, then use as is,
	        // if not, then wrap it with return and ';' to make a function
	        if (expression.indexOf('return') >= 0) {
	            return expression;
	        }
	        else {
	            return 'return ' + expression + ';';
	        }
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ExpressionService.prototype, "setBeans", null);
	    ExpressionService = __decorate([
	        context_1.Bean('expressionService')
	    ], ExpressionService);
	    return ExpressionService;
	}());
	exports.ExpressionService = ExpressionService;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var columnUtils_1 = __webpack_require__(300);
	var columnGroup_1 = __webpack_require__(298);
	var originalColumnGroup_1 = __webpack_require__(301);
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var context_2 = __webpack_require__(287);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var DisplayedGroupCreator = (function () {
	    function DisplayedGroupCreator() {
	    }
	    DisplayedGroupCreator.prototype.createDisplayedGroups = function (
	        // all displayed columns sorted - this is the columns the grid should show
	        sortedVisibleColumns, 
	        // the tree of columns, as provided by the users, used to know what groups columns roll up into
	        balancedColumnTree, 
	        // create's unique id's for the group
	        groupInstanceIdCreator, 
	        // we try to reuse old groups if we can, to allow gui to do animation
	        oldDisplayedGroups) {
	        var _this = this;
	        var result = [];
	        var previousRealPath;
	        var previousOriginalPath;
	        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
	        // go through each column, then do a bottom up comparison to the previous column, and start
	        // to share groups if they converge at any point.
	        sortedVisibleColumns.forEach(function (currentColumn) {
	            var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
	            var currentRealPath = [];
	            var firstColumn = !previousOriginalPath;
	            for (var i = 0; i < currentOriginalPath.length; i++) {
	                if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
	                    // new group needed
	                    var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped);
	                    currentRealPath[i] = newGroup;
	                    // if top level, add to result, otherwise add to parent
	                    if (i == 0) {
	                        result.push(newGroup);
	                    }
	                    else {
	                        currentRealPath[i - 1].addChild(newGroup);
	                    }
	                }
	                else {
	                    // reuse old group
	                    currentRealPath[i] = previousRealPath[i];
	                }
	            }
	            var noColumnGroups = currentRealPath.length === 0;
	            if (noColumnGroups) {
	                // if we are not grouping, then the result of the above is an empty
	                // path (no groups), and we just add the column to the root list.
	                result.push(currentColumn);
	            }
	            else {
	                var leafGroup = currentRealPath[currentRealPath.length - 1];
	                leafGroup.addChild(currentColumn);
	            }
	            previousRealPath = currentRealPath;
	            previousOriginalPath = currentOriginalPath;
	        });
	        this.setupParentsIntoColumns(result, null);
	        return result;
	    };
	    DisplayedGroupCreator.prototype.createColumnGroup = function (originalGroup, groupInstanceIdCreator, oldColumnsMapped) {
	        var groupId = originalGroup.getGroupId();
	        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
	        var uniqueId = columnGroup_1.ColumnGroup.createUniqueId(groupId, instanceId);
	        var columnGroup = oldColumnsMapped[uniqueId];
	        // if the user is setting new colDefs, it is possible that the id's overlap, and we
	        // would have a false match from above. so we double check we are talking about the
	        // same original column group.
	        if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
	            columnGroup = null;
	        }
	        if (utils_1.Utils.exists(columnGroup)) {
	            // clean out the old column group here, as we will be adding children into it again
	            columnGroup.reset();
	        }
	        else {
	            columnGroup = new columnGroup_1.ColumnGroup(originalGroup, groupId, instanceId);
	            this.context.wireBean(columnGroup);
	        }
	        return columnGroup;
	    };
	    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
	    DisplayedGroupCreator.prototype.mapOldGroupsById = function (displayedGroups) {
	        var result = {};
	        var recursive = function (columnsOrGroups) {
	            columnsOrGroups.forEach(function (columnOrGroup) {
	                if (columnOrGroup instanceof columnGroup_1.ColumnGroup) {
	                    var columnGroup = columnOrGroup;
	                    result[columnOrGroup.getUniqueId()] = columnGroup;
	                    recursive(columnGroup.getChildren());
	                }
	            });
	        };
	        if (displayedGroups) {
	            recursive(displayedGroups);
	        }
	        return result;
	    };
	    DisplayedGroupCreator.prototype.setupParentsIntoColumns = function (columnsOrGroups, parent) {
	        var _this = this;
	        columnsOrGroups.forEach(function (columnsOrGroup) {
	            columnsOrGroup.setParent(parent);
	            if (columnsOrGroup instanceof columnGroup_1.ColumnGroup) {
	                var columnGroup = columnsOrGroup;
	                _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
	            }
	        });
	    };
	    DisplayedGroupCreator.prototype.createFakePath = function (balancedColumnTree) {
	        var result = [];
	        var currentChildren = balancedColumnTree;
	        // this while look does search on the balanced tree, so our result is the right length
	        var index = 0;
	        while (currentChildren && currentChildren[0] && currentChildren[0] instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            // putting in a deterministic fake id, in case the API in the future needs to reference the col
	            var fakePath = new originalColumnGroup_1.OriginalColumnGroup(null, 'FAKE_PATH_' + index, true);
	            this.context.wireBean(fakePath);
	            result.push(fakePath);
	            currentChildren = currentChildren[0].getChildren();
	            index++;
	        }
	        return result;
	    };
	    DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
	        var result = [];
	        var found = false;
	        recursePath(balancedColumnTree, 0);
	        // it's possible we didn't find a path. this happens if the column is generated
	        // by the grid, in that the definition didn't come from the client. in this case,
	        // we create a fake original path.
	        if (found) {
	            return result;
	        }
	        else {
	            return this.createFakePath(balancedColumnTree);
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    __decorate([
	        context_2.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], DisplayedGroupCreator.prototype, "columnUtils", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], DisplayedGroupCreator.prototype, "context", void 0);
	    DisplayedGroupCreator = __decorate([
	        context_1.Bean('displayedGroupCreator')
	    ], DisplayedGroupCreator);
	    return DisplayedGroupCreator;
	}());
	exports.DisplayedGroupCreator = DisplayedGroupCreator;


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowRenderer_1 = __webpack_require__(305);
	var gridPanel_1 = __webpack_require__(306);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var headerRenderer_1 = __webpack_require__(371);
	var renderedHeaderCell_1 = __webpack_require__(376);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var headerWrapperComp_1 = __webpack_require__(380);
	var AutoWidthCalculator = (function () {
	    function AutoWidthCalculator() {
	    }
	    // this is the trick: we create a dummy container and clone all the cells
	    // into the dummy, then check the dummy's width. then destroy the dummy
	    // as we don't need it any more.
	    // drawback: only the cells visible on the screen are considered
	    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {
	        var eHeaderCell = this.getHeaderCellForColumn(column);
	        // cell isn't visible
	        if (!eHeaderCell) {
	            return -1;
	        }
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        var eBodyContainer = this.gridPanel.getBodyContainer();
	        eBodyContainer.appendChild(eDummyContainer);
	        // get all the cells that are currently displayed (this only brings back
	        // rendered cells, rows not rendered due to row visualisation will not be here)
	        this.putRowCellsIntoDummyContainer(column, eDummyContainer);
	        // also put header cell in
	        // we only consider the lowest level cell, not the group cell. in 99% of the time, this
	        // will be enough. if we consider groups, then it gets to complicated for what it's worth,
	        // as the groups can span columns and this class only considers one column at a time.
	        this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
	        // at this point, all the clones are lined up vertically with natural widths. the dummy
	        // container will have a width wide enough just to fit the largest.
	        var dummyContainerWidth = eDummyContainer.offsetWidth;
	        // we are finished with the dummy container, so get rid of it
	        eBodyContainer.removeChild(eDummyContainer);
	        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the
	        // user can configure the grid to add a few more pixels after the calculated width
	        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
	        return dummyContainerWidth + autoSizePadding;
	    };
	    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {
	        var comp = null;
	        // find the rendered header cell
	        this.headerRenderer.forEachHeaderElement(function (headerElement) {
	            if (headerElement instanceof renderedHeaderCell_1.RenderedHeaderCell) {
	                var currentCell = headerElement;
	                if (currentCell.getColumn() === column) {
	                    comp = currentCell;
	                }
	            }
	            else if (headerElement instanceof headerWrapperComp_1.HeaderWrapperComp) {
	                var headerWrapperComp = headerElement;
	                if (headerWrapperComp.getColumn() === column) {
	                    comp = headerWrapperComp;
	                }
	            }
	        });
	        return comp ? comp.getGui() : null;
	    };
	    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {
	        var _this = this;
	        var eCells = this.rowRenderer.getAllCellsForColumn(column);
	        eCells.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });
	    };
	    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {
	        // make a deep clone of the cell
	        var eCellClone = eCell.cloneNode(true);
	        // the original has a fixed width, we remove this to allow the natural width based on content
	        eCellClone.style.width = '';
	        // the original has position = absolute, we need to remove this so it's positioned normally
	        eCellClone.style.position = 'static';
	        eCellClone.style.left = '';
	        // we put the cell into a containing div, as otherwise the cells would just line up
	        // on the same line, standard flow layout, by putting them into divs, they are laid
	        // out one per line
	        var eCloneParent = document.createElement('div');
	        // table-row, so that each cell is on a row. i also tried display='block', but this
	        // didn't work in IE
	        eCloneParent.style.display = 'table-row';
	        // the twig on the branch, the branch on the tree, the tree in the hole,
	        // the hole in the bog, the bog in the clone, the clone in the parent,
	        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
	        eCloneParent.appendChild(eCellClone);
	        eDummyContainer.appendChild(eCloneParent);
	    };
	    __decorate([
	        context_2.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], AutoWidthCalculator.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_2.Autowired('headerRenderer'),
	        __metadata("design:type", headerRenderer_1.HeaderRenderer)
	    ], AutoWidthCalculator.prototype, "headerRenderer", void 0);
	    __decorate([
	        context_2.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AutoWidthCalculator.prototype, "gridPanel", void 0);
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AutoWidthCalculator.prototype, "gridOptionsWrapper", void 0);
	    AutoWidthCalculator = __decorate([
	        context_1.Bean('autoWidthCalculator')
	    ], AutoWidthCalculator);
	    return AutoWidthCalculator;
	}());
	exports.AutoWidthCalculator = AutoWidthCalculator;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var gridPanel_1 = __webpack_require__(306);
	var expressionService_1 = __webpack_require__(302);
	var templateService_1 = __webpack_require__(332);
	var valueService_1 = __webpack_require__(313);
	var eventService_1 = __webpack_require__(285);
	var rowComp_1 = __webpack_require__(329);
	var events_1 = __webpack_require__(291);
	var constants_1 = __webpack_require__(289);
	var cellComp_1 = __webpack_require__(311);
	var context_1 = __webpack_require__(287);
	var gridCore_1 = __webpack_require__(333);
	var columnController_1 = __webpack_require__(297);
	var logger_1 = __webpack_require__(286);
	var focusedCellController_1 = __webpack_require__(320);
	var cellNavigationService_1 = __webpack_require__(370);
	var gridCell_1 = __webpack_require__(315);
	var beanStub_1 = __webpack_require__(318);
	var paginationProxy_1 = __webpack_require__(323);
	var gridApi_1 = __webpack_require__(294);
	var pinnedRowModel_1 = __webpack_require__(326);
	var beans_1 = __webpack_require__(350);
	var animationFrameService_1 = __webpack_require__(327);
	var RowRenderer = (function (_super) {
	    __extends(RowRenderer, _super);
	    function RowRenderer() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        // map of row ids to row objects. keeps track of which elements
	        // are rendered for which rows in the dom.
	        _this.rowCompsByIndex = {};
	        _this.floatingTopRowComps = [];
	        _this.floatingBottomRowComps = [];
	        // we only allow one refresh at a time, otherwise the internal memory structure here
	        // will get messed up. this can happen if the user has a cellRenderer, and inside the
	        // renderer they call an API method that results in another pass of the refresh,
	        // then it will be trying to draw rows in the middle of a refresh.
	        _this.refreshInProgress = false;
	        return _this;
	    }
	    RowRenderer.prototype.agWire = function (loggerFactory) {
	        this.logger = loggerFactory.create('RowRenderer');
	    };
	    RowRenderer.prototype.init = function () {
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	        this.autoHeight = this.gridOptionsWrapper.isAutoHeight();
	        this.rowContainers = this.gridPanel.getRowContainers();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.redrawAfterModelUpdate();
	    };
	    RowRenderer.prototype.onPageLoaded = function (refreshEvent) {
	        if (utils_1.Utils.missing(refreshEvent)) {
	            refreshEvent = {
	                type: events_1.Events.EVENT_MODEL_UPDATED,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                animate: false,
	                keepRenderedRows: false,
	                newData: false,
	                newPage: false
	            };
	        }
	        this.onModelUpdated(refreshEvent);
	    };
	    RowRenderer.prototype.getAllCellsForColumn = function (column) {
	        var eCells = [];
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils_1.Utils.iterateObject(this.floatingBottomRowComps, callback);
	        utils_1.Utils.iterateObject(this.floatingTopRowComps, callback);
	        function callback(key, rowComp) {
	            var eCell = rowComp.getCellForCol(column);
	            if (eCell) {
	                eCells.push(eCell);
	            }
	        }
	        return eCells;
	    };
	    RowRenderer.prototype.refreshFloatingRowComps = function () {
	        this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
	        this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);
	    };
	    RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
	        var _this = this;
	        rowComps.forEach(function (row) {
	            row.destroy();
	        });
	        rowComps.length = 0;
	        // if no cols, don't draw row - can we get rid of this???
	        var columns = this.columnController.getAllDisplayedColumns();
	        if (utils_1.Utils.missingOrEmpty(columns)) {
	            return;
	        }
	        if (rowNodes) {
	            rowNodes.forEach(function (node) {
	                var rowComp = new rowComp_1.RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false);
	                rowComp.init();
	                rowComps.push(rowComp);
	            });
	        }
	        this.flushContainers(rowComps);
	    };
	    RowRenderer.prototype.onPinnedRowDataChanged = function () {
	        this.redrawAfterModelUpdate();
	    };
	    RowRenderer.prototype.onModelUpdated = function (refreshEvent) {
	        var params = {
	            recycleRows: refreshEvent.keepRenderedRows,
	            animate: refreshEvent.animate,
	            newData: refreshEvent.newData,
	            newPage: refreshEvent.newPage
	        };
	        this.redrawAfterModelUpdate(params);
	        // this.eventService.dispatchEvent(Events.DEPRECATED_EVENT_PAGINATION_PAGE_LOADED);
	    };
	    // if the row nodes are not rendered, no index is returned
	    RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {
	        var result = [];
	        if (utils_1.Utils.missing(rowNodes)) {
	            return result;
	        }
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
	            var rowNode = renderedRow.getRowNode();
	            if (rowNodes.indexOf(rowNode) >= 0) {
	                result.push(index);
	            }
	        });
	        return result;
	    };
	    RowRenderer.prototype.redrawRows = function (rowNodes) {
	        if (!rowNodes || rowNodes.length == 0) {
	            return;
	        }
	        // we only need to be worried about rendered rows, as this method is
	        // called to whats rendered. if the row isn't rendered, we don't care
	        var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
	        // remove the rows
	        this.removeRowComps(indexesToRemove);
	        // add draw them again
	        this.redrawAfterModelUpdate({
	            recycleRows: true
	        });
	    };
	    RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {
	        var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();
	        if (utils_1.Utils.missing(focusedCell)) {
	            return null;
	        }
	        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
	        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
	        // cell itself, then the cell can be registered as having focus, however it's the text field that
	        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
	        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
	        // the focus is lost from the text field. we do not want this.
	        var activeElement = document.activeElement;
	        var domData = this.gridOptionsWrapper.getDomData(activeElement, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	        var elementIsNotACellDev = utils_1.Utils.missing(domData);
	        if (elementIsNotACellDev) {
	            return null;
	        }
	        return focusedCell;
	    };
	    // gets called after changes to the model.
	    RowRenderer.prototype.redrawAfterModelUpdate = function (params) {
	        if (params === void 0) { params = {}; }
	        this.getLockOnRefresh();
	        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
	        if (!this.forPrint) {
	            this.sizeContainerToPageHeight();
	        }
	        this.scrollToTopIfNewData(params);
	        // never keep rendered rows if doing forPrint or autoHeight, as we do not use 'top' to
	        // position the rows (it uses normal flow), so we have to remove
	        // all rows and insert them again from scratch
	        var rowsUsingFlow = this.forPrint || this.autoHeight;
	        var recycleRows = rowsUsingFlow ? false : params.recycleRows;
	        var animate = rowsUsingFlow ? false : (params.animate && this.gridOptionsWrapper.isAnimateRows());
	        var rowsToRecycle = this.binRowComps(recycleRows);
	        this.redraw(rowsToRecycle, animate);
	        if (!params.onlyBody) {
	            this.refreshFloatingRowComps();
	        }
	        this.restoreFocusedCell(focusedCell);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.scrollToTopIfNewData = function (params) {
	        var scrollToTop = params.newData || params.newPage;
	        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
	        if (scrollToTop && !suppressScrollToTop) {
	            this.gridPanel.scrollToTop();
	        }
	    };
	    RowRenderer.prototype.sizeContainerToPageHeight = function () {
	        var containerHeight = this.paginationProxy.getCurrentPageHeight();
	        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
	        // we still want the scroll to be present, otherwise there would be no way to access the columns
	        // on the RHS - and if that was where the filter was that cause no rows to be presented, there
	        // is no way to remove the filter.
	        if (containerHeight === 0) {
	            containerHeight = 1;
	        }
	        this.rowContainers.body.setHeight(containerHeight);
	        this.rowContainers.fullWidth.setHeight(containerHeight);
	        this.rowContainers.pinnedLeft.setHeight(containerHeight);
	        this.rowContainers.pinnedRight.setHeight(containerHeight);
	    };
	    RowRenderer.prototype.getLockOnRefresh = function () {
	        if (this.refreshInProgress) {
	            throw 'ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. ' +
	                'Your code probably called a grid API method while the grid was in the render stage. To overcome ' +
	                'this, put the API call into a timeout, eg instead of api.refreshView(), ' +
	                'call setTimeout(function(){api.refreshView(),0}). To see what part of your code ' +
	                'that caused the refresh check this stacktrace.';
	        }
	        this.refreshInProgress = true;
	    };
	    RowRenderer.prototype.releaseLockOnRefresh = function () {
	        this.refreshInProgress = false;
	    };
	    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
	    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
	    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
	    // edited cell).
	    RowRenderer.prototype.restoreFocusedCell = function (gridCell) {
	        if (gridCell) {
	            this.focusedCellController.setFocusedCell(gridCell.rowIndex, gridCell.column, gridCell.floating, true);
	        }
	    };
	    RowRenderer.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachRowComp(function (key, renderedRow) {
	            renderedRow.stopEditing(cancel);
	        });
	    };
	    RowRenderer.prototype.forEachCellComp = function (callback) {
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
	            renderedRow.forEachCellComp(callback);
	        });
	    };
	    RowRenderer.prototype.forEachRowComp = function (callback) {
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils_1.Utils.iterateObject(this.floatingTopRowComps, callback);
	        utils_1.Utils.iterateObject(this.floatingBottomRowComps, callback);
	    };
	    RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        var rowComp = this.rowCompsByIndex[rowIndex];
	        if (rowComp) {
	            rowComp.addEventListener(eventName, callback);
	        }
	    };
	    RowRenderer.prototype.refreshCells = function (params) {
	        var _this = this;
	        if (params === void 0) { params = {}; }
	        var rowIdsMap;
	        if (utils_1.Utils.exists(params.rowNodes)) {
	            rowIdsMap = {
	                top: {},
	                bottom: {},
	                normal: {}
	            };
	            params.rowNodes.forEach(function (rowNode) {
	                if (rowNode.rowPinned === constants_1.Constants.PINNED_TOP) {
	                    rowIdsMap.top[rowNode.id] = true;
	                }
	                else if (rowNode.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
	                    rowIdsMap.bottom[rowNode.id] = true;
	                }
	                else {
	                    rowIdsMap.normal[rowNode.id] = true;
	                }
	            });
	        }
	        var colIdsMap;
	        if (utils_1.Utils.exists(params.columns)) {
	            colIdsMap = {};
	            params.columns.forEach(function (colKey) {
	                var column = _this.columnController.getGridColumn(colKey);
	                colIdsMap[column.getId()] = true;
	            });
	        }
	        var processRow = function (rowComp) {
	            var rowNode = rowComp.getRowNode();
	            var id = rowNode.id;
	            var floating = rowNode.rowPinned;
	            // skip this row if it is missing from the provided list
	            if (utils_1.Utils.exists(rowIdsMap)) {
	                if (floating === constants_1.Constants.PINNED_BOTTOM) {
	                    if (!rowIdsMap.bottom[id]) {
	                        return;
	                    }
	                }
	                else if (floating === constants_1.Constants.PINNED_TOP) {
	                    if (!rowIdsMap.top[id]) {
	                        return;
	                    }
	                }
	                else {
	                    if (!rowIdsMap.normal[id]) {
	                        return;
	                    }
	                }
	            }
	            rowComp.forEachCellComp(function (cellComp) {
	                var colId = cellComp.getColumn().getId();
	                var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
	                if (excludeColFromRefresh) {
	                    return;
	                }
	                cellComp.refreshCell({
	                    forceRefresh: params.force,
	                    volatile: params.volatile,
	                    newData: false
	                });
	            });
	        };
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
	            processRow(rowComp);
	        });
	        if (this.floatingTopRowComps) {
	            this.floatingTopRowComps.forEach(processRow);
	        }
	        if (this.floatingBottomRowComps) {
	            this.floatingBottomRowComps.forEach(processRow);
	        }
	    };
	    RowRenderer.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
	        this.removeRowComps(rowIndexesToRemove);
	    };
	    RowRenderer.prototype.binRowComps = function (recycleRows) {
	        var _this = this;
	        var indexesToRemove;
	        var rowsToRecycle = {};
	        if (recycleRows) {
	            indexesToRemove = [];
	            utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
	                var rowNode = rowComp.getRowNode();
	                if (utils_1.Utils.exists(rowNode.id)) {
	                    rowsToRecycle[rowNode.id] = rowComp;
	                    delete _this.rowCompsByIndex[index];
	                }
	                else {
	                    indexesToRemove.push(index);
	                }
	            });
	        }
	        else {
	            indexesToRemove = Object.keys(this.rowCompsByIndex);
	        }
	        this.removeRowComps(indexesToRemove);
	        return rowsToRecycle;
	    };
	    // takes array of row indexes
	    RowRenderer.prototype.removeRowComps = function (rowsToRemove) {
	        var _this = this;
	        // if no fromIndex then set to -1, which will refresh everything
	        // let realFromIndex = -1;
	        rowsToRemove.forEach(function (indexToRemove) {
	            var renderedRow = _this.rowCompsByIndex[indexToRemove];
	            renderedRow.destroy();
	            delete _this.rowCompsByIndex[indexToRemove];
	        });
	    };
	    // gets called when rows don't change, but viewport does, so after:
	    // 1) size of grid changed
	    // 2) grid scrolled to new position
	    // 3) ensure index visible (which is a scroll)
	    RowRenderer.prototype.redrawAfterScroll = function () {
	        this.getLockOnRefresh();
	        this.redraw(null, false, true);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {
	        // for speedy lookup, dump into map
	        var indexesToDrawMap = {};
	        indexesToDraw.forEach(function (index) { return indexesToDrawMap[index] = true; });
	        var existingIndexes = Object.keys(this.rowCompsByIndex);
	        var indexesNotToDraw = utils_1.Utils.filter(existingIndexes, function (index) { return !indexesToDrawMap[index]; });
	        this.removeRowComps(indexesNotToDraw);
	    };
	    RowRenderer.prototype.calculateIndexesToDraw = function () {
	        var _this = this;
	        // all in all indexes in the viewport
	        var indexesToDraw = utils_1.Utils.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
	        // add in indexes of rows we want to keep, because they are currently editing
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (indexStr, rowComp) {
	            var index = Number(indexStr);
	            if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
	                if (_this.keepRowBecauseEditing(rowComp)) {
	                    indexesToDraw.push(index);
	                }
	            }
	        });
	        indexesToDraw.sort(function (a, b) { return a - b; });
	        return indexesToDraw;
	    };
	    RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {
	        var _this = this;
	        if (animate === void 0) { animate = false; }
	        if (afterScroll === void 0) { afterScroll = false; }
	        this.workOutFirstAndLastRowsToRender();
	        // the row can already exist and be in the following:
	        // rowsToRecycle -> if model change, then the index may be different, however row may
	        //                         exist here from previous time (mapped by id).
	        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
	        // this is all the indexes we want, including those that already exist, so this method
	        // will end up going through each index and drawing only if the row doesn't already exist
	        var indexesToDraw = this.calculateIndexesToDraw();
	        this.removeRowCompsNotToDraw(indexesToDraw);
	        // add in new rows
	        var nextVmTurnFunctions = [];
	        var rowComps = [];
	        indexesToDraw.forEach(function (rowIndex) {
	            var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
	            if (utils_1.Utils.exists(rowComp)) {
	                rowComps.push(rowComp);
	                utils_1.Utils.pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());
	            }
	        });
	        this.flushContainers(rowComps);
	        utils_1.Utils.executeNextVMTurn(nextVmTurnFunctions);
	        if (afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.beans.taskQueue.addP2Task(this.destroyRowComps.bind(this, rowsToRecycle, animate));
	        }
	        else {
	            this.destroyRowComps(rowsToRecycle, animate);
	        }
	        this.checkAngularCompile();
	    };
	    RowRenderer.prototype.flushContainers = function (rowComps) {
	        utils_1.Utils.iterateObject(this.rowContainers, function (key, rowContainerComp) {
	            if (rowContainerComp) {
	                rowContainerComp.flushRowTemplates();
	            }
	        });
	        rowComps.forEach(function (rowComp) { return rowComp.afterFlush(); });
	    };
	    RowRenderer.prototype.onDisplayedColumnsChanged = function () {
	        var pinningLeft = this.columnController.isPinningLeft();
	        var pinningRight = this.columnController.isPinningRight();
	        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
	        if (atLeastOneChanged) {
	            this.pinningLeft = pinningLeft;
	            this.pinningRight = pinningRight;
	            if (this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	                this.redrawFullWidthEmbeddedRows();
	            }
	        }
	    };
	    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
	    // then it should go into the pinned left area if pinning left, or the center area if not pinning.
	    RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {
	        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
	        // embedded, as what appears in each section depends on whether we are pinned or not
	        var rowsToRemove = [];
	        this.forEachRowComp(function (id, rowComp) {
	            if (rowComp.isFullWidth()) {
	                var rowIndex = rowComp.getRowNode().rowIndex;
	                rowsToRemove.push(rowIndex.toString());
	            }
	        });
	        this.removeRowComps(rowsToRemove);
	        this.redrawAfterScroll();
	    };
	    RowRenderer.prototype.createOrUpdateRowComp = function (rowIndex, rowsToRecycle, animate, afterScroll) {
	        var rowNode;
	        var rowComp = this.rowCompsByIndex[rowIndex];
	        // if no row comp, see if we can get it from the previous rowComps
	        if (!rowComp) {
	            rowNode = this.paginationProxy.getRow(rowIndex);
	            if (utils_1.Utils.exists(rowNode) && utils_1.Utils.exists(rowsToRecycle) && rowsToRecycle[rowNode.id]) {
	                rowComp = rowsToRecycle[rowNode.id];
	                rowsToRecycle[rowNode.id] = null;
	            }
	        }
	        var creatingNewRowComp = !rowComp;
	        if (creatingNewRowComp) {
	            // create a new one
	            if (!rowNode) {
	                rowNode = this.paginationProxy.getRow(rowIndex);
	            }
	            if (utils_1.Utils.exists(rowNode)) {
	                rowComp = this.createRowComp(rowNode, animate, afterScroll);
	            }
	            else {
	                // this should never happen - if somehow we are trying to create
	                // a row for a rowNode that does not exist.
	                return;
	            }
	        }
	        else {
	            // ensure row comp is in right position in DOM
	            rowComp.ensureDomOrder();
	        }
	        this.rowCompsByIndex[rowIndex] = rowComp;
	        return rowComp;
	    };
	    RowRenderer.prototype.destroyRowComps = function (rowCompsMap, animate) {
	        var delayedFuncs = [];
	        utils_1.Utils.iterateObject(rowCompsMap, function (nodeId, rowComp) {
	            // if row was used, then it's null
	            if (!rowComp) {
	                return;
	            }
	            rowComp.destroy(animate);
	            utils_1.Utils.pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());
	        });
	        utils_1.Utils.executeInAWhile(delayedFuncs);
	    };
	    RowRenderer.prototype.checkAngularCompile = function () {
	        var _this = this;
	        // if we are doing angular compiling, then do digest the scope here
	        if (this.gridOptionsWrapper.isAngularCompileRows()) {
	            // we do it in a timeout, in case we are already in an apply
	            setTimeout(function () { _this.$scope.$apply(); }, 0);
	        }
	    };
	    RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
	        var newFirst;
	        var newLast;
	        if (!this.paginationProxy.isRowsToRender()) {
	            newFirst = 0;
	            newLast = -1; // setting to -1 means nothing in range
	        }
	        else {
	            var pageFirstRow = this.paginationProxy.getPageFirstRow();
	            var pageLastRow = this.paginationProxy.getPageLastRow();
	            if (this.forPrint) {
	                newFirst = pageFirstRow;
	                newLast = pageLastRow;
	            }
	            else {
	                var pixelOffset = this.paginationProxy ? this.paginationProxy.getPixelOffset() : 0;
	                var bodyVRange = this.gridPanel.getVerticalPixelRange();
	                var topPixel = bodyVRange.top;
	                var bottomPixel = bodyVRange.bottom;
	                var first = this.paginationProxy.getRowIndexAtPixel(topPixel + pixelOffset);
	                var last = this.paginationProxy.getRowIndexAtPixel(bottomPixel + pixelOffset);
	                //add in buffer
	                var buffer = this.gridOptionsWrapper.getRowBuffer();
	                first = first - buffer;
	                last = last + buffer;
	                // adjust, in case buffer extended actual size
	                if (first < pageFirstRow) {
	                    first = pageFirstRow;
	                }
	                if (last > pageLastRow) {
	                    last = pageLastRow;
	                }
	                newFirst = first;
	                newLast = last;
	            }
	        }
	        var firstDiffers = newFirst !== this.firstRenderedRow;
	        var lastDiffers = newLast !== this.lastRenderedRow;
	        if (firstDiffers || lastDiffers) {
	            this.firstRenderedRow = newFirst;
	            this.lastRenderedRow = newLast;
	            var event_1 = {
	                type: events_1.Events.EVENT_VIEWPORT_CHANGED,
	                firstRow: newFirst,
	                lastRow: newLast,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
	        return this.firstRenderedRow;
	    };
	    RowRenderer.prototype.getLastVirtualRenderedRow = function () {
	        return this.lastRenderedRow;
	    };
	    // check that none of the rows to remove are editing or focused as:
	    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
	    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
	    //    the edit is reset - so we want to keep it rendered.
	    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
	    //    otherwise the user can range select and drag (with focus cell going out of the viewport)
	    //    and then ctrl+c, nothing will happen if cell is removed from dom.
	    RowRenderer.prototype.keepRowBecauseEditing = function (rowComp) {
	        var REMOVE_ROW = false;
	        var KEEP_ROW = true;
	        var rowNode = rowComp.getRowNode();
	        var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);
	        var rowIsEditing = rowComp.isEditing();
	        var mightWantToKeepRow = rowHasFocus || rowIsEditing;
	        // if we deffo don't want to keep it,
	        if (!mightWantToKeepRow) {
	            return REMOVE_ROW;
	        }
	        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
	        // the reason we want to keep is if user is scrolling up and down, we don't want to loose
	        // the context of the editing in process.
	        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
	        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
	    };
	    RowRenderer.prototype.createRowComp = function (rowNode, animate, afterScroll) {
	        var useAnimationFrameForCreate = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        var rowComp = new rowComp_1.RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate);
	        rowComp.init();
	        return rowComp;
	    };
	    RowRenderer.prototype.getRenderedNodes = function () {
	        var renderedRows = this.rowCompsByIndex;
	        return Object.keys(renderedRows).map(function (key) {
	            return renderedRows[key].getRowNode();
	        });
	    };
	    // we use index for rows, but column object for columns, as the next column (by index) might not
	    // be visible (header grouping) so it's not reliable, so using the column object instead.
	    RowRenderer.prototype.navigateToNextCell = function (event, key, rowIndex, column, floating) {
	        var previousCell = new gridCell_1.GridCell({ rowIndex: rowIndex, floating: floating, column: column });
	        var nextCell = previousCell;
	        // we keep searching for a next cell until we find one. this is how the group rows get skipped
	        while (true) {
	            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
	            if (utils_1.Utils.missing(nextCell)) {
	                break;
	            }
	            var skipGroupRows = this.gridOptionsWrapper.isGroupUseEntireRow();
	            if (skipGroupRows) {
	                var rowNode = this.paginationProxy.getRow(nextCell.rowIndex);
	                if (!rowNode.group) {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        // allow user to override what cell to go to next
	        var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
	        if (utils_1.Utils.exists(userFunc)) {
	            var params = {
	                key: key,
	                previousCellDef: previousCell,
	                nextCellDef: nextCell ? nextCell.getGridCellDef() : null,
	                event: event
	            };
	            var nextCellDef = userFunc(params);
	            if (utils_1.Utils.exists(nextCellDef)) {
	                nextCell = new gridCell_1.GridCell(nextCellDef);
	            }
	            else {
	                nextCell = null;
	            }
	        }
	        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
	        if (!nextCell) {
	            return;
	        }
	        // this scrolls the row into view
	        if (utils_1.Utils.missing(nextCell.floating)) {
	            this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
	        }
	        if (!nextCell.column.isPinned()) {
	            this.gridPanel.ensureColumnVisible(nextCell.column);
	        }
	        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	        // floating cell, the scrolls get out of sync
	        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	        // need to flush frames, to make sure the correct cells are rendered
	        this.animationFrameService.flushAllFrames();
	        this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.floating, true);
	        if (this.rangeController) {
	            var gridCell = new gridCell_1.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	            this.rangeController.setRangeToCell(gridCell);
	        }
	    };
	    RowRenderer.prototype.startEditingCell = function (gridCell, keyPress, charPress) {
	        var cell = this.getComponentForCell(gridCell);
	        if (cell) {
	            cell.startRowOrCellEdit(keyPress, charPress);
	        }
	    };
	    RowRenderer.prototype.getComponentForCell = function (gridCell) {
	        var rowComponent;
	        switch (gridCell.floating) {
	            case constants_1.Constants.PINNED_TOP:
	                rowComponent = this.floatingTopRowComps[gridCell.rowIndex];
	                break;
	            case constants_1.Constants.PINNED_BOTTOM:
	                rowComponent = this.floatingBottomRowComps[gridCell.rowIndex];
	                break;
	            default:
	                rowComponent = this.rowCompsByIndex[gridCell.rowIndex];
	                break;
	        }
	        if (!rowComponent) {
	            return null;
	        }
	        var cellComponent = rowComponent.getRenderedCellForColumn(gridCell.column);
	        return cellComponent;
	    };
	    RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {
	        var backwards = keyboardEvent.shiftKey;
	        var success = this.moveToCellAfter(previousRenderedCell, backwards);
	        if (success) {
	            keyboardEvent.preventDefault();
	        }
	    };
	    RowRenderer.prototype.tabToNextCell = function (backwards) {
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        // if no focus, then cannot navigate
	        if (utils_1.Utils.missing(focusedCell)) {
	            return false;
	        }
	        var renderedCell = this.getComponentForCell(focusedCell);
	        // if cell is not rendered, means user has scrolled away from the cell
	        if (utils_1.Utils.missing(renderedCell)) {
	            return false;
	        }
	        var result = this.moveToCellAfter(renderedCell, backwards);
	        return result;
	    };
	    // returns true if moving to next cell was successful
	    RowRenderer.prototype.moveToCellAfter = function (previousRenderedCell, backwards) {
	        var editing = previousRenderedCell.isEditing();
	        var gridCell = previousRenderedCell.getGridCell();
	        // find the next cell to start editing
	        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, editing);
	        var foundCell = utils_1.Utils.exists(nextRenderedCell);
	        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
	        // to the normal tabbing so user can exit the grid.
	        if (foundCell) {
	            if (editing) {
	                if (this.gridOptionsWrapper.isFullRowEdit()) {
	                    this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
	                }
	                else {
	                    this.moveEditToNextCell(previousRenderedCell, nextRenderedCell);
	                }
	            }
	            else {
	                nextRenderedCell.focusCell(true);
	            }
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    RowRenderer.prototype.moveEditToNextCell = function (previousRenderedCell, nextRenderedCell) {
	        previousRenderedCell.stopEditing();
	        nextRenderedCell.startEditingIfEnabled(null, null, true);
	        nextRenderedCell.focusCell(false);
	    };
	    RowRenderer.prototype.moveEditToNextCellOrRow = function (previousRenderedCell, nextRenderedCell) {
	        var pGridCell = previousRenderedCell.getGridCell();
	        var nGridCell = nextRenderedCell.getGridCell();
	        var rowsMatch = (pGridCell.rowIndex === nGridCell.rowIndex)
	            && (pGridCell.floating === nGridCell.floating);
	        if (rowsMatch) {
	            // same row, so we don't start / stop editing, we just move the focus along
	            previousRenderedCell.setFocusOutOnEditor();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        else {
	            var pRow = previousRenderedCell.getRenderedRow();
	            var nRow = nextRenderedCell.getRenderedRow();
	            previousRenderedCell.setFocusOutOnEditor();
	            pRow.stopEditing();
	            nRow.startRowEditing();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        nextRenderedCell.focusCell();
	    };
	    // called by the cell, when tab is pressed while editing.
	    // @return: RenderedCell when navigation successful, otherwise null
	    RowRenderer.prototype.findNextCellToFocusOn = function (gridCell, backwards, startEditing) {
	        var nextCell = gridCell;
	        while (true) {
	            nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
	            // allow user to override what cell to go to next
	            var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
	            if (utils_1.Utils.exists(userFunc)) {
	                var params = {
	                    backwards: backwards,
	                    editing: startEditing,
	                    previousCellDef: gridCell.getGridCellDef(),
	                    nextCellDef: nextCell ? nextCell.getGridCellDef() : null
	                };
	                var nextCellDef = userFunc(params);
	                if (utils_1.Utils.exists(nextCellDef)) {
	                    nextCell = new gridCell_1.GridCell(nextCellDef);
	                }
	                else {
	                    nextCell = null;
	                }
	            }
	            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
	            // so bottom right cell going forwards, or top left going backwards
	            if (!nextCell) {
	                return null;
	            }
	            // this scrolls the row into view
	            var cellIsNotFloating = utils_1.Utils.missing(nextCell.floating);
	            if (cellIsNotFloating) {
	                this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
	            }
	            // pinned columns don't scroll, so no need to ensure index visible
	            if (!nextCell.column.isPinned()) {
	                this.gridPanel.ensureColumnVisible(nextCell.column);
	            }
	            // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	            // floating cell, the scrolls get out of sync
	            this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	            // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp
	            // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.
	            this.animationFrameService.flushAllFrames();
	            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
	            // or row that is not currently in view, hence the renderedCell would not exist
	            var nextCellComp = this.getComponentForCell(nextCell);
	            // if next cell is fullWidth row, then no rendered cell,
	            // as fullWidth rows have no cells, so we skip it
	            if (utils_1.Utils.missing(nextCellComp)) {
	                continue;
	            }
	            // if editing, but cell not editable, skip cell
	            if (startEditing && !nextCellComp.isCellEditable()) {
	                continue;
	            }
	            if (nextCellComp.isSuppressNavigable()) {
	                continue;
	            }
	            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
	            // consistent, we set into range here also.
	            if (this.rangeController) {
	                var gridCell_2 = new gridCell_1.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	                this.rangeController.setRangeToCell(gridCell_2);
	            }
	            // we successfully tabbed onto a grid cell, so return true
	            return nextCellComp;
	        }
	    };
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], RowRenderer.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], RowRenderer.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], RowRenderer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], RowRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('templateService'),
	        __metadata("design:type", templateService_1.TemplateService)
	    ], RowRenderer.prototype, "templateService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], RowRenderer.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], RowRenderer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], RowRenderer.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], RowRenderer.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('cellNavigationService'),
	        __metadata("design:type", cellNavigationService_1.CellNavigationService)
	    ], RowRenderer.prototype, "cellNavigationService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], RowRenderer.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], RowRenderer.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], RowRenderer.prototype, "beans", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], RowRenderer.prototype, "animationFrameService", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "rangeController", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "agWire", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "destroy", null);
	    RowRenderer = __decorate([
	        context_1.Bean('rowRenderer')
	    ], RowRenderer);
	    return RowRenderer;
	}(beanStub_1.BeanStub));
	exports.RowRenderer = RowRenderer;


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var rowRenderer_1 = __webpack_require__(305);
	var borderLayout_1 = __webpack_require__(307);
	var logger_1 = __webpack_require__(286);
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var dragService_1 = __webpack_require__(308);
	var constants_1 = __webpack_require__(289);
	var selectionController_1 = __webpack_require__(309);
	var csvCreator_1 = __webpack_require__(295);
	var mouseEventService_1 = __webpack_require__(310);
	var focusedCellController_1 = __webpack_require__(320);
	var scrollVisibleService_1 = __webpack_require__(321);
	var beanStub_1 = __webpack_require__(318);
	var rowContainerComponent_1 = __webpack_require__(322);
	var paginationProxy_1 = __webpack_require__(323);
	var popupEditorWrapper_1 = __webpack_require__(324);
	var alignedGridsService_1 = __webpack_require__(325);
	var pinnedRowModel_1 = __webpack_require__(326);
	var gridApi_1 = __webpack_require__(294);
	var animationFrameService_1 = __webpack_require__(327);
	var rowComp_1 = __webpack_require__(329);
	var navigationService_1 = __webpack_require__(331);
	// in the html below, it is important that there are no white space between some of the divs, as if there is white space,
	// it won't render correctly in safari, as safari renders white space as a gap
	var HEADER_SNIPPET = '<div class="ag-header" role="row">' +
	    '<div class="ag-pinned-left-header" role="presentation"></div>' +
	    '<div class="ag-pinned-right-header" role="presentation"></div>' +
	    '<div class="ag-header-viewport" role="presentation">' +
	    '<div class="ag-header-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-header-overlay" role="presentation"></div>' +
	    '</div>';
	var FLOATING_TOP_SNIPPET = '<div class="ag-floating-top" role="presentation">' +
	    '<div class="ag-pinned-left-floating-top" role="presentation"></div>' +
	    '<div class="ag-pinned-right-floating-top" role="presentation"></div>' +
	    '<div class="ag-floating-top-viewport" role="presentation">' +
	    '<div class="ag-floating-top-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-floating-top-full-width-container" role="presentation"></div>' +
	    '</div>';
	var FLOATING_BOTTOM_SNIPPET = '<div class="ag-floating-bottom" role="presentation">' +
	    '<div class="ag-pinned-left-floating-bottom" role="presentation"></div>' +
	    '<div class="ag-pinned-right-floating-bottom" role="presentation"></div>' +
	    '<div class="ag-floating-bottom-viewport" role="presentation">' +
	    '<div class="ag-floating-bottom-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-floating-bottom-full-width-container" role="presentation"></div>' +
	    '</div>';
	var BODY_SNIPPET = '<div class="ag-body" role="presentation">' +
	    '<div class="ag-pinned-left-cols-viewport" role="presentation">' +
	    '<div class="ag-pinned-left-cols-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-pinned-right-cols-viewport" role="presentation">' +
	    '<div class="ag-pinned-right-cols-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-body-viewport-wrapper" role="presentation">' +
	    '<div class="ag-body-viewport" role="presentation">' +
	    '<div class="ag-body-container" role="presentation"></div>' +
	    '</div>' +
	    '</div>' +
	    '<div class="ag-full-width-viewport" role="presentation">' +
	    '<div class="ag-full-width-container" role="presentation"></div>' +
	    '</div>' +
	    '</div>';
	// the difference between the 'normal' and 'full height' template is the order of the floating and body,
	// for normal, the floating top and bottom go in first as they are fixed position,
	// for auto-height, the body is in the middle of the top and bottom as they are just normally laid out
	var GRID_PANEL_NORMAL_TEMPLATE = '<div class="ag-root ag-font-style" role="grid">' +
	    HEADER_SNIPPET + FLOATING_TOP_SNIPPET + FLOATING_BOTTOM_SNIPPET + BODY_SNIPPET +
	    '</div>';
	var GRID_PANEL_AUTO_HEIGHT_TEMPLATE = '<div class="ag-root ag-font-style" role="grid">' +
	    HEADER_SNIPPET + FLOATING_TOP_SNIPPET + BODY_SNIPPET + FLOATING_BOTTOM_SNIPPET +
	    '</div>';
	// the template for for-print is much easier than that others, as it doesn't have any pinned areas
	// or scrollable areas (so no viewports).
	var GRID_PANEL_FOR_PRINT_TEMPLATE = '<div class="ag-root ag-font-style">' +
	    // header
	    '<div class="ag-header-container"></div>' +
	    // floating
	    '<div class="ag-floating-top-container"></div>' +
	    // body
	    '<div class="ag-body-container"></div>' +
	    // floating bottom
	    '<div class="ag-floating-bottom-container"></div>' +
	    '</div>';
	// wrapping in outer div, and wrapper, is needed to center the loading icon
	// The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
	var OVERLAY_TEMPLATE = '<div class="ag-overlay-panel" role="presentation">' +
	    '<div class="ag-overlay-wrapper ag-overlay-[OVERLAY_NAME]-wrapper">[OVERLAY_TEMPLATE]</div>' +
	    '</div>';
	var LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
	var NO_ROWS_TO_SHOW_OVERLAY_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
	var GridPanel = (function (_super) {
	    __extends(GridPanel, _super);
	    function GridPanel() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.scrollLeft = -1;
	        _this.nextScrollLeft = -1;
	        _this.scrollTop = -1;
	        _this.nextScrollTop = -1;
	        _this.verticalRedrawNeeded = false;
	        return _this;
	    }
	    GridPanel.prototype.agWire = function (loggerFactory) {
	        this.logger = loggerFactory.create('GridPanel');
	        // makes code below more readable if we pull 'forPrint' out
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	        this.autoHeight = this.gridOptionsWrapper.isAutoHeight();
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
	        this.loadTemplate();
	        this.findElements();
	    };
	    GridPanel.prototype.getVerticalPixelRange = function () {
	        var container = this.getPrimaryScrollViewport();
	        var result = {
	            top: container.scrollTop,
	            bottom: container.scrollTop + container.offsetHeight
	        };
	        return result;
	    };
	    // we override this, as the base class is missing the annotation
	    GridPanel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    GridPanel.prototype.onRowDataChanged = function () {
	        this.showOrHideOverlay();
	    };
	    GridPanel.prototype.showOrHideOverlay = function () {
	        if (this.paginationProxy.isEmpty() && !this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.showNoRowsOverlay();
	        }
	        else {
	            this.hideOverlay();
	        }
	    };
	    GridPanel.prototype.getLayout = function () {
	        return this.layout;
	    };
	    GridPanel.prototype.init = function () {
	        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        this.addEventListeners();
	        this.addDragListeners();
	        this.layout = new borderLayout_1.BorderLayout({
	            overlays: {
	                loading: utils_1.Utils.loadTemplate(this.createLoadingOverlayTemplate()),
	                noRows: utils_1.Utils.loadTemplate(this.createNoRowsOverlayTemplate())
	            },
	            center: this.eRoot,
	            dontFill: this.forPrint,
	            fillHorizontalOnly: this.autoHeight,
	            name: 'eGridPanel'
	        });
	        this.layout.addSizeChangeListener(this.setBodyAndHeaderHeights.bind(this));
	        this.layout.addSizeChangeListener(this.setLeftAndRightBounds.bind(this));
	        this.addScrollListener();
	        if (this.gridOptionsWrapper.isSuppressHorizontalScroll()) {
	            this.eBodyViewport.style.overflowX = 'hidden';
	        }
	        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
	            this.showLoadingOverlay();
	        }
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.disableBrowserDragging();
	        this.addShortcutKeyListeners();
	        this.addMouseListeners();
	        this.addKeyboardEvents();
	        this.addBodyViewportListener();
	        this.addStopEditingWhenGridLosesFocus();
	        if (this.$scope) {
	            this.addAngularApplyCheck();
	        }
	        this.onDisplayedColumnsWidthChanged();
	    };
	    GridPanel.prototype.addStopEditingWhenGridLosesFocus = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) {
	            this.addDestroyableEventListener(this.eBody, 'focusout', function (event) {
	                // this is the element the focus is moving to
	                var elementWithFocus = event.relatedTarget;
	                // see if the element the focus is going to is part of the grid
	                var clickInsideGrid = false;
	                var pointer = elementWithFocus;
	                while (utils_1.Utils.exists(pointer) && !clickInsideGrid) {
	                    var isPopup = !!_this.gridOptionsWrapper.getDomData(pointer, popupEditorWrapper_1.PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER);
	                    var isBody = _this.eBody == pointer;
	                    clickInsideGrid = isPopup || isBody;
	                    pointer = pointer.parentNode;
	                }
	                if (!clickInsideGrid) {
	                    _this.rowRenderer.stopEditing();
	                }
	            });
	        }
	    };
	    GridPanel.prototype.addAngularApplyCheck = function () {
	        var _this = this;
	        // this makes sure if we queue up requests, we only execute oe
	        var applyTriggered = false;
	        var listener = function () {
	            // only need to do one apply at a time
	            if (applyTriggered) {
	                return;
	            }
	            applyTriggered = true; // mark 'need apply' to true
	            setTimeout(function () {
	                applyTriggered = false;
	                _this.$scope.$apply();
	            }, 0);
	        };
	        // these are the events we need to do an apply after - these are the ones that can end up
	        // with columns added or removed
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
	    };
	    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
	    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
	    GridPanel.prototype.disableBrowserDragging = function () {
	        this.eRoot.addEventListener('dragstart', function (event) {
	            if (event.target instanceof HTMLImageElement) {
	                event.preventDefault();
	                return false;
	            }
	        });
	    };
	    GridPanel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	    };
	    GridPanel.prototype.addDragListeners = function () {
	        var _this = this;
	        if (this.forPrint // no range select when doing 'for print'
	            || !this.gridOptionsWrapper.isEnableRangeSelection() // no range selection if no property
	            || utils_1.Utils.missing(this.rangeController)) {
	            return;
	        }
	        var containers = [this.ePinnedLeftColsContainer, this.ePinnedRightColsContainer, this.eBodyContainer,
	            this.eFloatingTop, this.eFloatingBottom];
	        containers.forEach(function (container) {
	            var params = {
	                dragStartPixels: 0,
	                eElement: container,
	                onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
	                onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
	                onDragging: _this.rangeController.onDragging.bind(_this.rangeController)
	            };
	            _this.dragService.addDragSource(params);
	            _this.addDestroyFunc(function () { return _this.dragService.removeDragSource(params); });
	        });
	    };
	    GridPanel.prototype.addMouseListeners = function () {
	        var _this = this;
	        var eventNames = ['click', 'mousedown', 'dblclick', 'contextmenu', 'mouseover', 'mouseout'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processMouseEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                return _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addKeyboardEvents = function () {
	        var _this = this;
	        var eventNames = ['keydown', 'keypress'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processKeyboardEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addBodyViewportListener = function () {
	        var _this = this;
	        // we never add this when doing 'forPrint'
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
	        // the context menu if no rows are displayed, or user simply clicks outside of a cell
	        var listener = function (mouseEvent) {
	            var target = utils_1.Utils.getTarget(mouseEvent);
	            if (target === _this.eBodyViewport || target === _this.ePinnedLeftColsViewport || target === _this.ePinnedRightColsViewport) {
	                // show it
	                _this.onContextMenu(mouseEvent);
	                _this.preventDefaultOnContextMenu(mouseEvent);
	            }
	        };
	        //For some reason listening only to this.eBody doesnt work... Maybe because the event is consumed somewhere else?
	        //In any case, not expending much time on this, if anyome comes accross this and knows how to make this work with
	        //one listener please go ahead and change it...
	        this.addDestroyableEventListener(this.eBodyViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'contextmenu', listener);
	    };
	    GridPanel.prototype.getRowForEvent = function (event) {
	        var sourceElement = utils_1.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, rowComp_1.RowComp.DOM_DATA_KEY_RENDERED_ROW);
	            if (renderedRow) {
	                return renderedRow;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    GridPanel.prototype.processKeyboardEvent = function (eventName, keyboardEvent) {
	        var renderedCell = this.mouseEventService.getRenderedCellForEvent(keyboardEvent);
	        if (!renderedCell) {
	            return;
	        }
	        switch (eventName) {
	            case 'keydown':
	                // first see if it's a scroll key, page up / down, home / end etc
	                var wasScrollKey = this.navigationService.handlePageScrollingKey(keyboardEvent);
	                // if not a scroll key, then we pass onto cell
	                if (!wasScrollKey) {
	                    renderedCell.onKeyDown(keyboardEvent);
	                }
	                break;
	            case 'keypress':
	                renderedCell.onKeyPress(keyboardEvent);
	                break;
	        }
	    };
	    // gets called by rowRenderer when new data loaded, as it will want to scroll
	    // to the top
	    GridPanel.prototype.scrollToTop = function () {
	        if (!this.forPrint) {
	            this.getPrimaryScrollViewport().scrollTop = 0;
	        }
	    };
	    GridPanel.prototype.processMouseEvent = function (eventName, mouseEvent) {
	        var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
	        if (cellComp) {
	            cellComp.onMouseEvent(eventName, mouseEvent);
	        }
	        var rowComp = this.getRowForEvent(mouseEvent);
	        if (rowComp) {
	            rowComp.onMouseEvent(eventName, mouseEvent);
	        }
	        this.preventDefaultOnContextMenu(mouseEvent);
	    };
	    GridPanel.prototype.onContextMenu = function (mouseEvent) {
	        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
	        // not everyone wants this, so first 'if' below allows to turn this hack off.
	        if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
	            // then do the check
	            if (mouseEvent.ctrlKey || mouseEvent.metaKey) {
	                return;
	            }
	        }
	        if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
	            this.contextMenuFactory.showMenu(null, null, null, mouseEvent);
	            mouseEvent.preventDefault();
	        }
	    };
	    GridPanel.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
	        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
	        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
	        // button in the browser). so this property allows the user to receive middle button clicks if
	        // they want.
	        if (this.gridOptionsWrapper.isSuppressMiddleClickScrolls() && mouseEvent.which === 2) {
	            mouseEvent.preventDefault();
	        }
	    };
	    GridPanel.prototype.addShortcutKeyListeners = function () {
	        var _this = this;
	        this.eAllCellContainers.forEach(function (container) {
	            container.addEventListener('keydown', function (event) {
	                // if the cell the event came from is editing, then we do not
	                // want to do the default shortcut keys, otherwise the editor
	                // (eg a text field) would not be able to do the normal cut/copy/paste
	                var renderedCell = _this.mouseEventService.getRenderedCellForEvent(event);
	                if (renderedCell && renderedCell.isEditing()) {
	                    return;
	                }
	                // for copy / paste, we don't want to execute when the event
	                // was from a child grid (happens in master detail)
	                if (!_this.mouseEventService.isEventFromThisGrid(event)) {
	                    return;
	                }
	                if (event.ctrlKey || event.metaKey) {
	                    switch (event.which) {
	                        case constants_1.Constants.KEY_A: return _this.onCtrlAndA(event);
	                        case constants_1.Constants.KEY_C: return _this.onCtrlAndC(event);
	                        case constants_1.Constants.KEY_V: return _this.onCtrlAndV(event);
	                        case constants_1.Constants.KEY_D: return _this.onCtrlAndD(event);
	                    }
	                }
	            });
	        });
	    };
	    GridPanel.prototype.onCtrlAndA = function (event) {
	        if (this.rangeController && this.paginationProxy.isRowsToRender()) {
	            var rowEnd = void 0;
	            var floatingStart = void 0;
	            var floatingEnd = void 0;
	            if (this.pinnedRowModel.isEmpty(constants_1.Constants.PINNED_TOP)) {
	                floatingStart = null;
	            }
	            else {
	                floatingStart = constants_1.Constants.PINNED_TOP;
	            }
	            if (this.pinnedRowModel.isEmpty(constants_1.Constants.PINNED_BOTTOM)) {
	                floatingEnd = null;
	                rowEnd = this.paginationProxy.getTotalRowCount() - 1;
	            }
	            else {
	                floatingEnd = constants_1.Constants.PINNED_BOTTOM;
	                rowEnd = this.pinnedRowModel.getPinnedBottomRowData().length = 1;
	            }
	            var allDisplayedColumns = this.columnController.getAllDisplayedColumns();
	            if (utils_1.Utils.missingOrEmpty(allDisplayedColumns)) {
	                return;
	            }
	            this.rangeController.setRange({
	                rowStart: 0,
	                floatingStart: floatingStart,
	                rowEnd: rowEnd,
	                floatingEnd: floatingEnd,
	                columnStart: allDisplayedColumns[0],
	                columnEnd: allDisplayedColumns[allDisplayedColumns.length - 1]
	            });
	        }
	        event.preventDefault();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndC = function (event) {
	        if (!this.clipboardService) {
	            return;
	        }
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        this.clipboardService.copyToClipboard();
	        event.preventDefault();
	        // the copy operation results in loosing focus on the cell,
	        // because of the trickery the copy logic uses with a temporary
	        // widget. so we set it back again.
	        if (focusedCell) {
	            this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.floating, true);
	        }
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndV = function (event) {
	        if (!this.rangeController) {
	            return;
	        }
	        this.clipboardService.pasteFromClipboard();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndD = function (event) {
	        if (!this.clipboardService) {
	            return;
	        }
	        this.clipboardService.copyRangeDown();
	        event.preventDefault();
	        return false;
	    };
	    GridPanel.prototype.createOverlayTemplate = function (name, defaultTemplate, userProvidedTemplate) {
	        var template = OVERLAY_TEMPLATE
	            .replace('[OVERLAY_NAME]', name);
	        if (userProvidedTemplate) {
	            template = template.replace('[OVERLAY_TEMPLATE]', userProvidedTemplate);
	        }
	        else {
	            template = template.replace('[OVERLAY_TEMPLATE]', defaultTemplate);
	        }
	        return template;
	    };
	    GridPanel.prototype.createLoadingOverlayTemplate = function () {
	        var userProvidedTemplate = this.gridOptionsWrapper.getOverlayLoadingTemplate();
	        var templateNotLocalised = this.createOverlayTemplate('loading', LOADING_OVERLAY_TEMPLATE, userProvidedTemplate);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var templateLocalised = templateNotLocalised.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
	        return templateLocalised;
	    };
	    GridPanel.prototype.createNoRowsOverlayTemplate = function () {
	        var userProvidedTemplate = this.gridOptionsWrapper.getOverlayNoRowsTemplate();
	        var templateNotLocalised = this.createOverlayTemplate('no-rows', NO_ROWS_TO_SHOW_OVERLAY_TEMPLATE, userProvidedTemplate);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var templateLocalised = templateNotLocalised.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
	        return templateLocalised;
	    };
	    // Valid values for position are bottom, middle and top
	    // position should be {'top','middle','bottom', or undefined/null}.
	    // if undefined/null, then the grid will to the minimal amount of scrolling,
	    // eg if grid needs to scroll up, it scrolls until row is on top,
	    //    if grid needs to scroll down, it scrolls until row is on bottom,
	    //    if row is already in view, grid does not scroll
	    GridPanel.prototype.ensureIndexVisible = function (index, position) {
	        // if for print, everything is always visible
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        this.logger.log('ensureIndexVisible: ' + index);
	        var rowCount = this.paginationProxy.getTotalRowCount();
	        if (typeof index !== 'number' || index < 0 || index >= rowCount) {
	            console.warn('invalid row index for ensureIndexVisible: ' + index);
	            return;
	        }
	        this.paginationProxy.goToPageWithIndex(index);
	        var nodeAtIndex = this.paginationProxy.getRow(index);
	        var pixelOffset = this.paginationProxy.getPixelOffset();
	        var rowTopPixel = nodeAtIndex.rowTop - pixelOffset;
	        var rowBottomPixel = rowTopPixel + nodeAtIndex.rowHeight;
	        var vRange = this.getVerticalPixelRange();
	        var vRangeTop = vRange.top;
	        var vRangeBottom = vRange.bottom;
	        var scrollShowing = this.isHorizontalScrollShowing();
	        if (scrollShowing) {
	            vRangeBottom -= this.scrollWidth;
	        }
	        var rowToHighlightHeight = rowBottomPixel - rowTopPixel;
	        var viewportHeight = vRangeBottom - vRangeTop;
	        var halfScreenHeight = (viewportHeight / 2) + (rowToHighlightHeight / 2);
	        var eViewportToScroll = this.getPrimaryScrollViewport();
	        var newScrollPosition;
	        switch (position) {
	            case 'top':
	                newScrollPosition = rowTopPixel;
	                break;
	            case 'bottom':
	                newScrollPosition = rowBottomPixel - viewportHeight;
	                break;
	            case 'middle':
	                newScrollPosition = halfScreenHeight;
	                // The if/else logic here protects us from over scrolling
	                // ie: Trying to scroll past the row (ie ensureNodeVisible (0, 'middle'))
	                newScrollPosition = newScrollPosition > rowTopPixel ? rowTopPixel : newScrollPosition;
	                break;
	            default:
	                newScrollPosition = rowTopPixel;
	                var viewportScrolledPastRow = vRangeTop > rowTopPixel;
	                var viewportScrolledBeforeRow = vRangeBottom < rowBottomPixel;
	                if (viewportScrolledPastRow) {
	                    // if row is before, scroll up with row at top
	                    newScrollPosition = rowTopPixel;
	                }
	                else if (viewportScrolledBeforeRow) {
	                    // if row is below, scroll down with row at bottom
	                    var viewportHeight_1 = vRangeBottom - vRangeTop;
	                    newScrollPosition = rowBottomPixel - viewportHeight_1;
	                }
	                else {
	                    // row already in view, and top/middle/bottom not specified, so do nothing.
	                    newScrollPosition = null;
	                }
	                break;
	        }
	        // this means the row is already in view, and we don't need to scroll
	        if (newScrollPosition === null) {
	            return;
	        }
	        eViewportToScroll.scrollTop = newScrollPosition;
	        this.rowRenderer.redrawAfterScroll();
	    };
	    GridPanel.prototype.getPrimaryScrollViewport = function () {
	        if (this.enableRtl && this.columnController.isPinningLeft()) {
	            return this.ePinnedLeftColsViewport;
	        }
	        else if (!this.enableRtl && this.columnController.isPinningRight()) {
	            return this.ePinnedRightColsViewport;
	        }
	        else {
	            return this.eBodyViewport;
	        }
	    };
	    // + moveColumnController
	    GridPanel.prototype.getCenterWidth = function () {
	        return this.eBodyViewport.clientWidth;
	    };
	    GridPanel.prototype.isHorizontalScrollShowing = function () {
	        var result = utils_1.Utils.isHorizontalScrollShowing(this.eBodyViewport);
	        return result;
	    };
	    GridPanel.prototype.isVerticalScrollShowing = function () {
	        if (this.columnController.isPinningRight()) {
	            return utils_1.Utils.isVerticalScrollShowing(this.ePinnedRightColsViewport);
	        }
	        else {
	            return utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	        }
	    };
	    GridPanel.prototype.isBodyVerticalScrollShowing = function () {
	        // if the scroll is on the pinned panel, then it is never in the center panel.
	        // if LRT, then pinning right means scroll NOT on center
	        if (!this.enableRtl && this.columnController.isPinningRight()) {
	            return false;
	        }
	        // if RTL, then pinning left means scroll NOT on center
	        if (this.enableRtl && this.columnController.isPinningLeft()) {
	            return false;
	        }
	        return utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	    };
	    // gets called every 500 ms. we use this to set padding on right pinned column
	    GridPanel.prototype.periodicallyCheck = function () {
	        if (this.forPrint) {
	            return;
	        }
	        this.setBottomPaddingOnPinnedRight();
	        this.setMarginOnFullWidthCellContainer();
	        this.setScrollShowing();
	    };
	    GridPanel.prototype.setScrollShowing = function () {
	        var params = {
	            vBody: false,
	            hBody: false,
	            vPinnedLeft: false,
	            vPinnedRight: false
	        };
	        if (this.enableRtl) {
	            if (this.columnController.isPinningLeft()) {
	                params.vPinnedLeft = this.forPrint ? false : utils_1.Utils.isVerticalScrollShowing(this.ePinnedLeftColsViewport);
	            }
	            else {
	                params.vBody = utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	            }
	        }
	        else {
	            if (this.columnController.isPinningRight()) {
	                params.vPinnedRight = this.forPrint ? false : utils_1.Utils.isVerticalScrollShowing(this.ePinnedRightColsViewport);
	            }
	            else {
	                params.vBody = utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	            }
	        }
	        params.hBody = utils_1.Utils.isHorizontalScrollShowing(this.eBodyViewport);
	        this.scrollVisibleService.setScrollsVisible(params);
	    };
	    // the pinned container needs extra space at the bottom, some blank space, otherwise when
	    // vertically scrolled all the way down, the last row will be hidden behind the scrolls.
	    // this extra padding allows the last row to be lifted above the bottom scrollbar.
	    GridPanel.prototype.setBottomPaddingOnPinnedRight = function () {
	        if (this.forPrint) {
	            return;
	        }
	        if (this.columnController.isPinningRight()) {
	            var bodyHorizontalScrollShowing = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
	            if (bodyHorizontalScrollShowing) {
	                this.ePinnedRightColsContainer.style.marginBottom = this.scrollWidth + 'px';
	            }
	            else {
	                this.ePinnedRightColsContainer.style.marginBottom = '';
	            }
	        }
	    };
	    GridPanel.prototype.setMarginOnFullWidthCellContainer = function () {
	        if (this.forPrint) {
	            return;
	        }
	        // if either right or bottom scrollbars are showing, we need to make sure the
	        // fullWidthCell panel isn't covering the scrollbars. originally i tried to do this using
	        // margin, but the overflow was not getting clipped and going into the margin,
	        // so used border instead. dunno why it works, trial and error found the solution.
	        if (this.enableRtl) {
	            if (this.isVerticalScrollShowing()) {
	                this.eFullWidthCellViewport.style.borderLeft = this.scrollWidth + 'px solid transparent';
	            }
	            else {
	                this.eFullWidthCellViewport.style.borderLeft = '';
	            }
	        }
	        else {
	            if (this.isVerticalScrollShowing()) {
	                this.eFullWidthCellViewport.style.borderRight = this.scrollWidth + 'px solid transparent';
	            }
	            else {
	                this.eFullWidthCellViewport.style.borderRight = '';
	            }
	        }
	        if (this.isHorizontalScrollShowing()) {
	            this.eFullWidthCellViewport.style.borderBottom = this.scrollWidth + 'px solid transparent';
	        }
	        else {
	            this.eFullWidthCellViewport.style.borderBottom = '';
	        }
	    };
	    GridPanel.prototype.ensureColumnVisible = function (key) {
	        // if for print, everything is always visible
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var column = this.columnController.getGridColumn(key);
	        if (!column) {
	            return;
	        }
	        if (column.isPinned()) {
	            console.warn('calling ensureIndexVisible on a ' + column.getPinned() + ' pinned column doesn\'t make sense for column ' + column.getColId());
	            return;
	        }
	        if (!this.columnController.isColumnDisplayed(column)) {
	            console.warn('column is not currently visible');
	            return;
	        }
	        var colLeftPixel = column.getLeft();
	        var colRightPixel = colLeftPixel + column.getActualWidth();
	        var viewportWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        var bodyWidth = this.columnController.getBodyContainerWidth();
	        var viewportLeftPixel;
	        var viewportRightPixel;
	        // the logic of working out left and right viewport px is both here and in the ColumnController,
	        // need to refactor it out to one place
	        if (this.enableRtl) {
	            viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
	            viewportRightPixel = bodyWidth - scrollPosition;
	        }
	        else {
	            viewportLeftPixel = scrollPosition;
	            viewportRightPixel = viewportWidth + scrollPosition;
	        }
	        var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
	        var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
	        var colToSmallForViewport = viewportWidth < column.getActualWidth();
	        var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
	        var alignColToRight = viewportScrolledBeforeCol;
	        if (alignColToLeft) {
	            // if viewport's left side is after col's left side, scroll left to pull col into viewport at left
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - viewportWidth - colLeftPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                this.setBodyViewportScrollLeft(colLeftPixel);
	            }
	        }
	        else if (alignColToRight) {
	            // if viewport's right side is before col's right side, scroll right to pull col into viewport at right
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - colRightPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                var newScrollPosition = colRightPixel - viewportWidth;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	        }
	        else {
	            // otherwise, col is already in view, so do nothing
	        }
	        // this will happen anyway, as the move will cause a 'scroll' event on the body, however
	        // it is possible that the ensureColumnVisible method is called from within ag-Grid and
	        // the caller will need to have the columns rendered to continue, which will be before
	        // the event has been worked on (which is the case for cell navigation).
	        this.setLeftAndRightBounds();
	    };
	    GridPanel.prototype.showLoadingOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
	            this.layout.showOverlay('loading');
	        }
	    };
	    GridPanel.prototype.showNoRowsOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.layout.showOverlay('noRows');
	        }
	    };
	    GridPanel.prototype.hideOverlay = function () {
	        this.layout.hideOverlay();
	    };
	    GridPanel.prototype.getWidthForSizeColsToFit = function () {
	        var availableWidth = this.eBody.clientWidth;
	        // if pinning right, then the scroll bar can show, however for some reason
	        // it overlays the grid and doesn't take space. so we are only interested
	        // in the body scroll showing.
	        var removeVerticalScrollWidth = this.isVerticalScrollShowing();
	        if (removeVerticalScrollWidth) {
	            availableWidth -= this.scrollWidth;
	        }
	        return availableWidth;
	    };
	    // method will call itself if no available width. this covers if the grid
	    // isn't visible, but is just about to be visible.
	    GridPanel.prototype.sizeColumnsToFit = function (nextTimeout) {
	        var _this = this;
	        var availableWidth = this.getWidthForSizeColsToFit();
	        if (availableWidth > 0) {
	            this.columnController.sizeColumnsToFit(availableWidth);
	        }
	        else {
	            if (nextTimeout === undefined) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(100);
	                }, 0);
	            }
	            else if (nextTimeout === 100) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(500);
	                }, 100);
	            }
	            else if (nextTimeout === 500) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(-1);
	                }, 500);
	            }
	            else {
	                console.log('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +
	                    'zero width, maybe the grid is not visible yet on the screen?');
	            }
	        }
	    };
	    GridPanel.prototype.getBodyContainer = function () {
	        return this.eBodyContainer;
	    };
	    GridPanel.prototype.getDropTargetBodyContainers = function () {
	        if (this.forPrint) {
	            return [this.eBodyContainer, this.eFloatingTopContainer, this.eFloatingBottomContainer];
	        }
	        else {
	            return [this.eBodyViewport, this.eFloatingTopViewport, this.eFloatingBottomViewport];
	        }
	    };
	    GridPanel.prototype.getBodyViewport = function () {
	        return this.eBodyViewport;
	    };
	    GridPanel.prototype.getDropTargetLeftContainers = function () {
	        if (this.forPrint) {
	            return [];
	        }
	        else {
	            return [this.ePinnedLeftColsViewport, this.ePinnedLeftFloatingBottom, this.ePinnedLeftFloatingTop];
	        }
	    };
	    GridPanel.prototype.getDropTargetPinnedRightContainers = function () {
	        if (this.forPrint) {
	            return [];
	        }
	        else {
	            return [this.ePinnedRightColsViewport, this.ePinnedRightFloatingBottom, this.ePinnedRightFloatingTop];
	        }
	    };
	    GridPanel.prototype.getHeaderContainer = function () {
	        return this.eHeaderContainer;
	    };
	    GridPanel.prototype.getHeaderOverlay = function () {
	        return this.eHeaderOverlay;
	    };
	    GridPanel.prototype.getRoot = function () {
	        return this.eRoot;
	    };
	    GridPanel.prototype.getPinnedLeftHeader = function () {
	        return this.ePinnedLeftHeader;
	    };
	    GridPanel.prototype.getPinnedRightHeader = function () {
	        return this.ePinnedRightHeader;
	    };
	    GridPanel.prototype.queryHtmlElement = function (selector) {
	        return this.eRoot.querySelector(selector);
	    };
	    GridPanel.prototype.loadTemplate = function () {
	        // the template we use is different when doing 'for print'
	        var template;
	        if (this.forPrint) {
	            template = GRID_PANEL_FOR_PRINT_TEMPLATE;
	        }
	        else if (this.autoHeight) {
	            template = GRID_PANEL_AUTO_HEIGHT_TEMPLATE;
	        }
	        else {
	            template = GRID_PANEL_NORMAL_TEMPLATE;
	        }
	        this.eRoot = utils_1.Utils.loadTemplate(template);
	    };
	    GridPanel.prototype.findElements = function () {
	        var _this = this;
	        if (this.forPrint) {
	            this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	            this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	            this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	            this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	            this.eAllCellContainers = [this.eBodyContainer, this.eFloatingTopContainer, this.eFloatingBottomContainer];
	            var containers = {
	                body: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eBodyContainer }),
	                fullWidth: null,
	                pinnedLeft: null,
	                pinnedRight: null,
	                floatingTop: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopContainer }),
	                floatingTopPinnedLeft: null,
	                floatingTopPinnedRight: null,
	                floatingTopFullWidth: null,
	                floatingBottom: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomContainer }),
	                floatingBottomPinnedLeft: null,
	                floatingBottomPinnedRight: null,
	                floatingBottomFullWith: null
	            };
	            this.rowContainerComponents = containers;
	            // when doing forPrint, we don't have any fullWidth containers, instead we add directly to the main
	            // containers. this works in forPrint only as there are no pinned columns (no need for fullWidth to
	            // span pinned columns) and the rows are already the full width of the grid (the reason for fullWidth)
	            containers.fullWidth = containers.body;
	            containers.floatingBottomFullWith = containers.floatingBottom;
	            containers.floatingTopFullWidth = containers.floatingTop;
	        }
	        else {
	            this.eBody = this.queryHtmlElement('.ag-body');
	            this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	            this.eBodyViewport = this.queryHtmlElement('.ag-body-viewport');
	            this.eBodyViewportWrapper = this.queryHtmlElement('.ag-body-viewport-wrapper');
	            this.eFullWidthCellContainer = this.queryHtmlElement('.ag-full-width-container');
	            this.eFullWidthCellViewport = this.queryHtmlElement('.ag-full-width-viewport');
	            this.ePinnedLeftColsContainer = this.queryHtmlElement('.ag-pinned-left-cols-container');
	            this.ePinnedRightColsContainer = this.queryHtmlElement('.ag-pinned-right-cols-container');
	            this.ePinnedLeftColsViewport = this.queryHtmlElement('.ag-pinned-left-cols-viewport');
	            this.ePinnedRightColsViewport = this.queryHtmlElement('.ag-pinned-right-cols-viewport');
	            this.ePinnedLeftHeader = this.queryHtmlElement('.ag-pinned-left-header');
	            this.ePinnedRightHeader = this.queryHtmlElement('.ag-pinned-right-header');
	            this.eHeader = this.queryHtmlElement('.ag-header');
	            this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	            this.eHeaderOverlay = this.queryHtmlElement('.ag-header-overlay');
	            this.eHeaderViewport = this.queryHtmlElement('.ag-header-viewport');
	            this.eFloatingTop = this.queryHtmlElement('.ag-floating-top');
	            this.ePinnedLeftFloatingTop = this.queryHtmlElement('.ag-pinned-left-floating-top');
	            this.ePinnedRightFloatingTop = this.queryHtmlElement('.ag-pinned-right-floating-top');
	            this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	            this.eFloatingTopViewport = this.queryHtmlElement('.ag-floating-top-viewport');
	            this.eFloatingTopFullWidthCellContainer = this.queryHtmlElement('.ag-floating-top-full-width-container');
	            this.eFloatingBottom = this.queryHtmlElement('.ag-floating-bottom');
	            this.ePinnedLeftFloatingBottom = this.queryHtmlElement('.ag-pinned-left-floating-bottom');
	            this.ePinnedRightFloatingBottom = this.queryHtmlElement('.ag-pinned-right-floating-bottom');
	            this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	            this.eFloatingBottomViewport = this.queryHtmlElement('.ag-floating-bottom-viewport');
	            this.eFloatingBottomFullWidthCellContainer = this.queryHtmlElement('.ag-floating-bottom-full-width-container');
	            this.eAllCellContainers = [
	                this.ePinnedLeftColsContainer, this.ePinnedRightColsContainer, this.eBodyContainer,
	                this.eFloatingTop, this.eFloatingBottom, this.eFullWidthCellContainer
	            ];
	            this.rowContainerComponents = {
	                body: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eBodyContainer, eViewport: this.eBodyViewport, body: true }),
	                fullWidth: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFullWidthCellContainer, hideWhenNoChildren: true, eViewport: this.eFullWidthCellViewport }),
	                pinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftColsContainer, eViewport: this.ePinnedLeftColsViewport }),
	                pinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightColsContainer, eViewport: this.ePinnedRightColsViewport }),
	                floatingTop: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopContainer }),
	                floatingTopPinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftFloatingTop }),
	                floatingTopPinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightFloatingTop }),
	                floatingTopFullWidth: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopFullWidthCellContainer, hideWhenNoChildren: true }),
	                floatingBottom: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomContainer }),
	                floatingBottomPinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftFloatingBottom }),
	                floatingBottomPinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightFloatingBottom }),
	                floatingBottomFullWith: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomFullWidthCellContainer, hideWhenNoChildren: true }),
	            };
	            this.addMouseWheelEventListeners();
	        }
	        utils_1.Utils.iterateObject(this.rowContainerComponents, function (key, container) {
	            if (container) {
	                _this.context.wireBean(container);
	            }
	        });
	    };
	    GridPanel.prototype.getRowContainers = function () {
	        return this.rowContainerComponents;
	    };
	    GridPanel.prototype.addMouseWheelEventListeners = function () {
	        // IE9, Chrome, Safari, Opera use 'mousewheel', Firefox uses 'DOMMouseScroll'
	        this.addDestroyableEventListener(this.eBodyViewport, 'mousewheel', this.centerMouseWheelListener.bind(this));
	        this.addDestroyableEventListener(this.eBodyViewport, 'DOMMouseScroll', this.centerMouseWheelListener.bind(this));
	        if (this.enableRtl) {
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'mousewheel', this.genericMouseWheelListener.bind(this));
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'DOMMouseScroll', this.genericMouseWheelListener.bind(this));
	        }
	        else {
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'mousewheel', this.genericMouseWheelListener.bind(this));
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'DOMMouseScroll', this.genericMouseWheelListener.bind(this));
	        }
	    };
	    GridPanel.prototype.getHeaderViewport = function () {
	        return this.eHeaderViewport;
	    };
	    GridPanel.prototype.centerMouseWheelListener = function (event) {
	        // we are only interested in mimicking the mouse wheel if we are not scrolling on the middle,
	        // otherwise the body has scrolls and the mouse wheel works for free
	        var bodyVScrollShowing = this.isBodyVerticalScrollActive();
	        if (!bodyVScrollShowing) {
	            var targetPanel = this.enableRtl ? this.ePinnedLeftColsViewport : this.ePinnedRightColsViewport;
	            return this.generalMouseWheelListener(event, targetPanel);
	        }
	    };
	    // used for listening to mouse wheel events on 1) left pinned and also the 2) fullWidthCell components.
	    // the fullWidthCell listener is added in renderedRow, hence public.
	    GridPanel.prototype.genericMouseWheelListener = function (event) {
	        var targetPanel;
	        var bodyVScrollActive = this.isBodyVerticalScrollActive();
	        if (bodyVScrollActive) {
	            targetPanel = this.eBodyViewport;
	        }
	        else {
	            targetPanel = this.enableRtl ? this.ePinnedLeftColsViewport : this.ePinnedRightColsViewport;
	        }
	        return this.generalMouseWheelListener(event, targetPanel);
	    };
	    GridPanel.prototype.generalMouseWheelListener = function (event, targetPanel) {
	        var wheelEvent = utils_1.Utils.normalizeWheel(event);
	        // we need to detect in which direction scroll is happening to allow trackpads scroll horizontally
	        // horizontal scroll
	        if (Math.abs(wheelEvent.pixelX) > Math.abs(wheelEvent.pixelY)) {
	            var newLeftPosition = this.eBodyViewport.scrollLeft + wheelEvent.pixelX;
	            this.eBodyViewport.scrollLeft = newLeftPosition;
	        }
	        else {
	            var newTopPosition = targetPanel.scrollTop + wheelEvent.pixelY;
	            targetPanel.scrollTop = newTopPosition;
	        }
	        // allow the option to pass mouse wheel events to the browser
	        // https://github.com/ag-grid/ag-grid/issues/800
	        // in the future, this should be tied in with 'forPrint' option, or have an option 'no vertical scrolls'
	        if (!this.gridOptionsWrapper.isSuppressPreventDefaultOnMouseWheel()) {
	            // if we don't prevent default, then the whole browser will scroll also as well as the grid
	            event.preventDefault();
	        }
	        return false;
	    };
	    GridPanel.prototype.onDisplayedColumnsChanged = function () {
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.setLeftAndRightBounds();
	    };
	    GridPanel.prototype.onDisplayedColumnsWidthChanged = function () {
	        this.setWidthsOfContainers();
	        this.setLeftAndRightBounds();
	        if (this.enableRtl) {
	            // because RTL is all backwards, a change in the width of the row
	            // can cause a change in the scroll position, without a scroll event,
	            // because the scroll position in RTL is a function that depends on
	            // the width. to be convinced of this, take out this line, enable RTL,
	            // scroll all the way to the left and then resize a column
	            this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        }
	    };
	    GridPanel.prototype.onScrollVisibilityChanged = function () {
	        this.setWidthsOfContainers();
	    };
	    GridPanel.prototype.setWidthsOfContainers = function () {
	        var mainRowWidth = this.columnController.getBodyContainerWidth() + 'px';
	        this.eBodyContainer.style.width = mainRowWidth;
	        if (this.forPrint) {
	            // pinned col doesn't exist when doing forPrint
	            return;
	        }
	        this.eFloatingBottomContainer.style.width = mainRowWidth;
	        this.eFloatingTopContainer.style.width = mainRowWidth;
	        this.setPinnedLeftWidth();
	        this.setPinnedRightWidth();
	    };
	    GridPanel.prototype.setPinnedLeftWidth = function () {
	        var pinnedLeftWidth = this.scrollVisibleService.getPinnedLeftWidth() + 'px';
	        var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth() + 'px';
	        this.ePinnedLeftColsViewport.style.width = pinnedLeftWidthWithScroll;
	        this.eBodyViewportWrapper.style.marginLeft = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftFloatingBottom.style.width = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftFloatingTop.style.width = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftColsContainer.style.width = pinnedLeftWidth;
	    };
	    GridPanel.prototype.setPinnedRightWidth = function () {
	        var pinnedRightWidth = this.scrollVisibleService.getPinnedRightWidth() + 'px';
	        var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth() + 'px';
	        this.ePinnedRightColsViewport.style.width = pinnedRightWidthWithScroll;
	        this.eBodyViewportWrapper.style.marginRight = pinnedRightWidthWithScroll;
	        this.ePinnedRightFloatingBottom.style.width = pinnedRightWidthWithScroll;
	        this.ePinnedRightFloatingTop.style.width = pinnedRightWidthWithScroll;
	        this.ePinnedRightColsContainer.style.width = pinnedRightWidth;
	    };
	    GridPanel.prototype.setPinnedContainersVisible = function () {
	        // no need to do this if not using scrolls
	        if (this.forPrint) {
	            return;
	        }
	        var changeDetected = false;
	        // if we are v scrolling, then one of these will have the scroll position.
	        // we us this inside the if(changedDetected), so we don't always use it, however
	        // it is changed when we make a pinned panel not visible, so we have to check it
	        // before we change display on the pinned panels
	        var scrollTop = Math.max(this.eBodyViewport.scrollTop, this.ePinnedLeftColsViewport.scrollTop, this.ePinnedRightColsViewport.scrollTop);
	        var showLeftPinned = this.columnController.isPinningLeft();
	        if (showLeftPinned !== this.pinningLeft) {
	            this.pinningLeft = showLeftPinned;
	            this.ePinnedLeftHeader.style.display = showLeftPinned ? 'inline-block' : 'none';
	            this.ePinnedLeftColsViewport.style.display = showLeftPinned ? 'inline' : 'none';
	            changeDetected = true;
	        }
	        var showRightPinned = this.columnController.isPinningRight();
	        if (showRightPinned !== this.pinningRight) {
	            this.pinningRight = showRightPinned;
	            this.ePinnedRightHeader.style.display = showRightPinned ? 'inline-block' : 'none';
	            this.ePinnedRightColsViewport.style.display = showRightPinned ? 'inline' : 'none';
	            changeDetected = true;
	        }
	        if (changeDetected) {
	            var bodyVScrollActive = this.isBodyVerticalScrollActive();
	            this.eBodyViewport.style.overflowY = bodyVScrollActive ? 'auto' : 'hidden';
	            // the body either uses it's scroll (when scrolling) or it's style.top
	            // (when following the scroll of a pinned section), so we need to set it
	            // back when changing from one to the other
	            if (bodyVScrollActive) {
	                this.setFakeScroll(this.eBodyContainer, 0);
	                // this.eBodyContainer.style.top = '0px';
	            }
	            else {
	                this.eBodyViewport.scrollTop = 0;
	            }
	            // when changing the primary scroll viewport, we copy over the scroll position,
	            // eg if body was getting scrolled and we were at position 100px, then we start
	            // pinning and pinned viewport is now the primary, we need to set it to 100px
	            var primaryScrollViewport = this.getPrimaryScrollViewport();
	            primaryScrollViewport.scrollTop = scrollTop;
	            // this adjusts the scroll position of all the faking panels. they should already
	            // be correct except body which has potentially just turned to be fake.
	            this.fakeVerticalScroll(scrollTop);
	        }
	    };
	    // init, layoutChanged, floatingDataChanged, headerHeightChanged
	    GridPanel.prototype.setBodyAndHeaderHeights = function () {
	        if (this.forPrint) {
	            // if doing 'for print' or 'auto height', then the header and footers are laid
	            // out naturally by the browser. it's whatever height that's needed to fit.
	            return;
	        }
	        var heightOfContainer = this.layout.getCentreHeight();
	        if (!heightOfContainer) {
	            return;
	        }
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var totalHeaderHeight;
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            utils_1.Utils.removeCssClass(this.eHeader, 'ag-pivot-on');
	            utils_1.Utils.addCssClass(this.eHeader, 'ag-pivot-off');
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.eHeader, 'ag-pivot-off');
	            utils_1.Utils.addCssClass(this.eHeader, 'ag-pivot-on');
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        totalHeaderHeight = numberOfFloating * this.gridOptionsWrapper.getFloatingFiltersHeight();
	        totalHeaderHeight += numberOfGroups * groupHeight;
	        totalHeaderHeight += headerHeight;
	        this.eHeader.style['height'] = totalHeaderHeight + 'px';
	        // if we are doing auto-height, we only size the header, we don't size the
	        // other parts as we use the normal browser layout for that
	        if (this.autoHeight) {
	            return;
	        }
	        // padding top covers the header and the pinned rows on top
	        var floatingTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
	        var paddingTop = totalHeaderHeight + floatingTopHeight;
	        // bottom is just the bottom pinned rows
	        var floatingBottomHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
	        var floatingBottomTop = heightOfContainer - floatingBottomHeight;
	        var bodyHeight = heightOfContainer - totalHeaderHeight - floatingBottomHeight - floatingTopHeight;
	        this.eBody.style.top = paddingTop + 'px';
	        this.eBody.style.height = bodyHeight + 'px';
	        this.eFloatingTop.style.top = totalHeaderHeight + 'px';
	        this.eFloatingTop.style.height = floatingTopHeight + 'px';
	        this.eFloatingBottom.style.height = floatingBottomHeight + 'px';
	        this.eFloatingBottom.style.top = floatingBottomTop + 'px';
	        this.ePinnedLeftColsViewport.style.height = bodyHeight + 'px';
	        this.ePinnedRightColsViewport.style.height = bodyHeight + 'px';
	        // bodyHeight property is used by pagination service, that may change number of rows
	        // in this page based on the height of the grid
	        if (this.bodyHeight !== bodyHeight) {
	            this.bodyHeight = bodyHeight;
	            var event_1 = {
	                type: events_1.Events.EVENT_BODY_HEIGHT_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    GridPanel.prototype.getBodyHeight = function () {
	        return this.bodyHeight;
	    };
	    GridPanel.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
	        this.eBodyViewport.scrollLeft = hScrollPosition;
	        // we need to manually do the event handling (rather than wait for the event)
	        // for the alignedGridsService, as if we don't, the aligned grid service gets
	        // notified async, and then it's 'consuming' flag doesn't get used right, and
	        // we can end up with an infinite loop
	        if (this.nextScrollLeft !== hScrollPosition) {
	            this.nextScrollLeft = hScrollPosition;
	            this.doHorizontalScroll();
	        }
	    };
	    // tries to scroll by pixels, but returns what the result actually was
	    GridPanel.prototype.scrollHorizontally = function (pixels) {
	        var oldScrollPosition = this.eBodyViewport.scrollLeft;
	        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
	        var newScrollPosition = this.eBodyViewport.scrollLeft;
	        return newScrollPosition - oldScrollPosition;
	    };
	    GridPanel.prototype.addScrollListener = function () {
	        var _this = this;
	        // if printing, then no scrolling, so no point in listening for scroll events
	        if (this.forPrint) {
	            return;
	        }
	        this.addDestroyableEventListener(this.eBodyViewport, 'scroll', this.onBodyScroll.bind(this));
	        // below we add two things:
	        // pinnedScrollListener -> when pinned panel with scrollbar gets scrolled, it updates body and other pinned
	        // suppressScroll -> stops scrolling when pinned panel was moved - which can only happen when user is navigating
	        //     in the pinned container, as the pinned col should never scroll. so we rollback the scroll on the pinned.
	        var onPinnedLeftVerticalScroll = this.onVerticalScroll.bind(this, this.ePinnedLeftColsViewport);
	        var onPinnedRightVerticalScroll = this.onVerticalScroll.bind(this, this.ePinnedRightColsViewport);
	        if (this.enableRtl) {
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'scroll', onPinnedLeftVerticalScroll);
	            var suppressRightScroll = function () { return _this.ePinnedRightColsViewport.scrollTop = 0; };
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'scroll', suppressRightScroll);
	        }
	        else {
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'scroll', onPinnedRightVerticalScroll);
	            var suppressLeftScroll = function () { return _this.ePinnedLeftColsViewport.scrollTop = 0; };
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'scroll', suppressLeftScroll);
	        }
	        var suppressCenterScroll = function () {
	            if (_this.getPrimaryScrollViewport() !== _this.eBodyViewport) {
	                _this.eBodyViewport.scrollTop = 0;
	            }
	        };
	        this.addDestroyableEventListener(this.eBodyViewport, 'scroll', suppressCenterScroll);
	        this.addIEPinFix(onPinnedRightVerticalScroll, onPinnedLeftVerticalScroll);
	    };
	    GridPanel.prototype.onBodyScroll = function () {
	        this.onBodyHorizontalScroll();
	        this.onBodyVerticalScroll();
	    };
	    GridPanel.prototype.onBodyHorizontalScroll = function () {
	        var scrollLeft = this.eBodyViewport.scrollLeft;
	        if (this.nextScrollLeft !== scrollLeft) {
	            this.nextScrollLeft = scrollLeft;
	            if (this.useAnimationFrame) {
	                this.animationFrameService.schedule();
	            }
	            else {
	                this.doHorizontalScroll();
	            }
	        }
	    };
	    GridPanel.prototype.doHorizontalScroll = function () {
	        this.scrollLeft = this.nextScrollLeft;
	        var event = {
	            type: events_1.Events.EVENT_BODY_SCROLL,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            direction: 'horizontal',
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	        this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        this.setLeftAndRightBounds();
	        // this.alignedGridsService.fireHorizontalScrollEvent(this.scrollLeft);
	    };
	    GridPanel.prototype.onBodyVerticalScroll = function () {
	        var bodyVScrollActive = this.isBodyVerticalScrollActive();
	        if (bodyVScrollActive) {
	            this.onVerticalScroll(this.eBodyViewport);
	        }
	    };
	    GridPanel.prototype.onVerticalScroll = function (sourceElement) {
	        var scrollTop = sourceElement.scrollTop;
	        if (this.useAnimationFrame) {
	            if (this.nextScrollTop !== scrollTop) {
	                this.nextScrollTop = scrollTop;
	                this.animationFrameService.schedule();
	            }
	        }
	        else {
	            if (scrollTop !== this.scrollTop) {
	                this.scrollTop = scrollTop;
	                this.fakeVerticalScroll(scrollTop);
	                this.redrawRowsAfterScroll();
	            }
	        }
	    };
	    GridPanel.prototype.executeFrame = function () {
	        if (this.scrollLeft !== this.nextScrollLeft) {
	            this.doHorizontalScroll();
	            return true;
	        }
	        else if (this.scrollTop !== this.nextScrollTop) {
	            this.scrollTop = this.nextScrollTop;
	            this.fakeVerticalScroll(this.scrollTop);
	            this.verticalRedrawNeeded = true;
	            return true;
	        }
	        else if (this.verticalRedrawNeeded) {
	            this.redrawRowsAfterScroll();
	            this.verticalRedrawNeeded = false;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    GridPanel.prototype.redrawRowsAfterScroll = function () {
	        var event = {
	            type: events_1.Events.EVENT_BODY_SCROLL,
	            direction: 'vertical',
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	        this.rowRenderer.redrawAfterScroll();
	    };
	    // if LTR, we hide body scroll if pinning right (as scroll is in right pinned),
	    // if RTL, we hide body scroll if pinning left (as scroll is in left pinned)
	    GridPanel.prototype.isBodyVerticalScrollActive = function () {
	        var pinningRight = this.columnController.isPinningRight();
	        var pinningLeft = this.columnController.isPinningLeft();
	        var centerHasScroll = this.enableRtl ? !pinningLeft : !pinningRight;
	        return centerHasScroll;
	    };
	    // this bit is a fix / hack for IE due to this:
	    // https://www.ag-grid.com/forum/showthread.php?tid=4303
	    // it gets the left panel to reposition itself after a model change
	    GridPanel.prototype.addIEPinFix = function (onPinnedRightScroll, onPinnedLeftScroll) {
	        var _this = this;
	        var listener = function () {
	            if (_this.columnController.isPinningRight()) {
	                setTimeout(function () {
	                    if (_this.enableRtl) {
	                        onPinnedLeftScroll();
	                    }
	                    else {
	                        onPinnedRightScroll();
	                    }
	                }, 0);
	            }
	        };
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, listener);
	    };
	    // this gets called whenever a change in the viewport, so we can inform column controller it has to work
	    // out the virtual columns again. gets called from following locations:
	    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged
	    GridPanel.prototype.setLeftAndRightBounds = function () {
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var scrollWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
	    };
	    GridPanel.prototype.getBodyViewportScrollLeft = function () {
	        if (this.forPrint) {
	            return 0;
	        }
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        return utils_1.Utils.getScrollLeft(this.eBodyViewport, this.enableRtl);
	    };
	    GridPanel.prototype.setBodyViewportScrollLeft = function (value) {
	        if (this.forPrint) {
	            return;
	        }
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        utils_1.Utils.setScrollLeft(this.eBodyViewport, value, this.enableRtl);
	    };
	    GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function () {
	        var scrollLeft = this.getBodyViewportScrollLeft();
	        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
	        this.eHeaderContainer.style.left = offset + 'px';
	        this.eFloatingBottomContainer.style.left = offset + 'px';
	        this.eFloatingTopContainer.style.left = offset + 'px';
	    };
	    // we say fake scroll as only one panel (left, right or body) has scrolls,
	    // the other panels mimic the scroll by getting it's top position updated.
	    GridPanel.prototype.fakeVerticalScroll = function (position) {
	        if (this.enableRtl) {
	            // RTL
	            // if pinning left, then body scroll is faking
	            var pinningLeft = this.columnController.isPinningLeft();
	            if (pinningLeft) {
	                this.setFakeScroll(this.eBodyContainer, position);
	            }
	            // right is always faking
	            this.setFakeScroll(this.ePinnedRightColsContainer, position);
	        }
	        else {
	            // LTR
	            // if pinning right, then body scroll is faking
	            var pinningRight = this.columnController.isPinningRight();
	            if (pinningRight) {
	                this.setFakeScroll(this.eBodyContainer, position);
	            }
	            // left is always faking
	            this.setFakeScroll(this.ePinnedLeftColsContainer, position);
	        }
	        // always scroll fullWidth container, as this is never responsible for a scroll
	        this.setFakeScroll(this.eFullWidthCellContainer, position);
	    };
	    GridPanel.prototype.setFakeScroll = function (eContainer, pixels) {
	        eContainer.style.top = -pixels + 'px';
	        // eContainer.style.transform = `translateY(${-pixels}px)`;
	    };
	    GridPanel.prototype.addScrollEventListener = function (listener) {
	        this.eBodyViewport.addEventListener('scroll', listener);
	    };
	    GridPanel.prototype.removeScrollEventListener = function (listener) {
	        this.eBodyViewport.removeEventListener('scroll', listener);
	    };
	    __decorate([
	        context_1.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService_1.AlignedGridsService)
	    ], GridPanel.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridPanel.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridPanel.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridPanel.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridPanel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridPanel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], GridPanel.prototype, "animationFrameService", void 0);
	    __decorate([
	        context_1.Autowired('navigationService'),
	        __metadata("design:type", navigationService_1.NavigationService)
	    ], GridPanel.prototype, "navigationService", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], GridPanel.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridPanel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridPanel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Autowired('dragService'),
	        __metadata("design:type", dragService_1.DragService)
	    ], GridPanel.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridPanel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "clipboardService", void 0);
	    __decorate([
	        context_1.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator_1.CsvCreator)
	    ], GridPanel.prototype, "csvCreator", void 0);
	    __decorate([
	        context_1.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService_1.MouseEventService)
	    ], GridPanel.prototype, "mouseEventService", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridPanel.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], GridPanel.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "frameworkFactory", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "agWire", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "destroy", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "init", null);
	    GridPanel = __decorate([
	        context_1.Bean('gridPanel')
	    ], GridPanel);
	    return GridPanel;
	}(beanStub_1.BeanStub));
	exports.GridPanel = GridPanel;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var BorderLayout = (function () {
	    function BorderLayout(params) {
	        this.centerHeightLastTime = -1;
	        this.centerWidthLastTime = -1;
	        this.centerLeftMarginLastTime = -1;
	        this.visibleLastTime = false;
	        this.sizeChangeListeners = [];
	        this.isLayoutPanel = true;
	        this.fullHeight = !params.north && !params.south;
	        var template;
	        if (params.dontFill) {
	            template = BorderLayout.TEMPLATE_DONT_FILL;
	            this.horizontalLayoutActive = false;
	            this.verticalLayoutActive = false;
	        }
	        else if (params.fillHorizontalOnly) {
	            template = BorderLayout.TEMPLATE_DONT_FILL;
	            this.horizontalLayoutActive = true;
	            this.verticalLayoutActive = false;
	        }
	        else {
	            if (this.fullHeight) {
	                template = BorderLayout.TEMPLATE_FULL_HEIGHT;
	            }
	            else {
	                template = BorderLayout.TEMPLATE_NORMAL;
	            }
	            this.horizontalLayoutActive = true;
	            this.verticalLayoutActive = true;
	        }
	        this.eGui = utils_1.Utils.loadTemplate(template);
	        this.id = 'borderLayout';
	        if (params.name) {
	            this.id += '_' + params.name;
	        }
	        this.eGui.setAttribute('id', this.id);
	        this.childPanels = [];
	        if (params) {
	            this.setupPanels(params);
	        }
	        this.overlays = params.overlays;
	        this.setupOverlays();
	    }
	    BorderLayout.prototype.addSizeChangeListener = function (listener) {
	        this.sizeChangeListeners.push(listener);
	    };
	    BorderLayout.prototype.fireSizeChanged = function () {
	        this.sizeChangeListeners.forEach(function (listener) {
	            listener();
	        });
	    };
	    // this logic is also in Component.ts - the plan is sometime in the future,
	    // this layout panel may (or may not) extend the Component class, and somehow
	    // act as a component.
	    BorderLayout.prototype.getRefElement = function (refName) {
	        return this.eGui.querySelector('[ref="' + refName + '"]');
	    };
	    BorderLayout.prototype.setupPanels = function (params) {
	        this.eNorthWrapper = this.getRefElement('north');
	        this.eSouthWrapper = this.getRefElement('south');
	        this.eEastWrapper = this.getRefElement('east');
	        this.eWestWrapper = this.getRefElement('west');
	        this.eCenterWrapper = this.getRefElement('center');
	        this.eOverlayWrapper = this.getRefElement('overlay');
	        this.eCenterRow = this.getRefElement('centerRow');
	        this.eNorthChildLayout = this.setupPanel(params.north, this.eNorthWrapper);
	        this.eSouthChildLayout = this.setupPanel(params.south, this.eSouthWrapper);
	        this.eEastChildLayout = this.setupPanel(params.east, this.eEastWrapper);
	        this.eWestChildLayout = this.setupPanel(params.west, this.eWestWrapper);
	        this.eCenterChildLayout = this.setupPanel(params.center, this.eCenterWrapper);
	    };
	    BorderLayout.prototype.setupPanel = function (content, ePanel) {
	        if (!ePanel) {
	            return;
	        }
	        if (content) {
	            if (content.isLayoutPanel) {
	                this.childPanels.push(content);
	                ePanel.appendChild(content.getGui());
	                return content;
	            }
	            else {
	                ePanel.appendChild(content);
	                return null;
	            }
	        }
	        else {
	            ePanel.parentNode.removeChild(ePanel);
	            return null;
	        }
	    };
	    BorderLayout.prototype.getGui = function () {
	        return this.eGui;
	    };
	    // returns true if any item changed size, otherwise returns false
	    BorderLayout.prototype.doLayout = function () {
	        var _this = this;
	        var isVisible = utils_1.Utils.isVisible(this.eGui);
	        if (!isVisible) {
	            this.visibleLastTime = false;
	            return false;
	        }
	        var atLeastOneChanged = false;
	        if (this.visibleLastTime !== isVisible) {
	            atLeastOneChanged = true;
	        }
	        this.visibleLastTime = true;
	        var childLayouts = [this.eNorthChildLayout, this.eSouthChildLayout, this.eEastChildLayout, this.eWestChildLayout];
	        childLayouts.forEach(function (childLayout) {
	            var childChangedSize = _this.layoutChild(childLayout);
	            if (childChangedSize) {
	                atLeastOneChanged = true;
	            }
	        });
	        if (this.horizontalLayoutActive) {
	            var ourWidthChanged = this.layoutWidth();
	            if (ourWidthChanged) {
	                atLeastOneChanged = true;
	            }
	        }
	        if (this.verticalLayoutActive) {
	            var ourHeightChanged = this.layoutHeight();
	            if (ourHeightChanged) {
	                atLeastOneChanged = true;
	            }
	        }
	        var centerChanged = this.layoutChild(this.eCenterChildLayout);
	        if (centerChanged) {
	            atLeastOneChanged = true;
	        }
	        if (atLeastOneChanged) {
	            this.fireSizeChanged();
	        }
	        return atLeastOneChanged;
	    };
	    BorderLayout.prototype.layoutChild = function (childPanel) {
	        if (childPanel) {
	            return childPanel.doLayout();
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.layoutHeight = function () {
	        if (this.fullHeight) {
	            return this.layoutHeightFullHeight();
	        }
	        else {
	            return this.layoutHeightNormal();
	        }
	    };
	    // full height never changes the height, because the center is always 100%,
	    // however we do check for change, to inform the listeners
	    BorderLayout.prototype.layoutHeightFullHeight = function () {
	        var centerHeight = utils_1.Utils.offsetHeight(this.eGui);
	        if (centerHeight < 0) {
	            centerHeight = 0;
	        }
	        if (this.centerHeightLastTime !== centerHeight) {
	            this.centerHeightLastTime = centerHeight;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.layoutHeightNormal = function () {
	        var totalHeight = utils_1.Utils.offsetHeight(this.eGui);
	        var northHeight = utils_1.Utils.offsetHeight(this.eNorthWrapper);
	        var southHeight = utils_1.Utils.offsetHeight(this.eSouthWrapper);
	        var centerHeight = totalHeight - northHeight - southHeight;
	        if (centerHeight < 0) {
	            centerHeight = 0;
	        }
	        if (this.centerHeightLastTime !== centerHeight) {
	            this.eCenterRow.style.height = centerHeight + 'px';
	            this.centerHeightLastTime = centerHeight;
	            return true; // return true because there was a change
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.getCentreHeight = function () {
	        return this.centerHeightLastTime;
	    };
	    BorderLayout.prototype.layoutWidth = function () {
	        var totalWidth = utils_1.Utils.offsetWidth(this.eGui);
	        var eastWidth = utils_1.Utils.offsetWidth(this.eEastWrapper);
	        var westWidth = utils_1.Utils.offsetWidth(this.eWestWrapper);
	        var centerWidth = totalWidth - eastWidth - westWidth;
	        if (centerWidth < 0) {
	            centerWidth = 0;
	        }
	        var atLeastOneChanged = false;
	        if (this.centerLeftMarginLastTime !== westWidth) {
	            this.centerLeftMarginLastTime = westWidth;
	            this.eCenterWrapper.style.marginLeft = westWidth + 'px';
	            atLeastOneChanged = true;
	        }
	        if (this.centerWidthLastTime !== centerWidth) {
	            this.centerWidthLastTime = centerWidth;
	            this.eCenterWrapper.style.width = centerWidth + 'px';
	            atLeastOneChanged = true;
	        }
	        return atLeastOneChanged;
	    };
	    BorderLayout.prototype.setEastVisible = function (visible) {
	        if (this.eEastWrapper) {
	            this.eEastWrapper.style.display = visible ? '' : 'none';
	        }
	        this.doLayout();
	    };
	    BorderLayout.prototype.setupOverlays = function () {
	        // if no overlays, just remove the panel
	        if (!this.overlays) {
	            this.eOverlayWrapper.parentNode.removeChild(this.eOverlayWrapper);
	            return;
	        }
	        this.hideOverlay();
	    };
	    BorderLayout.prototype.hideOverlay = function () {
	        utils_1.Utils.removeAllChildren(this.eOverlayWrapper);
	        this.eOverlayWrapper.style.display = 'none';
	    };
	    BorderLayout.prototype.showOverlay = function (key) {
	        var overlay = this.overlays ? this.overlays[key] : null;
	        if (overlay) {
	            utils_1.Utils.removeAllChildren(this.eOverlayWrapper);
	            this.eOverlayWrapper.style.display = '';
	            this.eOverlayWrapper.appendChild(overlay);
	        }
	        else {
	            console.log('ag-Grid: unknown overlay');
	            this.hideOverlay();
	        }
	    };
	    // this is used if there user has not specified any north or south parts
	    BorderLayout.TEMPLATE_FULL_HEIGHT = '<div class="ag-bl ag-bl-full-height">' +
	        '  <div class="ag-bl-west ag-bl-full-height-west" ref="west"></div>' +
	        '  <div class="ag-bl-east ag-bl-full-height-east" ref="east"></div>' +
	        '  <div class="ag-bl-center ag-bl-full-height-center" ref="center"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    BorderLayout.TEMPLATE_NORMAL = '<div class="ag-bl ag-bl-normal">' +
	        '  <div ref="north"></div>' +
	        '  <div class="ag-bl-center-row ag-bl-normal-center-row" ref="centerRow">' +
	        '    <div class="ag-bl-west ag-bl-normal-west" ref="west"></div>' +
	        '    <div class="ag-bl-east ag-bl-normal-east" ref="east"></div>' +
	        '    <div class="ag-bl-center ag-bl-normal-center" ref="center"></div>' +
	        '  </div>' +
	        '  <div ref="south"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    BorderLayout.TEMPLATE_DONT_FILL = '<div class="ag-bl ag-bl-dont-fill">' +
	        '  <div ref="north"></div>' +
	        '  <div ref="centerRow" class="ag-bl-center-row ag-bl-dont-fill-center-row">' +
	        '    <div ref="west" class="ag-bl-west ag-bl-dont-fill-west"></div>' +
	        '    <div ref="east" class="ag-bl-east ag-bl-dont-fill-east"></div>' +
	        '    <div ref="center" class="ag-bl-center ag-bl-dont-fill-center"></div>' +
	        '  </div>' +
	        '  <div ref="south"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    return BorderLayout;
	}());
	exports.BorderLayout = BorderLayout;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var logger_1 = __webpack_require__(286);
	var utils_1 = __webpack_require__(288);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
	 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */
	var DragService = (function () {
	    function DragService() {
	        this.onMouseUpListener = this.onMouseUp.bind(this);
	        this.onMouseMoveListener = this.onMouseMove.bind(this);
	        this.onTouchEndListener = this.onTouchUp.bind(this);
	        this.onTouchMoveListener = this.onTouchMove.bind(this);
	        this.dragEndFunctions = [];
	        this.dragSources = [];
	    }
	    DragService.prototype.init = function () {
	        this.logger = this.loggerFactory.create('DragService');
	    };
	    DragService.prototype.destroy = function () {
	        this.dragSources.forEach(this.removeListener.bind(this));
	        this.dragSources.length = 0;
	    };
	    DragService.prototype.removeListener = function (dragSourceAndListener) {
	        var element = dragSourceAndListener.dragSource.eElement;
	        var mouseDownListener = dragSourceAndListener.mouseDownListener;
	        element.removeEventListener('mousedown', mouseDownListener);
	        // remove touch listener only if it exists
	        if (dragSourceAndListener.touchEnabled) {
	            var touchStartListener = dragSourceAndListener.touchStartListener;
	            element.removeEventListener('touchstart', touchStartListener, { passive: true });
	        }
	    };
	    DragService.prototype.removeDragSource = function (params) {
	        var dragSourceAndListener = utils_1.Utils.find(this.dragSources, function (item) { return item.dragSource === params; });
	        if (!dragSourceAndListener) {
	            return;
	        }
	        this.removeListener(dragSourceAndListener);
	        utils_1.Utils.removeFromArray(this.dragSources, dragSourceAndListener);
	    };
	    DragService.prototype.setNoSelectToBody = function (noSelect) {
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var eBody = usrDocument.querySelector('body');
	        if (utils_1.Utils.exists(eBody)) {
	            utils_1.Utils.addOrRemoveCssClass(eBody, 'ag-body-no-select', noSelect);
	        }
	    };
	    DragService.prototype.addDragSource = function (params, includeTouch) {
	        if (includeTouch === void 0) { includeTouch = false; }
	        var mouseListener = this.onMouseDown.bind(this, params);
	        params.eElement.addEventListener('mousedown', mouseListener);
	        var touchListener = null;
	        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
	        var reallyIncludeTouch = includeTouch && !suppressTouch;
	        if (reallyIncludeTouch) {
	            touchListener = this.onTouchStart.bind(this, params);
	            params.eElement.addEventListener('touchstart', touchListener, { passive: false });
	        }
	        this.dragSources.push({
	            dragSource: params,
	            mouseDownListener: mouseListener,
	            touchStartListener: touchListener,
	            touchEnabled: includeTouch
	        });
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onTouchStart = function (params, touchEvent) {
	        var _this = this;
	        this.currentDragParams = params;
	        this.dragging = false;
	        var touch = touchEvent.touches[0];
	        this.touchLastTime = touch;
	        this.touchStart = touch;
	        touchEvent.preventDefault();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in touch end handling.
	        params.eElement.addEventListener('touchmove', this.onTouchMoveListener, { passive: true });
	        params.eElement.addEventListener('touchend', this.onTouchEndListener, { passive: true });
	        params.eElement.addEventListener('touchcancel', this.onTouchEndListener, { passive: true });
	        this.dragEndFunctions.push(function () {
	            params.eElement.removeEventListener('touchmove', _this.onTouchMoveListener, { passive: true });
	            params.eElement.removeEventListener('touchend', _this.onTouchEndListener, { passive: true });
	            params.eElement.removeEventListener('touchcancel', _this.onTouchEndListener, { passive: true });
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onCommonMove(touch, this.touchStart);
	        }
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onMouseDown = function (params, mouseEvent) {
	        var _this = this;
	        // only interested in left button clicks
	        if (mouseEvent.button !== 0) {
	            return;
	        }
	        this.currentDragParams = params;
	        this.dragging = false;
	        this.mouseEventLastTime = mouseEvent;
	        this.mouseStartEvent = mouseEvent;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in mouseup handling.
	        usrDocument.addEventListener('mousemove', this.onMouseMoveListener);
	        usrDocument.addEventListener('mouseup', this.onMouseUpListener);
	        this.dragEndFunctions.push(function () {
	            usrDocument.removeEventListener('mousemove', _this.onMouseMoveListener);
	            usrDocument.removeEventListener('mouseup', _this.onMouseUpListener);
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onMouseMove(mouseEvent);
	        }
	    };
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    DragService.prototype.isEventNearStartEvent = function (currentEvent, startEvent) {
	        // by default, we wait 4 pixels before starting the drag
	        var requiredPixelDiff = utils_1.Utils.exists(this.currentDragParams.dragStartPixels) ? this.currentDragParams.dragStartPixels : 4;
	        return utils_1.Utils.areEventsNear(currentEvent, startEvent, requiredPixelDiff);
	    };
	    DragService.prototype.getFirstActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    DragService.prototype.onCommonMove = function (currentEvent, startEvent) {
	        if (!this.dragging) {
	            // if mouse hasn't travelled from the start position enough, do nothing
	            var toEarlyToDrag = !this.dragging && this.isEventNearStartEvent(currentEvent, startEvent);
	            if (toEarlyToDrag) {
	                return;
	            }
	            else {
	                // alert(`started`);
	                this.dragging = true;
	                var event_1 = {
	                    type: events_1.Events.EVENT_DRAG_STARTED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	                this.currentDragParams.onDragStart(startEvent);
	                this.setNoSelectToBody(true);
	            }
	        }
	        this.currentDragParams.onDragging(currentEvent);
	    };
	    DragService.prototype.onTouchMove = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        // this.___statusBar.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
	        // if we don't preview default, then the browser will try and do it's own touch stuff,
	        // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused
	        // with scroll page in the app)
	        // touchEvent.preventDefault();
	        this.onCommonMove(touch, this.touchStart);
	    };
	    // only gets called after a mouse down - as this is only added after mouseDown
	    // and is removed when mouseUp happens
	    DragService.prototype.onMouseMove = function (mouseEvent) {
	        this.onCommonMove(mouseEvent, this.mouseStartEvent);
	    };
	    DragService.prototype.onTouchUp = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.targetTouches);
	        // i haven't worked this out yet, but there is no matching touch
	        // when we get the touch up event. to get around this, we swap in
	        // the last touch. this is a hack to 'get it working' while we
	        // figure out what's going on, why we are not getting a touch in
	        // current event.
	        if (!touch) {
	            touch = this.touchLastTime;
	        }
	        // if mouse was left up before we started to move, then this is a tap.
	        // we check this before onUpCommon as onUpCommon resets the dragging
	        // let tap = !this.dragging;
	        // let tapTarget = this.currentDragParams.eElement;
	        this.onUpCommon(touch);
	        // if tap, tell user
	        // console.log(`${Math.random()} tap = ${tap}`);
	        // if (tap) {
	        //     tapTarget.click();
	        // }
	    };
	    DragService.prototype.onMouseUp = function (mouseEvent) {
	        this.onUpCommon(mouseEvent);
	    };
	    DragService.prototype.onUpCommon = function (eventOrTouch) {
	        if (this.dragging) {
	            this.dragging = false;
	            this.currentDragParams.onDragStop(eventOrTouch);
	            var event_2 = {
	                type: events_1.Events.EVENT_DRAG_STOPPED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	        this.setNoSelectToBody(false);
	        this.mouseStartEvent = null;
	        this.mouseEventLastTime = null;
	        this.touchStart = null;
	        this.touchLastTime = null;
	        this.currentDragParams = null;
	        this.dragEndFunctions.forEach(function (func) { return func(); });
	        this.dragEndFunctions.length = 0;
	    };
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], DragService.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], DragService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], DragService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], DragService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], DragService.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "destroy", null);
	    DragService = __decorate([
	        context_1.Bean('dragService')
	    ], DragService);
	    return DragService;
	}());
	exports.DragService = DragService;


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var logger_1 = __webpack_require__(286);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var context_3 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_4 = __webpack_require__(287);
	var constants_1 = __webpack_require__(289);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var SelectionController = (function () {
	    function SelectionController() {
	    }
	    SelectionController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('SelectionController');
	        this.reset();
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
	        }
	        else {
	            this.logger.log('dont know what to do here');
	        }
	    };
	    SelectionController.prototype.init = function () {
	        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.eventService.addEventListener(events_1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	    };
	    SelectionController.prototype.setLastSelectedNode = function (rowNode) {
	        this.lastSelectedNode = rowNode;
	    };
	    SelectionController.prototype.getLastSelectedNode = function () {
	        return this.lastSelectedNode;
	    };
	    SelectionController.prototype.getSelectedNodes = function () {
	        var selectedNodes = [];
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode) {
	                selectedNodes.push(rowNode);
	            }
	        });
	        return selectedNodes;
	    };
	    SelectionController.prototype.getSelectedRows = function () {
	        var selectedRows = [];
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode && rowNode.data) {
	                selectedRows.push(rowNode.data);
	            }
	        });
	        return selectedRows;
	    };
	    SelectionController.prototype.removeGroupsFromSelection = function () {
	        var _this = this;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode && rowNode.group) {
	                _this.selectedNodes[rowNode.id] = undefined;
	            }
	        });
	    };
	    // should only be called if groupSelectsChildren=true
	    SelectionController.prototype.updateGroupsFromChildrenSelections = function () {
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            console.warn('updateGroupsFromChildrenSelections not available when rowModel is not normal');
	        }
	        var inMemoryRowModel = this.rowModel;
	        inMemoryRowModel.getTopLevelNodes().forEach(function (rowNode) {
	            rowNode.depthFirstSearch(function (rowNode) {
	                if (rowNode.group) {
	                    rowNode.calculateSelectedFromChildren();
	                }
	            });
	        });
	    };
	    SelectionController.prototype.getNodeForIdIfSelected = function (id) {
	        return this.selectedNodes[id];
	    };
	    SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {
	        var _this = this;
	        var groupsToRefresh = {};
	        var updatedCount = 0;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, otherRowNode) {
	            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
	                var rowNode = _this.selectedNodes[otherRowNode.id];
	                updatedCount += rowNode.setSelectedParams({ newValue: false, clearSelection: false, tailingNodeInSequence: true });
	                if (_this.groupSelectsChildren && otherRowNode.parent) {
	                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
	                }
	            }
	        });
	        utils_1.Utils.iterateObject(groupsToRefresh, function (key, group) {
	            group.calculateSelectedFromChildren();
	        });
	        return updatedCount;
	    };
	    SelectionController.prototype.onRowSelected = function (event) {
	        var rowNode = event.node;
	        // we do not store the group rows when the groups select children
	        if (this.groupSelectsChildren && rowNode.group) {
	            return;
	        }
	        if (rowNode.isSelected()) {
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            this.selectedNodes[rowNode.id] = undefined;
	        }
	    };
	    SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {
	        this.syncInOldRowNode(rowNode, oldNode);
	        this.syncInNewRowNode(rowNode);
	    };
	    // if the id has changed for the node, then this means the rowNode
	    // is getting used for a different data item, which breaks
	    // our selectedNodes, as the node now is mapped by the old id
	    // which is inconsistent. so to keep the old node as selected,
	    // we swap in the clone (with the old id and old data). this means
	    // the oldNode is effectively a daemon we keep a reference to,
	    // so if client calls api.getSelectedNodes(), it gets the daemon
	    // in the result. when the client un-selects, the reference to the
	    // daemon is removed. the daemon, because it's an oldNode, is not
	    // used by the grid for rendering, it's a copy of what the node used
	    // to be like before the id was changed.
	    SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {
	        var oldNodeHasDifferentId = utils_1.Utils.exists(oldNode) && (rowNode.id !== oldNode.id);
	        if (oldNodeHasDifferentId) {
	            var oldNodeSelected = utils_1.Utils.exists(this.selectedNodes[oldNode.id]);
	            if (oldNodeSelected) {
	                this.selectedNodes[oldNode.id] = oldNode;
	            }
	        }
	    };
	    SelectionController.prototype.syncInNewRowNode = function (rowNode) {
	        if (utils_1.Utils.exists(this.selectedNodes[rowNode.id])) {
	            rowNode.setSelectedInitialValue(true);
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            rowNode.setSelectedInitialValue(false);
	        }
	    };
	    SelectionController.prototype.reset = function () {
	        this.logger.log('reset');
	        this.selectedNodes = {};
	        this.lastSelectedNode = null;
	    };
	    // returns a list of all nodes at 'best cost' - a feature to be used
	    // with groups / trees. if a group has all it's children selected,
	    // then the group appears in the result, but not the children.
	    // Designed for use with 'children' as the group selection type,
	    // where groups don't actually appear in the selection normally.
	    SelectionController.prototype.getBestCostNodeSelection = function () {
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            console.warn('getBestCostNodeSelection is only avilable when using normal row model');
	        }
	        var inMemoryRowModel = this.rowModel;
	        var topLevelNodes = inMemoryRowModel.getTopLevelNodes();
	        if (topLevelNodes === null) {
	            console.warn('selectAll not available doing rowModel=virtual');
	            return;
	        }
	        var result = [];
	        // recursive function, to find the selected nodes
	        function traverse(nodes) {
	            for (var i = 0, l = nodes.length; i < l; i++) {
	                var node = nodes[i];
	                if (node.isSelected()) {
	                    result.push(node);
	                }
	                else {
	                    // if not selected, then if it's a group, and the group
	                    // has children, continue to search for selections
	                    if (node.group && node.children) {
	                        traverse(node.children);
	                    }
	                }
	            }
	        }
	        traverse(topLevelNodes);
	        return result;
	    };
	    SelectionController.prototype.setRowModel = function (rowModel) {
	        this.rowModel = rowModel;
	    };
	    SelectionController.prototype.isEmpty = function () {
	        var count = 0;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (nodeId, rowNode) {
	            if (rowNode) {
	                count++;
	            }
	        });
	        return count === 0;
	    };
	    SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        var callback = function (rowNode) { return rowNode.selectThisNode(false); };
	        var rowModelInMemory = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        if (justFiltered) {
	            if (!rowModelInMemory) {
	                console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');
	                return;
	            }
	            var inMemoryRowModel = this.rowModel;
	            inMemoryRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            utils_1.Utils.iterateObject(this.selectedNodes, function (id, rowNode) {
	                // remember the reference can be to null, as we never 'delete' from the map
	                if (rowNode) {
	                    callback(rowNode);
	                }
	            });
	            // this clears down the map (whereas above only sets the items in map to 'undefined')
	            this.reset();
	        }
	        // the above does not clean up the parent rows if they are selected
	        if (rowModelInMemory && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SelectionController.prototype.selectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            throw "selectAll only available with normal row model, ie not " + this.rowModel.getType();
	        }
	        var inMemoryRowModel = this.rowModel;
	        var callback = function (rowNode) { return rowNode.selectThisNode(true); };
	        if (justFiltered) {
	            inMemoryRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            inMemoryRowModel.forEachNode(callback);
	        }
	        // the above does not clean up the parent rows if they are selected
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // Deprecated method
	    SelectionController.prototype.selectNode = function (rowNode, tryMulti) {
	        rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectIndex = function (rowIndex) {
	        var node = this.rowModel.getRow(rowIndex);
	        this.deselectNode(node);
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectNode = function (rowNode) {
	        rowNode.setSelectedParams({ newValue: false, clearSelection: false });
	    };
	    // Deprecated method
	    SelectionController.prototype.selectIndex = function (index, tryMulti) {
	        var node = this.rowModel.getRow(index);
	        this.selectNode(node, tryMulti);
	    };
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SelectionController.prototype, "eventService", void 0);
	    __decorate([
	        context_3.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectionController.prototype, "rowModel", void 0);
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectionController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SelectionController.prototype, "columnApi", void 0);
	    __decorate([
	        context_3.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SelectionController.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "init", null);
	    SelectionController = __decorate([
	        context_1.Bean('selectionController')
	    ], SelectionController);
	    return SelectionController;
	}());
	exports.SelectionController = SelectionController;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var cellComp_1 = __webpack_require__(311);
	var MouseEventService = (function () {
	    function MouseEventService() {
	        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
	    }
	    MouseEventService_1 = MouseEventService;
	    MouseEventService.prototype.init = function () {
	        this.stampDomElementWithGridInstance();
	    };
	    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
	    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
	    // for where this is used.
	    MouseEventService.prototype.stampDomElementWithGridInstance = function () {
	        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
	    };
	    MouseEventService.prototype.getRenderedCellForEvent = function (event) {
	        var sourceElement = utils_1.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedCell = this.gridOptionsWrapper.getDomData(sourceElement, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (renderedCell) {
	                return renderedCell;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
	    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
	    // getting executed on many grids at the same time.
	    MouseEventService.prototype.isEventFromThisGrid = function (event) {
	        var path = utils_1.Utils.getEventPath(event);
	        for (var i = 0; i < path.length; i++) {
	            var element = path[i];
	            var instanceId = element[MouseEventService_1.GRID_DOM_KEY];
	            if (utils_1.Utils.exists(instanceId)) {
	                var eventFromThisGrid = instanceId === this.gridInstanceId;
	                return eventFromThisGrid;
	            }
	        }
	        return false;
	    };
	    MouseEventService.prototype.getGridCellForEvent = function (event) {
	        var cellComp = this.getRenderedCellForEvent(event);
	        return cellComp ? cellComp.getGridCell() : null;
	    };
	    MouseEventService.gridInstanceSequence = new utils_1.NumberSequence();
	    MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], MouseEventService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], MouseEventService.prototype, "eGridDiv", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MouseEventService.prototype, "init", null);
	    MouseEventService = MouseEventService_1 = __decorate([
	        context_1.Bean('mouseEventService')
	    ], MouseEventService);
	    return MouseEventService;
	    var MouseEventService_1;
	}());
	exports.MouseEventService = MouseEventService;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var column_1 = __webpack_require__(299);
	var rowNode_1 = __webpack_require__(312);
	var constants_1 = __webpack_require__(289);
	var events_1 = __webpack_require__(291);
	var gridCell_1 = __webpack_require__(315);
	var component_1 = __webpack_require__(317);
	var checkboxSelectionComponent_1 = __webpack_require__(319);
	var CellComp = (function (_super) {
	    __extends(CellComp, _super);
	    function CellComp(scope, beans, column, rowNode, rowComp) {
	        var _this = _super.call(this) || this;
	        _this.editingCell = false;
	        // every time we go into edit mode, or back again, this gets incremented.
	        // it's the components way of dealing with the async nature of framework components,
	        // so if a framework component takes a while to be created, we know if the object
	        // is still relevant when creating is finished. eg we could click edit / unedit 20
	        // times before the first React edit component comes back - we should discard
	        // the first 19.
	        _this.cellEditorVersion = 0;
	        _this.cellRendererVersion = 0;
	        _this.scope = scope;
	        _this.beans = beans;
	        _this.column = column;
	        _this.rowNode = rowNode;
	        _this.rowComp = rowComp;
	        _this.createGridCellVo();
	        _this.rangeSelectionEnabled = beans.enterprise && beans.gridOptionsWrapper.isEnableRangeSelection();
	        _this.cellFocused = _this.beans.focusedCellController.isCellFocused(_this.gridCell);
	        _this.firstRightPinned = _this.column.isFirstRightPinned();
	        _this.lastLeftPinned = _this.column.isLastLeftPinned();
	        if (_this.rangeSelectionEnabled) {
	            _this.rangeCount = _this.beans.rangeController.getCellRangeCount(_this.gridCell);
	        }
	        _this.value = _this.getValue();
	        _this.setUsingWrapper();
	        _this.chooseCellRenderer();
	        _this.setupColSpan();
	        return _this;
	    }
	    CellComp.prototype.getCreateTemplate = function () {
	        var templateParts = [];
	        var col = this.column;
	        var width = this.getCellWidth();
	        var left = col.getLeft();
	        var valueToRender = this.getInitialValueToRender();
	        var valueSanitised = utils_1._.get(this.column, 'colDef.template', null) ? valueToRender : utils_1._.escape(valueToRender);
	        var tooltip = this.getToolTip();
	        var tooltipSanitised = utils_1._.escape(tooltip);
	        var wrapperStartTemplate;
	        var wrapperEndTemplate;
	        var stylesFromColDef = this.preProcessStylesFromColDef();
	        var cssClasses = this.getInitialCssClasses();
	        if (this.usingWrapper) {
	            wrapperStartTemplate = '<span ref="eCellWrapper" class="ag-cell-wrapper"><span ref="eCellValue" class="ag-cell-value">';
	            wrapperEndTemplate = '</span></span>';
	        }
	        // hey, this looks like React!!!
	        templateParts.push("<div");
	        templateParts.push(" tabindex=\"-1\"");
	        templateParts.push(" role=\"gridcell\"");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\" ");
	        templateParts.push(" col-id=\"" + col.getId() + "\"");
	        templateParts.push(" class=\"" + cssClasses.join(' ') + "\"");
	        templateParts.push(tooltipSanitised ? " title=\"" + tooltipSanitised + "\"" : "");
	        templateParts.push(" style=\"width: " + width + "px; left: " + left + "px; " + stylesFromColDef + "\" >");
	        templateParts.push(wrapperStartTemplate);
	        templateParts.push(valueSanitised);
	        templateParts.push(wrapperEndTemplate);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    CellComp.prototype.afterAttached = function () {
	        var querySelector = "[comp-id=\"" + this.getCompId() + "\"]";
	        var eGui = this.eParentRow.querySelector(querySelector);
	        this.setGui(eGui);
	        // all of these have dependencies on the eGui, so only do them after eGui is set
	        this.addDomData();
	        this.addSelectionCheckbox();
	        this.attachCellRenderer();
	        this.angular1Compile();
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_FLASH_CELLS, this.onFlashCells.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.onCellChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, this.onFirstRightPinnedChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LAST_LEFT_PINNED_CHANGED, this.onLastLeftPinnedChanged.bind(this));
	        // if not doing enterprise, then range selection service would be missing
	        // so need to check before trying to use it
	        if (this.rangeSelectionEnabled) {
	            this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
	        }
	    };
	    CellComp.prototype.onColumnHover = function () {
	        var isHovered = this.beans.columnHoverService.isHovered(this.column);
	        utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
	    };
	    CellComp.prototype.onCellChanged = function (event) {
	        var eventImpactsThisCell = event.column === this.column;
	        if (eventImpactsThisCell) {
	            this.refreshCell({});
	        }
	    };
	    CellComp.prototype.getCellLeft = function () {
	        var mostLeftCol;
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            mostLeftCol = this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            mostLeftCol = this.column;
	        }
	        return mostLeftCol.getLeft();
	    };
	    CellComp.prototype.getCellWidth = function () {
	        if (this.colsSpanning) {
	            var result_1 = 0;
	            this.colsSpanning.forEach(function (col) { return result_1 += col.getActualWidth(); });
	            return result_1;
	        }
	        else {
	            return this.column.getActualWidth();
	        }
	    };
	    CellComp.prototype.onFlashCells = function (event) {
	        var cellId = this.gridCell.createId();
	        var shouldFlash = event.cells[cellId];
	        if (shouldFlash) {
	            this.animateCell('highlight');
	        }
	    };
	    CellComp.prototype.setupColSpan = function () {
	        // if no col span is active, then we don't set it up, as it would be wasteful of CPU
	        if (utils_1._.missing(this.column.getColDef().colSpan)) {
	            return;
	        }
	        // because we are col spanning, a reorder of the cols can change what cols we are spanning over
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
	        // because we are spanning over multiple cols, we check for width any time any cols width changes.
	        // this is expensive - really we should be explicitly checking only the cols we are spanning over
	        // instead of every col, however it would be tricky code to track the cols we are spanning over, so
	        // because hardly anyone will be using colSpan, am favoring this easier way for more maintainable code.
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.colsSpanning = this.getColSpanningList();
	    };
	    CellComp.prototype.getColSpanningList = function () {
	        var colSpan = this.column.getColSpan(this.rowNode);
	        var colsSpanning = [];
	        // if just one col, the col span is just the column we are in
	        if (colSpan === 1) {
	            colsSpanning.push(this.column);
	        }
	        else {
	            var pointer = this.column;
	            var pinned = this.column.getPinned();
	            for (var i = 0; i < colSpan; i++) {
	                colsSpanning.push(pointer);
	                pointer = this.beans.columnController.getDisplayedColAfter(pointer);
	                if (utils_1._.missing(pointer)) {
	                    break;
	                }
	                // we do not allow col spanning to span outside of pinned areas
	                if (pinned !== pointer.getPinned()) {
	                    break;
	                }
	            }
	        }
	        return colsSpanning;
	    };
	    CellComp.prototype.onDisplayColumnsChanged = function () {
	        var colsSpanning = this.getColSpanningList();
	        if (!utils_1._.compareArrays(this.colsSpanning, colsSpanning)) {
	            this.colsSpanning = colsSpanning;
	            this.onWidthChanged();
	            this.onLeftChanged(); // left changes when doing RTL
	        }
	    };
	    CellComp.prototype.getInitialCssClasses = function () {
	        var cssClasses = ["ag-cell", "ag-cell-not-inline-editing"];
	        cssClasses.push(this.cellFocused ? 'ag-cell-focus' : 'ag-cell-no-focus');
	        if (this.firstRightPinned) {
	            cssClasses.push('ag-cell-first-right-pinned');
	        }
	        if (this.lastLeftPinned) {
	            cssClasses.push('ag-cell-last-left-pinned');
	        }
	        if (this.beans.columnHoverService.isHovered(this.column)) {
	            cssClasses.push('ag-column-hover');
	        }
	        utils_1._.pushAll(cssClasses, this.preProcessClassesFromColDef());
	        utils_1._.pushAll(cssClasses, this.preProcessCellClassRules());
	        utils_1._.pushAll(cssClasses, this.getRangeClasses());
	        // if using the wrapper, this class goes on the wrapper instead
	        if (!this.usingWrapper) {
	            cssClasses.push('ag-cell-value');
	        }
	        return cssClasses;
	    };
	    CellComp.prototype.getInitialValueToRender = function () {
	        // if using a cellRenderer, then render the html from the cell renderer if it exists
	        if (this.usingCellRenderer) {
	            if (typeof this.cellRendererGui === 'string') {
	                return this.cellRendererGui;
	            }
	            else {
	                return '';
	            }
	        }
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            return colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                return template;
	            }
	            else {
	                return '';
	            }
	        }
	        else {
	            var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, null, this.value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            return valueFormattedExits ? valueFormatted : this.value;
	        }
	    };
	    CellComp.prototype.getRenderedRow = function () {
	        return this.rowComp;
	    };
	    CellComp.prototype.isSuppressNavigable = function () {
	        return this.column.isSuppressNavigable(this.rowNode);
	    };
	    // + stop editing {forceRefresh: true, suppressFlash: true}
	    // + event cellChanged {}
	    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
	    // + rowComp: event dataChanged {animate: update, newData: !update}
	    // + rowComp: api refreshCells() {animate: true/false}
	    // + rowRenderer: api softRefreshView() {}
	    CellComp.prototype.refreshCell = function (params) {
	        if (this.editingCell) {
	            return;
	        }
	        var newData = params && params.newData;
	        var suppressFlash = params && params.suppressFlash;
	        var volatile = params && params.volatile;
	        var forceRefresh = params && params.forceRefresh;
	        // if only refreshing volatile cells, then skip the refresh if we are not volatile
	        if (volatile && !this.isVolatile()) {
	            return;
	        }
	        var oldValue = this.value;
	        this.value = this.getValue();
	        // for simple values only (not pojo's), see if the value is the same, and if it is, skip the refresh.
	        // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
	        // if was before the edit.
	        var skipRefresh = !forceRefresh && this.valuesAreEqual(oldValue, this.value);
	        if (skipRefresh) {
	            return;
	        }
	        var cellRendererRefreshed;
	        // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
	        // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
	        // then we are not showing a movement in the stock price, rather we are showing different stock.
	        if (newData || suppressFlash) {
	            cellRendererRefreshed = false;
	        }
	        else {
	            cellRendererRefreshed = this.attemptCellRendererRefresh();
	        }
	        // we do the replace if not doing refresh, or if refresh was unsuccessful.
	        // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
	        // wrapper has the refresh method, but the underlying component doesn't
	        if (!cellRendererRefreshed) {
	            this.replaceContentsAfterRefresh();
	        }
	        if (!suppressFlash) {
	            this.flashCell();
	        }
	        // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static
	        this.postProcessStylesFromColDef();
	        this.postProcessClassesFromColDef();
	        this.postProcessCellClassRules();
	    };
	    CellComp.prototype.flashCell = function () {
	        if (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || this.column.getColDef().enableCellChangeFlash) {
	            this.animateCell('data-changed');
	        }
	    };
	    CellComp.prototype.animateCell = function (cssName) {
	        var fullName = 'ag-cell-' + cssName;
	        var animationFullName = 'ag-cell-' + cssName + '-animation';
	        var element = this.getGui();
	        // we want to highlight the cells, without any animation
	        utils_1._.addCssClass(element, fullName);
	        utils_1._.removeCssClass(element, animationFullName);
	        // then once that is applied, we remove the highlight with animation
	        setTimeout(function () {
	            utils_1._.removeCssClass(element, fullName);
	            utils_1._.addCssClass(element, animationFullName);
	            setTimeout(function () {
	                // and then to leave things as we got them, we remove the animation
	                utils_1._.removeCssClass(element, animationFullName);
	            }, 1000);
	        }, 500);
	    };
	    CellComp.prototype.replaceContentsAfterRefresh = function () {
	        // otherwise we rip out the cell and replace it
	        utils_1._.removeAllChildren(this.eParentOfValue);
	        // remove old renderer component if it exists
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	        }
	        this.cellRenderer = null;
	        this.cellRendererGui = null;
	        // populate
	        this.putDataIntoCellAfterRefresh();
	        this.angular1Compile();
	    };
	    CellComp.prototype.angular1Compile = function () {
	        // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var eGui = this.getGui();
	            this.beans.$compile(eGui)(this.scope);
	        }
	    };
	    CellComp.prototype.postProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        if (stylesToUse) {
	            utils_1._.addStylesToElement(this.getGui(), stylesToUse);
	        }
	    };
	    CellComp.prototype.preProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        return utils_1._.cssStyleObjectToMarkup(stylesToUse);
	    };
	    CellComp.prototype.processStylesFromColDef = function () {
	        var colDef = this.column.getColDef();
	        if (colDef.cellStyle) {
	            var cssToUse = void 0;
	            if (typeof colDef.cellStyle === 'function') {
	                var cellStyleParams = {
	                    value: this.value,
	                    data: this.rowNode.data,
	                    node: this.rowNode,
	                    colDef: colDef,
	                    column: this.column,
	                    $scope: this.scope,
	                    context: this.beans.gridOptionsWrapper.getContext(),
	                    api: this.beans.gridOptionsWrapper.getApi()
	                };
	                var cellStyleFunc = colDef.cellStyle;
	                cssToUse = cellStyleFunc(cellStyleParams);
	            }
	            else {
	                cssToUse = colDef.cellStyle;
	            }
	            return cssToUse;
	        }
	    };
	    CellComp.prototype.postProcessClassesFromColDef = function () {
	        var _this = this;
	        this.processClassesFromColDef(function (className) { return utils_1._.addCssClass(_this.getGui(), className); });
	    };
	    CellComp.prototype.preProcessClassesFromColDef = function () {
	        var res = [];
	        this.processClassesFromColDef(function (className) { return res.push(className); });
	        return res;
	    };
	    CellComp.prototype.processClassesFromColDef = function (onApplicableClass) {
	        this.beans.stylingService.processStaticCellClasses(this.column.getColDef(), {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.rowNode.rowIndex,
	            $scope: this.scope,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass);
	    };
	    CellComp.prototype.putDataIntoCellAfterRefresh = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            this.eParentOfValue.innerHTML = colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                this.eParentOfValue.innerHTML = template;
	            }
	            // use cell renderer if it exists
	        }
	        else if (this.usingCellRenderer) {
	            this.attachCellRenderer();
	        }
	        else {
	            var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            var valueToRender = valueFormattedExits ? valueFormatted : this.value;
	            if (valueToRender !== null && valueToRender !== undefined) {
	                this.eParentOfValue.innerText = valueToRender;
	            }
	        }
	        if (colDef.tooltipField) {
	            var data = this.rowNode.data;
	            if (utils_1._.exists(data)) {
	                var tooltip = utils_1._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
	                if (utils_1._.exists(tooltip)) {
	                    this.eParentOfValue.setAttribute('title', tooltip);
	                }
	                else {
	                    this.eParentOfValue.removeAttribute('title');
	                }
	            }
	        }
	    };
	    CellComp.prototype.attemptCellRendererRefresh = function () {
	        if (utils_1._.missing(this.cellRenderer) || utils_1._.missing(this.cellRenderer.refresh)) {
	            return false;
	        }
	        // if the cell renderer has a refresh method, we call this instead of doing a refresh
	        // note: should pass in params here instead of value?? so that client has formattedValue
	        var valueFormatted = this.formatValue(this.value);
	        var params = this.createCellRendererParams(valueFormatted);
	        var result = this.cellRenderer.refresh(params);
	        // NOTE on undefined: previous version of the cellRenderer.refresh() interface
	        // returned nothing, if the method existed, we assumed it refreshed. so for
	        // backwards compatibility, we assume if method exists and returns nothing,
	        // that it was successful.
	        return result === true || result === undefined;
	    };
	    CellComp.prototype.isVolatile = function () {
	        return this.column.getColDef().volatile;
	    };
	    CellComp.prototype.valuesAreEqual = function (val1, val2) {
	        // if the user provided an equals method, use that, otherwise do simple comparison
	        var colDef = this.column.getColDef();
	        var equalsMethod = colDef ? colDef.equals : null;
	        if (equalsMethod) {
	            return equalsMethod(val1, val2);
	        }
	        else {
	            return val1 === val2;
	        }
	    };
	    CellComp.prototype.getToolTip = function () {
	        var colDef = this.column.getColDef();
	        var data = this.rowNode.data;
	        if (colDef.tooltipField && utils_1._.exists(data)) {
	            return utils_1._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
	        }
	        else {
	            return null;
	        }
	    };
	    CellComp.prototype.processCellClassRules = function (onApplicableClass, onNotApplicableClass) {
	        this.beans.stylingService.processClassRules(this.column.getColDef().cellClassRules, {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass, onNotApplicableClass);
	    };
	    CellComp.prototype.postProcessCellClassRules = function () {
	        var _this = this;
	        this.processCellClassRules(function (className) {
	            utils_1._.addCssClass(_this.getGui(), className);
	        }, function (className) {
	            utils_1._.removeCssClass(_this.getGui(), className);
	        });
	    };
	    CellComp.prototype.preProcessCellClassRules = function () {
	        var res = [];
	        this.processCellClassRules(function (className) {
	            res.push(className);
	        }, function (className) {
	            // not catered for, if creating, no need
	            // to remove class as it was never there
	        });
	        return res;
	    };
	    // a wrapper is used when we are putting a selection checkbox in the cell with the value
	    CellComp.prototype.setUsingWrapper = function () {
	        var colDef = this.column.getColDef();
	        // never allow selection on pinned rows
	        if (this.rowNode.rowPinned) {
	            this.usingWrapper = false;
	        }
	        else if (typeof colDef.checkboxSelection === 'boolean') {
	            this.usingWrapper = colDef.checkboxSelection;
	        }
	        else if (typeof colDef.checkboxSelection === 'function') {
	            // if checkboxSelection is a function, then the checkbox may or may not be present,
	            // so we include the HTML wrapper to cater for either case
	            this.usingWrapper = true;
	        }
	        else {
	            this.usingWrapper = false;
	        }
	    };
	    CellComp.prototype.chooseCellRenderer = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        // templates are for ng1, ideally we wouldn't have these, they are ng1 support
	        // inside the core which is bad
	        if (colDef.template || colDef.templateUrl) {
	            this.usingCellRenderer = false;
	            return;
	        }
	        var cellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'cellRenderer');
	        var pinnedRowCellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'pinnedRowCellRenderer');
	        if (pinnedRowCellRenderer && this.rowNode.rowPinned) {
	            this.cellRendererType = 'pinnedRowCellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else if (cellRenderer) {
	            this.cellRendererType = 'cellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else {
	            this.usingCellRenderer = false;
	        }
	    };
	    CellComp.prototype.createCellRendererInstance = function () {
	        var valueToRender = this.formatValue(this.value);
	        var params = this.createCellRendererParams(valueToRender);
	        this.cellRendererVersion++;
	        var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
	        this.beans.componentResolver.createAgGridComponent(this.column.getColDef(), params, this.cellRendererType).then(callback);
	    };
	    CellComp.prototype.afterCellRendererCreated = function (cellRendererVersion, cellRenderer) {
	        // see if daemon
	        if (cellRendererVersion !== this.cellRendererVersion) {
	            if (cellRenderer.destroy) {
	                cellRenderer.destroy();
	            }
	            return;
	        }
	        this.cellRenderer = cellRenderer;
	        this.cellRendererGui = this.cellRenderer.getGui();
	        if (utils_1._.missing(this.cellRendererGui)) {
	            return;
	        }
	        // if async components, then it's possible the user started editing since
	        // this call was made
	        if (!this.editingCell) {
	            this.eParentOfValue.appendChild(this.cellRendererGui);
	        }
	    };
	    CellComp.prototype.attachCellRenderer = function () {
	        if (!this.usingCellRenderer) {
	            return;
	        }
	        this.createCellRendererInstance();
	    };
	    CellComp.prototype.createCellRendererParams = function (valueFormatted) {
	        var _this = this;
	        var params = {
	            value: this.value,
	            valueFormatted: valueFormatted,
	            getValue: this.getValue.bind(this),
	            setValue: function (value) { _this.beans.valueService.setValue(_this.rowNode, _this.column, value); },
	            formatValue: this.formatValue.bind(this),
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            $scope: this.scope,
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            refreshCell: this.refreshCell.bind(this),
	            eGridCell: this.getGui(),
	            eParentOfValue: this.eParentOfValue,
	            // these bits are not documented anywhere, so we could drop them?
	            // it was in the olden days to allow user to register for when rendered
	            // row was removed (the row comp was removed), however now that the user
	            // can provide components for cells, the destroy method gets call when this
	            // happens so no longer need to fire event.
	            addRowCompListener: this.rowComp.addEventListener.bind(this.rowComp),
	            addRenderedRowListener: function (eventType, listener) {
	                console.warn('ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()');
	                _this.rowComp.addEventListener(eventType, listener);
	            }
	        };
	        return params;
	    };
	    CellComp.prototype.formatValue = function (value) {
	        var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
	        var valueFormattedExists = valueFormatted !== null && valueFormatted !== undefined;
	        return valueFormattedExists ? valueFormatted : value;
	    };
	    CellComp.prototype.getValue = function () {
	        // if we don't check this, then the grid will render leaf groups as open even if we are not
	        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
	        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
	        // them via the API, or user user expanded them in the UI before turning on pivot mode
	        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
	        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
	        if (isOpenGroup && this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {
	            // if doing grouping and footers, we don't want to include the agg value
	            // in the header when the group is open
	            return this.beans.valueService.getValue(this.column, this.rowNode, true);
	        }
	        else {
	            return this.beans.valueService.getValue(this.column, this.rowNode);
	        }
	    };
	    CellComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        switch (eventName) {
	            case 'click':
	                this.onCellClicked(mouseEvent);
	                break;
	            case 'mousedown':
	                this.onMouseDown();
	                break;
	            case 'dblclick':
	                this.onCellDoubleClicked(mouseEvent);
	                break;
	            case 'contextmenu':
	                this.onContextMenu(mouseEvent);
	                break;
	            case 'mouseout':
	                this.onMouseOut(mouseEvent);
	                break;
	            case 'mouseover':
	                this.onMouseOver(mouseEvent);
	                break;
	        }
	    };
	    CellComp.prototype.createEvent = function (domEvent, eventType) {
	        var event = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            value: this.value,
	            column: this.column,
	            colDef: this.column.getColDef(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridApi,
	            columnApi: this.beans.columnApi,
	            rowPinned: this.rowNode.rowPinned,
	            event: domEvent,
	            type: eventType,
	            rowIndex: this.rowNode.rowIndex
	        };
	        // because we are hacking in $scope for angular 1, we have to de-reference
	        if (this.scope) {
	            event.$scope = this.scope;
	        }
	        return event;
	    };
	    CellComp.prototype.onMouseOut = function (mouseEvent) {
	        var cellMouseOutEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OUT);
	        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
	    };
	    CellComp.prototype.onMouseOver = function (mouseEvent) {
	        var cellMouseOverEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OVER);
	        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
	    };
	    CellComp.prototype.onContextMenu = function (mouseEvent) {
	        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
	        // not everyone wants this, so first 'if' below allows to turn this hack off.
	        if (!this.beans.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
	            // then do the check
	            if (mouseEvent.ctrlKey || mouseEvent.metaKey) {
	                return;
	            }
	        }
	        var colDef = this.column.getColDef();
	        var cellContextMenuEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_CONTEXT_MENU);
	        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
	        if (colDef.onCellContextMenu) {
	            colDef.onCellContextMenu(cellContextMenuEvent);
	        }
	        if (this.beans.contextMenuFactory && !this.beans.gridOptionsWrapper.isSuppressContextMenu()) {
	            this.beans.contextMenuFactory.showMenu(this.rowNode, this.column, this.value, mouseEvent);
	            mouseEvent.preventDefault();
	        }
	    };
	    CellComp.prototype.onCellDoubleClicked = function (mouseEvent) {
	        var colDef = this.column.getColDef();
	        // always dispatch event to eventService
	        var cellDoubleClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_DOUBLE_CLICKED);
	        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
	        // check if colDef also wants to handle event
	        if (typeof colDef.onCellDoubleClicked === 'function') {
	            colDef.onCellDoubleClicked(cellDoubleClickedEvent);
	        }
	        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnDoubleClick) {
	            this.startRowOrCellEdit();
	        }
	    };
	    // called by rowRenderer when user navigates via tab key
	    CellComp.prototype.startRowOrCellEdit = function (keyPress, charPress) {
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.startRowEditing(keyPress, charPress, this);
	        }
	        else {
	            this.startEditingIfEnabled(keyPress, charPress, true);
	        }
	    };
	    CellComp.prototype.isCellEditable = function () {
	        return this.column.isCellEditable(this.rowNode);
	    };
	    // either called internally if single cell editing, or called by rowRenderer if row editing
	    CellComp.prototype.startEditingIfEnabled = function (keyPress, charPress, cellStartedEdit) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (cellStartedEdit === void 0) { cellStartedEdit = false; }
	        // don't do it if not editable
	        if (!this.isCellEditable()) {
	            return;
	        }
	        // don't do it if already editing
	        if (this.editingCell) {
	            return;
	        }
	        this.editingCell = true;
	        this.cellEditorVersion++;
	        var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
	        var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
	        this.beans.cellEditorFactory.createCellEditor(this.column.getColDef(), params).then(callback);
	        // if we don't do this, and editor component is async, then there will be a period
	        // when the component isn't present and keyboard navigation won't work - so example
	        // of user hitting tab quickly (more quickly than renderers getting created) won't work
	        var cellEditorAsync = utils_1._.missing(this.cellEditor);
	        if (cellEditorAsync && cellStartedEdit) {
	            this.focusCell(true);
	        }
	    };
	    CellComp.prototype.afterCellEditorCreated = function (cellEditorVersion, cellEditor) {
	        // if editingCell=false, means user cancelled the editor before component was ready.
	        // if versionMismatch, then user cancelled the edit, then started the edit again, and this
	        //   is the first editor which is now stale.
	        var versionMismatch = cellEditorVersion !== this.cellEditorVersion;
	        if (versionMismatch || !this.editingCell) {
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            return;
	        }
	        if (cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart()) {
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            this.editingCell = false;
	            return;
	        }
	        if (!cellEditor.getGui) {
	            console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
	            // no getGui, for React guys, see if they attached a react component directly
	            if (cellEditor.render) {
	                console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
	            }
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            this.editingCell = false;
	            return;
	        }
	        this.cellEditor = cellEditor;
	        this.cellEditorInPopup = cellEditor.isPopup && cellEditor.isPopup();
	        this.setInlineEditingClass();
	        if (this.cellEditorInPopup) {
	            this.addPopupCellEditor();
	        }
	        else {
	            this.addInCellEditor();
	        }
	        if (cellEditor.afterGuiAttached) {
	            cellEditor.afterGuiAttached();
	        }
	        var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STARTED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    CellComp.prototype.addInCellEditor = function () {
	        utils_1._.removeAllChildren(this.getGui());
	        this.getGui().appendChild(this.cellEditor.getGui());
	        this.angular1Compile();
	    };
	    CellComp.prototype.addPopupCellEditor = function () {
	        var _this = this;
	        var ePopupGui = this.cellEditor.getGui();
	        this.hideEditorPopup = this.beans.popupService.addAsModalPopup(ePopupGui, true, 
	        // callback for when popup disappears
	        function () {
	            _this.onPopupEditorClosed();
	        });
	        this.beans.popupService.positionPopupOverComponent({
	            column: this.column,
	            rowNode: this.rowNode,
	            type: 'popupCellEditor',
	            eventSource: this.getGui(),
	            ePopup: ePopupGui,
	            keepWithinBounds: true
	        });
	        this.angular1Compile();
	    };
	    CellComp.prototype.onPopupEditorClosed = function () {
	        // we only call stopEditing if we are editing, as
	        // it's possible the popup called 'stop editing'
	        // before this, eg if 'enter key' was pressed on
	        // the editor.
	        if (this.editingCell) {
	            // note: this only happens when use clicks outside of the grid. if use clicks on another
	            // cell, then the editing will have already stopped on this cell
	            this.stopRowOrCellEdit();
	            // we only focus cell again if this cell is still focused. it is possible
	            // it is not focused if the user cancelled the edit by clicking on another
	            // cell outside of this one
	            if (this.beans.focusedCellController.isCellFocused(this.gridCell)) {
	                this.focusCell(true);
	            }
	        }
	    };
	    // if we are editing inline, then we don't have the padding in the cell (set in the themes)
	    // to allow the text editor full access to the entire cell
	    CellComp.prototype.setInlineEditingClass = function () {
	        var editingInline = this.editingCell && !this.cellEditorInPopup;
	        utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-inline-editing', editingInline);
	        utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-not-inline-editing', !editingInline);
	    };
	    CellComp.prototype.createCellEditorParams = function (keyPress, charPress, cellStartedEdit) {
	        var params = {
	            value: this.getValue(),
	            keyPress: keyPress,
	            charPress: charPress,
	            column: this.column,
	            rowIndex: this.gridCell.rowIndex,
	            node: this.rowNode,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            cellStartedEdit: cellStartedEdit,
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            $scope: this.scope,
	            onKeyDown: this.onKeyDown.bind(this),
	            stopEditing: this.stopEditingAndFocus.bind(this),
	            eGridCell: this.getGui(),
	            parseValue: this.parseValue.bind(this),
	            formatValue: this.formatValue.bind(this)
	        };
	        return params;
	    };
	    // cell editors call this, when they want to stop for reasons other
	    // than what we pick up on. eg selecting from a dropdown ends editing.
	    CellComp.prototype.stopEditingAndFocus = function () {
	        this.stopRowOrCellEdit();
	        this.focusCell(true);
	    };
	    CellComp.prototype.parseValue = function (newValue) {
	        var params = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            oldValue: this.value,
	            newValue: newValue,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        };
	        var valueParser = this.column.getColDef().valueParser;
	        return utils_1._.exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
	    };
	    CellComp.prototype.focusCell = function (forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        this.beans.focusedCellController.setFocusedCell(this.gridCell.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
	    };
	    CellComp.prototype.setFocusInOnEditor = function () {
	        if (this.editingCell) {
	            if (this.cellEditor && this.cellEditor.focusIn) {
	                // if the editor is present, then we just focus it
	                this.cellEditor.focusIn();
	            }
	            else {
	                // if the editor is not present, it means async cell editor (eg React fibre)
	                // and we are trying to set focus before the cell editor is present, so we
	                // focus the cell instead
	                this.focusCell(true);
	            }
	        }
	    };
	    CellComp.prototype.isEditing = function () {
	        return this.editingCell;
	    };
	    CellComp.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        // give user a chance to cancel event processing
	        if (this.doesUserWantToCancelKeyboardEvent(event)) {
	            return;
	        }
	        switch (key) {
	            case constants_1.Constants.KEY_ENTER:
	                this.onEnterKeyDown();
	                break;
	            case constants_1.Constants.KEY_F2:
	                this.onF2KeyDown();
	                break;
	            case constants_1.Constants.KEY_ESCAPE:
	                this.onEscapeKeyDown();
	                break;
	            case constants_1.Constants.KEY_TAB:
	                this.onTabKeyDown(event);
	                break;
	            case constants_1.Constants.KEY_BACKSPACE:
	            case constants_1.Constants.KEY_DELETE:
	                this.onBackspaceOrDeleteKeyPressed(key);
	                break;
	            case constants_1.Constants.KEY_DOWN:
	            case constants_1.Constants.KEY_UP:
	            case constants_1.Constants.KEY_RIGHT:
	            case constants_1.Constants.KEY_LEFT:
	                this.onNavigationKeyPressed(event, key);
	                break;
	        }
	    };
	    CellComp.prototype.doesUserWantToCancelKeyboardEvent = function (event) {
	        var callback = this.column.getColDef().suppressKeyboardEvent;
	        if (utils_1._.missing(callback)) {
	            return false;
	        }
	        else {
	            // if editing is null or undefined, this sets it to false
	            var params = {
	                event: event,
	                editing: this.editingCell,
	                column: this.column,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                node: this.rowNode,
	                colDef: this.column.getColDef(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi()
	            };
	            return callback(params);
	        }
	    };
	    CellComp.prototype.setFocusOutOnEditor = function () {
	        if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    CellComp.prototype.onNavigationKeyPressed = function (event, key) {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	        this.beans.rowRenderer.navigateToNextCell(event, key, this.gridCell.rowIndex, this.column, this.rowNode.rowPinned);
	        // if we don't prevent default, the grid will scroll with the navigation keys
	        event.preventDefault();
	    };
	    CellComp.prototype.onTabKeyDown = function (event) {
	        if (this.beans.gridOptionsWrapper.isSuppressTabbing()) {
	            return;
	        }
	        this.beans.rowRenderer.onTabKeyDown(this, event);
	    };
	    CellComp.prototype.onBackspaceOrDeleteKeyPressed = function (key) {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(key);
	        }
	    };
	    CellComp.prototype.onEnterKeyDown = function () {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit();
	            this.focusCell(true);
	        }
	        else {
	            this.startRowOrCellEdit(constants_1.Constants.KEY_ENTER);
	        }
	    };
	    CellComp.prototype.onF2KeyDown = function () {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(constants_1.Constants.KEY_F2);
	        }
	    };
	    CellComp.prototype.onEscapeKeyDown = function () {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit(true);
	            this.focusCell(true);
	        }
	    };
	    CellComp.prototype.onKeyPress = function (event) {
	        // check this, in case focus is on a (for example) a text field inside the cell,
	        // in which cse we should not be listening for these key pressed
	        var eventTarget = utils_1._.getTarget(event);
	        var eventOnChildComponent = eventTarget !== this.getGui();
	        if (eventOnChildComponent) {
	            return;
	        }
	        if (!this.editingCell) {
	            var pressedChar = String.fromCharCode(event.charCode);
	            if (pressedChar === ' ') {
	                this.onSpaceKeyPressed(event);
	            }
	            else {
	                if (utils_1._.isEventFromPrintableCharacter(event)) {
	                    this.startRowOrCellEdit(null, pressedChar);
	                    // if we don't prevent default, then the keypress also gets applied to the text field
	                    // (at least when doing the default editor), but we need to allow the editor to decide
	                    // what it wants to do. we only do this IF editing was started - otherwise it messes
	                    // up when the use is not doing editing, but using rendering with text fields in cellRenderer
	                    // (as it would block the the user from typing into text fields).
	                    event.preventDefault();
	                }
	            }
	        }
	    };
	    CellComp.prototype.onSpaceKeyPressed = function (event) {
	        if (!this.editingCell && this.beans.gridOptionsWrapper.isRowSelection()) {
	            var selected = this.rowNode.isSelected();
	            this.rowNode.setSelected(!selected);
	        }
	        // prevent default as space key, by default, moves browser scroll down
	        event.preventDefault();
	    };
	    CellComp.prototype.onMouseDown = function () {
	        // we pass false to focusCell, as we don't want the cell to focus
	        // also get the browser focus. if we did, then the cellRenderer could
	        // have a text field in it, for example, and as the user clicks on the
	        // text field, the text field, the focus doesn't get to the text
	        // field, instead to goes to the div behind, making it impossible to
	        // select the text field.
	        this.focusCell(false);
	        // if it's a right click, then if the cell is already in range,
	        // don't change the range, however if the cell is not in a range,
	        // we set a new range
	        if (this.beans.rangeController) {
	            var thisCell = this.gridCell;
	            var cellAlreadyInRange = this.beans.rangeController.isCellInAnyRange(thisCell);
	            if (!cellAlreadyInRange) {
	                this.beans.rangeController.setRangeToCell(thisCell);
	            }
	        }
	    };
	    CellComp.prototype.onCellClicked = function (mouseEvent) {
	        var cellClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_CLICKED);
	        this.beans.eventService.dispatchEvent(cellClickedEvent);
	        var colDef = this.column.getColDef();
	        if (colDef.onCellClicked) {
	            colDef.onCellClicked(cellClickedEvent);
	        }
	        var editOnSingleClick = this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnSingleClick) {
	            this.startRowOrCellEdit();
	        }
	        this.doIeFocusHack();
	    };
	    // https://ag-grid.com/forum/showthread.php?tid=4362
	    // when in IE or Edge, when you are editing a cell, then click on another cell,
	    // the other cell doesn't keep focus, so navigation keys, type to start edit etc
	    // don't work. appears that when you update the dom in IE it looses focus
	    CellComp.prototype.doIeFocusHack = function () {
	        if (utils_1._.isBrowserIE() || utils_1._.isBrowserEdge()) {
	            if (utils_1._.missing(document.activeElement) || document.activeElement === document.body) {
	                // console.log('missing focus');
	                this.getGui().focus();
	            }
	        }
	    };
	    CellComp.prototype.createGridCellVo = function () {
	        var gridCellDef = {
	            rowIndex: this.rowNode.rowIndex,
	            floating: this.rowNode.rowPinned,
	            column: this.column
	        };
	        this.gridCell = new gridCell_1.GridCell(gridCellDef);
	    };
	    CellComp.prototype.getGridCell = function () {
	        return this.gridCell;
	    };
	    CellComp.prototype.getParentRow = function () {
	        return this.eParentRow;
	    };
	    CellComp.prototype.setParentRow = function (eParentRow) {
	        this.eParentRow = eParentRow;
	    };
	    CellComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    CellComp.prototype.detach = function () {
	        this.eParentRow.removeChild(this.getGui());
	    };
	    // if the row is also getting destroyed, then we don't need to remove from dom,
	    // as the row will also get removed, so no need to take out the cells from the row
	    // if the row is going (removing is an expensive operation, so only need to remove
	    // the top part)
	    CellComp.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.cellEditor && this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	            this.cellEditor = null;
	        }
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	            this.cellRenderer = null;
	        }
	    };
	    CellComp.prototype.onLeftChanged = function () {
	        var left = this.getCellLeft();
	        this.getGui().style.left = left + 'px';
	    };
	    CellComp.prototype.onWidthChanged = function () {
	        var width = this.getCellWidth();
	        this.getGui().style.width = width + 'px';
	    };
	    CellComp.prototype.getRangeClasses = function () {
	        var res = [];
	        if (!this.rangeSelectionEnabled) {
	            return res;
	        }
	        if (this.rangeCount !== 0) {
	            res.push('ag-cell-range-selected');
	        }
	        if (this.rangeCount === 1) {
	            res.push('ag-cell-range-selected-1');
	        }
	        if (this.rangeCount === 2) {
	            res.push('ag-cell-range-selected-2');
	        }
	        if (this.rangeCount === 3) {
	            res.push('ag-cell-range-selected-3');
	        }
	        if (this.rangeCount >= 4) {
	            res.push('ag-cell-range-selected-4');
	        }
	        return res;
	    };
	    CellComp.prototype.onRowIndexChanged = function () {
	        // when index changes, this influences items that need the index, so we update the
	        // grid cell so they are working off the new index.
	        this.createGridCellVo();
	        // when the index of the row changes, ie means the cell may have lost or gained focus
	        this.onCellFocused();
	        // check range selection
	        this.onRangeSelectionChanged();
	    };
	    CellComp.prototype.onRangeSelectionChanged = function () {
	        if (!this.beans.enterprise) {
	            return;
	        }
	        var newRangeCount = this.beans.rangeController.getCellRangeCount(this.gridCell);
	        var element = this.getGui();
	        if (this.rangeCount !== newRangeCount) {
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected', newRangeCount !== 0);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-1', newRangeCount === 1);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-2', newRangeCount === 2);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-3', newRangeCount === 3);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-4', newRangeCount >= 4);
	            this.rangeCount = newRangeCount;
	        }
	    };
	    CellComp.prototype.onFirstRightPinnedChanged = function () {
	        var firstRightPinned = this.column.isFirstRightPinned();
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-first-right-pinned', firstRightPinned);
	        }
	    };
	    CellComp.prototype.onLastLeftPinnedChanged = function () {
	        var lastLeftPinned = this.column.isLastLeftPinned();
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-last-left-pinned', lastLeftPinned);
	        }
	    };
	    CellComp.prototype.addSelectionCheckbox = function () {
	        if (this.usingWrapper) {
	            this.eParentOfValue = this.getRefElement('eCellValue');
	            this.eCellWrapper = this.getRefElement('eCellWrapper');
	            var cbSelectionComponent_1 = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
	            this.beans.context.wireBean(cbSelectionComponent_1);
	            var visibleFunc = this.column.getColDef().checkboxSelection;
	            visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
	            cbSelectionComponent_1.init({ rowNode: this.rowNode, column: this.column, visibleFunc: visibleFunc });
	            this.addDestroyFunc(function () { return cbSelectionComponent_1.destroy(); });
	            // put the checkbox in before the value
	            this.eCellWrapper.insertBefore(cbSelectionComponent_1.getGui(), this.eParentOfValue);
	        }
	        else {
	            this.eParentOfValue = this.getGui();
	        }
	    };
	    CellComp.prototype.addDomData = function () {
	        var _this = this;
	        var element = this.getGui();
	        this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
	        this.addDestroyFunc(function () {
	            return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
	        });
	    };
	    CellComp.prototype.onCellFocused = function (event) {
	        var cellFocused = this.beans.focusedCellController.isCellFocused(this.gridCell);
	        // see if we need to change the classes on this cell
	        if (cellFocused !== this.cellFocused) {
	            utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-focus', cellFocused);
	            utils_1._.addOrRemoveCssClass(this.getGui(), 'ag-cell-no-focus', !cellFocused);
	            this.cellFocused = cellFocused;
	        }
	        // if this cell was just focused, see if we need to force browser focus, his can
	        // happen if focus is programmatically set.
	        if (cellFocused && event && event.forceBrowserFocus) {
	            this.getGui().focus();
	        }
	        // if another cell was focused, and we are editing, then stop editing
	        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
	        if (!cellFocused && !fullRowEdit && this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	    };
	    // pass in 'true' to cancel the editing.
	    CellComp.prototype.stopRowOrCellEdit = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.stopRowEditing(cancel);
	        }
	        else {
	            this.stopEditing(cancel);
	        }
	    };
	    CellComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (!this.editingCell) {
	            return;
	        }
	        // if no cell editor, this means due to async, that the cell editor never got initialised,
	        // so we just carry on regardless as if the editing was never started.
	        if (!this.cellEditor) {
	            this.editingCell = false;
	            return;
	        }
	        if (!cancel) {
	            // also have another option here to cancel after editing, so for example user could have a popup editor and
	            // it is closed by user clicking outside the editor. then the editor will close automatically (with false
	            // passed above) and we need to see if the editor wants to accept the new value.
	            var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
	            if (!userWantsToCancel) {
	                var newValue = this.cellEditor.getValue();
	                this.rowNode.setDataValue(this.column, newValue);
	                this.value = this.getValue();
	            }
	        }
	        // it is important we set this after setValue() above, as otherwise the cell will flash
	        // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
	        // thus it will skip the refresh on this cell until the end of this method where we call
	        // refresh directly and we suppress the flash.
	        this.editingCell = false;
	        if (this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	        }
	        // important to clear this out - as parts of the code will check for
	        // this to see if an async cellEditor has yet to be created
	        this.cellEditor = null;
	        if (this.cellEditorInPopup) {
	            this.hideEditorPopup();
	            this.hideEditorPopup = null;
	        }
	        else {
	            utils_1._.removeAllChildren(this.getGui());
	            // put the cell back the way it was before editing
	            if (this.usingWrapper) {
	                // if wrapper, then put the wrapper back
	                this.getGui().appendChild(this.eCellWrapper);
	            }
	            else {
	                // if cellRenderer, then put the gui back in. if the renderer has
	                // a refresh, it will be called. however if it doesn't, then later
	                // the renderer will be destroyed and a new one will be created.
	                if (this.cellRenderer) {
	                    // we know it's a dom element (not a string) because we converted
	                    // it after the gui was attached if it was a string.
	                    var eCell = this.cellRendererGui;
	                    // can be null if cell was previously null / contained empty string,
	                    // this will result in new value not being rendered.
	                    if (eCell) {
	                        this.getGui().appendChild(eCell);
	                    }
	                }
	            }
	        }
	        this.setInlineEditingClass();
	        // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
	        // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
	        // (as the flash is meant to draw the user to a change that they didn't manually do themselves).
	        this.refreshCell({ forceRefresh: true, suppressFlash: true });
	        var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    CellComp.DOM_DATA_KEY_CELL_COMP = 'cellComp';
	    return CellComp;
	}(component_1.Component));
	exports.CellComp = CellComp;


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var selectionController_1 = __webpack_require__(309);
	var valueService_1 = __webpack_require__(313);
	var columnController_1 = __webpack_require__(297);
	var context_1 = __webpack_require__(287);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var valueCache_1 = __webpack_require__(314);
	var gridApi_1 = __webpack_require__(294);
	var RowNode = (function () {
	    function RowNode() {
	        /** Children mapped by the pivot columns */
	        this.childrenMapped = {};
	        this.selected = false;
	    }
	    RowNode.prototype.setData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        this.valueCache.onDataChanged();
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {
	        return {
	            type: RowNode.EVENT_DATA_CHANGED,
	            node: this,
	            oldData: oldData,
	            newData: newData,
	            update: update
	        };
	    };
	    RowNode.prototype.createLocalRowEvent = function (type) {
	        return {
	            type: type,
	            node: this
	        };
	    };
	    // similar to setRowData, however it is expected that the data is the same data item. this
	    // is intended to be used with Redux type stores, where the whole data can be changed. we are
	    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
	    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
	    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).
	    RowNode.prototype.updateData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        var event = this.createDataChangedEvent(data, oldData, true);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.getRowIndexString = function () {
	        if (this.rowPinned === constants_1.Constants.PINNED_TOP) {
	            return 't-' + this.rowIndex;
	        }
	        else if (this.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
	            return 'b-' + this.rowIndex;
	        }
	        else {
	            return this.rowIndex.toString();
	        }
	    };
	    RowNode.prototype.createDaemonNode = function () {
	        var oldNode = new RowNode();
	        this.context.wireBean(oldNode);
	        // just copy the id and data, this is enough for the node to be used
	        // in the selection controller (the selection controller is the only
	        // place where daemon nodes can live).
	        oldNode.id = this.id;
	        oldNode.data = this.data;
	        oldNode.daemon = true;
	        oldNode.selected = this.selected;
	        oldNode.level = this.level;
	        return oldNode;
	    };
	    RowNode.prototype.setDataAndId = function (data, id) {
	        var oldNode = utils_1.Utils.exists(this.id) ? this.createDaemonNode() : null;
	        var oldData = this.data;
	        this.data = data;
	        this.setId(id);
	        this.selectionController.syncInRowNode(this, oldNode);
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.setId = function (id) {
	        // see if user is providing the id's
	        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (getRowNodeId) {
	            // if user is providing the id's, then we set the id only after the data has been set.
	            // this is important for virtual pagination and viewport, where empty rows exist.
	            if (this.data) {
	                this.id = getRowNodeId(this.data);
	            }
	            else {
	                // this can happen if user has set blank into the rowNode after the row previously
	                // having data. this happens in virtual page row model, when data is delete and
	                // the page is refreshed.
	                this.id = undefined;
	            }
	        }
	        else {
	            this.id = id;
	        }
	    };
	    RowNode.prototype.isPixelInRange = function (pixel) {
	        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);
	    };
	    RowNode.prototype.clearRowTop = function () {
	        this.oldRowTop = this.rowTop;
	        this.setRowTop(null);
	    };
	    RowNode.prototype.setFirstChild = function (firstChild) {
	        if (this.firstChild === firstChild) {
	            return;
	        }
	        this.firstChild = firstChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setLastChild = function (lastChild) {
	        if (this.lastChild === lastChild) {
	            return;
	        }
	        this.lastChild = lastChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setChildIndex = function (childIndex) {
	        if (this.childIndex === childIndex) {
	            return;
	        }
	        this.childIndex = childIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowTop = function (rowTop) {
	        if (this.rowTop === rowTop) {
	            return;
	        }
	        this.rowTop = rowTop;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
	        }
	    };
	    RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {
	        if (this.allChildrenCount === allChildrenCount) {
	            return;
	        }
	        this.allChildrenCount = allChildrenCount;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowHeight = function (rowHeight) {
	        this.rowHeight = rowHeight;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowIndex = function (rowIndex) {
	        this.rowIndex = rowIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setUiLevel = function (uiLevel) {
	        if (this.uiLevel === uiLevel) {
	            return;
	        }
	        this.uiLevel = uiLevel;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
	        }
	    };
	    RowNode.prototype.setExpanded = function (expanded) {
	        if (this.expanded === expanded) {
	            return;
	        }
	        this.expanded = expanded;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
	        }
	        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_GROUP_OPENED);
	        this.mainEventService.dispatchEvent(event);
	    };
	    RowNode.prototype.createGlobalRowEvent = function (type) {
	        var event = {
	            type: type,
	            node: this,
	            data: this.data,
	            rowIndex: this.rowIndex,
	            rowPinned: this.rowPinned,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	        return event;
	    };
	    RowNode.prototype.dispatchLocalEvent = function (event) {
	        if (this.eventService) {
	            this.eventService.dispatchEvent(event);
	        }
	    };
	    // we also allow editing the value via the editors. when it is done via
	    // the editors, no 'cell changed' event gets fired, as it's assumed that
	    // the cell knows about the change given it's in charge of the editing.
	    // this method is for the client to call, so the cell listens for the change
	    // event, and also flashes the cell when the change occurs.
	    RowNode.prototype.setDataValue = function (colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.valueService.setValue(this, column, newValue);
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    RowNode.prototype.setGroupValue = function (colKey, newValue) {
	        var column = this.columnController.getGridColumn(colKey);
	        if (utils_1.Utils.missing(this.groupData)) {
	            this.groupData = {};
	        }
	        this.groupData[column.getColId()] = newValue;
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    // sets the data for an aggregation
	    RowNode.prototype.setAggData = function (newAggData) {
	        var _this = this;
	        // find out all keys that could potentially change
	        var colIds = utils_1.Utils.getAllKeysInObjects([this.aggData, newAggData]);
	        this.aggData = newAggData;
	        // if no event service, nobody has registered for events, so no need fire event
	        if (this.eventService) {
	            colIds.forEach(function (colId) {
	                var column = _this.columnController.getGridColumn(colId);
	                var value = _this.aggData ? _this.aggData[colId] : undefined;
	                _this.dispatchCellChangedEvent(column, value);
	            });
	        }
	    };
	    RowNode.prototype.hasChildren = function () {
	        // we need to return true when this.group=true, as this is used by enterprise row model
	        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true
	        // if children exist.
	        return this.group || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);
	    };
	    RowNode.prototype.isEmptyFillerNode = function () {
	        return this.group && utils_1.Utils.missingOrEmpty(this.childrenAfterGroup);
	    };
	    RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {
	        var cellChangedEvent = {
	            type: RowNode.EVENT_CELL_CHANGED,
	            node: this,
	            column: column,
	            newValue: newValue
	        };
	        this.dispatchLocalEvent(cellChangedEvent);
	    };
	    RowNode.prototype.resetQuickFilterAggregateText = function () {
	        this.quickFilterAggregateText = null;
	    };
	    RowNode.prototype.isExpandable = function () {
	        return this.hasChildren() || this.master;
	    };
	    RowNode.prototype.isSelected = function () {
	        // for footers, we just return what our sibling selected state is, as cannot select a footer
	        if (this.footer) {
	            return this.sibling.isSelected();
	        }
	        return this.selected;
	    };
	    RowNode.prototype.depthFirstSearch = function (callback) {
	        if (this.childrenAfterGroup) {
	            this.childrenAfterGroup.forEach(function (child) { return child.depthFirstSearch(callback); });
	        }
	        callback(this);
	    };
	    // + rowController.updateGroupsInSelection()
	    RowNode.prototype.calculateSelectedFromChildren = function () {
	        var atLeastOneSelected = false;
	        var atLeastOneDeSelected = false;
	        var atLeastOneMixed = false;
	        var newSelectedValue;
	        if (this.childrenAfterGroup) {
	            for (var i = 0; i < this.childrenAfterGroup.length; i++) {
	                var childState = this.childrenAfterGroup[i].isSelected();
	                switch (childState) {
	                    case true:
	                        atLeastOneSelected = true;
	                        break;
	                    case false:
	                        atLeastOneDeSelected = true;
	                        break;
	                    default:
	                        atLeastOneMixed = true;
	                        break;
	                }
	            }
	        }
	        if (atLeastOneMixed) {
	            newSelectedValue = undefined;
	        }
	        else if (atLeastOneSelected && !atLeastOneDeSelected) {
	            newSelectedValue = true;
	        }
	        else if (!atLeastOneSelected && atLeastOneDeSelected) {
	            newSelectedValue = false;
	        }
	        else {
	            newSelectedValue = undefined;
	        }
	        this.selectThisNode(newSelectedValue);
	    };
	    RowNode.prototype.calculateSelectedFromChildrenBubbleUp = function () {
	        this.calculateSelectedFromChildren();
	        if (this.parent) {
	            this.parent.calculateSelectedFromChildrenBubbleUp();
	        }
	    };
	    RowNode.prototype.setSelectedInitialValue = function (selected) {
	        this.selected = selected;
	    };
	    RowNode.prototype.setSelected = function (newValue, clearSelection, tailingNodeInSequence) {
	        if (clearSelection === void 0) { clearSelection = false; }
	        if (tailingNodeInSequence === void 0) { tailingNodeInSequence = false; }
	        this.setSelectedParams({
	            newValue: newValue,
	            clearSelection: clearSelection,
	            tailingNodeInSequence: tailingNodeInSequence,
	            rangeSelect: false
	        });
	    };
	    RowNode.prototype.isRowPinned = function () {
	        return this.rowPinned === constants_1.Constants.PINNED_TOP || this.rowPinned === constants_1.Constants.PINNED_BOTTOM;
	    };
	    // to make calling code more readable, this is the same method as setSelected except it takes names parameters
	    RowNode.prototype.setSelectedParams = function (params) {
	        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var newValue = params.newValue === true;
	        var clearSelection = params.clearSelection === true;
	        var tailingNodeInSequence = params.tailingNodeInSequence === true;
	        var rangeSelect = params.rangeSelect === true;
	        // groupSelectsFiltered only makes sense when group selects children
	        var groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);
	        if (this.id === undefined) {
	            console.warn('ag-Grid: cannot select node until id for node is known');
	            return 0;
	        }
	        if (this.rowPinned) {
	            console.log('ag-Grid: cannot select pinned rows');
	            return 0;
	        }
	        // if we are a footer, we don't do selection, just pass the info
	        // to the sibling (the parent of the group)
	        if (this.footer) {
	            var count = this.sibling.setSelectedParams(params);
	            return count;
	        }
	        if (rangeSelect) {
	            var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
	            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
	            if (newRowClicked && allowMultiSelect) {
	                return this.doRowRangeSelection();
	            }
	        }
	        var updatedCount = 0;
	        // when groupSelectsFiltered, then this node may end up intermediate despite
	        // trying to set it to true / false. this group will be calculated further on
	        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
	        // here, otherwise the updatedCount would include it.
	        var skipThisNode = groupSelectsFiltered && this.group;
	        if (!skipThisNode) {
	            var thisNodeWasSelected = this.selectThisNode(newValue);
	            if (thisNodeWasSelected) {
	                updatedCount++;
	            }
	        }
	        if (groupSelectsChildren && this.group) {
	            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
	        }
	        // clear other nodes if not doing multi select
	        var actionWasOnThisNode = !tailingNodeInSequence;
	        if (actionWasOnThisNode) {
	            if (newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti())) {
	                updatedCount += this.selectionController.clearOtherNodes(this);
	            }
	            // only if we selected something, then update groups and fire events
	            if (updatedCount > 0) {
	                // update groups
	                if (groupSelectsFiltered) {
	                    // if the group was selecting filtered, then all nodes above and or below
	                    // this node could have check, unchecked or intermediate, so easiest is to
	                    // recalculate selected state for all group nodes
	                    this.calculatedSelectedForAllGroupNodes();
	                }
	                else {
	                    // if no selecting filtered, then everything below the group node was either
	                    // selected or not selected, no intermediate, so no need to check items below
	                    // this one, just the parents all the way up to the root
	                    if (groupSelectsChildren && this.parent) {
	                        this.parent.calculateSelectedFromChildrenBubbleUp();
	                    }
	                }
	                // fire events
	                // this is the very end of the 'action node', so we are finished all the updates,
	                // include any parent / child changes that this method caused
	                var event_1 = {
	                    type: events_1.Events.EVENT_SELECTION_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.mainEventService.dispatchEvent(event_1);
	            }
	            // so if user next does shift-select, we know where to start the selection from
	            if (newValue) {
	                this.selectionController.setLastSelectedNode(this);
	            }
	        }
	        return updatedCount;
	    };
	    // selects all rows between this node and the last selected node (or the top if this is the first selection).
	    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
	    // holding down 'shift'.
	    RowNode.prototype.doRowRangeSelection = function () {
	        var updatedCount = 0;
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var lastSelectedNode = this.selectionController.getLastSelectedNode();
	        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(lastSelectedNode, this);
	        nodesToSelect.forEach(function (rowNode) {
	            if (rowNode.group && groupsSelectChildren) {
	                return;
	            }
	            var nodeWasSelected = rowNode.selectThisNode(true);
	            if (nodeWasSelected) {
	                updatedCount++;
	            }
	        });
	        if (groupsSelectChildren) {
	            this.calculatedSelectedForAllGroupNodes();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.mainEventService.dispatchEvent(event);
	        return updatedCount;
	    };
	    RowNode.prototype.isParentOfNode = function (potentialParent) {
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode === potentialParent) {
	                return true;
	            }
	            parentNode = parentNode.parent;
	        }
	        return false;
	    };
	    RowNode.prototype.calculatedSelectedForAllGroupNodes = function () {
	        // we have to make sure we do this dept first, as parent nodes
	        // will have dependencies on the children having correct values
	        var inMemoryRowModel = this.rowModel;
	        inMemoryRowModel.getTopLevelNodes().forEach(function (topLevelNode) {
	            if (topLevelNode.group) {
	                topLevelNode.depthFirstSearch(function (childNode) {
	                    if (childNode.group) {
	                        childNode.calculateSelectedFromChildren();
	                    }
	                });
	                topLevelNode.calculateSelectedFromChildren();
	            }
	        });
	    };
	    RowNode.prototype.selectThisNode = function (newValue) {
	        if (this.selected === newValue) {
	            return false;
	        }
	        this.selected = newValue;
	        if (this.eventService) {
	            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
	        }
	        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_SELECTED);
	        this.mainEventService.dispatchEvent(event);
	        return true;
	    };
	    RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {
	        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
	        var updatedCount = 0;
	        if (utils_1.Utils.missing(children)) {
	            return;
	        }
	        for (var i = 0; i < children.length; i++) {
	            updatedCount += children[i].setSelectedParams({
	                newValue: newValue,
	                clearSelection: false,
	                tailingNodeInSequence: true
	            });
	        }
	        return updatedCount;
	    };
	    RowNode.prototype.addEventListener = function (eventType, listener) {
	        if (!this.eventService) {
	            this.eventService = new eventService_1.EventService();
	        }
	        this.eventService.addEventListener(eventType, listener);
	    };
	    RowNode.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    RowNode.prototype.onMouseEnter = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
	    };
	    RowNode.prototype.onMouseLeave = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
	    };
	    RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {
	        var currentRowNode = this;
	        // if we are hiding groups, then if we are the first child, of the first child,
	        // all the way up to the column we are interested in, then we show the group cell.
	        var isCandidate = true;
	        var foundFirstChildPath = false;
	        var nodeToSwapIn;
	        while (isCandidate && !foundFirstChildPath) {
	            var parentRowNode = currentRowNode.parent;
	            var firstChild = utils_1.Utils.exists(parentRowNode) && currentRowNode.firstChild;
	            if (firstChild) {
	                if (parentRowNode.rowGroupColumn === rowGroupColumn) {
	                    foundFirstChildPath = true;
	                    nodeToSwapIn = parentRowNode;
	                }
	            }
	            else {
	                isCandidate = false;
	            }
	            currentRowNode = parentRowNode;
	        }
	        return foundFirstChildPath ? nodeToSwapIn : null;
	    };
	    RowNode.EVENT_ROW_SELECTED = 'rowSelected';
	    RowNode.EVENT_DATA_CHANGED = 'dataChanged';
	    RowNode.EVENT_CELL_CHANGED = 'cellChanged';
	    RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';
	    RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';
	    RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';
	    RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';
	    RowNode.EVENT_TOP_CHANGED = 'topChanged';
	    RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';
	    RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';
	    RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';
	    RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';
	    RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowNode.prototype, "mainEventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowNode.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], RowNode.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowNode.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], RowNode.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], RowNode.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowNode.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], RowNode.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], RowNode.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], RowNode.prototype, "gridApi", void 0);
	    return RowNode;
	}());
	exports.RowNode = RowNode;


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var expressionService_1 = __webpack_require__(302);
	var columnController_1 = __webpack_require__(297);
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var events_1 = __webpack_require__(291);
	var eventService_1 = __webpack_require__(285);
	var valueCache_1 = __webpack_require__(314);
	var ValueService = (function () {
	    function ValueService() {
	        this.initialised = false;
	    }
	    ValueService.prototype.init = function () {
	        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
	        this.initialised = true;
	    };
	    ValueService.prototype.getValue = function (column, rowNode, ignoreAggData) {
	        // console.log(`turnActive = ${this.turnActive}`);
	        if (ignoreAggData === void 0) { ignoreAggData = false; }
	        // hack - the grid is getting refreshed before this bean gets initialised, race condition.
	        // really should have a way so they get initialised in the right order???
	        if (!this.initialised) {
	            this.init();
	        }
	        // pull these out to make code below easier to read
	        var colDef = column.getColDef();
	        var field = colDef.field;
	        var colId = column.getId();
	        var data = rowNode.data;
	        var result;
	        // if there is a value getter, this gets precedence over a field
	        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
	        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;
	        if (groupDataExists) {
	            result = rowNode.groupData[colId];
	        }
	        else if (aggDataExists) {
	            result = rowNode.aggData[colId];
	        }
	        else if (colDef.valueGetter) {
	            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
	        }
	        else if (field && data) {
	            result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());
	        }
	        else {
	            result = undefined;
	        }
	        // the result could be an expression itself, if we are allowing cell values to be expressions
	        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {
	            var cellValueGetter = result.substring(1);
	            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
	        }
	        return result;
	    };
	    ValueService.prototype.setValue = function (rowNode, colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (!rowNode || !column) {
	            return;
	        }
	        // this will only happen if user is trying to paste into a group row, which doesn't make sense
	        // the user should not be trying to paste into group rows
	        var data = rowNode.data;
	        if (utils_1._.missing(data)) {
	            rowNode.data = {};
	        }
	        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter
	        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
	        // need either a field or a newValueHandler for this to work
	        if (utils_1._.missing(field) && utils_1._.missing(newValueHandler) && utils_1._.missing(valueSetter)) {
	            // we don't tell user about newValueHandler, as that is deprecated
	            console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
	            return;
	        }
	        var params = {
	            node: rowNode,
	            data: rowNode.data,
	            oldValue: this.getValue(column, rowNode),
	            newValue: newValue,
	            colDef: column.getColDef(),
	            column: column,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext()
	        };
	        params.newValue = newValue;
	        var valueWasDifferent;
	        if (utils_1._.exists(newValueHandler)) {
	            valueWasDifferent = newValueHandler(params);
	        }
	        else if (utils_1._.exists(valueSetter)) {
	            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
	        }
	        else {
	            valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());
	        }
	        // in case user forgot to return something (possible if they are not using TypeScript
	        // and just forgot, or using an old newValueHandler we didn't always expect a return
	        // value here), we default the return value to true, so we always refresh.
	        if (valueWasDifferent === undefined) {
	            valueWasDifferent = true;
	        }
	        // if no change to the value, then no need to do the updating, or notifying via events.
	        // otherwise the user could be tabbing around the grid, and cellValueChange would get called
	        // all the time.
	        if (!valueWasDifferent) {
	            return;
	        }
	        // reset quick filter on this row
	        rowNode.resetQuickFilterAggregateText();
	        this.valueCache.onDataChanged();
	        params.newValue = this.getValue(column, rowNode);
	        if (typeof column.getColDef().onCellValueChanged === 'function') {
	            column.getColDef().onCellValueChanged(params);
	        }
	        var event = {
	            type: events_1.Events.EVENT_CELL_VALUE_CHANGED,
	            event: null,
	            rowIndex: rowNode.rowIndex,
	            rowPinned: rowNode.rowPinned,
	            column: params.column,
	            api: params.api,
	            colDef: params.colDef,
	            columnApi: params.columnApi,
	            context: params.context,
	            data: rowNode.data,
	            node: rowNode,
	            oldValue: params.oldValue,
	            newValue: params.newValue,
	            value: params.newValue
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {
	        // if no '.', then it's not a deep value
	        var valuesAreSame;
	        if (!isFieldContainsDots) {
	            data[field] = newValue;
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fieldPieces = field.split('.');
	            var currentObject = data;
	            while (fieldPieces.length > 0 && currentObject) {
	                var fieldPiece = fieldPieces.shift();
	                if (fieldPieces.length === 0) {
	                    currentObject[fieldPiece] = newValue;
	                }
	                else {
	                    currentObject = currentObject[fieldPiece];
	                }
	            }
	        }
	        return !valuesAreSame;
	    };
	    ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {
	        var colId = column.getId();
	        // if inside the same turn, just return back the value we got last time
	        var valueFromCache = this.valueCache.getValue(rowNode, colId);
	        if (valueFromCache !== undefined) {
	            return valueFromCache;
	        }
	        var params = {
	            data: data,
	            node: rowNode,
	            column: column,
	            colDef: column.getColDef(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext(),
	            getValue: this.getValueCallback.bind(this, rowNode)
	        };
	        var result = this.expressionService.evaluate(valueGetter, params);
	        // if a turn is active, store the value in case the grid asks for it again
	        this.valueCache.setValue(rowNode, colId, result);
	        return result;
	    };
	    ValueService.prototype.getValueCallback = function (node, field) {
	        var otherColumn = this.columnController.getPrimaryColumn(field);
	        if (otherColumn) {
	            return this.getValue(otherColumn, node);
	        }
	        else {
	            return null;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ValueService.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], ValueService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ValueService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], ValueService.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueService.prototype, "init", null);
	    ValueService = __decorate([
	        context_1.Bean('valueService')
	    ], ValueService);
	    return ValueService;
	}());
	exports.ValueService = ValueService;


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var ValueCache = (function () {
	    function ValueCache() {
	        this.cacheVersion = 0;
	    }
	    ValueCache.prototype.init = function () {
	        this.active = this.gridOptionsWrapper.isValueCache();
	        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
	    };
	    ValueCache.prototype.onDataChanged = function () {
	        if (this.neverExpires) {
	            return;
	        }
	        this.expire();
	    };
	    ValueCache.prototype.expire = function () {
	        this.cacheVersion++;
	    };
	    ValueCache.prototype.setValue = function (rowNode, colId, value) {
	        if (this.active) {
	            if (rowNode.__cacheVersion !== this.cacheVersion) {
	                rowNode.__cacheVersion = this.cacheVersion;
	                rowNode.__cacheData = {};
	            }
	            rowNode.__cacheData[colId] = value;
	        }
	    };
	    ValueCache.prototype.getValue = function (rowNode, colId) {
	        var valueInCache = this.active
	            && rowNode.__cacheVersion === this.cacheVersion
	            && rowNode.__cacheData[colId] !== undefined;
	        if (valueInCache) {
	            return rowNode.__cacheData[colId];
	        }
	        else {
	            return undefined;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueCache.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueCache.prototype, "init", null);
	    ValueCache = __decorate([
	        context_1.Bean('valueCache')
	    ], ValueCache);
	    return ValueCache;
	}());
	exports.ValueCache = ValueCache;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridRow_1 = __webpack_require__(316);
	var GridCell = (function () {
	    function GridCell(gridCellDef) {
	        this.rowIndex = gridCellDef.rowIndex;
	        this.column = gridCellDef.column;
	        this.floating = utils_1.Utils.makeNull(gridCellDef.floating);
	    }
	    GridCell.prototype.getGridCellDef = function () {
	        return {
	            rowIndex: this.rowIndex,
	            column: this.column,
	            floating: this.floating
	        };
	    };
	    GridCell.prototype.getGridRow = function () {
	        return new gridRow_1.GridRow(this.rowIndex, this.floating);
	    };
	    GridCell.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating + ", column = " + (this.column ? this.column.getId() : null);
	    };
	    GridCell.prototype.createId = function () {
	        return this.rowIndex + "." + this.floating + "." + this.column.getId();
	    };
	    return GridCell;
	}());
	exports.GridCell = GridCell;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var gridCell_1 = __webpack_require__(315);
	var GridRow = (function () {
	    function GridRow(rowIndex, floating) {
	        this.rowIndex = rowIndex;
	        this.floating = utils_1.Utils.makeNull(floating);
	    }
	    GridRow.prototype.isFloatingTop = function () {
	        return this.floating === constants_1.Constants.PINNED_TOP;
	    };
	    GridRow.prototype.isFloatingBottom = function () {
	        return this.floating === constants_1.Constants.PINNED_BOTTOM;
	    };
	    GridRow.prototype.isNotFloating = function () {
	        return !this.isFloatingBottom() && !this.isFloatingTop();
	    };
	    GridRow.prototype.equals = function (otherSelection) {
	        return this.rowIndex === otherSelection.rowIndex
	            && this.floating === otherSelection.floating;
	    };
	    GridRow.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating;
	    };
	    GridRow.prototype.getGridCell = function (column) {
	        var gridCellDef = { rowIndex: this.rowIndex, floating: this.floating, column: column };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    // tests if this row selection is before the other row selection
	    GridRow.prototype.before = function (otherSelection) {
	        var otherFloating = otherSelection.floating;
	        switch (this.floating) {
	            case constants_1.Constants.PINNED_TOP:
	                // we we are floating top, and other isn't, then we are always before
	                if (otherFloating !== constants_1.Constants.PINNED_TOP) {
	                    return true;
	                }
	                break;
	            case constants_1.Constants.PINNED_BOTTOM:
	                // if we are floating bottom, and the other isn't, then we are never before
	                if (otherFloating !== constants_1.Constants.PINNED_BOTTOM) {
	                    return false;
	                }
	                break;
	            default:
	                // if we are not floating, but the other one is floating...
	                if (utils_1.Utils.exists(otherFloating)) {
	                    if (otherFloating === constants_1.Constants.PINNED_TOP) {
	                        // we are not floating, other is floating top, we are first
	                        return false;
	                    }
	                    else {
	                        // we are not floating, other is floating bottom, we are always first
	                        return true;
	                    }
	                }
	                break;
	        }
	        return this.rowIndex < otherSelection.rowIndex;
	    };
	    return GridRow;
	}());
	exports.GridRow = GridRow;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var beanStub_1 = __webpack_require__(318);
	var compIdSequence = new utils_1.NumberSequence();
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(template) {
	        var _this = _super.call(this) || this;
	        _this.childComponents = [];
	        _this.annotatedEventListeners = [];
	        _this.visible = true;
	        // unique id for this row component. this is used for getting a reference to the HTML dom.
	        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
	        // around as we create a new rowComp instance for the same row node).
	        _this.compId = compIdSequence.next();
	        if (template) {
	            _this.setTemplate(template);
	        }
	        return _this;
	    }
	    Component.prototype.getCompId = function () {
	        return this.compId;
	    };
	    Component.prototype.instantiate = function (context) {
	        this.instantiateRecurse(this.getGui(), context);
	    };
	    Component.prototype.instantiateRecurse = function (parentNode, context) {
	        var childCount = parentNode.childNodes ? parentNode.childNodes.length : 0;
	        for (var i = 0; i < childCount; i++) {
	            var childNode = parentNode.childNodes[i];
	            var newComponent = context.createComponent(childNode);
	            if (newComponent) {
	                this.swapComponentForNode(newComponent, parentNode, childNode);
	            }
	            else {
	                if (childNode.childNodes) {
	                    this.instantiateRecurse(childNode, context);
	                }
	            }
	        }
	    };
	    Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {
	        parentNode.replaceChild(newComponent.getGui(), childNode);
	        this.childComponents.push(newComponent);
	        this.swapInComponentForQuerySelectors(newComponent, childNode);
	    };
	    Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {
	        var thisProto = Object.getPrototypeOf(this);
	        var thisNoType = this;
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    if (thisNoType[querySelector.attributeName] === childNode) {
	                        thisNoType[querySelector.attributeName] = newComponent;
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	    };
	    Component.prototype.setTemplate = function (template) {
	        var eGui = utils_1.Utils.loadTemplate(template);
	        this.setTemplateFromElement(eGui);
	    };
	    Component.prototype.setTemplateFromElement = function (element) {
	        this.eGui = element;
	        this.eGui.__agComponent = this;
	        this.addAnnotatedEventListeners();
	        this.wireQuerySelectors();
	    };
	    Component.prototype.attributesSet = function () {
	    };
	    Component.prototype.wireQuerySelectors = function () {
	        var _this = this;
	        if (!this.eGui) {
	            return;
	        }
	        var thisProto = Object.getPrototypeOf(this);
	        var _loop_1 = function () {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                var thisNoType_1 = this_1;
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
	                    if (resultOfQuery) {
	                        var backingComponent = resultOfQuery.__agComponent;
	                        if (backingComponent) {
	                            thisNoType_1[querySelector.attributeName] = backingComponent;
	                        }
	                        else {
	                            thisNoType_1[querySelector.attributeName] = resultOfQuery;
	                        }
	                    }
	                    else {
	                        // put debug msg in here if query selector fails???
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        };
	        var this_1 = this;
	        while (thisProto != null) {
	            _loop_1();
	        }
	    };
	    Component.prototype.addAnnotatedEventListeners = function () {
	        var _this = this;
	        this.removeAnnotatedEventListeners();
	        if (!this.eGui) {
	            return;
	        }
	        var thisProto = Object.getPrototypeOf(this);
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].listenerMethods) {
	                if (!this.annotatedEventListeners) {
	                    this.annotatedEventListeners = [];
	                }
	                metaData[currentProtoName].listenerMethods.forEach(function (eventListener) {
	                    var listener = _this[eventListener.methodName].bind(_this);
	                    _this.eGui.addEventListener(eventListener.eventName, listener);
	                    _this.annotatedEventListeners.push({ eventName: eventListener.eventName, listener: listener });
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	    };
	    Component.prototype.removeAnnotatedEventListeners = function () {
	        var _this = this;
	        if (!this.annotatedEventListeners) {
	            return;
	        }
	        if (!this.eGui) {
	            return;
	        }
	        this.annotatedEventListeners.forEach(function (eventListener) {
	            _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);
	        });
	        this.annotatedEventListeners = null;
	    };
	    Component.prototype.getGui = function () {
	        return this.eGui;
	    };
	    // this method is for older code, that wants to provide the gui element,
	    // it is not intended for this to be in ag-Stack
	    Component.prototype.setGui = function (eGui) {
	        this.eGui = eGui;
	    };
	    Component.prototype.queryForHtmlElement = function (cssSelector) {
	        return this.eGui.querySelector(cssSelector);
	    };
	    Component.prototype.queryForHtmlInputElement = function (cssSelector) {
	        return this.eGui.querySelector(cssSelector);
	    };
	    Component.prototype.appendChild = function (newChild) {
	        if (utils_1.Utils.isNodeOrElement(newChild)) {
	            this.eGui.appendChild(newChild);
	        }
	        else {
	            var childComponent = newChild;
	            this.eGui.appendChild(childComponent.getGui());
	            this.childComponents.push(childComponent);
	        }
	    };
	    Component.prototype.addFeature = function (context, feature) {
	        context.wireBean(feature);
	        if (feature.destroy) {
	            this.addDestroyFunc(feature.destroy.bind(feature));
	        }
	    };
	    Component.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Component.prototype.setVisible = function (visible) {
	        if (visible !== this.visible) {
	            this.visible = visible;
	            utils_1.Utils.addOrRemoveCssClass(this.eGui, 'ag-hidden', !visible);
	            var event_1 = {
	                type: Component.EVENT_VISIBLE_CHANGED,
	                visible: this.visible
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {
	        utils_1.Utils.addOrRemoveCssClass(this.eGui, className, addOrRemove);
	    };
	    Component.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.childComponents.forEach(function (childComponent) { return childComponent.destroy(); });
	        this.childComponents.length = 0;
	        this.removeAnnotatedEventListeners();
	    };
	    Component.prototype.addGuiEventListener = function (event, listener) {
	        var _this = this;
	        this.getGui().addEventListener(event, listener);
	        this.addDestroyFunc(function () { return _this.getGui().removeEventListener(event, listener); });
	    };
	    Component.prototype.addCssClass = function (className) {
	        utils_1.Utils.addCssClass(this.getGui(), className);
	    };
	    Component.prototype.removeCssClass = function (className) {
	        utils_1.Utils.removeCssClass(this.getGui(), className);
	    };
	    Component.prototype.getAttribute = function (key) {
	        var eGui = this.getGui();
	        if (eGui) {
	            return eGui.getAttribute(key);
	        }
	        else {
	            return null;
	        }
	    };
	    Component.prototype.getRefElement = function (refName) {
	        return this.queryForHtmlElement('[ref="' + refName + '"]');
	    };
	    Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    return Component;
	}(beanStub_1.BeanStub));
	exports.Component = Component;


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var utils_1 = __webpack_require__(288);
	var BeanStub = (function () {
	    function BeanStub() {
	        this.destroyFunctions = [];
	        this.destroyed = false;
	    }
	    BeanStub.prototype.destroy = function () {
	        this.destroyFunctions.forEach(function (func) { return func(); });
	        this.destroyFunctions.length = 0;
	        this.destroyed = true;
	    };
	    BeanStub.prototype.addEventListener = function (eventType, listener) {
	        if (!this.localEventService) {
	            this.localEventService = new eventService_1.EventService();
	        }
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    BeanStub.prototype.removeEventListener = function (eventType, listener) {
	        if (this.localEventService) {
	            this.localEventService.removeEventListener(eventType, listener);
	        }
	    };
	    BeanStub.prototype.dispatchEventAsync = function (event) {
	        var _this = this;
	        setTimeout(function () { return _this.dispatchEvent(event); }, 0);
	    };
	    BeanStub.prototype.dispatchEvent = function (event) {
	        if (this.localEventService) {
	            this.localEventService.dispatchEvent(event);
	        }
	    };
	    BeanStub.prototype.addDestroyableEventListener = function (eElement, event, listener) {
	        if (this.destroyed) {
	            return;
	        }
	        if (eElement instanceof HTMLElement) {
	            utils_1._.addSafePassiveEventListener(eElement, event, listener);
	        }
	        else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
	            eElement.addEventListener(event, listener);
	        }
	        else {
	            eElement.addEventListener(event, listener);
	        }
	        this.destroyFunctions.push(function () {
	            if (eElement instanceof HTMLElement) {
	                eElement.removeEventListener(event, listener);
	            }
	            else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
	                eElement.removeEventListener(event, listener);
	            }
	            else {
	                eElement.removeEventListener(event, listener);
	            }
	        });
	    };
	    BeanStub.prototype.isAlive = function () {
	        return !this.destroyed;
	    };
	    BeanStub.prototype.addDestroyFunc = function (func) {
	        // if we are already destroyed, we execute the func now
	        if (this.isAlive()) {
	            this.destroyFunctions.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    return BeanStub;
	}());
	exports.BeanStub = BeanStub;


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var rowNode_1 = __webpack_require__(312);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var events_1 = __webpack_require__(291);
	var eventService_1 = __webpack_require__(285);
	var gridApi_1 = __webpack_require__(294);
	var columnController_1 = __webpack_require__(297);
	var CheckboxSelectionComponent = (function (_super) {
	    __extends(CheckboxSelectionComponent, _super);
	    function CheckboxSelectionComponent() {
	        return _super.call(this, "<span class=\"ag-selection-checkbox\"/>") || this;
	    }
	    CheckboxSelectionComponent.prototype.createAndAddIcons = function () {
	        this.eCheckedIcon = utils_1.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);
	        this.eUncheckedIcon = utils_1.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);
	        this.eIndeterminateIcon = utils_1.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);
	        var element = this.getGui();
	        element.appendChild(this.eCheckedIcon);
	        element.appendChild(this.eUncheckedIcon);
	        element.appendChild(this.eIndeterminateIcon);
	    };
	    CheckboxSelectionComponent.prototype.onSelectionChanged = function () {
	        var state = this.rowNode.isSelected();
	        utils_1.Utils.setVisible(this.eCheckedIcon, state === true);
	        utils_1.Utils.setVisible(this.eUncheckedIcon, state === false);
	        utils_1.Utils.setVisible(this.eIndeterminateIcon, typeof state !== 'boolean');
	    };
	    CheckboxSelectionComponent.prototype.onCheckedClicked = function () {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onIndeterminateClicked = function (event) {
	        var result = this.onUncheckedClicked(event);
	        if (result === 0) {
	            this.onCheckedClicked();
	        }
	    };
	    CheckboxSelectionComponent.prototype.init = function (params) {
	        this.rowNode = params.rowNode;
	        this.column = params.column;
	        this.visibleFunc = params.visibleFunc;
	        this.createAndAddIcons();
	        this.onSelectionChanged();
	        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
	        // would possibly get selected twice
	        this.addGuiEventListener('click', function (event) { return event.stopPropagation(); });
	        // likewise we don't want double click on this icon to open a group
	        this.addGuiEventListener('dblclick', function (event) { return event.stopPropagation(); });
	        this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
	        if (this.visibleFunc) {
	            this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
	            this.showOrHideSelect();
	        }
	    };
	    CheckboxSelectionComponent.prototype.showOrHideSelect = function () {
	        var params = this.createParams();
	        var visible = this.visibleFunc(params);
	        this.setVisible(visible);
	    };
	    CheckboxSelectionComponent.prototype.createParams = function () {
	        var params = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            column: this.column,
	            colDef: this.column.getColDef(),
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        return params;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CheckboxSelectionComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], CheckboxSelectionComponent.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], CheckboxSelectionComponent.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], CheckboxSelectionComponent.prototype, "columnApi", void 0);
	    return CheckboxSelectionComponent;
	}(component_1.Component));
	exports.CheckboxSelectionComponent = CheckboxSelectionComponent;


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var utils_1 = __webpack_require__(288);
	var gridCell_1 = __webpack_require__(315);
	var gridApi_1 = __webpack_require__(294);
	var cellComp_1 = __webpack_require__(311);
	var FocusedCellController = (function () {
	    function FocusedCellController() {
	    }
	    FocusedCellController.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));
	    };
	    FocusedCellController.prototype.clearFocusedCell = function () {
	        this.focusedCell = null;
	        this.onCellFocused(false);
	    };
	    FocusedCellController.prototype.getFocusedCell = function () {
	        return this.focusedCell;
	    };
	    // we check if the browser is focusing something, and if it is, and
	    // it's the cell we think is focused, then return the cell. so this
	    // methods returns the cell if a) we think it has focus and b) the
	    // browser thinks it has focus. this then returns nothing if we
	    // first focus a cell, then second click outside the grid, as then the
	    // grid cell will still be focused as far as the grid is concerned,
	    // however the browser focus will have moved somewhere else.
	    FocusedCellController.prototype.getFocusCellToUseAfterRefresh = function () {
	        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {
	            return null;
	        }
	        if (!this.focusedCell) {
	            return null;
	        }
	        var browserFocusedCell = this.getGridCellForDomElement(document.activeElement);
	        if (!browserFocusedCell) {
	            return null;
	        }
	        var gridFocusId = this.focusedCell.createId();
	        var browserFocusId = browserFocusedCell.createId();
	        if (gridFocusId === browserFocusId) {
	            return this.focusedCell;
	        }
	        else {
	            return null;
	        }
	    };
	    FocusedCellController.prototype.getGridCellForDomElement = function (eBrowserCell) {
	        var ePointer = eBrowserCell;
	        while (ePointer) {
	            var cellComp = this.gridOptionsWrapper.getDomData(ePointer, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (cellComp) {
	                return cellComp.getGridCell();
	            }
	            ePointer = ePointer.parentNode;
	        }
	        return null;
	    };
	    FocusedCellController.prototype.setFocusedCell = function (rowIndex, colKey, floating, forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        if (this.gridOptionsWrapper.isSuppressCellSelection()) {
	            return;
	        }
	        var column = utils_1.Utils.makeNull(this.columnController.getGridColumn(colKey));
	        this.focusedCell = new gridCell_1.GridCell({ rowIndex: rowIndex,
	            floating: utils_1.Utils.makeNull(floating),
	            column: column });
	        this.onCellFocused(forceBrowserFocus);
	    };
	    FocusedCellController.prototype.isCellFocused = function (gridCell) {
	        if (utils_1.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        return this.focusedCell.column === gridCell.column && this.isRowFocused(gridCell.rowIndex, gridCell.floating);
	    };
	    FocusedCellController.prototype.isRowNodeFocused = function (rowNode) {
	        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
	    };
	    FocusedCellController.prototype.isAnyCellFocused = function () {
	        return !!this.focusedCell;
	    };
	    FocusedCellController.prototype.isRowFocused = function (rowIndex, floating) {
	        if (utils_1.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        var floatingOrNull = utils_1.Utils.makeNull(floating);
	        return this.focusedCell.rowIndex === rowIndex && this.focusedCell.floating === floatingOrNull;
	    };
	    FocusedCellController.prototype.onCellFocused = function (forceBrowserFocus) {
	        var event = {
	            type: events_1.Events.EVENT_CELL_FOCUSED,
	            forceBrowserFocus: forceBrowserFocus,
	            rowIndex: null,
	            column: null,
	            floating: null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            rowPinned: null
	        };
	        if (this.focusedCell) {
	            event.rowIndex = this.focusedCell.rowIndex;
	            event.column = this.focusedCell.column;
	            event.rowPinned = this.focusedCell.floating;
	        }
	        this.eventService.dispatchEvent(event);
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FocusedCellController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FocusedCellController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FocusedCellController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], FocusedCellController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], FocusedCellController.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FocusedCellController.prototype, "init", null);
	    FocusedCellController = __decorate([
	        context_1.Bean('focusedCellController')
	    ], FocusedCellController);
	    return FocusedCellController;
	}());
	exports.FocusedCellController = FocusedCellController;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var ScrollVisibleService = (function () {
	    function ScrollVisibleService() {
	    }
	    ScrollVisibleService.prototype.setScrollsVisible = function (params) {
	        var atLeastOneDifferent = this.vBody !== params.vBody
	            || this.hBody !== params.hBody
	            || this.vPinnedLeft !== params.vPinnedLeft
	            || this.vPinnedRight !== params.vPinnedRight;
	        if (atLeastOneDifferent) {
	            this.vBody = params.vBody;
	            this.hBody = params.hBody;
	            this.vPinnedLeft = params.vPinnedLeft;
	            this.vPinnedRight = params.vPinnedRight;
	            var event_1 = {
	                type: events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    ScrollVisibleService.prototype.isVBodyShowing = function () {
	        return this.vBody;
	    };
	    ScrollVisibleService.prototype.isHBodyShowing = function () {
	        return this.hBody;
	    };
	    ScrollVisibleService.prototype.isVPinnedLeftShowing = function () {
	        return this.vPinnedLeft;
	    };
	    ScrollVisibleService.prototype.isVPinnedRightShowing = function () {
	        return this.vPinnedRight;
	    };
	    ScrollVisibleService.prototype.getPinnedLeftWidth = function () {
	        return this.columnController.getPinnedLeftContainerWidth();
	    };
	    ScrollVisibleService.prototype.getPinnedLeftWithScrollWidth = function () {
	        var result = this.getPinnedLeftWidth();
	        if (this.vPinnedLeft) {
	            result += utils_1.Utils.getScrollbarWidth();
	        }
	        return result;
	    };
	    ScrollVisibleService.prototype.getPinnedRightWidth = function () {
	        return this.columnController.getPinnedRightContainerWidth();
	    };
	    ScrollVisibleService.prototype.getPinnedRightWithScrollWidth = function () {
	        var result = this.getPinnedRightWidth();
	        if (this.vPinnedRight) {
	            result += utils_1.Utils.getScrollbarWidth();
	        }
	        return result;
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ScrollVisibleService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], ScrollVisibleService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ScrollVisibleService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ScrollVisibleService.prototype, "gridApi", void 0);
	    ScrollVisibleService = __decorate([
	        context_1.Bean('scrollVisibleService')
	    ], ScrollVisibleService);
	    return ScrollVisibleService;
	}());
	exports.ScrollVisibleService = ScrollVisibleService;


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	/**
	 * There are many instances of this component covering each of the areas a row can be entered
	 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
	 * elements, there is no template. All of the elements are part of the GridPanel.
	 */
	var RowContainerComponent = (function () {
	    function RowContainerComponent(params) {
	        this.childCount = 0;
	        this.rowTemplatesToAdd = [];
	        this.afterGuiAttachedCallbacks = [];
	        this.eContainer = params.eContainer;
	        this.eViewport = params.eViewport;
	        this.hideWhenNoChildren = params.hideWhenNoChildren;
	        this.body = params.body;
	    }
	    RowContainerComponent.prototype.postConstruct = function () {
	        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder() && !this.gridOptionsWrapper.isForPrint();
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.getRowElement = function (compId) {
	        return this.eContainer.querySelector("[comp-id=\"" + compId + "\"]");
	    };
	    RowContainerComponent.prototype.setHeight = function (height) {
	        this.eContainer.style.height = height + "px";
	        // can ask niall about this - was testing different ways to get the browser to display
	        // unlimited number of rows
	        // if (this.body) {
	        //     let eParent = this.eViewport;
	        //
	        //     let FILLER_HEIGHT = 1000000;
	        //
	        //     let fillerCount = 0;
	        //     let colors = ['#000020','#000040','#000060','#000080','#0000A0','#0000C0','#0000E0','#00F000','#00F020','#00F040','#00F060','#00F080','#00F0A0','#00F0C0','#00F0E0'];
	        //     _.removeAllChildren(eParent);
	        //     let pixelsToGo = height;
	        //     while (pixelsToGo > 0) {
	        //         fillerCount++;
	        //         let pixelsThisDiv = (pixelsToGo > FILLER_HEIGHT) ? FILLER_HEIGHT : pixelsToGo;
	        //         pixelsToGo -= FILLER_HEIGHT;
	        //         let eFiller = document.createElement('div');
	        //         eFiller.style.height = pixelsThisDiv + 'px';
	        //         eFiller.style.backgroundColor = colors[fillerCount%colors.length];
	        //         eFiller.innerHTML = '' + fillerCount;
	        //         eParent.appendChild(eFiller);
	        //     }
	        //     console.log(`fillerCount = ${fillerCount}`);
	        // }
	    };
	    RowContainerComponent.prototype.flushRowTemplates = function () {
	        // if doing dom order, then rowTemplates will be empty,
	        // or if no rows added since last time also empty.
	        if (this.rowTemplatesToAdd.length !== 0) {
	            var htmlToAdd = this.rowTemplatesToAdd.join('');
	            utils_1.Utils.appendHtml(this.eContainer, htmlToAdd);
	            this.rowTemplatesToAdd.length = 0;
	        }
	        // this only empty if no rows since last time, as when
	        // doing dom order, we still have callbacks to process
	        this.afterGuiAttachedCallbacks.forEach(function (func) { return func(); });
	        this.afterGuiAttachedCallbacks.length = 0;
	        this.lastPlacedElement = null;
	    };
	    RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {
	        if (this.domOrder) {
	            this.lastPlacedElement = utils_1.Utils.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
	        }
	        else {
	            this.rowTemplatesToAdd.push(rowTemplate);
	        }
	        this.afterGuiAttachedCallbacks.push(callback);
	        // it is important we put items in in order, so that when we open a row group,
	        // the new rows are inserted after the opened group, but before the rows below.
	        // that way, the rows below are over the new rows (as dom renders last in dom over
	        // items previous in dom), otherwise the child rows would cover the row below and
	        // that meant the user doesn't see the rows below slide away.
	        this.childCount++;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.ensureDomOrder = function (eRow) {
	        if (this.domOrder) {
	            utils_1.Utils.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
	            this.lastPlacedElement = eRow;
	        }
	    };
	    RowContainerComponent.prototype.removeRowElement = function (eRow) {
	        this.eContainer.removeChild(eRow);
	        this.childCount--;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.checkVisibility = function () {
	        if (!this.hideWhenNoChildren) {
	            return;
	        }
	        var eGui = this.eViewport ? this.eViewport : this.eContainer;
	        var visible = this.childCount > 0;
	        if (this.visible !== visible) {
	            this.visible = visible;
	            utils_1.Utils.setVisible(eGui, visible);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowContainerComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowContainerComponent.prototype, "postConstruct", null);
	    return RowContainerComponent;
	}());
	exports.RowContainerComponent = RowContainerComponent;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var beanStub_1 = __webpack_require__(318);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var gridPanel_1 = __webpack_require__(306);
	var scrollVisibleService_1 = __webpack_require__(321);
	var selectionController_1 = __webpack_require__(309);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var PaginationAutoPageSizeService = (function (_super) {
	    __extends(PaginationAutoPageSizeService, _super);
	    function PaginationAutoPageSizeService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PaginationAutoPageSizeService.prototype.notActive = function () {
	        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.postConstruct = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.checkPageSize = function () {
	        if (this.notActive()) {
	            return;
	        }
	        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        var bodyHeight = this.gridPanel.getBodyHeight();
	        if (this.scrollVisibleService.isHBodyShowing()) {
	            bodyHeight = bodyHeight - this.gridOptionsWrapper.getScrollbarWidth();
	        }
	        if (bodyHeight > 0) {
	            var newPageSize = Math.floor(bodyHeight / rowHeight);
	            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], PaginationAutoPageSizeService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationAutoPageSizeService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationAutoPageSizeService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], PaginationAutoPageSizeService.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationAutoPageSizeService.prototype, "postConstruct", null);
	    PaginationAutoPageSizeService = __decorate([
	        context_1.Bean('paginationAutoPageSizeService')
	    ], PaginationAutoPageSizeService);
	    return PaginationAutoPageSizeService;
	}(beanStub_1.BeanStub));
	exports.PaginationAutoPageSizeService = PaginationAutoPageSizeService;
	var PaginationProxy = (function (_super) {
	    __extends(PaginationProxy, _super);
	    function PaginationProxy() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.currentPage = 0;
	        _this.topRowIndex = 0;
	        _this.bottomRowIndex = 0;
	        _this.pixelOffset = 0;
	        return _this;
	    }
	    PaginationProxy.prototype.postConstruct = function () {
	        this.active = this.gridOptionsWrapper.isPagination();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));
	        this.onModelUpdated();
	    };
	    PaginationProxy.prototype.isLastRowFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {
	        this.setIndexesAndBounds();
	        var paginationChangedEvent = {
	            type: events_1.Events.EVENT_PAGINATION_CHANGED,
	            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
	            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
	            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
	            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(paginationChangedEvent);
	    };
	    PaginationProxy.prototype.goToPage = function (page) {
	        if (!this.active) {
	            return;
	        }
	        if (this.currentPage === page) {
	            return;
	        }
	        this.currentPage = page;
	        var event = {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            animate: false,
	            keepRenderedRows: false,
	            newData: false,
	            newPage: true,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.onModelUpdated(event);
	    };
	    PaginationProxy.prototype.getPixelOffset = function () {
	        return this.pixelOffset;
	    };
	    PaginationProxy.prototype.getRow = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {
	        return this.rowModel.getRowIndexAtPixel(pixel);
	    };
	    PaginationProxy.prototype.getCurrentPageHeight = function () {
	        if (utils_1._.missing(this.topRowBounds) || utils_1._.missing(this.bottomRowBounds)) {
	            return 0;
	        }
	        return this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop;
	    };
	    PaginationProxy.prototype.isRowPresent = function (rowNode) {
	        if (!this.rowModel.isRowPresent(rowNode)) {
	            return false;
	        }
	        var nodeIsInPage = rowNode.rowIndex >= this.topRowIndex && rowNode.rowIndex <= this.bottomRowIndex;
	        return nodeIsInPage;
	    };
	    PaginationProxy.prototype.isEmpty = function () {
	        return this.rowModel.isEmpty();
	    };
	    PaginationProxy.prototype.isRowsToRender = function () {
	        return this.rowModel.isRowsToRender();
	    };
	    PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
	    };
	    PaginationProxy.prototype.forEachNode = function (callback) {
	        return this.rowModel.forEachNode(callback);
	    };
	    PaginationProxy.prototype.getType = function () {
	        return this.rowModel.getType();
	    };
	    PaginationProxy.prototype.getRowBounds = function (index) {
	        return this.rowModel.getRowBounds(index);
	    };
	    PaginationProxy.prototype.getPageFirstRow = function () {
	        return this.pageSize * this.currentPage;
	    };
	    PaginationProxy.prototype.getPageLastRow = function () {
	        var totalLastRow = (this.pageSize * (this.currentPage + 1)) - 1;
	        var pageLastRow = this.rowModel.getPageLastRow();
	        if (pageLastRow > totalLastRow) {
	            return totalLastRow;
	        }
	        else {
	            return pageLastRow;
	        }
	    };
	    PaginationProxy.prototype.getRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    PaginationProxy.prototype.goToPageWithIndex = function (index) {
	        if (!this.active) {
	            return;
	        }
	        var pageNumber = Math.floor(index / this.pageSize);
	        this.goToPage(pageNumber);
	    };
	    PaginationProxy.prototype.getTotalRowCount = function () {
	        return this.rowModel.getPageLastRow() + 1;
	    };
	    PaginationProxy.prototype.isLastPageFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.getCurrentPage = function () {
	        return this.currentPage;
	    };
	    PaginationProxy.prototype.goToNextPage = function () {
	        this.goToPage(this.currentPage + 1);
	    };
	    PaginationProxy.prototype.goToPreviousPage = function () {
	        this.goToPage(this.currentPage - 1);
	    };
	    PaginationProxy.prototype.goToFirstPage = function () {
	        this.goToPage(0);
	    };
	    PaginationProxy.prototype.goToLastPage = function () {
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var lastPage = Math.floor(rowCount / this.pageSize);
	        this.goToPage(lastPage);
	    };
	    PaginationProxy.prototype.getPageSize = function () {
	        return this.pageSize;
	    };
	    PaginationProxy.prototype.getTotalPages = function () {
	        return this.totalPages;
	    };
	    PaginationProxy.prototype.setPageSize = function () {
	        // show put this into super class
	        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
	        if (!(this.pageSize >= 1)) {
	            this.pageSize = 100;
	        }
	    };
	    PaginationProxy.prototype.setIndexesAndBounds = function () {
	        if (this.active) {
	            this.setPageSize();
	            var totalRowCount = this.getTotalRowCount();
	            this.totalPages = Math.floor((totalRowCount - 1) / this.pageSize) + 1;
	            if (this.currentPage >= this.totalPages) {
	                this.currentPage = this.totalPages - 1;
	            }
	            if (!utils_1._.isNumeric(this.currentPage) || this.currentPage < 0) {
	                this.currentPage = 0;
	            }
	            this.topRowIndex = this.pageSize * this.currentPage;
	            this.bottomRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;
	            var maxRowAllowed = this.rowModel.getPageLastRow();
	            if (this.bottomRowIndex > maxRowAllowed) {
	                this.bottomRowIndex = maxRowAllowed;
	            }
	        }
	        else {
	            this.pageSize = this.rowModel.getPageLastRow() + 1;
	            this.totalPages = 1;
	            this.currentPage = 0;
	            this.topRowIndex = 0;
	            this.bottomRowIndex = this.rowModel.getPageLastRow();
	        }
	        this.topRowBounds = this.rowModel.getRowBounds(this.topRowIndex);
	        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomRowIndex);
	        this.pixelOffset = utils_1._.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;
	    };
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], PaginationProxy.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], PaginationProxy.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationProxy.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationProxy.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], PaginationProxy.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], PaginationProxy.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], PaginationProxy.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationProxy.prototype, "postConstruct", null);
	    PaginationProxy = __decorate([
	        context_1.Bean('paginationProxy')
	    ], PaginationProxy);
	    return PaginationProxy;
	}(beanStub_1.BeanStub));
	exports.PaginationProxy = PaginationProxy;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var PopupEditorWrapper = (function (_super) {
	    __extends(PopupEditorWrapper, _super);
	    function PopupEditorWrapper(cellEditor) {
	        var _this = _super.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;
	        _this.getGuiCalledOnChild = false;
	        _this.cellEditor = cellEditor;
	        return _this;
	    }
	    PopupEditorWrapper.prototype.onKeyDown = function (event) {
	        this.params.onKeyDown(event);
	    };
	    PopupEditorWrapper.prototype.getGui = function () {
	        // we call getGui() on child here (rather than in the constructor)
	        // as we should wait for 'init' to be called on child first.
	        if (!this.getGuiCalledOnChild) {
	            this.appendChild(this.cellEditor.getGui());
	            this.getGuiCalledOnChild = true;
	        }
	        return _super.prototype.getGui.call(this);
	    };
	    PopupEditorWrapper.prototype.init = function (params) {
	        var _this = this;
	        this.params = params;
	        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
	        this.addDestroyFunc(function () {
	            if (_this.cellEditor.destroy) {
	                _this.cellEditor.destroy();
	            }
	        });
	        this.addDestroyableEventListener(
	        // this needs to be 'super' and not 'this' as if we call 'this',
	        // it ends up called 'getGui()' on the child before 'init' was called,
	        // which is not good
	        _super.prototype.getGui.call(this), 'keydown', this.onKeyDown.bind(this));
	    };
	    PopupEditorWrapper.prototype.afterGuiAttached = function () {
	        if (this.cellEditor.afterGuiAttached) {
	            this.cellEditor.afterGuiAttached();
	        }
	    };
	    PopupEditorWrapper.prototype.getValue = function () {
	        return this.cellEditor.getValue();
	    };
	    PopupEditorWrapper.prototype.isPopup = function () {
	        return true;
	    };
	    PopupEditorWrapper.prototype.isCancelBeforeStart = function () {
	        if (this.cellEditor.isCancelBeforeStart) {
	            return this.cellEditor.isCancelBeforeStart();
	        }
	    };
	    PopupEditorWrapper.prototype.isCancelAfterEnd = function () {
	        if (this.cellEditor.isCancelAfterEnd) {
	            return this.cellEditor.isCancelAfterEnd();
	        }
	    };
	    PopupEditorWrapper.prototype.focusIn = function () {
	        if (this.cellEditor.focusIn) {
	            this.cellEditor.focusIn();
	        }
	    };
	    PopupEditorWrapper.prototype.focusOut = function () {
	        if (this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PopupEditorWrapper.prototype, "gridOptionsWrapper", void 0);
	    return PopupEditorWrapper;
	}(component_1.Component));
	exports.PopupEditorWrapper = PopupEditorWrapper;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var gridPanel_1 = __webpack_require__(306);
	var eventService_1 = __webpack_require__(285);
	var logger_1 = __webpack_require__(286);
	var events_1 = __webpack_require__(291);
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var context_3 = __webpack_require__(287);
	var context_4 = __webpack_require__(287);
	var counter = 0;
	var AlignedGridsService = (function () {
	    function AlignedGridsService() {
	        this.instanceId = counter++;
	        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
	        // while processing a master event) we mark this if consuming an event, and if we are, then
	        // we don't fire back any events.
	        this.consuming = false;
	    }
	    AlignedGridsService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('AlignedGridsService');
	    };
	    AlignedGridsService.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
	    };
	    // common logic across all the fire methods
	    AlignedGridsService.prototype.fireEvent = function (callback) {
	        // if we are already consuming, then we are acting on an event from a master,
	        // so we don't cause a cyclic firing of events
	        if (this.consuming) {
	            return;
	        }
	        // iterate through the aligned grids, and pass each aligned grid service to the callback
	        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
	        if (otherGrids) {
	            otherGrids.forEach(function (otherGridOptions) {
	                if (otherGridOptions.api) {
	                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();
	                    callback(alignedGridService);
	                }
	            });
	        }
	    };
	    // common logic across all consume methods. very little common logic, however extracting
	    // guarantees consistency across the methods.
	    AlignedGridsService.prototype.onEvent = function (callback) {
	        this.consuming = true;
	        callback();
	        this.consuming = false;
	    };
	    AlignedGridsService.prototype.fireColumnEvent = function (event) {
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onColumnEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.fireScrollEvent = function (event) {
	        if (event.direction !== 'horizontal') {
	            return;
	        }
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onScrollEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.onScrollEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            _this.gridPanel.setHorizontalScrollPosition(event.left);
	        });
	    };
	    AlignedGridsService.prototype.getMasterColumns = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column);
	            });
	        }
	        else if (event.column) {
	            result.push(event.column);
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.getColumnIds = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column.getColId());
	            });
	        }
	        else if (event.columns) {
	            result.push(event.column.getColId());
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.onColumnEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            switch (event.type) {
	                case events_1.Events.EVENT_COLUMN_MOVED:
	                case events_1.Events.EVENT_COLUMN_VISIBLE:
	                case events_1.Events.EVENT_COLUMN_PINNED:
	                case events_1.Events.EVENT_COLUMN_RESIZED:
	                    var colEvent = event;
	                    _this.processColumnEvent(colEvent);
	                    break;
	                case events_1.Events.EVENT_COLUMN_GROUP_OPENED:
	                    var groupOpenedEvent = event;
	                    _this.processGroupOpenedEvent(groupOpenedEvent);
	                    break;
	                case events_1.Events.EVENT_COLUMN_PIVOT_CHANGED:
	                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the
	                    // grids will have columns created based on the row data of the grid.
	                    console.warn('ag-Grid: pivoting is not supported with aligned grids. ' +
	                        'You can only use one of these features at a time in a grid.');
	                    break;
	            }
	        });
	    };
	    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {
	        // likewise for column group
	        var masterColumnGroup = groupOpenedEvent.columnGroup;
	        var otherColumnGroup;
	        if (masterColumnGroup) {
	            var groupId = masterColumnGroup.getGroupId();
	            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
	        }
	        if (masterColumnGroup && !otherColumnGroup) {
	            return;
	        }
	        this.logger.log('onColumnEvent-> processing ' + event + ' expanded = ' + masterColumnGroup.isExpanded());
	        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded());
	    };
	    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {
	        var _this = this;
	        // the column in the event is from the master grid. need to
	        // look up the equivalent from this (other) grid
	        var masterColumn = colEvent.column;
	        var otherColumn;
	        if (masterColumn) {
	            otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
	        }
	        // if event was with respect to a master column, that is not present in this
	        // grid, then we ignore the event
	        if (masterColumn && !otherColumn) {
	            return;
	        }
	        // in time, all the methods below should use the column ids, it's a more generic way
	        // of handling columns, and also allows for single or multi column events
	        var columnIds = this.getColumnIds(colEvent);
	        var masterColumns = this.getMasterColumns(colEvent);
	        switch (colEvent.type) {
	            case events_1.Events.EVENT_COLUMN_MOVED:
	                var movedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' toIndex = ' + movedEvent.toIndex);
	                this.columnController.moveColumns(columnIds, movedEvent.toIndex);
	                break;
	            case events_1.Events.EVENT_COLUMN_VISIBLE:
	                var visibleEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' visible = ' + visibleEvent.visible);
	                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible);
	                break;
	            case events_1.Events.EVENT_COLUMN_PINNED:
	                var pinnedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' pinned = ' + pinnedEvent.pinned);
	                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned);
	                break;
	            case events_1.Events.EVENT_COLUMN_RESIZED:
	                var resizedEvent_1 = colEvent;
	                masterColumns.forEach(function (masterColumn) {
	                    _this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' actualWidth = ' + masterColumn.getActualWidth());
	                    _this.columnController.setColumnWidth(masterColumn.getColId(), masterColumn.getActualWidth(), resizedEvent_1.finished);
	                });
	                break;
	        }
	    };
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AlignedGridsService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], AlignedGridsService.prototype, "columnController", void 0);
	    __decorate([
	        context_3.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AlignedGridsService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], AlignedGridsService.prototype, "eventService", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "init", null);
	    AlignedGridsService = __decorate([
	        context_1.Bean('alignedGridsService')
	    ], AlignedGridsService);
	    return AlignedGridsService;
	}());
	exports.AlignedGridsService = AlignedGridsService;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var rowNode_1 = __webpack_require__(312);
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var context_2 = __webpack_require__(287);
	var events_1 = __webpack_require__(291);
	var context_3 = __webpack_require__(287);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var PinnedRowModel = (function () {
	    function PinnedRowModel() {
	    }
	    PinnedRowModel.prototype.init = function () {
	        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
	        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
	    };
	    PinnedRowModel.prototype.isEmpty = function (floating) {
	        var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        return utils_1.Utils.missingOrEmpty(rows);
	    };
	    PinnedRowModel.prototype.isRowsToRender = function (floating) {
	        return !this.isEmpty(floating);
	    };
	    PinnedRowModel.prototype.getRowAtPixel = function (pixel, floating) {
	        var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        if (utils_1.Utils.missingOrEmpty(rows)) {
	            return 0; // this should never happen, just in case, 0 is graceful failure
	        }
	        for (var i = 0; i < rows.length; i++) {
	            var rowNode = rows[i];
	            var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
	            // only need to range check against the top pixel, as we are going through the list
	            // in order, first row to hit the pixel wins
	            if (rowTopPixel >= pixel) {
	                return i;
	            }
	        }
	        return rows.length - 1;
	    };
	    PinnedRowModel.prototype.setPinnedTopRowData = function (rowData) {
	        this.pinnedTopRows = this.createNodesFromData(rowData, true);
	        var event = {
	            type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.setPinnedBottomRowData = function (rowData) {
	        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
	        var event = {
	            type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.createNodesFromData = function (allData, isTop) {
	        var _this = this;
	        var rowNodes = [];
	        if (allData) {
	            var nextRowTop_1 = 0;
	            allData.forEach(function (dataItem, index) {
	                var rowNode = new rowNode_1.RowNode();
	                _this.context.wireBean(rowNode);
	                rowNode.data = dataItem;
	                rowNode.rowPinned = isTop ? constants_1.Constants.PINNED_TOP : constants_1.Constants.PINNED_BOTTOM;
	                rowNode.setRowTop(nextRowTop_1);
	                rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode));
	                rowNode.setRowIndex(index);
	                nextRowTop_1 += rowNode.rowHeight;
	                rowNodes.push(rowNode);
	            });
	        }
	        return rowNodes;
	    };
	    PinnedRowModel.prototype.getPinnedTopRowData = function () {
	        return this.pinnedTopRows;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowData = function () {
	        return this.pinnedBottomRows;
	    };
	    PinnedRowModel.prototype.getPinnedTopTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedTopRows);
	    };
	    PinnedRowModel.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedTopRows[index];
	    };
	    PinnedRowModel.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedBottomRows[index];
	    };
	    PinnedRowModel.prototype.forEachPinnedTopRow = function (callback) {
	        if (utils_1.Utils.missingOrEmpty(this.pinnedTopRows)) {
	            return;
	        }
	        this.pinnedTopRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.forEachPinnedBottomRow = function (callback) {
	        if (utils_1.Utils.missingOrEmpty(this.pinnedBottomRows)) {
	            return;
	        }
	        this.pinnedBottomRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.getPinnedBottomTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedBottomRows);
	    };
	    PinnedRowModel.prototype.getTotalHeight = function (rowNodes) {
	        if (!rowNodes || rowNodes.length === 0) {
	            return 0;
	        }
	        else {
	            var lastNode = rowNodes[rowNodes.length - 1];
	            return lastNode.rowTop + lastNode.rowHeight;
	        }
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PinnedRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PinnedRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], PinnedRowModel.prototype, "context", void 0);
	    __decorate([
	        context_2.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], PinnedRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_2.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], PinnedRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_3.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PinnedRowModel.prototype, "init", null);
	    PinnedRowModel = __decorate([
	        context_1.Bean('pinnedRowModel')
	    ], PinnedRowModel);
	    return PinnedRowModel;
	}());
	exports.PinnedRowModel = PinnedRowModel;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridPanel_1 = __webpack_require__(306);
	var linkedList_1 = __webpack_require__(328);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var AnimationFrameService = (function () {
	    function AnimationFrameService() {
	        this.p1Tasks = new linkedList_1.LinkedList();
	        this.p2Tasks = new linkedList_1.LinkedList();
	        this.ticking = false;
	    }
	    AnimationFrameService.prototype.init = function () {
	        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
	    };
	    // this method is for our ag-Grid sanity only - if animation frames are turned off,
	    // then no place in the code should be looking to add any work to be done in animation
	    // frames. this stops bugs - where some code is asking for a frame to be executed
	    // when it should not.
	    AnimationFrameService.prototype.verifyAnimationFrameOn = function (methodName) {
	        if (this.useAnimationFrame === false) {
	            console.warn("ag-Grid: AnimationFrameService." + methodName + " called but animation frames are off");
	        }
	    };
	    AnimationFrameService.prototype.addP1Task = function (task) {
	        this.verifyAnimationFrameOn('addP1Task');
	        this.p1Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.addP2Task = function (task) {
	        this.verifyAnimationFrameOn('addP2Task');
	        this.p2Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.executeFrame = function (millis) {
	        this.verifyAnimationFrameOn('executeFrame');
	        var frameStart = new Date().getTime();
	        var duration = (new Date().getTime()) - frameStart;
	        var gridPanelNeedsAFrame = true;
	        // 16ms is 60 fps
	        var noMaxMillis = millis <= 0;
	        while (noMaxMillis || duration < millis) {
	            if (gridPanelNeedsAFrame) {
	                gridPanelNeedsAFrame = this.gridPanel.executeFrame();
	            }
	            else if (!this.p1Tasks.isEmpty()) {
	                var task = this.p1Tasks.remove();
	                task();
	            }
	            else if (!this.p2Tasks.isEmpty()) {
	                var task = this.p2Tasks.remove();
	                task();
	            }
	            else {
	                break;
	            }
	            duration = (new Date().getTime()) - frameStart;
	        }
	        if (gridPanelNeedsAFrame || !this.p1Tasks.isEmpty() || !this.p2Tasks.isEmpty()) {
	            this.requestFrame();
	        }
	        else {
	            this.ticking = false;
	        }
	    };
	    AnimationFrameService.prototype.flushAllFrames = function () {
	        if (!this.useAnimationFrame) {
	            return;
	        }
	        this.executeFrame(-1);
	    };
	    AnimationFrameService.prototype.schedule = function () {
	        if (!this.useAnimationFrame) {
	            return;
	        }
	        if (!this.ticking) {
	            this.ticking = true;
	            this.requestFrame();
	        }
	    };
	    AnimationFrameService.prototype.requestFrame = function () {
	        // check for the existence of requestAnimationFrame, and if
	        // it's missing, then we polyfill it with setTimeout()
	        var callback = this.executeFrame.bind(this, 60);
	        if (window.requestAnimationFrame) {
	            window.requestAnimationFrame(callback);
	        }
	        else if (window.webkitRequestAnimationFrame) {
	            window.webkitRequestAnimationFrame(callback);
	        }
	        else {
	            setTimeout(callback, 0);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AnimationFrameService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AnimationFrameService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AnimationFrameService.prototype, "init", null);
	    AnimationFrameService = __decorate([
	        context_1.Bean('animationFrameService')
	    ], AnimationFrameService);
	    return AnimationFrameService;
	}());
	exports.AnimationFrameService = AnimationFrameService;


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var LinkedList = (function () {
	    function LinkedList() {
	        this.first = null;
	        this.last = null;
	    }
	    LinkedList.prototype.add = function (item) {
	        var entry = {
	            item: item,
	            next: null
	        };
	        if (this.last) {
	            this.last.next = entry;
	        }
	        else {
	            this.first = entry;
	        }
	        this.last = entry;
	    };
	    LinkedList.prototype.remove = function () {
	        var result = this.first;
	        if (result) {
	            this.first = result.next;
	            if (!this.first) {
	                this.last = null;
	            }
	        }
	        return result.item;
	    };
	    LinkedList.prototype.isEmpty = function () {
	        return !this.first;
	    };
	    return LinkedList;
	}());
	exports.LinkedList = LinkedList;
	var LinkedListItem = (function () {
	    function LinkedListItem() {
	    }
	    return LinkedListItem;
	}());


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var cellComp_1 = __webpack_require__(311);
	var rowNode_1 = __webpack_require__(312);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var column_1 = __webpack_require__(299);
	var events_1 = __webpack_require__(291);
	var context_1 = __webpack_require__(287);
	var component_1 = __webpack_require__(317);
	var componentAnnotations_1 = __webpack_require__(330);
	var LoadingCellRenderer = (function (_super) {
	    __extends(LoadingCellRenderer, _super);
	    function LoadingCellRenderer() {
	        return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
	    }
	    LoadingCellRenderer.prototype.init = function (params) {
	        var eLoadingIcon = utils_1._.createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);
	        this.eLoadingIcon.appendChild(eLoadingIcon);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');
	    };
	    LoadingCellRenderer.prototype.refresh = function (params) {
	        return false;
	    };
	    LoadingCellRenderer.TEMPLATE = "<div class=\"ag-stub-cell\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], LoadingCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLoadingIcon'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLoadingText'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingText", void 0);
	    return LoadingCellRenderer;
	}(component_1.Component));
	exports.LoadingCellRenderer = LoadingCellRenderer;
	var RowComp = (function (_super) {
	    __extends(RowComp, _super);
	    function RowComp(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode, beans, animateIn, useAnimationFrameForCreate) {
	        var _this = _super.call(this) || this;
	        _this.eAllRowContainers = [];
	        _this.active = true;
	        _this.columnRefreshPending = false;
	        _this.cellComps = {};
	        // for animations, there are bits we want done in the next VM turn, to all DOM to update first.
	        // instead of each row doing a setTimeout(func,0), we put the functions here and the rowRenderer
	        // executes them all in one timeout
	        _this.createSecondPassFuncs = [];
	        // these get called before the row is destroyed - they set up the DOM for the remove animation (ie they
	        // set the DOM up for the animation), then the delayedDestroyFunctions get called when the animation is
	        // complete (ie removes from the dom).
	        _this.removeFirstPassFuncs = [];
	        // for animations, these functions get called 400ms after the row is cleared, called by the rowRenderer
	        // so each row isn't setting up it's own timeout
	        _this.removeSecondPassFuncs = [];
	        _this.initialised = false;
	        _this.parentScope = parentScope;
	        _this.beans = beans;
	        _this.bodyContainerComp = bodyContainerComp;
	        _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
	        _this.pinnedRightContainerComp = pinnedRightContainerComp;
	        _this.fullWidthContainerComp = fullWidthContainerComp;
	        _this.rowNode = rowNode;
	        _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
	        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
	        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
	        _this.setAnimateFlags(animateIn);
	        return _this;
	    }
	    RowComp.prototype.init = function () {
	        var _this = this;
	        this.rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        this.scope = this.createChildScopeOrNull(this.rowNode.data);
	        this.setupRowContainers();
	        this.addListeners();
	        if (this.slideRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.onTopChanged();
	            });
	        }
	        if (this.fadeRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.eAllRowContainers.forEach(function (eRow) { return utils_1._.removeCssClass(eRow, 'ag-opacity-zero'); });
	            });
	        }
	        this.executeProcessRowPostCreateFunc();
	    };
	    RowComp.prototype.createTemplate = function (contents, extraCssClass) {
	        if (extraCssClass === void 0) { extraCssClass = null; }
	        var templateParts = [];
	        var rowHeight = this.rowNode.rowHeight;
	        var rowClasses = this.getInitialRowClasses(extraCssClass).join(' ');
	        var rowId = this.rowNode.id;
	        var userRowStyles = this.preProcessStylesFromGridOptions();
	        var businessKey = this.getRowBusinessKey();
	        var rowTopStyle = this.getInitialRowTopStyle();
	        templateParts.push("<div");
	        templateParts.push(" role=\"row\"");
	        templateParts.push(" row-index=\"" + this.rowNode.getRowIndexString() + "\"");
	        templateParts.push(rowId ? " row-id=\"" + rowId + "\"" : "");
	        templateParts.push(businessKey ? " row-business-key=\"" + businessKey + "\"" : "");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\"");
	        templateParts.push(" class=\"" + rowClasses + "\"");
	        templateParts.push(" style=\"height: " + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + "\">");
	        // add in the template for the cells
	        templateParts.push(contents);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    RowComp.prototype.getCellForCol = function (column) {
	        var cellComp = this.cellComps[column.getColId()];
	        if (cellComp) {
	            return cellComp.getGui();
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.afterFlush = function () {
	        if (!this.initialised) {
	            this.initialised = true;
	            this.executeProcessRowPostCreateFunc();
	        }
	    };
	    RowComp.prototype.executeProcessRowPostCreateFunc = function () {
	        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
	        if (func) {
	            var params = {
	                eRow: this.eBodyRow,
	                ePinnedLeftRow: this.ePinnedLeftRow,
	                ePinnedRightRow: this.ePinnedRightRow,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                rowIndex: this.rowNode.rowIndex,
	                addRenderedRowListener: this.addEventListener.bind(this),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	                context: this.beans.gridOptionsWrapper.getContext()
	            };
	            func(params);
	        }
	    };
	    RowComp.prototype.getInitialRowTopStyle = function () {
	        var rowTopStyle = '';
	        var setRowTop = !this.beans.forPrint && !this.beans.gridOptionsWrapper.isAutoHeight();
	        if (setRowTop) {
	            // if sliding in, we take the old row top. otherwise we just set the current row top.
	            var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
	            var pixelsWithOffset = this.applyPixelOffset(pixels);
	            // if not setting row top, then below is empty string
	            rowTopStyle = "top: " + pixelsWithOffset + "px; ";
	        }
	        return rowTopStyle;
	    };
	    RowComp.prototype.getRowBusinessKey = function () {
	        if (typeof this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc() === 'function') {
	            var businessKey = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.rowNode);
	            return businessKey;
	        }
	    };
	    RowComp.prototype.lazyCreateCells = function (cols, eRow) {
	        if (this.active) {
	            var cellTemplatesAndComps = this.createCells(cols);
	            eRow.innerHTML = cellTemplatesAndComps.template;
	            this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	        }
	    };
	    RowComp.prototype.createRowContainer = function (rowContainerComp, cols, callback) {
	        var _this = this;
	        var cellTemplatesAndComps;
	        if (this.useAnimationFrameForCreate) {
	            cellTemplatesAndComps = { cellComps: [], template: '' };
	        }
	        else {
	            cellTemplatesAndComps = this.createCells(cols);
	        }
	        var rowTemplate = this.createTemplate(cellTemplatesAndComps.template);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            _this.afterRowAttached(rowContainerComp, eRow);
	            callback(eRow);
	            if (_this.useAnimationFrameForCreate) {
	                _this.beans.taskQueue.addP1Task(_this.lazyCreateCells.bind(_this, cols, eRow));
	            }
	            else {
	                _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	            }
	        });
	    };
	    RowComp.prototype.createChildScopeOrNull = function (data) {
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var newChildScope = this.parentScope.$new();
	            newChildScope.data = data;
	            newChildScope.rowNode = this.rowNode;
	            newChildScope.context = this.beans.gridOptionsWrapper.getContext();
	            return newChildScope;
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.setupRowContainers = function () {
	        var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
	        var isFullWidthCell = isFullWidthCellFunc ? isFullWidthCellFunc(this.rowNode) : false;
	        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
	        var isGroupSpanningRow = this.rowNode.group && this.beans.gridOptionsWrapper.isGroupUseEntireRow();
	        if (this.rowNode.stub) {
	            this.createFullWidthRows(RowComp.LOADING_CELL_RENDERER);
	        }
	        else if (isDetailCell) {
	            this.createFullWidthRows(RowComp.DETAIL_CELL_RENDERER);
	        }
	        else if (isFullWidthCell) {
	            this.createFullWidthRows(RowComp.FULL_WIDTH_CELL_RENDERER);
	        }
	        else if (isGroupSpanningRow) {
	            this.createFullWidthRows(RowComp.GROUP_ROW_RENDERER);
	        }
	        else {
	            this.setupNormalRowContainers();
	        }
	    };
	    RowComp.prototype.setupNormalRowContainers = function () {
	        var _this = this;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        this.createRowContainer(this.bodyContainerComp, centerCols, function (eRow) { return _this.eBodyRow = eRow; });
	        if (!this.beans.forPrint) {
	            var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	            var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	            this.createRowContainer(this.pinnedRightContainerComp, rightCols, function (eRow) { return _this.ePinnedRightRow = eRow; });
	            this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function (eRow) { return _this.ePinnedLeftRow = eRow; });
	        }
	    };
	    RowComp.prototype.createFullWidthRows = function (type) {
	        var _this = this;
	        this.fullWidthRow = true;
	        this.fullWidthRowEmbedded = this.beans.gridOptionsWrapper.isEmbedFullWidthRows();
	        if (this.fullWidthRowEmbedded) {
	            this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, function (eRow) {
	                _this.eFullWidthRowBody = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentBody = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedLeftContainerComp, column_1.Column.PINNED_LEFT, 'ag-cell-last-left-pinned', type, function (eRow) {
	                _this.eFullWidthRowLeft = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentLeft = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedRightContainerComp, column_1.Column.PINNED_RIGHT, 'ag-cell-first-right-pinned', type, function (eRow) {
	                _this.eFullWidthRowRight = eRow;
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponentRight = cellRenderer;
	            });
	        }
	        else {
	            // otherwise we add to the fullWidth container as normal
	            // let previousFullWidth = ensureDomOrder ? this.lastPlacedElements.eFullWidth : null;
	            this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, function (eRow) {
	                _this.eFullWidthRow = eRow;
	                // and fake the mouse wheel for the fullWidth container
	                if (!_this.beans.forPrint) {
	                    _this.addMouseWheelListenerToFullWidthRow();
	                }
	            }, function (cellRenderer) {
	                _this.fullWidthRowComponent = cellRenderer;
	            });
	        }
	    };
	    RowComp.prototype.addMouseWheelListenerToFullWidthRow = function () {
	        var mouseWheelListener = this.beans.gridPanel.genericMouseWheelListener.bind(this.beans.gridPanel);
	        // IE9, Chrome, Safari, Opera
	        this.addDestroyableEventListener(this.eFullWidthRow, 'mousewheel', mouseWheelListener);
	        // Firefox
	        this.addDestroyableEventListener(this.eFullWidthRow, 'DOMMouseScroll', mouseWheelListener);
	    };
	    RowComp.prototype.setAnimateFlags = function (animateIn) {
	        if (animateIn) {
	            var oldRowTopExists = utils_1._.exists(this.rowNode.oldRowTop);
	            // if the row had a previous position, we slide it in (animate row top)
	            this.slideRowIn = oldRowTopExists;
	            // if the row had no previous position, we fade it in (animate
	            this.fadeRowIn = !oldRowTopExists;
	        }
	        else {
	            this.slideRowIn = false;
	            this.fadeRowIn = false;
	        }
	    };
	    RowComp.prototype.isEditing = function () {
	        return false;
	    };
	    RowComp.prototype.stopRowEditing = function (cancel) {
	        this.stopEditing(cancel);
	    };
	    RowComp.prototype.isFullWidth = function () {
	        return this.fullWidthRow;
	    };
	    RowComp.prototype.addListeners = function () {
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.onExpandedChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
	        var eventService = this.beans.eventService;
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    // when grid columns change, then all cells should be cleaned out,
	    // as the new columns could have same id as the previous columns and may conflict
	    RowComp.prototype.onGridColumnsChanged = function () {
	        var allRenderedCellIds = Object.keys(this.cellComps);
	        this.removeRenderedCells(allRenderedCellIds);
	    };
	    RowComp.prototype.onRowNodeDataChanged = function (event) {
	        // if this is an update, we want to refresh, as this will allow the user to put in a transition
	        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
	        // we will want to completely replace the cells
	        this.forEachCellComp(function (cellComp) {
	            return cellComp.refreshCell({
	                suppressFlash: !event.update,
	                newData: !event.update
	            });
	        });
	        // check for selected also, as this could be after lazy loading of the row data, in which case
	        // the id might of just gotten set inside the row and the row selected state may of changed
	        // as a result. this is what happens when selected rows are loaded in virtual pagination.
	        // - niall note - since moving to the stub component, this may no longer be true, as replacing
	        // the stub component now replaces the entire row
	        this.onRowSelected();
	        // as data has changed, then the style and class needs to be recomputed
	        this.postProcessCss();
	    };
	    RowComp.prototype.onRowNodeCellChanged = function (event) {
	        // as data has changed, then the style and class needs to be recomputed
	        this.postProcessCss();
	    };
	    RowComp.prototype.postProcessCss = function () {
	        this.postProcessStylesFromGridOptions();
	        this.postProcessClassesFromGridOptions();
	        this.postProcessRowClassRules();
	    };
	    RowComp.prototype.onExpandedChanged = function () {
	        if (this.rowNode.group && !this.rowNode.footer) {
	            var expanded_1 = this.rowNode.expanded;
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-expanded', expanded_1); });
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-contracted', !expanded_1); });
	        }
	    };
	    RowComp.prototype.onDisplayedColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.destroyFullWidthComponents = function () {
	        if (this.fullWidthRowComponent) {
	            if (this.fullWidthRowComponent.destroy) {
	                this.fullWidthRowComponent.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentBody) {
	            if (this.fullWidthRowComponentBody.destroy) {
	                this.fullWidthRowComponentBody.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentLeft) {
	            if (this.fullWidthRowComponentLeft.destroy) {
	                this.fullWidthRowComponentLeft.destroy();
	            }
	            this.fullWidthRowComponentLeft = null;
	        }
	        if (this.fullWidthRowComponentRight) {
	            if (this.fullWidthRowComponentRight.destroy) {
	                this.fullWidthRowComponentRight.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	    };
	    RowComp.prototype.getContainerForCell = function (pinnedType) {
	        switch (pinnedType) {
	            case column_1.Column.PINNED_LEFT: return this.ePinnedLeftRow;
	            case column_1.Column.PINNED_RIGHT: return this.ePinnedRightRow;
	            default: return this.eBodyRow;
	        }
	    };
	    RowComp.prototype.onVirtualColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.onColumnResized = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.refreshCells = function () {
	        if (this.beans.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.refreshCellsInAnimationFrame();
	        }
	        else {
	            if (this.columnRefreshPending) {
	                return;
	            }
	            this.beans.taskQueue.addP1Task(this.refreshCellsInAnimationFrame.bind(this));
	        }
	    };
	    RowComp.prototype.refreshCellsInAnimationFrame = function () {
	        if (!this.active) {
	            return;
	        }
	        this.columnRefreshPending = false;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	        var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	        this.insertCellsIntoContainer(this.eBodyRow, centerCols);
	        this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
	        this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
	        var colIdsToRemove = Object.keys(this.cellComps);
	        centerCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        leftCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        rightCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        // we never remove editing cells, as this would cause the cells to loose their values while editing
	        // as the grid is scrolling horizontally.
	        colIdsToRemove = utils_1._.filter(colIdsToRemove, this.isCellEligibleToBeRemoved.bind(this));
	        // remove old cells from gui, but we don't destroy them, we might use them again
	        this.removeRenderedCells(colIdsToRemove);
	    };
	    RowComp.prototype.removeRenderedCells = function (colIds) {
	        var _this = this;
	        colIds.forEach(function (key) {
	            var cellComp = _this.cellComps[key];
	            // could be old reference, ie removed cell
	            if (utils_1._.missing(cellComp)) {
	                return;
	            }
	            cellComp.detach();
	            cellComp.destroy();
	            _this.cellComps[key] = null;
	        });
	    };
	    RowComp.prototype.isCellEligibleToBeRemoved = function (indexStr) {
	        var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
	        var REMOVE_CELL = true;
	        var KEEP_CELL = false;
	        var renderedCell = this.cellComps[indexStr];
	        if (!renderedCell) {
	            return REMOVE_CELL;
	        }
	        // always remove the cell if it's in the wrong pinned location
	        if (this.isCellInWrongRow(renderedCell)) {
	            return REMOVE_CELL;
	        }
	        // we want to try and keep editing and focused cells
	        var editing = renderedCell.isEditing();
	        var focused = this.beans.focusedCellController.isCellFocused(renderedCell.getGridCell());
	        var mightWantToKeepCell = editing || focused;
	        if (mightWantToKeepCell) {
	            var column = renderedCell.getColumn();
	            var cellStillDisplayed = displayedColumns.indexOf(column) >= 0;
	            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
	        }
	        else {
	            return REMOVE_CELL;
	        }
	    };
	    RowComp.prototype.ensureCellInCorrectContainer = function (cellComp) {
	        var element = cellComp.getGui();
	        var column = cellComp.getColumn();
	        var pinnedType = column.getPinned();
	        var eContainer = this.getContainerForCell(pinnedType);
	        // if in wrong container, remove it
	        var eOldContainer = cellComp.getParentRow();
	        var inWrongRow = eOldContainer !== eContainer;
	        if (inWrongRow) {
	            // take out from old row
	            if (eOldContainer) {
	                eOldContainer.removeChild(element);
	            }
	            eContainer.appendChild(element);
	            cellComp.setParentRow(eContainer);
	        }
	    };
	    RowComp.prototype.isCellInWrongRow = function (cellComp) {
	        var column = cellComp.getColumn();
	        var rowWeWant = this.getContainerForCell(column.getPinned());
	        // if in wrong container, remove it
	        var oldRow = cellComp.getParentRow();
	        return oldRow !== rowWeWant;
	    };
	    RowComp.prototype.insertCellsIntoContainer = function (eRow, cols) {
	        var _this = this;
	        if (!eRow) {
	            return;
	        }
	        var cellTemplates = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var colId = col.getId();
	            var oldCell = _this.cellComps[colId];
	            if (oldCell) {
	                _this.ensureCellInCorrectContainer(oldCell);
	            }
	            else {
	                _this.createNewCell(col, eRow, cellTemplates, newCellComps);
	            }
	        });
	        if (cellTemplates.length > 0) {
	            utils_1._.appendHtml(eRow, cellTemplates.join(''));
	            this.callAfterRowAttachedOnCells(newCellComps, eRow);
	        }
	    };
	    RowComp.prototype.addDomData = function (eRowContainer) {
	        var gow = this.beans.gridOptionsWrapper;
	        gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, this);
	        this.addDestroyFunc(function () {
	            gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, null);
	        });
	    };
	    RowComp.prototype.createNewCell = function (col, eContainer, cellTemplates, newCellComps) {
	        var newCellComp = new cellComp_1.CellComp(this.scope, this.beans, col, this.rowNode, this);
	        var cellTemplate = newCellComp.getCreateTemplate();
	        cellTemplates.push(cellTemplate);
	        newCellComps.push(newCellComp);
	        this.cellComps[col.getId()] = newCellComp;
	        newCellComp.setParentRow(eContainer);
	    };
	    RowComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        switch (eventName) {
	            case 'dblclick':
	                this.onRowDblClick(mouseEvent);
	                break;
	            case 'click':
	                this.onRowClick(mouseEvent);
	                break;
	        }
	    };
	    RowComp.prototype.createRowEvent = function (type, domEvent) {
	        return {
	            type: type,
	            node: this.rowNode,
	            data: this.rowNode.data,
	            rowIndex: this.rowNode.rowIndex,
	            rowPinned: this.rowNode.rowPinned,
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            event: domEvent
	        };
	    };
	    RowComp.prototype.createRowEventWithSource = function (type, domEvent) {
	        var event = this.createRowEvent(type, domEvent);
	        // when first developing this, we included the rowComp in the event.
	        // this seems very weird. so when introducing the event types, i left the 'source'
	        // out of the type, and just include the source in the two places where this event
	        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
	        // users to be using this, as the rowComp isn't an object we expose, so would be
	        // very surprising if a user was using it.
	        event.source = this;
	        return event;
	    };
	    RowComp.prototype.onRowDblClick = function (mouseEvent) {
	        var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	    };
	    RowComp.prototype.onRowClick = function (mouseEvent) {
	        var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	        // ctrlKey for windows, metaKey for Apple
	        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
	        var shiftKeyPressed = mouseEvent.shiftKey;
	        // we do not allow selecting groups by clicking (as the click here expands the group)
	        // so return if it's a group row
	        if (this.rowNode.group) {
	            return;
	        }
	        // we also don't allow selection of pinned rows
	        if (this.rowNode.rowPinned) {
	            return;
	        }
	        // if no selection method enabled, do nothing
	        if (!this.beans.gridOptionsWrapper.isRowSelection()) {
	            return;
	        }
	        // if click selection suppressed, do nothing
	        if (this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
	            return;
	        }
	        if (this.rowNode.isSelected()) {
	            if (multiSelectKeyPressed) {
	                if (this.beans.gridOptionsWrapper.isRowDeselection()) {
	                    this.rowNode.setSelectedParams({ newValue: false });
	                }
	            }
	            else {
	                // selected with no multi key, must make sure anything else is unselected
	                this.rowNode.setSelectedParams({ newValue: true, clearSelection: true });
	            }
	        }
	        else {
	            this.rowNode.setSelectedParams({ newValue: true, clearSelection: !multiSelectKeyPressed, rangeSelect: shiftKeyPressed });
	        }
	    };
	    RowComp.prototype.createFullWidthRowContainer = function (rowContainerComp, pinned, extraCssClass, cellRendererType, eRowCallback, cellRendererCallback) {
	        var _this = this;
	        var rowTemplate = this.createTemplate('', extraCssClass);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            var params = _this.createFullWidthParams(eRow, pinned);
	            var callback = function (cellRenderer) {
	                if (_this.isAlive()) {
	                    var gui = cellRenderer.getGui();
	                    eRow.appendChild(gui);
	                    cellRendererCallback(cellRenderer);
	                }
	                else {
	                    if (cellRenderer.destroy) {
	                        cellRenderer.destroy();
	                    }
	                }
	            };
	            _this.beans.componentResolver.createAgGridComponent(null, params, cellRendererType).then(callback);
	            _this.afterRowAttached(rowContainerComp, eRow);
	            eRowCallback(eRow);
	            _this.angular1Compile(eRow);
	        });
	    };
	    RowComp.prototype.angular1Compile = function (element) {
	        if (this.scope) {
	            this.beans.$compile(element)(this.scope);
	        }
	    };
	    RowComp.prototype.createFullWidthParams = function (eRow, pinned) {
	        var params = {
	            fullWidth: true,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            value: this.rowNode.key,
	            $scope: this.scope,
	            rowIndex: this.rowNode.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            // these need to be taken out, as part of 'afterAttached' now
	            eGridCell: eRow,
	            eParentOfValue: eRow,
	            pinned: pinned,
	            addRenderedRowListener: this.addEventListener.bind(this)
	        };
	        return params;
	    };
	    RowComp.prototype.getInitialRowClasses = function (extraCssClass) {
	        var classes = [];
	        if (utils_1._.exists(extraCssClass)) {
	            classes.push(extraCssClass);
	        }
	        classes.push('ag-row');
	        classes.push(this.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');
	        if (this.fadeRowIn) {
	            classes.push('ag-opacity-zero');
	        }
	        if (this.rowIsEven) {
	            classes.push('ag-row-even');
	        }
	        else {
	            classes.push('ag-row-odd');
	        }
	        if (this.beans.gridOptionsWrapper.isAnimateRows()) {
	            classes.push('ag-row-animation');
	        }
	        else {
	            classes.push('ag-row-no-animation');
	        }
	        if (this.rowNode.isSelected()) {
	            classes.push('ag-row-selected');
	        }
	        if (this.rowNode.group) {
	            classes.push('ag-row-group');
	            // if a group, put the level of the group in
	            classes.push('ag-row-level-' + this.rowNode.level);
	            if (this.rowNode.footer) {
	                classes.push('ag-row-footer');
	            }
	        }
	        else {
	            // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
	            if (this.rowNode.parent) {
	                classes.push('ag-row-level-' + (this.rowNode.parent.level + 1));
	            }
	            else {
	                classes.push('ag-row-level-0');
	            }
	        }
	        if (this.rowNode.stub) {
	            classes.push('ag-row-stub');
	        }
	        if (this.fullWidthRow) {
	            classes.push('ag-full-width-row');
	        }
	        if (this.rowNode.group && !this.rowNode.footer) {
	            classes.push(this.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');
	        }
	        utils_1._.pushAll(classes, this.processClassesFromGridOptions());
	        utils_1._.pushAll(classes, this.preProcessRowClassRules());
	        return classes;
	    };
	    RowComp.prototype.preProcessRowClassRules = function () {
	        var res = [];
	        this.processRowClassRules(function (className) {
	            res.push(className);
	        }, function (className) {
	            // not catered for, if creating, no need
	            // to remove class as it was never there
	        });
	        return res;
	    };
	    RowComp.prototype.processRowClassRules = function (onApplicableClass, onNotApplicableClass) {
	        this.beans.stylingService.processClassRules(this.beans.gridOptionsWrapper.rowClassRules(), {
	            data: this.rowNode.data,
	            node: this.rowNode,
	            rowIndex: this.rowNode.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass, onNotApplicableClass);
	    };
	    RowComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachCellComp(function (renderedCell) {
	            renderedCell.stopEditing(cancel);
	        });
	        if (this.editingRow) {
	            if (!cancel) {
	                var event_1 = this.createRowEvent(events_1.Events.EVENT_ROW_VALUE_CHANGED);
	                this.beans.eventService.dispatchEvent(event_1);
	            }
	            this.setEditingRow(false);
	        }
	    };
	    RowComp.prototype.setEditingRow = function (value) {
	        this.editingRow = value;
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-editing', value); });
	        var event = value ?
	            this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STARTED)
	            : this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.startRowEditing = function (keyPress, charPress, sourceRenderedCell) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (sourceRenderedCell === void 0) { sourceRenderedCell = null; }
	        // don't do it if already editing
	        if (this.editingRow) {
	            return;
	        }
	        this.forEachCellComp(function (renderedCell) {
	            var cellStartedEdit = renderedCell === sourceRenderedCell;
	            if (cellStartedEdit) {
	                renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
	            }
	            else {
	                renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
	            }
	        });
	        this.setEditingRow(true);
	    };
	    RowComp.prototype.forEachCellComp = function (callback) {
	        utils_1._.iterateObject(this.cellComps, function (key, cellComp) {
	            if (cellComp) {
	                callback(cellComp);
	            }
	        });
	    };
	    RowComp.prototype.postProcessClassesFromGridOptions = function () {
	        var _this = this;
	        var cssClasses = this.processClassesFromGridOptions();
	        if (cssClasses) {
	            cssClasses.forEach(function (classStr) {
	                _this.eAllRowContainers.forEach(function (row) { return utils_1._.addCssClass(row, classStr); });
	            });
	        }
	    };
	    RowComp.prototype.postProcessRowClassRules = function () {
	        var _this = this;
	        this.processRowClassRules(function (className) {
	            _this.eAllRowContainers.forEach(function (row) { return utils_1._.addCssClass(row, className); });
	        }, function (className) {
	            _this.eAllRowContainers.forEach(function (row) { return utils_1._.removeCssClass(row, className); });
	        });
	    };
	    RowComp.prototype.processClassesFromGridOptions = function () {
	        var res = [];
	        var process = function (rowClass) {
	            if (typeof rowClass === 'string') {
	                res.push(rowClass);
	            }
	            else if (Array.isArray(rowClass)) {
	                rowClass.forEach(function (e) { return res.push(e); });
	            }
	        };
	        // part 1 - rowClass
	        var rowClass = this.beans.gridOptionsWrapper.getRowClass();
	        if (rowClass) {
	            if (typeof rowClass === 'function') {
	                console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');
	                return;
	            }
	            process(rowClass);
	        }
	        // part 2 - rowClassFunc
	        var rowClassFunc = this.beans.gridOptionsWrapper.getRowClassFunc();
	        if (rowClassFunc) {
	            var params = {
	                node: this.rowNode,
	                data: this.rowNode.data,
	                rowIndex: this.rowNode.rowIndex,
	                context: this.beans.gridOptionsWrapper.getContext(),
	                api: this.beans.gridOptionsWrapper.getApi()
	            };
	            var rowClassFuncResult = rowClassFunc(params);
	            process(rowClassFuncResult);
	        }
	        return res;
	    };
	    RowComp.prototype.preProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        return utils_1._.cssStyleObjectToMarkup(rowStyles);
	    };
	    RowComp.prototype.postProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addStylesToElement(row, rowStyles); });
	    };
	    RowComp.prototype.processStylesFromGridOptions = function () {
	        // part 1 - rowStyle
	        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
	        if (rowStyle && typeof rowStyle === 'function') {
	            console.log('ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');
	            return;
	        }
	        // part 1 - rowStyleFunc
	        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
	        var rowStyleFuncResult;
	        if (rowStyleFunc) {
	            var params = {
	                data: this.rowNode.data,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                $scope: this.scope
	            };
	            rowStyleFuncResult = rowStyleFunc(params);
	        }
	        return utils_1._.assign({}, rowStyle, rowStyleFuncResult);
	    };
	    RowComp.prototype.createCells = function (cols) {
	        var _this = this;
	        var templateParts = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var newCellComp = new cellComp_1.CellComp(_this.scope, _this.beans, col, _this.rowNode, _this);
	            var cellTemplate = newCellComp.getCreateTemplate();
	            templateParts.push(cellTemplate);
	            newCellComps.push(newCellComp);
	            _this.cellComps[col.getId()] = newCellComp;
	        });
	        var templateAndComps = {
	            template: templateParts.join(''),
	            cellComps: newCellComps
	        };
	        return templateAndComps;
	    };
	    RowComp.prototype.onRowSelected = function () {
	        var selected = this.rowNode.isSelected();
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-selected', selected); });
	    };
	    // called:
	    // + after row created for first time
	    // + after horizontal scroll, so new cells due to column virtualisation
	    RowComp.prototype.callAfterRowAttachedOnCells = function (newCellComps, eRow) {
	        var _this = this;
	        newCellComps.forEach(function (cellComp) {
	            cellComp.setParentRow(eRow);
	            cellComp.afterAttached();
	            // if we are editing the row, then the cell needs to turn
	            // into edit mode
	            if (_this.editingRow) {
	                cellComp.startEditingIfEnabled();
	            }
	        });
	    };
	    RowComp.prototype.afterRowAttached = function (rowContainerComp, eRow) {
	        var _this = this;
	        this.addDomData(eRow);
	        this.removeSecondPassFuncs.push(function () {
	            // console.log(eRow);
	            rowContainerComp.removeRowElement(eRow);
	        });
	        this.removeFirstPassFuncs.push(function () {
	            if (utils_1._.exists(_this.rowNode.rowTop)) {
	                // the row top is updated anyway, however we set it here again
	                // to something more reasonable for the animation - ie if the
	                // row top is 10000px away, the row will flash out, so this
	                // gives it a rounded value, so row animates out more slowly
	                var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);
	                _this.setRowTop(rowTop);
	            }
	            else {
	                utils_1._.addCssClass(eRow, 'ag-opacity-zero');
	            }
	        });
	        this.eAllRowContainers.push(eRow);
	        // adding hover functionality adds listener to this row, so we
	        // do it lazily in an animation frame
	        if (this.useAnimationFrameForCreate) {
	            this.beans.taskQueue.addP1Task(this.addHoverFunctionality.bind(this, eRow));
	        }
	        else {
	            this.addHoverFunctionality(eRow);
	        }
	    };
	    RowComp.prototype.addHoverFunctionality = function (eRow) {
	        var _this = this;
	        // because we use animation frames to do this, it's possible the row no longer exists
	        // by the time we get to add it
	        if (!this.active) {
	            return;
	        }
	        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
	        // like we do for all the other mouse events.
	        // because of the pinning, we cannot simply add / remove the class based on the eRow. we
	        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
	        // mouse hover, it sets such in the rowNode, and then all three reflect the change as
	        // all are listening for event on the row node.
	        // step 1 - add listener, to set flag on row node
	        this.addDestroyableEventListener(eRow, 'mouseenter', function () { return _this.rowNode.onMouseEnter(); });
	        this.addDestroyableEventListener(eRow, 'mouseleave', function () { return _this.rowNode.onMouseLeave(); });
	        // step 2 - listen for changes on row node (which any eRow can trigger)
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_ENTER, function () {
	            utils_1._.addCssClass(eRow, 'ag-row-hover');
	        });
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_LEAVE, function () {
	            utils_1._.removeCssClass(eRow, 'ag-row-hover');
	        });
	    };
	    // for animation, we don't want to animate entry or exit to a very far away pixel,
	    // otherwise the row would move so fast, it would appear to disappear. so this method
	    // moves the row closer to the viewport if it is far away, so the row slide in / out
	    // at a speed the user can see.
	    RowComp.prototype.roundRowTopToBounds = function (rowTop) {
	        var range = this.beans.gridPanel.getVerticalPixelRange();
	        var minPixel = range.top - 100;
	        var maxPixel = range.bottom + 100;
	        if (rowTop < minPixel) {
	            return minPixel;
	        }
	        else if (rowTop > maxPixel) {
	            return maxPixel;
	        }
	        else {
	            return rowTop;
	        }
	    };
	    RowComp.prototype.onRowHeightChanged = function () {
	        // check for exists first - if the user is resetting the row height, then
	        // it will be null (or undefined) momentarily until the next time the flatten
	        // stage is called where the row will then update again with a new height
	        if (utils_1._.exists(this.rowNode.rowHeight)) {
	            var heightPx_1 = this.rowNode.rowHeight + 'px';
	            this.eAllRowContainers.forEach(function (row) { return row.style.height = heightPx_1; });
	        }
	    };
	    RowComp.prototype.addEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
	            eventType = events_1.Events.EVENT_VIRTUAL_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved is now called ' + events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        }
	        _super.prototype.addEventListener.call(this, eventType, listener);
	    };
	    RowComp.prototype.removeEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {
	            eventType = events_1.Events.EVENT_VIRTUAL_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called ' + events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        }
	        _super.prototype.removeEventListener.call(this, eventType, listener);
	    };
	    RowComp.prototype.destroyScope = function () {
	        if (this.scope) {
	            this.scope.$destroy();
	            this.scope = null;
	        }
	    };
	    RowComp.prototype.destroy = function (animate) {
	        if (animate === void 0) { animate = false; }
	        _super.prototype.destroy.call(this);
	        this.destroyScope();
	        this.active = false;
	        // why do we have this method? shouldn't everything below be added as a destroy func beside
	        // the corresponding create logic?
	        this.destroyFullWidthComponents();
	        if (animate) {
	            this.removeFirstPassFuncs.forEach(function (func) { return func(); });
	            this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
	        }
	        else {
	            this.destroyContainingCells();
	            // we are not animating, so execute the second stage of removal now.
	            // we call getAndClear, so that they are only called once
	            var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
	            delayedDestroyFunctions.forEach(function (func) { return func(); });
	        }
	        var event = this.createRowEvent(events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        this.dispatchEvent(event);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.destroyContainingCells = function () {
	        this.forEachCellComp(function (renderedCell) { return renderedCell.destroy(); });
	        this.destroyFullWidthComponents();
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearDelayedDestroyFunctions = function () {
	        var result = this.removeSecondPassFuncs;
	        this.removeSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.onCellFocusChanged = function () {
	        var rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        if (rowFocused !== this.rowFocused) {
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-focus', rowFocused); });
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-no-focus', !rowFocused); });
	            this.rowFocused = rowFocused;
	        }
	        // if we are editing, then moving the focus out of a row will stop editing
	        if (!rowFocused && this.editingRow) {
	            this.stopEditing(false);
	        }
	    };
	    RowComp.prototype.onPaginationChanged = function () {
	        var currentPage = this.beans.paginationProxy.getCurrentPage();
	        // it is possible this row is in the new page, but the page number has changed, which means
	        // it needs to reposition itself relative to the new page
	        if (this.paginationPage !== currentPage) {
	            this.paginationPage = currentPage;
	            this.onTopChanged();
	        }
	    };
	    RowComp.prototype.onTopChanged = function () {
	        // top is not used in forPrint, as the rows are just laid out naturally
	        var doNotSetRowTop = this.beans.forPrint || this.beans.gridOptionsWrapper.isAutoHeight();
	        if (doNotSetRowTop) {
	            return;
	        }
	        this.setRowTop(this.rowNode.rowTop);
	    };
	    RowComp.prototype.applyPixelOffset = function (pixels) {
	        if (this.rowNode.isRowPinned()) {
	            return pixels;
	        }
	        else {
	            return pixels - this.beans.paginationProxy.getPixelOffset();
	        }
	    };
	    RowComp.prototype.setRowTop = function (pixels) {
	        // need to make sure rowTop is not null, as this can happen if the node was once
	        // visible (ie parent group was expanded) but is now not visible
	        if (utils_1._.exists(pixels)) {
	            var pixelsWithOffset = this.applyPixelOffset(pixels);
	            var topPx_1 = pixelsWithOffset + "px";
	            this.eAllRowContainers.forEach(function (row) { return row.style.top = topPx_1; });
	        }
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearNextVMTurnFunctions = function () {
	        var result = this.createSecondPassFuncs;
	        this.createSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.getRowNode = function () {
	        return this.rowNode;
	    };
	    RowComp.prototype.getRenderedCellForColumn = function (column) {
	        return this.cellComps[column.getColId()];
	    };
	    RowComp.prototype.onRowIndexChanged = function () {
	        this.onCellFocusChanged();
	        this.updateRowIndexes();
	    };
	    RowComp.prototype.updateRowIndexes = function () {
	        var rowIndexStr = this.rowNode.getRowIndexString();
	        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
	        var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
	        if (rowIsEvenChanged) {
	            this.rowIsEven = rowIsEven;
	        }
	        this.eAllRowContainers.forEach(function (eRow) {
	            eRow.setAttribute('index', rowIndexStr);
	            if (rowIsEvenChanged) {
	                utils_1._.addOrRemoveCssClass(eRow, 'ag-row-even', rowIsEven);
	                utils_1._.addOrRemoveCssClass(eRow, 'ag-row-odd', !rowIsEven);
	            }
	        });
	    };
	    RowComp.prototype.ensureDomOrder = function () {
	        var body = this.getBodyRowElement();
	        if (body) {
	            this.bodyContainerComp.ensureDomOrder(body);
	        }
	        var left = this.getPinnedLeftRowElement();
	        if (left) {
	            this.pinnedLeftContainerComp.ensureDomOrder(left);
	        }
	        var right = this.getPinnedRightRowElement();
	        if (right) {
	            this.pinnedRightContainerComp.ensureDomOrder(right);
	        }
	        var fullWidth = this.getFullWidthRowElement();
	        if (fullWidth) {
	            this.fullWidthContainerComp.ensureDomOrder(fullWidth);
	        }
	    };
	    // returns the pinned left container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedLeftRowElement = function () {
	        return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
	    };
	    // returns the pinned right container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedRightRowElement = function () {
	        return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
	    };
	    // returns the body container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getBodyRowElement = function () {
	        return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
	    };
	    // returns the full width container
	    RowComp.prototype.getFullWidthRowElement = function () {
	        return this.eFullWidthRow;
	    };
	    RowComp.DOM_DATA_KEY_RENDERED_ROW = 'renderedRow';
	    RowComp.FULL_WIDTH_CELL_RENDERER = 'fullWidthCellRenderer';
	    RowComp.GROUP_ROW_RENDERER = 'groupRowRenderer';
	    RowComp.LOADING_CELL_RENDERER = 'loadingCellRenderer';
	    RowComp.DETAIL_CELL_RENDERER = 'detailCellRenderer';
	    return RowComp;
	}(component_1.Component));
	exports.RowComp = RowComp;


/***/ }),
/* 330 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function QuerySelector(selector) {
	    return querySelectorFunc.bind(this, selector);
	}
	exports.QuerySelector = QuerySelector;
	function RefSelector(ref) {
	    return querySelectorFunc.bind(this, '[ref=' + ref + ']');
	}
	exports.RefSelector = RefSelector;
	function querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
	    if (selector === null) {
	        console.error('ag-Grid: QuerySelector selector should not be null');
	        return;
	    }
	    if (typeof index === 'number') {
	        console.error('ag-Grid: QuerySelector should be on an attribute');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(classPrototype, classPrototype.constructor.name);
	    if (!props.querySelectors) {
	        props.querySelectors = [];
	    }
	    props.querySelectors.push({
	        attributeName: methodOrAttributeName,
	        querySelector: selector
	    });
	}
	function Listener(eventName) {
	    return listenerFunc.bind(this, eventName);
	}
	exports.Listener = Listener;
	function listenerFunc(eventName, target, methodName, descriptor) {
	    if (eventName === null) {
	        console.error('ag-Grid: EventListener eventName should not be null');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(target, target.constructor.name);
	    if (!props.listenerMethods) {
	        props.listenerMethods = [];
	    }
	    props.listenerMethods.push({
	        methodName: methodName,
	        eventName: eventName
	    });
	}
	function getOrCreateProps(target, instanceName) {
	    if (!target.__agComponentMetaData) {
	        target.__agComponentMetaData = {};
	    }
	    if (!target.__agComponentMetaData[instanceName]) {
	        target.__agComponentMetaData[instanceName] = {};
	    }
	    return target.__agComponentMetaData[instanceName];
	}


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridCell_1 = __webpack_require__(315);
	var constants_1 = __webpack_require__(289);
	var mouseEventService_1 = __webpack_require__(310);
	var paginationProxy_1 = __webpack_require__(323);
	var focusedCellController_1 = __webpack_require__(320);
	var utils_1 = __webpack_require__(288);
	var gridPanel_1 = __webpack_require__(306);
	var animationFrameService_1 = __webpack_require__(327);
	var columnController_1 = __webpack_require__(297);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var NavigationService = (function () {
	    function NavigationService() {
	    }
	    NavigationService.prototype.init = function () {
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	    };
	    NavigationService.prototype.handlePageScrollingKey = function (event) {
	        var key = event.which || event.keyCode;
	        var alt = event.altKey;
	        var ctrl = event.ctrlKey;
	        var currentCell = this.mouseEventService.getGridCellForEvent(event).getGridCellDef();
	        if (!currentCell) {
	            return false;
	        }
	        var processed = false;
	        switch (key) {
	            case constants_1.Constants.KEY_PAGE_HOME:
	            case constants_1.Constants.KEY_PAGE_END:
	                // handle home and end when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onHomeOrEndKey(key);
	                    processed = true;
	                }
	                break;
	            case constants_1.Constants.KEY_LEFT:
	            case constants_1.Constants.KEY_RIGHT:
	                // handle left and right when ctrl is pressed only
	                if (ctrl && !alt) {
	                    this.onCtrlLeftOrRight(key, currentCell);
	                    processed = true;
	                }
	                break;
	            case constants_1.Constants.KEY_UP:
	            case constants_1.Constants.KEY_DOWN:
	                // handle up and down when ctrl is pressed only
	                if (ctrl && !alt) {
	                    this.onCtrlUpOrDown(key, currentCell);
	                    processed = true;
	                }
	                break;
	            case constants_1.Constants.KEY_PAGE_DOWN:
	                // handle page up and page down when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onPageDown(currentCell);
	                    processed = true;
	                }
	                break;
	            case constants_1.Constants.KEY_PAGE_UP:
	                // handle page up and page down when ctrl & alt are NOT pressed
	                if (!ctrl && !alt) {
	                    this.onPageUp(currentCell);
	                    processed = true;
	                }
	                break;
	        }
	        if (processed) {
	            event.preventDefault();
	        }
	        return processed;
	    };
	    NavigationService.prototype.onPageDown = function (gridCell) {
	        var viewport = this.gridPanel.getPrimaryScrollViewport();
	        var pixelsInOnePage = viewport.offsetHeight;
	        if (this.gridPanel.isHorizontalScrollShowing()) {
	            pixelsInOnePage -= this.scrollWidth;
	        }
	        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
	        var currentPageBottomPixel = viewport.scrollTop + pixelsInOnePage;
	        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
	        var scrollIndex = currentPageBottomRow;
	        var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
	        var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
	        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
	        var pageLastRow = this.paginationProxy.getPageLastRow();
	        if (focusIndex > pageLastRow) {
	            focusIndex = pageLastRow;
	        }
	        if (scrollIndex > pageLastRow) {
	            scrollIndex = pageLastRow;
	        }
	        this.navigateTo(scrollIndex, 'top', null, focusIndex, gridCell.column);
	    };
	    NavigationService.prototype.onPageUp = function (gridCell) {
	        var viewport = this.gridPanel.getPrimaryScrollViewport();
	        var pixelsInOnePage = viewport.offsetHeight;
	        if (this.gridPanel.isHorizontalScrollShowing()) {
	            pixelsInOnePage -= this.scrollWidth;
	        }
	        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
	        var currentPageTopPixel = viewport.scrollTop;
	        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
	        var scrollIndex = currentPageTopRow;
	        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
	        var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
	        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
	        var firstRow = this.paginationProxy.getPageFirstRow();
	        if (focusIndex < firstRow) {
	            focusIndex = firstRow;
	        }
	        if (scrollIndex < firstRow) {
	            scrollIndex = firstRow;
	        }
	        this.navigateTo(scrollIndex, 'bottom', null, focusIndex, gridCell.column);
	    };
	    // common logic to navigate. takes parameters:
	    // scrollIndex - what row to vertically scroll to
	    // scrollType - what position to put scroll index ie top/bottom
	    // scrollColumn - what column to horizontally scroll to
	    // focusIndex / focusColumn - for page up / down, we want to scroll to one row/column, but focus another
	    NavigationService.prototype.navigateTo = function (scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {
	        if (utils_1._.exists(scrollColumn)) {
	            this.gridPanel.ensureColumnVisible(scrollColumn);
	        }
	        if (utils_1._.exists(scrollIndex)) {
	            this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);
	        }
	        // make sure the cell is rendered, needed if we are to focus
	        this.animationFrameService.flushAllFrames();
	        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell
	        // highlighted.
	        this.focusedCellController.setFocusedCell(focusIndex, focusColumn, null, true);
	        if (this.rangeController) {
	            var gridCell = new gridCell_1.GridCell({ rowIndex: focusIndex, floating: null, column: focusColumn });
	            this.rangeController.setRangeToCell(gridCell);
	        }
	    };
	    // ctrl + up/down will bring focus to same column, first/last row. no horizontal scrolling.
	    NavigationService.prototype.onCtrlUpOrDown = function (key, gridCell) {
	        var upKey = key === constants_1.Constants.KEY_UP;
	        var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();
	        this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);
	    };
	    // ctrl + left/right will bring focus to same row, first/last cell. no vertical scrolling.
	    NavigationService.prototype.onCtrlLeftOrRight = function (key, gridCell) {
	        var leftKey = key === constants_1.Constants.KEY_LEFT;
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = leftKey ? allColumns[0] : allColumns[allColumns.length - 1];
	        this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);
	    };
	    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
	    // same cell into view (which means either scroll all the way up, or all the way down).
	    NavigationService.prototype.onHomeOrEndKey = function (key) {
	        var homeKey = key === constants_1.Constants.KEY_PAGE_HOME;
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = homeKey ? allColumns[0] : allColumns[allColumns.length - 1];
	        var rowIndexToScrollTo = homeKey ? 0 : this.paginationProxy.getPageLastRow();
	        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);
	    };
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], NavigationService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService_1.MouseEventService)
	    ], NavigationService.prototype, "mouseEventService", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], NavigationService.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], NavigationService.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], NavigationService.prototype, "animationFrameService", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], NavigationService.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], NavigationService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], NavigationService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], NavigationService.prototype, "init", null);
	    NavigationService = __decorate([
	        context_1.Bean('navigationService')
	    ], NavigationService);
	    return NavigationService;
	}());
	exports.NavigationService = NavigationService;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var context_2 = __webpack_require__(287);
	var TemplateService = (function () {
	    function TemplateService() {
	        this.templateCache = {};
	        this.waitingCallbacks = {};
	    }
	    // returns the template if it is loaded, or null if it is not loaded
	    // but will call the callback when it is loaded
	    TemplateService.prototype.getTemplate = function (url, callback) {
	        var templateFromCache = this.templateCache[url];
	        if (templateFromCache) {
	            return templateFromCache;
	        }
	        var callbackList = this.waitingCallbacks[url];
	        var that = this;
	        if (!callbackList) {
	            // first time this was called, so need a new list for callbacks
	            callbackList = [];
	            this.waitingCallbacks[url] = callbackList;
	            // and also need to do the http request
	            var client = new XMLHttpRequest();
	            client.onload = function () {
	                that.handleHttpResult(this, url);
	            };
	            client.open("GET", url);
	            client.send();
	        }
	        // add this callback
	        if (callback) {
	            callbackList.push(callback);
	        }
	        // caller needs to wait for template to load, so return null
	        return null;
	    };
	    TemplateService.prototype.handleHttpResult = function (httpResult, url) {
	        if (httpResult.status !== 200 || httpResult.response === null) {
	            console.warn('Unable to get template error ' + httpResult.status + ' - ' + url);
	            return;
	        }
	        // response success, so process it
	        // in IE9 the response is in - responseText
	        this.templateCache[url] = httpResult.response || httpResult.responseText;
	        // inform all listeners that this is now in the cache
	        var callbacks = this.waitingCallbacks[url];
	        for (var i = 0; i < callbacks.length; i++) {
	            var callback = callbacks[i];
	            // we could pass the callback the response, however we know the client of this code
	            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
	            // which doesn't take any parameters.
	            callback();
	        }
	        if (this.$scope) {
	            var that_1 = this;
	            setTimeout(function () {
	                that_1.$scope.$apply();
	            }, 0);
	        }
	    };
	    __decorate([
	        context_2.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], TemplateService.prototype, "$scope", void 0);
	    TemplateService = __decorate([
	        context_1.Bean('templateService')
	    ], TemplateService);
	    return TemplateService;
	}());
	exports.TemplateService = TemplateService;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var rowRenderer_1 = __webpack_require__(305);
	var filterManager_1 = __webpack_require__(334);
	var eventService_1 = __webpack_require__(285);
	var gridPanel_1 = __webpack_require__(306);
	var logger_1 = __webpack_require__(286);
	var constants_1 = __webpack_require__(289);
	var popupService_1 = __webpack_require__(335);
	var events_1 = __webpack_require__(291);
	var utils_1 = __webpack_require__(288);
	var borderLayout_1 = __webpack_require__(307);
	var context_1 = __webpack_require__(287);
	var focusedCellController_1 = __webpack_require__(320);
	var component_1 = __webpack_require__(317);
	var paginationComp_1 = __webpack_require__(369);
	var gridApi_1 = __webpack_require__(294);
	var GridCore = (function () {
	    function GridCore(loggerFactory) {
	        this.destroyFunctions = [];
	        this.logger = loggerFactory.create('GridCore');
	    }
	    GridCore.prototype.init = function () {
	        var _this = this;
	        var eSouthPanel = this.createSouthPanel();
	        var eastPanel;
	        var westPanel;
	        if (this.toolPanel && !this.gridOptionsWrapper.isForPrint()) {
	            // if we are doing RTL, then the tool panel appears on the left
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                westPanel = this.toolPanel.getGui();
	            }
	            else {
	                eastPanel = this.toolPanel.getGui();
	            }
	        }
	        var createTopPanelGui = this.createNorthPanel();
	        this.eRootPanel = new borderLayout_1.BorderLayout({
	            center: this.gridPanel.getLayout(),
	            east: eastPanel,
	            west: westPanel,
	            north: createTopPanelGui,
	            south: eSouthPanel,
	            dontFill: this.gridOptionsWrapper.isForPrint(),
	            fillHorizontalOnly: this.gridOptionsWrapper.isAutoHeight(),
	            name: 'eRootPanel'
	        });
	        // parts of the CSS need to know if we are in 'for print' mode or not,
	        // so we add a class to allow applying CSS based on this.
	        if (this.gridOptionsWrapper.isForPrint()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-for-print');
	            // kept to limit breaking changes, ag-no-scrolls was renamed to ag-layout-for-print
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-no-scrolls');
	        }
	        else if (this.gridOptionsWrapper.isAutoHeight()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-auto-height');
	        }
	        else {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-normal');
	            // kept to limit breaking changes, ag-scrolls was renamed to ag-layout-normal
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-scrolls');
	        }
	        // see what the grid options are for default of toolbar
	        this.showToolPanel(this.gridOptionsWrapper.isShowToolPanel());
	        this.eGridDiv.appendChild(this.eRootPanel.getGui());
	        // if using angular, watch for quickFilter changes
	        if (this.$scope) {
	            this.$scope.$watch(this.quickFilterOnScope, function (newFilter) { return _this.filterManager.setQuickFilter(newFilter); });
	        }
	        if (!this.gridOptionsWrapper.isForPrint()) {
	            this.addWindowResizeListener();
	        }
	        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
	        // which doLayout indirectly depends on
	        this.addRtlSupport();
	        this.doLayout();
	        this.finished = false;
	        this.periodicallyDoLayout();
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onRowGroupChanged.bind(this));
	        this.onRowGroupChanged();
	        this.logger.log('ready');
	    };
	    GridCore.prototype.addRtlSupport = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-rtl');
	        }
	        else {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-ltr');
	        }
	    };
	    GridCore.prototype.createNorthPanel = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isEnterprise()) {
	            return null;
	        }
	        var topPanelGui = document.createElement('div');
	        var dropPanelVisibleListener = this.onDropPanelVisible.bind(this);
	        this.rowGroupComp = this.rowGroupCompFactory.create();
	        this.pivotComp = this.pivotCompFactory.create();
	        topPanelGui.appendChild(this.rowGroupComp.getGui());
	        topPanelGui.appendChild(this.pivotComp.getGui());
	        this.rowGroupComp.addEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        this.pivotComp.addEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        this.destroyFunctions.push(function () {
	            _this.rowGroupComp.removeEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	            _this.pivotComp.removeEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        });
	        this.onDropPanelVisible();
	        return topPanelGui;
	    };
	    GridCore.prototype.onDropPanelVisible = function () {
	        var bothVisible = this.rowGroupComp.isVisible() && this.pivotComp.isVisible();
	        this.rowGroupComp.addOrRemoveCssClass('ag-width-half', bothVisible);
	        this.pivotComp.addOrRemoveCssClass('ag-width-half', bothVisible);
	    };
	    GridCore.prototype.getRootGui = function () {
	        return this.eRootPanel.getGui();
	    };
	    GridCore.prototype.createSouthPanel = function () {
	        if (!this.statusBar && this.gridOptionsWrapper.isEnableStatusBar()) {
	            console.warn('ag-Grid: status bar is only available in ag-Grid-Enterprise');
	        }
	        var statusBarEnabled = this.statusBar && this.gridOptionsWrapper.isEnableStatusBar();
	        var isPaging = this.gridOptionsWrapper.isPagination();
	        var paginationPanelEnabled = isPaging
	            && !this.gridOptionsWrapper.isForPrint()
	            && !this.gridOptionsWrapper.isSuppressPaginationPanel();
	        if (!statusBarEnabled && !paginationPanelEnabled) {
	            return null;
	        }
	        var eSouthPanel = document.createElement('div');
	        if (statusBarEnabled) {
	            eSouthPanel.appendChild(this.statusBar.getGui());
	        }
	        if (paginationPanelEnabled) {
	            var paginationComp = new paginationComp_1.PaginationComp();
	            this.context.wireBean(paginationComp);
	            eSouthPanel.appendChild(paginationComp.getGui());
	            this.destroyFunctions.push(paginationComp.destroy.bind(paginationComp));
	        }
	        return eSouthPanel;
	    };
	    GridCore.prototype.onRowGroupChanged = function () {
	        if (!this.rowGroupComp) {
	            return;
	        }
	        var rowGroupPanelShow = this.gridOptionsWrapper.getRowGroupPanelShow();
	        if (rowGroupPanelShow === constants_1.Constants.ALWAYS) {
	            this.rowGroupComp.setVisible(true);
	        }
	        else if (rowGroupPanelShow === constants_1.Constants.ONLY_WHEN_GROUPING) {
	            var grouping = !this.columnController.isRowGroupEmpty();
	            this.rowGroupComp.setVisible(grouping);
	        }
	        else {
	            this.rowGroupComp.setVisible(false);
	        }
	        this.eRootPanel.doLayout();
	    };
	    GridCore.prototype.addWindowResizeListener = function () {
	        var eventListener = this.doLayout.bind(this);
	        window.addEventListener('resize', eventListener);
	        this.destroyFunctions.push(function () { return window.removeEventListener('resize', eventListener); });
	    };
	    GridCore.prototype.periodicallyDoLayout = function () {
	        var _this = this;
	        if (!this.finished) {
	            var intervalMillis = this.gridOptionsWrapper.getLayoutInterval();
	            // if interval is negative, this stops the layout from happening
	            if (intervalMillis > 0) {
	                this.frameworkFactory.setTimeout(function () {
	                    _this.doLayout();
	                    _this.gridPanel.periodicallyCheck();
	                    _this.periodicallyDoLayout();
	                }, intervalMillis);
	            }
	            else {
	                // if user provided negative number, we still do the check every 5 seconds,
	                // in case the user turns the number positive again
	                this.frameworkFactory.setTimeout(function () {
	                    _this.periodicallyDoLayout();
	                }, 5000);
	            }
	        }
	    };
	    GridCore.prototype.showToolPanel = function (show) {
	        if (show && !this.toolPanel) {
	            console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
	            this.toolPanelShowing = false;
	            return;
	        }
	        this.toolPanelShowing = show;
	        if (this.toolPanel) {
	            this.toolPanel.setVisible(show);
	            this.eRootPanel.doLayout();
	        }
	    };
	    GridCore.prototype.isToolPanelShowing = function () {
	        return this.toolPanelShowing;
	    };
	    GridCore.prototype.destroy = function () {
	        this.finished = true;
	        this.eGridDiv.removeChild(this.eRootPanel.getGui());
	        this.logger.log('Grid DOM removed');
	        this.destroyFunctions.forEach(function (func) { return func(); });
	    };
	    // Valid values for position are bottom, middle and top
	    GridCore.prototype.ensureNodeVisible = function (comparator, position) {
	        if (position === void 0) { position = 'top'; }
	        if (this.doingVirtualPaging) {
	            throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
	        }
	        // look for the node index we want to display
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var comparatorIsAFunction = typeof comparator === 'function';
	        var indexToSelect = -1;
	        // go through all the nodes, find the one we want to show
	        for (var i = 0; i < rowCount; i++) {
	            var node = this.rowModel.getRow(i);
	            if (comparatorIsAFunction) {
	                if (comparator(node)) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	            else {
	                // check object equality against node and data
	                if (comparator === node || comparator === node.data) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	        }
	        if (indexToSelect >= 0) {
	            this.gridPanel.ensureIndexVisible(indexToSelect, position);
	        }
	    };
	    GridCore.prototype.doLayout = function () {
	        // need to do layout first, as drawVirtualRows and setPinnedColHeight
	        // need to know the result of the resizing of the panels.
	        var sizeChanged = this.eRootPanel.doLayout();
	        // not sure why, this is a hack, but if size changed, it may need to be called
	        // again - as the size change can change whether scrolls are visible or not (i think).
	        // to see why, take this second 'doLayout' call out, and see example in docs for
	        // width & height, the grid will flicker as it doesn't get laid out correctly with
	        // one call to doLayout()
	        if (sizeChanged) {
	            this.eRootPanel.doLayout();
	        }
	        // both of the two below should be done in gridPanel, the gridPanel should register 'resize' to the panel
	        if (sizeChanged) {
	            this.rowRenderer.redrawAfterScroll();
	            var event_1 = {
	                type: events_1.Events.EVENT_GRID_SIZE_CHANGED,
	                clientWidth: this.eRootPanel.getGui().clientWidth,
	                clientHeight: this.eRootPanel.getGui().clientHeight,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridCore.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridCore.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridCore.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], GridCore.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridCore.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], GridCore.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], GridCore.prototype, "eGridDiv", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('quickFilterOnScope'),
	        __metadata("design:type", String)
	    ], GridCore.prototype, "quickFilterOnScope", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], GridCore.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridCore.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridCore.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridCore.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridCore.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Optional('rowGroupCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowGroupCompFactory", void 0);
	    __decorate([
	        context_1.Optional('pivotCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "pivotCompFactory", void 0);
	    __decorate([
	        context_1.Optional('toolPanel'),
	        __metadata("design:type", component_1.Component)
	    ], GridCore.prototype, "toolPanel", void 0);
	    __decorate([
	        context_1.Optional('statusBar'),
	        __metadata("design:type", component_1.Component)
	    ], GridCore.prototype, "statusBar", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "destroy", null);
	    GridCore = __decorate([
	        context_1.Bean('gridCore'),
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory])
	    ], GridCore);
	    return GridCore;
	}());
	exports.GridCore = GridCore;


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var popupService_1 = __webpack_require__(335);
	var valueService_1 = __webpack_require__(313);
	var columnController_1 = __webpack_require__(297);
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var gridApi_1 = __webpack_require__(294);
	var componentResolver_1 = __webpack_require__(336);
	var FilterManager = (function () {
	    function FilterManager() {
	        this.allFilters = {};
	        this.quickFilter = null;
	    }
	    FilterManager_1 = FilterManager;
	    FilterManager.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
	        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
	        // check this here, in case there is a filter from the start
	        this.checkExternalFilter();
	    };
	    FilterManager.prototype.setFilterModel = function (model) {
	        var _this = this;
	        var allPromises = [];
	        if (model) {
	            // mark the filters as we set them, so any active filters left over we stop
	            var modelKeys_1 = Object.keys(model);
	            utils_1.Utils.iterateObject(this.allFilters, function (colId, filterWrapper) {
	                utils_1.Utils.removeFromArray(modelKeys_1, colId);
	                var newModel = model[colId];
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	            // at this point, processedFields contains data for which we don't have a filter working yet
	            utils_1.Utils.iterateArray(modelKeys_1, function (colId) {
	                var column = _this.columnController.getPrimaryColumn(colId);
	                if (!column) {
	                    console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
	                    return;
	                }
	                var filterWrapper = _this.getOrCreateFilterWrapper(column);
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	        }
	        else {
	            utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	                _this.setModelOnFilterWrapper(filterWrapper.filterPromise, null);
	                allPromises.push(filterWrapper.filterPromise);
	            });
	        }
	        utils_1.Promise.all(allPromises).then(function (whatever) {
	            _this.onFilterChanged();
	        });
	    };
	    FilterManager.prototype.setModelOnFilterWrapper = function (filterPromise, newModel) {
	        filterPromise.then(function (filter) {
	            if (typeof filter.setModel !== 'function') {
	                console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');
	                return;
	            }
	            filter.setModel(newModel);
	        });
	    };
	    FilterManager.prototype.getFilterModel = function () {
	        var result = {};
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            // because user can provide filters, we provide useful error checking and messages
	            var filterPromise = filterWrapper.filterPromise;
	            var filter = filterPromise.resolveNow(null, function (filter) { return filter; });
	            if (filter == null)
	                return null;
	            if (typeof filter.getModel !== 'function') {
	                console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
	                return;
	            }
	            var model = filter.getModel();
	            if (utils_1.Utils.exists(model)) {
	                result[key] = model;
	            }
	        });
	        return result;
	    };
	    // returns true if any advanced filter (ie not quick filter) active
	    FilterManager.prototype.isAdvancedFilterPresent = function () {
	        return this.advancedFilterPresent;
	    };
	    FilterManager.prototype.setAdvancedFilterPresent = function () {
	        var atLeastOneActive = false;
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            if (filterWrapper.filterPromise.resolveNow(false, function (filter) { return filter.isFilterActive(); })) {
	                atLeastOneActive = true;
	            }
	        });
	        this.advancedFilterPresent = atLeastOneActive;
	    };
	    FilterManager.prototype.updateFilterFlagInColumns = function () {
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            var filterActive = filterWrapper.filterPromise.resolveNow(false, function (filter) { return filter.isFilterActive(); });
	            filterWrapper.column.setFilterActive(filterActive);
	        });
	    };
	    // returns true if quickFilter or advancedFilter
	    FilterManager.prototype.isAnyFilterPresent = function () {
	        return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
	    };
	    FilterManager.prototype.doesFilterPass = function (node, filterToSkip) {
	        var data = node.data;
	        var colKeys = Object.keys(this.allFilters);
	        for (var i = 0, l = colKeys.length; i < l; i++) {
	            var colId = colKeys[i];
	            var filterWrapper = this.allFilters[colId];
	            // if no filter, always pass
	            if (filterWrapper === undefined) {
	                continue;
	            }
	            var filter = filterWrapper.filterPromise.resolveNow(undefined, function (filter) { return filter; });
	            // if filter not yet there, continue
	            if (filter === undefined) {
	                continue;
	            }
	            if (filter === filterToSkip) {
	                continue;
	            }
	            // don't bother with filters that are not active
	            if (!filter.isFilterActive()) {
	                continue;
	            }
	            if (!filter.doesFilterPass) {
	                console.error('Filter is missing method doesFilterPass');
	            }
	            var params = {
	                node: node,
	                data: data
	            };
	            if (!filter.doesFilterPass(params)) {
	                return false;
	            }
	        }
	        // all filters passed
	        return true;
	    };
	    FilterManager.prototype.parseQuickFilter = function (newFilter) {
	        if (utils_1.Utils.missing(newFilter) || newFilter === "") {
	            return null;
	        }
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            console.warn('ag-grid: cannot do quick filtering when doing virtual paging');
	            return null;
	        }
	        return newFilter.toUpperCase();
	    };
	    // returns true if it has changed (not just same value again)
	    FilterManager.prototype.setQuickFilter = function (newFilter) {
	        var parsedFilter = this.parseQuickFilter(newFilter);
	        if (this.quickFilter !== parsedFilter) {
	            this.quickFilter = parsedFilter;
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.checkExternalFilter = function () {
	        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
	    };
	    FilterManager.prototype.onFilterChanged = function () {
	        this.setAdvancedFilterPresent();
	        this.updateFilterFlagInColumns();
	        this.checkExternalFilter();
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            filterWrapper.filterPromise.then(function (filter) {
	                if (filter.onAnyFilterChanged) {
	                    filter.onAnyFilterChanged();
	                }
	            });
	        });
	        var event = {
	            type: events_1.Events.EVENT_FILTER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    FilterManager.prototype.isQuickFilterPresent = function () {
	        return this.quickFilter !== null;
	    };
	    FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
	        return this.doesRowPassFilter(node, filterToSkip);
	    };
	    FilterManager.prototype.doesRowPassQuickFilterNoCache = function (node) {
	        var _this = this;
	        var columns = this.columnController.getAllPrimaryColumns();
	        var filterPasses = false;
	        columns.forEach(function (column) {
	            if (filterPasses) {
	                return;
	            }
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils_1.Utils.exists(part)) {
	                if (part.indexOf(_this.quickFilter) >= 0) {
	                    filterPasses = true;
	                }
	            }
	        });
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilterCache = function (node) {
	        if (!node.quickFilterAggregateText) {
	            this.aggregateRowForQuickFilter(node);
	        }
	        var filterPasses = node.quickFilterAggregateText.indexOf(this.quickFilter) >= 0;
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilter = function (node) {
	        var filterPasses;
	        if (this.gridOptionsWrapper.isCacheQuickFilter()) {
	            filterPasses = this.doesRowPassQuickFilterCache(node);
	        }
	        else {
	            filterPasses = this.doesRowPassQuickFilterNoCache(node);
	        }
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassFilter = function (node, filterToSkip) {
	        // the row must pass ALL of the filters, so if any of them fail,
	        // we return true. that means if a row passes the quick filter,
	        // but fails the column filter, it fails overall
	        // first up, check quick filter
	        if (this.isQuickFilterPresent()) {
	            if (!this.doesRowPassQuickFilter(node)) {
	                return false;
	            }
	        }
	        // secondly, give the client a chance to reject this row
	        if (this.externalFilterPresent) {
	            if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {
	                return false;
	            }
	        }
	        // lastly, check our internal advanced filter
	        if (this.advancedFilterPresent) {
	            if (!this.doesFilterPass(node, filterToSkip)) {
	                return false;
	            }
	        }
	        // got this far, all filters pass
	        return true;
	    };
	    FilterManager.prototype.getQuickFilterTextForColumn = function (column, rowNode) {
	        var value = this.valueService.getValue(column, rowNode);
	        var valueAfterCallback;
	        var colDef = column.getColDef();
	        if (column.getColDef().getQuickFilterText) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode.data,
	                column: column,
	                colDef: colDef
	            };
	            valueAfterCallback = column.getColDef().getQuickFilterText(params);
	        }
	        else {
	            valueAfterCallback = value;
	        }
	        if (valueAfterCallback && valueAfterCallback !== '') {
	            return valueAfterCallback.toString().toUpperCase();
	        }
	        else {
	            return null;
	        }
	    };
	    FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
	        var _this = this;
	        var stringParts = [];
	        var columns = this.columnController.getAllPrimaryColumns();
	        columns.forEach(function (column) {
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils_1.Utils.exists(part)) {
	                stringParts.push(part);
	            }
	        });
	        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
	    };
	    FilterManager.prototype.onNewRowsLoaded = function () {
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            filterWrapper.filterPromise.then(function (filter) {
	                if (filter.onNewRowsLoaded) {
	                    filter.onNewRowsLoaded();
	                }
	            });
	        });
	        this.updateFilterFlagInColumns();
	        this.setAdvancedFilterPresent();
	    };
	    FilterManager.prototype.createValueGetter = function (column) {
	        var that = this;
	        return function valueGetter(node) {
	            return that.valueService.getValue(column, node);
	        };
	    };
	    FilterManager.prototype.getFilterComponent = function (column) {
	        var filterWrapper = this.getOrCreateFilterWrapper(column);
	        return filterWrapper.filterPromise;
	    };
	    FilterManager.prototype.getOrCreateFilterWrapper = function (column) {
	        var filterWrapper = this.cachedFilter(column);
	        if (!filterWrapper) {
	            filterWrapper = this.createFilterWrapper(column);
	            this.allFilters[column.getColId()] = filterWrapper;
	        }
	        return filterWrapper;
	    };
	    FilterManager.prototype.cachedFilter = function (column) {
	        return this.allFilters[column.getColId()];
	    };
	    FilterManager.prototype.createFilterInstance = function (column, $scope) {
	        var _this = this;
	        var defaultFilter = 'textColumnFilter';
	        if (this.gridOptionsWrapper.isEnterprise()) {
	            defaultFilter = 'setColumnFilter';
	        }
	        var sanitisedColDef = utils_1.Utils.cloneObject(column.getColDef());
	        var event = {
	            type: events_1.Events.EVENT_FILTER_MODIFIED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.translateFilter(sanitisedColDef, 'set');
	        this.translateFilter(sanitisedColDef, 'text');
	        this.translateFilter(sanitisedColDef, 'number');
	        this.translateFilter(sanitisedColDef, 'date');
	        var filterChangedCallback = this.onFilterChanged.bind(this);
	        var filterModifiedCallback = function () { return _this.eventService.dispatchEvent(event); };
	        var params = {
	            column: column,
	            colDef: sanitisedColDef,
	            rowModel: this.rowModel,
	            filterChangedCallback: filterChangedCallback,
	            filterModifiedCallback: filterModifiedCallback,
	            valueGetter: this.createValueGetter(column),
	            context: this.gridOptionsWrapper.getContext(),
	            doesRowPassOtherFilter: null,
	            $scope: $scope
	        };
	        return this.componentResolver.createAgGridComponent(sanitisedColDef, params, 'filter', defaultFilter, true, function (params, filter) { return utils_1.Utils.assign(params, {
	            doesRowPassOtherFilter: _this.doesRowPassOtherFilters.bind(_this, filter),
	        }); });
	    };
	    FilterManager.prototype.translateFilter = function (target, toTranslate) {
	        if (target.filter === toTranslate) {
	            target.filter = toTranslate + "ColumnFilter";
	        }
	    };
	    FilterManager.prototype.createFilterWrapper = function (column) {
	        var filterWrapper = {
	            column: column,
	            filterPromise: null,
	            scope: null,
	            guiPromise: utils_1.Promise.external()
	        };
	        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
	        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
	        this.putIntoGui(filterWrapper);
	        return filterWrapper;
	    };
	    FilterManager.prototype.putIntoGui = function (filterWrapper) {
	        var _this = this;
	        var eFilterGui = document.createElement('div');
	        eFilterGui.className = 'ag-filter';
	        filterWrapper.filterPromise.then(function (filter) {
	            var guiFromFilter = filter.getGui();
	            // for backwards compatibility with Angular 1 - we
	            // used to allow providing back HTML from getGui().
	            // once we move away from supporting Angular 1
	            // directly, we can change this.
	            if (typeof guiFromFilter === 'string') {
	                guiFromFilter = utils_1.Utils.loadTemplate(guiFromFilter);
	            }
	            eFilterGui.appendChild(guiFromFilter);
	            if (filterWrapper.scope) {
	                _this.$compile(eFilterGui)(filterWrapper.scope);
	                setTimeout(function () { return filterWrapper.scope.$apply(); }, 0);
	            }
	            filterWrapper.guiPromise.resolve(eFilterGui);
	        });
	    };
	    FilterManager.prototype.onNewColumnsLoaded = function () {
	        this.destroy();
	    };
	    // destroys the filter, so it not longer takes part
	    FilterManager.prototype.destroyFilter = function (column) {
	        var filterWrapper = this.allFilters[column.getColId()];
	        if (filterWrapper) {
	            this.disposeFilterWrapper(filterWrapper);
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.disposeFilterWrapper = function (filterWrapper) {
	        var _this = this;
	        filterWrapper.filterPromise.then(function (filter) {
	            filter.setModel(null);
	            if (filter.destroy) {
	                filter.destroy();
	            }
	            filterWrapper.column.setFilterActive(false);
	            if (filterWrapper.scope) {
	                filterWrapper.scope.$destroy();
	            }
	            delete _this.allFilters[filterWrapper.column.getColId()];
	        });
	    };
	    FilterManager.prototype.destroy = function () {
	        var _this = this;
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            _this.disposeFilterWrapper(filterWrapper);
	        });
	    };
	    FilterManager.QUICK_FILTER_SEPARATOR = '\n';
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FilterManager.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], FilterManager.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], FilterManager.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FilterManager.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FilterManager.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], FilterManager.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], FilterManager.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], FilterManager.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], FilterManager.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], FilterManager.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "destroy", null);
	    FilterManager = FilterManager_1 = __decorate([
	        context_1.Bean('filterManager')
	    ], FilterManager);
	    return FilterManager;
	    var FilterManager_1;
	}());
	exports.FilterManager = FilterManager;


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var constants_1 = __webpack_require__(289);
	var context_1 = __webpack_require__(287);
	var gridCore_1 = __webpack_require__(333);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var PopupService = (function () {
	    function PopupService() {
	        // this.popupService.setPopupParent(this.eRootPanel.getGui());
	        this.activePopupElements = [];
	    }
	    PopupService.prototype.getPopupParent = function () {
	        return this.gridCore.getRootGui();
	    };
	    PopupService.prototype.positionPopupForMenu = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var y = sourceRect.top - parentRect.top;
	        y = this.keepYWithinBounds(params, y);
	        var minWidth = (params.ePopup.clientWidth > 0) ? params.ePopup.clientWidth : 200;
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth;
	        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
	        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
	        // we try place it first to the left, and then if not to the right.
	        var x;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, try left first
	            x = xLeftPosition();
	            if (x < 0) {
	                x = xRightPosition();
	            }
	            if (x > maxX) {
	                x = 0;
	            }
	        }
	        else {
	            // for LTR, try right first
	            x = xRightPosition();
	            if (x > maxX) {
	                x = xLeftPosition();
	            }
	            if (x < 0) {
	                x = 0;
	            }
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	        function xRightPosition() {
	            return sourceRect.right - parentRect.left - 2;
	        }
	        function xLeftPosition() {
	            return sourceRect.left - parentRect.left - minWidth;
	        }
	    };
	    PopupService.prototype.positionPopupUnderMouseEvent = function (params) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            x: params.mouseEvent.clientX - parentRect.left,
	            y: params.mouseEvent.clientY - parentRect.top,
	            keepWithinBounds: true
	        });
	        this.callPostProcessPopup(params.ePopup, null, params.mouseEvent, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopupUnderComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top + sourceRect.height,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.callPostProcessPopup = function (ePopup, eventSource, mouseEvent, type, column, rowNode) {
	        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
	        if (callback) {
	            var params = {
	                column: column,
	                rowNode: rowNode,
	                ePopup: ePopup,
	                type: type,
	                eventSource: eventSource,
	                mouseEvent: mouseEvent
	            };
	            callback(params);
	        }
	    };
	    PopupService.prototype.positionPopupOverComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopup = function (params) {
	        var x = params.x;
	        var y = params.y;
	        if (params.nudgeX) {
	            x += params.nudgeX;
	        }
	        if (params.nudgeY) {
	            y += params.nudgeY;
	        }
	        // if popup is overflowing to the bottom, move it up
	        if (params.keepWithinBounds) {
	            x = this.keepXWithinBounds(params, x);
	            y = this.keepYWithinBounds(params, y);
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	    };
	    PopupService.prototype.keepYWithinBounds = function (params, y) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minHeight;
	        if (params.ePopup.clientHeight > 0) {
	            minHeight = params.ePopup.clientHeight;
	        }
	        else {
	            minHeight = 200;
	        }
	        var heightOfParent = parentRect.bottom - parentRect.top;
	        var maxY = heightOfParent - minHeight - 5;
	        if (y > maxY) {
	            return maxY;
	        }
	        else if (y < 0) {
	            return 0;
	        }
	        else {
	            return y;
	        }
	    };
	    PopupService.prototype.keepXWithinBounds = function (params, x) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minWidth;
	        if (params.minWidth > 0) {
	            minWidth = params.minWidth;
	        }
	        else if (params.ePopup.clientWidth > 0) {
	            minWidth = params.ePopup.clientWidth;
	        }
	        else {
	            minWidth = 200;
	        }
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth - 5;
	        if (x > maxX) {
	            return maxX;
	        }
	        else if (x < 0) {
	            return 0;
	        }
	        else {
	            return x;
	        }
	    };
	    //adds an element to a div, but also listens to background checking for clicks,
	    //so that when the background is clicked, the child is removed again, giving
	    //a model look to popups.
	    PopupService.prototype.addAsModalPopup = function (eChild, closeOnEsc, closedCallback) {
	        var _this = this;
	        var eBody = this.gridOptionsWrapper.getDocument();
	        if (!eBody) {
	            console.warn('ag-grid: could not find the body of the document, document.body is empty');
	            return;
	        }
	        eChild.style.top = '0px';
	        eChild.style.left = '0px';
	        var popupAlreadyShown = utils_1.Utils.isVisible(eChild);
	        if (popupAlreadyShown) {
	            return;
	        }
	        var ePopupParent = this.getPopupParent();
	        ePopupParent.appendChild(eChild);
	        this.activePopupElements.push(eChild);
	        var popupHidden = false;
	        // let timeOfMouseEventOnChild = new Date().getTime();
	        // let childMouseClick: MouseEvent = null;
	        // let childTouch: TouchEvent = null;
	        var hidePopupOnEsc = function (event) {
	            var key = event.which || event.keyCode;
	            if (key === constants_1.Constants.KEY_ESCAPE) {
	                hidePopup(null);
	            }
	        };
	        var hidePopup = function (event) {
	            // we don't hide popup if the event was on the child, or any
	            // children of this child
	            var indexOfThisChild = _this.activePopupElements.indexOf(eChild);
	            for (var i = indexOfThisChild; i < _this.activePopupElements.length; i++) {
	                var element = _this.activePopupElements[i];
	                if (utils_1.Utils.isElementInEventPath(element, event)) {
	                    return;
	                }
	            }
	            // this method should only be called once. the client can have different
	            // paths, each one wanting to close, so this method may be called multiple
	            // times.
	            if (popupHidden) {
	                return;
	            }
	            popupHidden = true;
	            ePopupParent.removeChild(eChild);
	            utils_1.Utils.removeFromArray(_this.activePopupElements, eChild);
	            eBody.removeEventListener('keydown', hidePopupOnEsc);
	            eBody.removeEventListener('click', hidePopup);
	            eBody.removeEventListener('touchstart', hidePopup);
	            eBody.removeEventListener('contextmenu', hidePopup);
	            // eChild.removeEventListener('click', consumeMouseClick);
	            // eChild.removeEventListener('touchstart', consumeTouchClick);
	            if (closedCallback) {
	                closedCallback();
	            }
	        };
	        // if we add these listeners now, then the current mouse
	        // click will be included, which we don't want
	        setTimeout(function () {
	            if (closeOnEsc) {
	                eBody.addEventListener('keydown', hidePopupOnEsc);
	            }
	            eBody.addEventListener('click', hidePopup);
	            eBody.addEventListener('touchstart', hidePopup);
	            eBody.addEventListener('contextmenu', hidePopup);
	        }, 0);
	        return hidePopup;
	    };
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], PopupService.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PopupService.prototype, "gridOptionsWrapper", void 0);
	    PopupService = __decorate([
	        context_1.Bean('popupService')
	    ], PopupService);
	    return PopupService;
	}());
	exports.PopupService = PopupService;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var utils_1 = __webpack_require__(288);
	var namedComponentResolver_1 = __webpack_require__(337);
	var agComponentUtils_1 = __webpack_require__(367);
	var componentMetadataProvider_1 = __webpack_require__(368);
	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
	var ComponentSource;
	(function (ComponentSource) {
	    ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
	    ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
	})(ComponentSource = exports.ComponentSource || (exports.ComponentSource = {}));
	var ComponentResolver = (function () {
	    function ComponentResolver() {
	    }
	    /**
	     * This method returns the underlying representation of the component to be created. ie for Javascript the
	     * underlying function where we should be calling new into. In case of the frameworks, the framework class
	     * object that represents the component to be created.
	     *
	     * This method is handy for different reasons, for example if you want to check if a component has a particular
	     * method implemented without having to create the component, just by inspecting the source component
	     *
	     * It takes
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param componentNameOpt: The actual name of the component to instantiate, this is usually the same as propertyName, but in
	     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
	     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
	     *      component found, it throws an error, by default all components are MANDATORY
	     */
	    ComponentResolver.prototype.getComponentToUse = function (holder, propertyName, componentNameOpt) {
	        var componentName = componentNameOpt == null ? propertyName : componentNameOpt;
	        /**
	         * There are five things that can happen when resolving a component.
	         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
	         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
	         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
	         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
	         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
	         */
	        var hardcodedNameComponent = null;
	        var HardcodedJsComponent = null;
	        var hardcodedJsFunction = null;
	        var HardcodedFwComponent = null;
	        if (holder != null) {
	            var componentPropertyValue = holder[propertyName];
	            if (componentPropertyValue != null) {
	                if (typeof componentPropertyValue === 'string') {
	                    hardcodedNameComponent = componentPropertyValue;
	                }
	                else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
	                    HardcodedJsComponent = componentPropertyValue;
	                }
	                else {
	                    hardcodedJsFunction = componentPropertyValue;
	                }
	            }
	            HardcodedFwComponent = holder[propertyName + "Framework"];
	        }
	        /**
	         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
	         * combination
	         */
	        if ((HardcodedJsComponent && HardcodedFwComponent) ||
	            (hardcodedNameComponent && HardcodedFwComponent) ||
	            (hardcodedJsFunction && HardcodedFwComponent)) {
	            throw Error("You are trying to specify: " + propertyName + " twice as a component.");
	        }
	        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
	            throw Error("You are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
	        }
	        /**
	         * At this stage we are guaranteed to either have,
	         * DEPRECATED
	         * - A unique HardcodedFwComponent
	         * - A unique HardcodedJsComponent
	         * - A unique hardcodedJsFunction
	         * BY NAME- FAVOURED APPROACH
	         * - A unique hardcodedNameComponent
	         * - None of the previous, hence we revert to: RegisteredComponent
	         */
	        if (HardcodedFwComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedFwComponent}`);
	            return {
	                type: ComponentType.FRAMEWORK,
	                component: HardcodedFwComponent,
	                source: ComponentSource.HARDCODED
	            };
	        }
	        if (HardcodedJsComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedJsComponent}`);
	            return {
	                type: ComponentType.AG_GRID,
	                component: HardcodedJsComponent,
	                source: ComponentSource.HARDCODED
	            };
	        }
	        if (hardcodedJsFunction) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
	            // console.warn(`${hardcodedJsFunction}`);
	            return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, ComponentType.AG_GRID, ComponentSource.HARDCODED);
	        }
	        //^^^^^ABOVE DEPRECATED
	        var componentNameToUse;
	        if (hardcodedNameComponent) {
	            componentNameToUse = hardcodedNameComponent;
	        }
	        else {
	            componentNameToUse = componentName;
	        }
	        return this.namedComponentResolver.resolve(propertyName, componentNameToUse);
	    };
	    /**
	     * Useful to check what would be the resultant params for a given object
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     * @returns {any} It merges the user agGridParams with the actual params specified by the user.
	     */
	    ComponentResolver.prototype.mergeParams = function (holder, propertyName, agGridParams) {
	        var customParams = holder ? holder[propertyName + "Params"] : null;
	        var finalParams = {};
	        utils_1._.mergeDeep(finalParams, agGridParams);
	        utils_1._.mergeDeep(finalParams, customParams);
	        if (!finalParams.api) {
	            finalParams.api = this.gridOptions.api;
	        }
	        return finalParams;
	    };
	    /**
	     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
	     * It takes
	     *  @param holderOpt: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param componentNameOpt: The actual name of the component to instantiate, this is usually the same as propertyName, but in
	     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
	     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
	     *      component found, it throws an error, by default all components are MANDATORY
	     *  @param customInitParamsCb: A chance to customise the params passed to the init method. It receives what the current
	     *  params are and the component that init is about to get called for
	     */
	    ComponentResolver.prototype.createAgGridComponent = function (holderOpt, agGridParams, propertyName, componentNameOpt, mandatory, customInitParamsCb) {
	        if (mandatory === void 0) { mandatory = true; }
	        var holder = holderOpt == null ? this.gridOptions : holderOpt;
	        var componentName = componentNameOpt == null ? propertyName : componentNameOpt;
	        //Create the component instance
	        var component = this.newAgGridComponent(holder, propertyName, componentName, mandatory);
	        if (!component)
	            return null;
	        //Wire the component and call the init method with the correct params
	        var finalParams = this.mergeParams(holder, propertyName, agGridParams);
	        this.context.wireBean(component);
	        var deferredInit;
	        if (customInitParamsCb == null) {
	            deferredInit = component.init(finalParams);
	        }
	        else {
	            deferredInit = component.init(customInitParamsCb(finalParams, component));
	        }
	        if (deferredInit == null) {
	            return utils_1.Promise.resolve(component);
	            // return new Promise<A> (resolve=>{
	            //     setTimeout(
	            //         ()=>resolve(component),
	            //         500
	            //     )
	            // })
	        }
	        else {
	            var asPromise = deferredInit;
	            return asPromise.map(function (notRelevant) { return component; });
	        }
	    };
	    ComponentResolver.prototype.newAgGridComponent = function (holder, propertyName, componentName, mandatory) {
	        if (mandatory === void 0) { mandatory = true; }
	        var componentToUse = this.getComponentToUse(holder, propertyName, componentName);
	        if (!componentToUse || !componentToUse.component) {
	            if (mandatory) {
	                console.error("Error creating component " + propertyName + "=>" + componentName);
	            }
	            return null;
	        }
	        if (componentToUse.type === ComponentType.AG_GRID) {
	            return new componentToUse.component();
	        }
	        //Using framework component
	        var FrameworkComponentRaw = componentToUse.component;
	        var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
	        return this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, componentName);
	    };
	    __decorate([
	        context_1.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ComponentResolver.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired("context"),
	        __metadata("design:type", context_1.Context)
	    ], ComponentResolver.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired("namedComponentResolver"),
	        __metadata("design:type", namedComponentResolver_1.NamedComponentResolver)
	    ], ComponentResolver.prototype, "namedComponentResolver", void 0);
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], ComponentResolver.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context_1.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)
	    ], ComponentResolver.prototype, "componentMetadataProvider", void 0);
	    __decorate([
	        context_1.Optional("frameworkComponentWrapper"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "frameworkComponentWrapper", void 0);
	    ComponentResolver = __decorate([
	        context_1.Bean('componentResolver')
	    ], ComponentResolver);
	    return ComponentResolver;
	}());
	exports.ComponentResolver = ComponentResolver;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var componentResolver_1 = __webpack_require__(336);
	var context_1 = __webpack_require__(287);
	var componentProvider_1 = __webpack_require__(338);
	var agComponentUtils_1 = __webpack_require__(367);
	var NamedComponentResolver = (function () {
	    function NamedComponentResolver() {
	    }
	    NamedComponentResolver.prototype.resolve = function (propertyName, componentNameOpt) {
	        var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
	        var registeredComponent = this.componentProvider.retrieve(componentName);
	        if (registeredComponent == null)
	            return null;
	        //If it is a FW it has to be registered as a component
	        if (registeredComponent.type == componentResolver_1.ComponentType.FRAMEWORK) {
	            return {
	                component: registeredComponent.component,
	                type: componentResolver_1.ComponentType.FRAMEWORK,
	                source: componentResolver_1.ComponentSource.REGISTERED_BY_NAME
	            };
	        }
	        //If it is JS it may be a function or a component
	        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
	            return {
	                component: registeredComponent.component,
	                type: componentResolver_1.ComponentType.AG_GRID,
	                source: (registeredComponent.source == componentProvider_1.RegisteredComponentSource.REGISTERED) ? componentResolver_1.ComponentSource.REGISTERED_BY_NAME : componentResolver_1.ComponentSource.DEFAULT
	            };
	        }
	        // This is a function
	        return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.type, (registeredComponent.source == componentProvider_1.RegisteredComponentSource.REGISTERED) ? componentResolver_1.ComponentSource.REGISTERED_BY_NAME : componentResolver_1.ComponentSource.DEFAULT);
	    };
	    __decorate([
	        context_1.Autowired("componentProvider"),
	        __metadata("design:type", componentProvider_1.ComponentProvider)
	    ], NamedComponentResolver.prototype, "componentProvider", void 0);
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], NamedComponentResolver.prototype, "agComponentUtils", void 0);
	    NamedComponentResolver = __decorate([
	        context_1.Bean("namedComponentResolver")
	    ], NamedComponentResolver);
	    return NamedComponentResolver;
	}());
	exports.NamedComponentResolver = NamedComponentResolver;


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var textCellEditor_1 = __webpack_require__(339);
	var context_1 = __webpack_require__(287);
	var dateFilter_1 = __webpack_require__(340);
	var headerComp_1 = __webpack_require__(343);
	var headerGroupComp_1 = __webpack_require__(346);
	var floatingFilter_1 = __webpack_require__(347);
	var floatingFilterWrapper_1 = __webpack_require__(348);
	var componentResolver_1 = __webpack_require__(336);
	var groupCellRenderer_1 = __webpack_require__(356);
	var animateShowChangeCellRenderer_1 = __webpack_require__(355);
	var animateSlideCellRenderer_1 = __webpack_require__(354);
	var rowComp_1 = __webpack_require__(329);
	var selectCellEditor_1 = __webpack_require__(361);
	var popupTextCellEditor_1 = __webpack_require__(362);
	var popupSelectCellEditor_1 = __webpack_require__(363);
	var largeTextCellEditor_1 = __webpack_require__(364);
	var textFilter_1 = __webpack_require__(365);
	var numberFilter_1 = __webpack_require__(366);
	var RegisteredComponentSource;
	(function (RegisteredComponentSource) {
	    RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
	})(RegisteredComponentSource = exports.RegisteredComponentSource || (exports.RegisteredComponentSource = {}));
	var ComponentProvider = (function () {
	    function ComponentProvider() {
	        this.jsComponents = {};
	        this.frameworkComponents = {};
	    }
	    ComponentProvider.prototype.postConstruct = function () {
	        this.agGridDefaults = {
	            //THE FOLLOWING COMPONENTS HAVE NO DEFAULTS, THEY NEED TO BE SPECIFIED AS AN SPECIFIC FLAVOUR
	            //THERE ARE NO DEFAULTS THAT FIT ALL PURPOSES
	            //THEY ARE ADDED HERE TO AVOID THE NOT FOUND WARNING.
	            filterComponent: null,
	            customFloatingFilterComponent: null,
	            //date
	            dateComponent: dateFilter_1.DefaultDateComponent,
	            //header
	            headerComponent: headerComp_1.HeaderComp,
	            headerGroupComponent: headerGroupComp_1.HeaderGroupComp,
	            //floating filters
	            setFloatingFilterComponent: floatingFilter_1.SetFloatingFilterComp,
	            textFloatingFilterComponent: floatingFilter_1.TextFloatingFilterComp,
	            numberFloatingFilterComponent: floatingFilter_1.NumberFloatingFilterComp,
	            dateFloatingFilterComponent: floatingFilter_1.DateFloatingFilterComp,
	            readModelAsStringFloatingFilterComponent: floatingFilter_1.ReadModelAsStringFloatingFilterComp,
	            floatingFilterWrapperComponent: floatingFilterWrapper_1.FloatingFilterWrapperComp,
	            emptyFloatingFilterWrapperComponent: floatingFilterWrapper_1.EmptyFloatingFilterWrapperComp,
	            //renderers
	            cellRenderer: null,
	            fullWidthCellRenderer: null,
	            innerRenderer: null,
	            groupRowInnerRenderer: null,
	            animateShowChange: animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer,
	            animateSlide: animateSlideCellRenderer_1.AnimateSlideCellRenderer,
	            group: groupCellRenderer_1.GroupCellRenderer,
	            groupRowRenderer: groupCellRenderer_1.GroupCellRenderer,
	            loadingCellRenderer: rowComp_1.LoadingCellRenderer,
	            pinnedRowCellRenderer: null,
	            //editors
	            cellEditor: textCellEditor_1.TextCellEditor,
	            textCellEditor: textCellEditor_1.TextCellEditor,
	            text: textCellEditor_1.TextCellEditor,
	            selectCellEditor: selectCellEditor_1.SelectCellEditor,
	            select: selectCellEditor_1.SelectCellEditor,
	            popupTextCellEditor: popupTextCellEditor_1.PopupTextCellEditor,
	            popupText: popupTextCellEditor_1.PopupTextCellEditor,
	            popupSelectCellEditor: popupSelectCellEditor_1.PopupSelectCellEditor,
	            popupSelect: popupSelectCellEditor_1.PopupSelectCellEditor,
	            largeTextCellEditor: largeTextCellEditor_1.LargeTextCellEditor,
	            largeText: largeTextCellEditor_1.LargeTextCellEditor,
	            //filter
	            textColumnFilter: textFilter_1.TextFilter,
	            numberColumnFilter: numberFilter_1.NumberFilter,
	            dateColumnFilter: dateFilter_1.DateFilter,
	        };
	    };
	    ComponentProvider.prototype.registerComponent = function (name, component) {
	        // console.warn(`ag-grid: registering components is a lab feature, is not intended to be used or supported yet.`);
	        if (this.frameworkComponents[name]) {
	            console.error("Trying to register a component that you have already registered for frameworks: " + name);
	            return;
	        }
	        this.jsComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.registerFwComponent = function (name, component) {
	        // console.warn(`ag-grid: registering components is a lab feature, is not intended to be used or supported yet.`);
	        if (this.jsComponents[name]) {
	            console.error("Trying to register a component that you have already registered for plain javascript: " + name);
	            return;
	        }
	        this.frameworkComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.retrieve = function (name) {
	        if (this.frameworkComponents[name]) {
	            return {
	                type: componentResolver_1.ComponentType.FRAMEWORK,
	                component: this.frameworkComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.jsComponents[name]) {
	            return {
	                type: componentResolver_1.ComponentType.AG_GRID,
	                component: this.jsComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.agGridDefaults[name]) {
	            return {
	                type: componentResolver_1.ComponentType.AG_GRID,
	                component: this.agGridDefaults[name],
	                source: RegisteredComponentSource.DEFAULT
	            };
	        }
	        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
	            console.warn("ag-grid: Looking for component [" + name + "] but it wasn't found.");
	        }
	        return null;
	    };
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentProvider.prototype, "postConstruct", null);
	    ComponentProvider = __decorate([
	        context_1.Bean('componentProvider')
	    ], ComponentProvider);
	    return ComponentProvider;
	}());
	exports.ComponentProvider = ComponentProvider;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var constants_1 = __webpack_require__(289);
	var component_1 = __webpack_require__(317);
	var utils_1 = __webpack_require__(288);
	var TextCellEditor = (function (_super) {
	    __extends(TextCellEditor, _super);
	    function TextCellEditor() {
	        return _super.call(this, TextCellEditor.TEMPLATE) || this;
	    }
	    TextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        var eInput = this.getGui();
	        var startValue;
	        // cellStartedEdit is only false if we are doing fullRow editing
	        if (params.cellStartedEdit) {
	            this.focusAfterAttached = true;
	            var keyPressBackspaceOrDelete = params.keyPress === constants_1.Constants.KEY_BACKSPACE
	                || params.keyPress === constants_1.Constants.KEY_DELETE;
	            if (keyPressBackspaceOrDelete) {
	                startValue = '';
	            }
	            else if (params.charPress) {
	                startValue = params.charPress;
	            }
	            else {
	                startValue = this.getStartValue(params);
	                if (params.keyPress !== constants_1.Constants.KEY_F2) {
	                    this.highlightAllOnFocus = true;
	                }
	            }
	        }
	        else {
	            this.focusAfterAttached = false;
	            startValue = this.getStartValue(params);
	        }
	        if (utils_1.Utils.exists(startValue)) {
	            eInput.value = startValue;
	        }
	        this.addDestroyableEventListener(eInput, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants_1.Constants.KEY_LEFT
	                || event.keyCode === constants_1.Constants.KEY_RIGHT
	                || event.keyCode === constants_1.Constants.KEY_UP
	                || event.keyCode === constants_1.Constants.KEY_DOWN
	                || event.keyCode === constants_1.Constants.KEY_PAGE_DOWN
	                || event.keyCode === constants_1.Constants.KEY_PAGE_UP
	                || event.keyCode === constants_1.Constants.KEY_PAGE_HOME
	                || event.keyCode === constants_1.Constants.KEY_PAGE_END;
	            if (isNavigationKey) {
	                // this stops the grid from executing keyboard navigation
	                event.stopPropagation();
	                if (!(event.keyCode === constants_1.Constants.KEY_LEFT) && !(event.keyCode === constants_1.Constants.KEY_RIGHT)) {
	                    // this stops the browser from scrolling
	                    event.preventDefault();
	                }
	            }
	        });
	    };
	    TextCellEditor.prototype.afterGuiAttached = function () {
	        if (!this.focusAfterAttached) {
	            return;
	        }
	        var eInput = this.getGui();
	        eInput.focus();
	        if (this.highlightAllOnFocus) {
	            eInput.select();
	        }
	        else {
	            // when we started editing, we want the carot at the end, not the start.
	            // this comes into play in two scenarios: a) when user hits F2 and b)
	            // when user hits a printable character, then on IE (and only IE) the carot
	            // was placed after the first character, thus 'apply' would end up as 'pplea'
	            var length_1 = eInput.value ? eInput.value.length : 0;
	            if (length_1 > 0) {
	                eInput.setSelectionRange(length_1, length_1);
	            }
	        }
	    };
	    // gets called when tabbing trough cells and in full row edit mode
	    TextCellEditor.prototype.focusIn = function () {
	        var eInput = this.getGui();
	        eInput.focus();
	        eInput.select();
	    };
	    TextCellEditor.prototype.getValue = function () {
	        var eInput = this.getGui();
	        return this.params.parseValue(eInput.value);
	    };
	    TextCellEditor.prototype.getStartValue = function (params) {
	        var formatValue = params.useFormatter || params.column.getColDef().refData;
	        return formatValue ? params.formatValue(params.value) : params.value;
	    };
	    TextCellEditor.TEMPLATE = '<input class="ag-cell-edit-input" type="text"/>';
	    return TextCellEditor;
	}(component_1.Component));
	exports.TextCellEditor = TextCellEditor;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var componentAnnotations_1 = __webpack_require__(330);
	var utils_1 = __webpack_require__(288);
	var baseFilter_1 = __webpack_require__(341);
	var context_1 = __webpack_require__(287);
	var componentRecipes_1 = __webpack_require__(342);
	var DateFilter = (function (_super) {
	    __extends(DateFilter, _super);
	    function DateFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DateFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            dateFrom: from,
	            dateTo: this.getDateTo(),
	            type: this.filter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
	    };
	    DateFilter.prototype.bodyTemplate = function () {
	        return "<div class=\"ag-filter-body\">\n                    <div class=\"ag-filter-date-from\" id=\"filterDateFromPanel\">\n                    </div>\n                    <div class=\"ag-filter-date-to\" id=\"filterDateToPanel\">\n                    </div>\n                </div>";
	    };
	    DateFilter.prototype.initialiseFilterBodyUi = function () {
	        var _this = this;
	        var dateComponentParams = {
	            onDateChanged: this.onDateChanged.bind(this)
	        };
	        this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateToComponent) {
	            _this.dateToComponent = dateToComponent;
	            var dateToElement = _this.dateToComponent.getGui();
	            _this.eDateToPanel.appendChild(dateToElement);
	            if (_this.dateToComponent.afterGuiAttached) {
	                _this.dateToComponent.afterGuiAttached();
	            }
	        });
	        this.componentRecipes.newDateComponent(dateComponentParams).then(function (dateFromComponent) {
	            _this.dateFromComponent = dateFromComponent;
	            var dateFromElement = _this.dateFromComponent.getGui();
	            _this.eDateFromPanel.appendChild(dateFromElement);
	            if (_this.dateFromComponent.afterGuiAttached) {
	                _this.dateFromComponent.afterGuiAttached();
	            }
	        });
	    };
	    DateFilter.prototype.onDateChanged = function () {
	        this.dateFrom = DateFilter.removeTimezone(this.dateFromComponent.getDate());
	        this.dateTo = DateFilter.removeTimezone(this.dateToComponent.getDate());
	        this.onFilterChanged();
	    };
	    DateFilter.prototype.refreshFilterBodyUi = function () {
	        var visible = this.filter === baseFilter_1.BaseFilter.IN_RANGE;
	        utils_1.Utils.setVisible(this.eDateToPanel, visible);
	    };
	    DateFilter.prototype.comparator = function () {
	        return this.filterParams.comparator ? this.filterParams.comparator : this.defaultComparator.bind(this);
	    };
	    DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {
	        //The default comparator assumes that the cellValue is a date
	        var cellAsDate = cellValue;
	        if (cellAsDate < filterDate) {
	            return -1;
	        }
	        if (cellAsDate > filterDate) {
	            return 1;
	        }
	        return cellValue != null ? 0 : -1;
	    };
	    DateFilter.prototype.serialize = function () {
	        return {
	            dateTo: utils_1.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-"),
	            dateFrom: utils_1.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-"),
	            type: this.filter ? this.filter : this.defaultFilter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.filterValues = function () {
	        return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ?
	            this.dateFromComponent.getDate() :
	            [this.dateFromComponent.getDate(), this.dateToComponent.getDate()];
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateFrom = function () {
	        return utils_1.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateTo = function () {
	        return utils_1.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getFilterType = function () {
	        return this.filter;
	    };
	    DateFilter.prototype.setDateFrom = function (date) {
	        this.dateFrom = utils_1.Utils.parseYyyyMmDdToDate(date, "-");
	        this.dateFromComponent.setDate(this.dateFrom);
	    };
	    DateFilter.prototype.setDateTo = function (date) {
	        this.dateTo = utils_1.Utils.parseYyyyMmDdToDate(date, "-");
	        this.dateToComponent.setDate(this.dateTo);
	    };
	    DateFilter.prototype.resetState = function () {
	        this.setDateFrom(null);
	        this.setDateTo(null);
	        this.setFilterType(this.defaultFilter);
	    };
	    DateFilter.prototype.parse = function (model) {
	        this.setDateFrom(model.dateFrom);
	        this.setDateTo(model.dateTo);
	        this.setFilterType(model.type);
	    };
	    DateFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    DateFilter.removeTimezone = function (from) {
	        if (!from)
	            return null;
	        return new Date(from.getFullYear(), from.getMonth(), from.getDate());
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], DateFilter.prototype, "componentRecipes", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterDateFromPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateFromPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterDateToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateToPanel", void 0);
	    return DateFilter;
	}(baseFilter_1.ScalarBaseFilter));
	exports.DateFilter = DateFilter;
	var DefaultDateComponent = (function (_super) {
	    __extends(DefaultDateComponent, _super);
	    function DefaultDateComponent() {
	        return _super.call(this, "<input class=\"ag-filter-filter\" type=\"text\" placeholder=\"yyyy-mm-dd\">") || this;
	    }
	    DefaultDateComponent.prototype.init = function (params) {
	        this.eDateInput = this.getGui();
	        if (utils_1.Utils.isBrowserChrome()) {
	            this.eDateInput.type = 'date';
	        }
	        this.listener = params.onDateChanged;
	        this.addGuiEventListener('input', this.listener);
	    };
	    DefaultDateComponent.prototype.getDate = function () {
	        return utils_1.Utils.parseYyyyMmDdToDate(this.eDateInput.value, "-");
	    };
	    DefaultDateComponent.prototype.setDate = function (date) {
	        this.eDateInput.value = utils_1.Utils.serializeDateToYyyyMmDd(date, "-");
	    };
	    return DefaultDateComponent;
	}(component_1.Component));
	exports.DefaultDateComponent = DefaultDateComponent;


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var componentAnnotations_1 = __webpack_require__(330);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var utils_1 = __webpack_require__(288);
	var DEFAULT_TRANSLATIONS = {
	    loadingOoo: 'Loading...',
	    equals: 'Equals',
	    notEqual: 'Not equal',
	    lessThan: 'Less than',
	    greaterThan: 'Greater than',
	    inRange: 'In range',
	    lessThanOrEqual: 'Less than or equals',
	    greaterThanOrEqual: 'Greater than or equals',
	    filterOoo: 'Filter...',
	    contains: 'Contains',
	    notContains: 'Not contains',
	    startsWith: 'Starts with',
	    endsWith: 'Ends with',
	    searchOoo: 'Search...',
	    selectAll: 'Select All',
	    applyFilter: 'Apply Filter',
	    clearFilter: 'Clear Filter'
	};
	/**
	 * T(ype) The type of this filter. ie in DateFilter T=Date
	 * P(arams) The params that this filter can take
	 * M(model getModel/setModel) The object that this filter serializes to
	 * F Floating filter params
	 *
	 * Contains common logic to ALL filters.. Translation, apply and clear button
	 * get/setModel context wiring....
	 */
	var BaseFilter = (function (_super) {
	    __extends(BaseFilter, _super);
	    function BaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilter.prototype.init = function (params) {
	        this.filterParams = params;
	        this.defaultFilter = this.filterParams.defaultOption;
	        if (this.filterParams.filterOptions) {
	            if (this.filterParams.filterOptions.lastIndexOf(BaseFilter.EQUALS) < 0) {
	                this.defaultFilter = this.filterParams.filterOptions[0];
	            }
	        }
	        this.customInit();
	        this.filter = this.defaultFilter;
	        this.clearActive = params.clearButton === true;
	        //Allowing for old param property apply, even though is not advertised through the interface
	        this.applyActive = ((params.applyButton === true) || (params.apply === true));
	        this.newRowsActionKeep = params.newRowsAction === 'keep';
	        this.setTemplate(this.generateTemplate());
	        utils_1._.setVisible(this.eApplyButton, this.applyActive);
	        if (this.applyActive) {
	            this.addDestroyableEventListener(this.eApplyButton, "click", this.filterParams.filterChangedCallback);
	        }
	        utils_1._.setVisible(this.eClearButton, this.clearActive);
	        if (this.clearActive) {
	            this.addDestroyableEventListener(this.eClearButton, "click", this.onClearButton.bind(this));
	        }
	        var anyButtonVisible = this.applyActive || this.clearActive;
	        utils_1._.setVisible(this.eButtonsPanel, anyButtonVisible);
	        this.instantiate(this.context);
	        this.initialiseFilterBodyUi();
	        this.refreshFilterBodyUi();
	    };
	    BaseFilter.prototype.onClearButton = function () {
	        this.setModel(null);
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.floatingFilter = function (from) {
	        if (from !== '') {
	            var model = this.modelFromFloatingFilter(from);
	            this.setModel(model);
	        }
	        else {
	            this.resetState();
	        }
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.onNewRowsLoaded = function () {
	        if (!this.newRowsActionKeep) {
	            this.resetState();
	        }
	    };
	    BaseFilter.prototype.getModel = function () {
	        if (this.isFilterActive()) {
	            return this.serialize();
	        }
	        else {
	            return null;
	        }
	    };
	    BaseFilter.prototype.getNullableModel = function () {
	        return this.serialize();
	    };
	    BaseFilter.prototype.setModel = function (model) {
	        if (model) {
	            this.parse(model);
	        }
	        else {
	            this.resetState();
	        }
	        this.refreshFilterBodyUi();
	    };
	    BaseFilter.prototype.doOnFilterChanged = function (applyNow) {
	        if (applyNow === void 0) { applyNow = false; }
	        this.filterParams.filterModifiedCallback();
	        var requiresApplyAndIsApplying = this.applyActive && applyNow;
	        var notRequiresApply = !this.applyActive;
	        var shouldFilter = notRequiresApply || requiresApplyAndIsApplying;
	        if (shouldFilter) {
	            this.filterParams.filterChangedCallback();
	        }
	        this.refreshFilterBodyUi();
	        return shouldFilter;
	    };
	    BaseFilter.prototype.onFilterChanged = function () {
	        this.doOnFilterChanged();
	    };
	    BaseFilter.prototype.onFloatingFilterChanged = function (change) {
	        //It has to be of the type FloatingFilterWithApplyChange if it gets here
	        var casted = change;
	        this.setModel(casted ? casted.model : null);
	        return this.doOnFilterChanged(casted ? casted.apply : false);
	    };
	    BaseFilter.prototype.generateFilterHeader = function () {
	        return '';
	    };
	    BaseFilter.prototype.generateTemplate = function () {
	        var translate = this.translate.bind(this);
	        var body = this.bodyTemplate();
	        return "<div>\n                    " + this.generateFilterHeader() + "\n                    " + body + "\n                    <div class=\"ag-filter-apply-panel\" id=\"applyPanel\">\n                        <button type=\"button\" id=\"clearButton\">" + translate('clearFilter') + "</button>\n                        <button type=\"button\" id=\"applyButton\">" + translate('applyFilter') + "</button>\n                    </div>\n                </div>";
	    };
	    BaseFilter.prototype.translate = function (toTranslate) {
	        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
	        return translate(toTranslate, DEFAULT_TRANSLATIONS[toTranslate]);
	    };
	    BaseFilter.EQUALS = 'equals';
	    BaseFilter.NOT_EQUAL = 'notEqual';
	    BaseFilter.LESS_THAN = 'lessThan';
	    BaseFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';
	    BaseFilter.GREATER_THAN = 'greaterThan';
	    BaseFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';
	    BaseFilter.IN_RANGE = 'inRange';
	    BaseFilter.CONTAINS = 'contains'; //1;
	    BaseFilter.NOT_CONTAINS = 'notContains'; //1;
	    BaseFilter.STARTS_WITH = 'startsWith'; //4;
	    BaseFilter.ENDS_WITH = 'endsWith'; //5;
	    __decorate([
	        componentAnnotations_1.QuerySelector('#applyPanel'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eButtonsPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#applyButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eApplyButton", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#clearButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eClearButton", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BaseFilter.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BaseFilter.prototype, "gridOptionsWrapper", void 0);
	    return BaseFilter;
	}(component_1.Component));
	exports.BaseFilter = BaseFilter;
	/**
	 * Every filter with a dropdown where the user can specify a comparing type against the filter values
	 */
	var ComparableBaseFilter = (function (_super) {
	    __extends(ComparableBaseFilter, _super);
	    function ComparableBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ComparableBaseFilter.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.addDestroyableEventListener(this.eTypeSelector, "change", this.onFilterTypeChanged.bind(this));
	    };
	    ComparableBaseFilter.prototype.customInit = function () {
	        if (!this.defaultFilter) {
	            this.defaultFilter = this.getDefaultType();
	        }
	    };
	    ComparableBaseFilter.prototype.generateFilterHeader = function () {
	        var _this = this;
	        var defaultFilterTypes = this.getApplicableFilterTypes();
	        var restrictedFilterTypes = this.filterParams.filterOptions;
	        var actualFilterTypes = restrictedFilterTypes ? restrictedFilterTypes : defaultFilterTypes;
	        var optionsHtml = actualFilterTypes.map(function (filterType) {
	            var localeFilterName = _this.translate(filterType);
	            return "<option value=\"" + filterType + "\">" + localeFilterName + "</option>";
	        });
	        var readOnly = optionsHtml.length == 1 ? 'disabled' : '';
	        return optionsHtml.length <= 0 ?
	            '' :
	            "<div>\n                <select class=\"ag-filter-select\" id=\"filterType\" " + readOnly + ">\n                    " + optionsHtml.join('') + "\n                </select>\n            </div>";
	    };
	    ComparableBaseFilter.prototype.initialiseFilterBodyUi = function () {
	        this.setFilterType(this.filter);
	    };
	    ComparableBaseFilter.prototype.onFilterTypeChanged = function () {
	        this.filter = this.eTypeSelector.value;
	        this.refreshFilterBodyUi();
	        this.onFilterChanged();
	    };
	    ComparableBaseFilter.prototype.isFilterActive = function () {
	        var rawFilterValues = this.filterValues();
	        if (this.filter === BaseFilter.IN_RANGE) {
	            var filterValueArray = rawFilterValues;
	            return filterValueArray[0] != null && filterValueArray[1] != null;
	        }
	        else {
	            return rawFilterValues != null;
	        }
	    };
	    ComparableBaseFilter.prototype.setFilterType = function (filterType) {
	        this.filter = filterType;
	        this.eTypeSelector.value = filterType;
	    };
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterType'),
	        __metadata("design:type", HTMLSelectElement)
	    ], ComparableBaseFilter.prototype, "eTypeSelector", void 0);
	    return ComparableBaseFilter;
	}(BaseFilter));
	exports.ComparableBaseFilter = ComparableBaseFilter;
	/**
	 * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend
	 * ComparableBaseFilter)
	 */
	var ScalarBaseFilter = (function (_super) {
	    __extends(ScalarBaseFilter, _super);
	    function ScalarBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ScalarBaseFilter.prototype.nullComparator = function (type) {
	        var _this = this;
	        return function (filterValue, gridValue) {
	            if (gridValue == null) {
	                var nullValue = _this.translateNull(type);
	                if (_this.filter === BaseFilter.EQUALS) {
	                    return nullValue ? 0 : 1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.NOT_EQUAL) {
	                    return nullValue ? 1 : 0;
	                }
	            }
	            var actualComparator = _this.comparator();
	            return actualComparator(filterValue, gridValue);
	        };
	    };
	    ScalarBaseFilter.prototype.getDefaultType = function () {
	        return BaseFilter.EQUALS;
	    };
	    ScalarBaseFilter.prototype.translateNull = function (type) {
	        var reducedType = type.indexOf('greater') > -1 ? 'greaterThan' :
	            type.indexOf('lessThan') > -1 ? 'lessThan' :
	                'equals';
	        if (this.filterParams.nullComparator && this.filterParams.nullComparator[reducedType]) {
	            return this.filterParams.nullComparator[reducedType];
	        }
	        ;
	        return ScalarBaseFilter.DEFAULT_NULL_COMPARATOR[reducedType];
	    };
	    ScalarBaseFilter.prototype.doesFilterPass = function (params) {
	        var value = this.filterParams.valueGetter(params.node);
	        var comparator = this.nullComparator(this.filter);
	        var rawFilterValues = this.filterValues();
	        var from = Array.isArray(rawFilterValues) ? rawFilterValues[0] : rawFilterValues;
	        if (from == null)
	            return true;
	        var compareResult = comparator(from, value);
	        if (this.filter === BaseFilter.EQUALS) {
	            return compareResult === 0;
	        }
	        if (this.filter === BaseFilter.GREATER_THAN) {
	            return compareResult > 0;
	        }
	        if (this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	            return compareResult >= 0;
	        }
	        if (this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	            return compareResult <= 0;
	        }
	        if (this.filter === BaseFilter.LESS_THAN) {
	            return compareResult < 0;
	        }
	        if (this.filter === BaseFilter.NOT_EQUAL) {
	            return compareResult != 0;
	        }
	        //From now on the type is a range and rawFilterValues must be an array!
	        var compareToResult = comparator(rawFilterValues[1], value);
	        if (this.filter === BaseFilter.IN_RANGE) {
	            if (!this.filterParams.inRangeInclusive) {
	                return compareResult > 0 && compareToResult < 0;
	            }
	            else {
	                return compareResult >= 0 && compareToResult <= 0;
	            }
	        }
	        throw new Error('Unexpected type of date filter!: ' + this.filter);
	    };
	    ScalarBaseFilter.DEFAULT_NULL_COMPARATOR = {
	        equals: false,
	        lessThan: false,
	        greaterThan: false
	    };
	    return ScalarBaseFilter;
	}(ComparableBaseFilter));
	exports.ScalarBaseFilter = ScalarBaseFilter;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var filterManager_1 = __webpack_require__(334);
	var componentResolver_1 = __webpack_require__(336);
	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType || (ComponentType = {}));
	var ComponentRecipes = (function () {
	    function ComponentRecipes() {
	    }
	    ComponentRecipes.prototype.newDateComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "dateComponent");
	    };
	    ComponentRecipes.prototype.newHeaderComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.column.getColDef(), params, "headerComponent");
	    };
	    ComponentRecipes.prototype.newHeaderGroupComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.columnGroup.getColGroupDef(), params, "headerGroupComponent");
	    };
	    ComponentRecipes.prototype.newFloatingFilterComponent = function (type, colDef, params) {
	        //type if populated must be one of ['set','number','text','date']
	        var floatingFilterName = type + "FloatingFilterComponent";
	        return this.componentResolver.createAgGridComponent(colDef, params, "floatingFilterComponent", floatingFilterName, false);
	    };
	    ComponentRecipes.prototype.newFloatingFilterWrapperComponent = function (column, params) {
	        var _this = this;
	        var colDef = column.getColDef();
	        if (colDef.suppressFilter) {
	            return this.newEmptyFloatingFilterWrapperComponent(column);
	        }
	        var floatingFilterType;
	        if (typeof colDef.filter === 'string') {
	            floatingFilterType = colDef.filter;
	        }
	        else if (!colDef.filter) {
	            floatingFilterType = this.gridOptionsWrapper.isEnterprise() ? 'set' : 'text';
	        }
	        else {
	            floatingFilterType = 'custom';
	        }
	        var floatingFilter = this.newFloatingFilterComponent(floatingFilterType, colDef, params);
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: floatingFilter,
	            suppressFilterButton: this.componentResolver.mergeParams(colDef, 'floatingFilterComponent', params).suppressFilterButton
	        };
	        if (!floatingFilter) {
	            var filterComponent = this.getFilterComponentPrototype(colDef);
	            if (filterComponent && !filterComponent.component.prototype.getModelAsString) {
	                return this.newEmptyFloatingFilterWrapperComponent(column);
	            }
	            var rawModelFn_1 = params.currentParentModel;
	            params.currentParentModel = function () {
	                var parentPromise = _this.filterManager.getFilterComponent(column);
	                return parentPromise.resolveNow(null, function (parent) { return parent.getModelAsString ? parent.getModelAsString(rawModelFn_1()) : null; });
	            };
	            floatingFilterWrapperComponentParams.floatingFilterComp = this.newFloatingFilterComponent('readModelAsString', colDef, params);
	        }
	        return this.componentResolver.createAgGridComponent(colDef, floatingFilterWrapperComponentParams, "floatingFilterWrapperComponent");
	    };
	    ComponentRecipes.prototype.newFullWidthGroupRowInnerCellRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "groupRowInnerRenderer", "groupRowInnerRenderer", false);
	    };
	    ComponentRecipes.prototype.newCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "cellRenderer", "cellRenderer", false);
	    };
	    ComponentRecipes.prototype.newInnerCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "innerRenderer");
	    };
	    ComponentRecipes.prototype.newFullRowGroupRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptionsWrapper, params, "fullWidthCellRenderer");
	    };
	    ComponentRecipes.prototype.getFilterComponentPrototype = function (colDef) {
	        return this.componentResolver.getComponentToUse(colDef, "filterComponent");
	    };
	    ComponentRecipes.prototype.newEmptyFloatingFilterWrapperComponent = function (column) {
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: null
	        };
	        return this.componentResolver.createAgGridComponent(column.getColDef(), floatingFilterWrapperComponentParams, "floatingFilterWrapperComponent", "emptyFloatingFilterWrapperComponent");
	    };
	    __decorate([
	        context_1.Autowired("componentResolver"),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], ComponentRecipes.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentRecipes.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ComponentRecipes.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], ComponentRecipes.prototype, "filterManager", void 0);
	    ComponentRecipes = __decorate([
	        context_1.Bean('componentRecipes')
	    ], ComponentRecipes);
	    return ComponentRecipes;
	}());
	exports.ComponentRecipes = ComponentRecipes;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var column_1 = __webpack_require__(299);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var sortController_1 = __webpack_require__(344);
	var touchListener_1 = __webpack_require__(345);
	var eventService_1 = __webpack_require__(285);
	var componentAnnotations_1 = __webpack_require__(330);
	var events_1 = __webpack_require__(291);
	var HeaderComp = (function (_super) {
	    __extends(HeaderComp, _super);
	    function HeaderComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    HeaderComp.prototype.init = function (params) {
	        var template = utils_1.Utils.firstExistingValue(params.template, HeaderComp.TEMPLATE);
	        this.setTemplate(template);
	        this.params = params;
	        this.setupTap();
	        this.setupIcons(params.column);
	        this.setupMenu();
	        this.setupSort();
	        this.setupFilterIcon();
	        this.setupText(params.displayName);
	    };
	    HeaderComp.prototype.setupText = function (displayName) {
	        if (this.eText) {
	            this.eText.innerHTML = displayName;
	        }
	    };
	    HeaderComp.prototype.setupIcons = function (column) {
	        this.addInIcon('sortAscending', this.eSortAsc, column);
	        this.addInIcon('sortDescending', this.eSortDesc, column);
	        this.addInIcon('sortUnSort', this.eSortNone, column);
	        this.addInIcon('menu', this.eMenu, column);
	        this.addInIcon('filter', this.eFilter, column);
	    };
	    HeaderComp.prototype.addInIcon = function (iconName, eParent, column) {
	        if (eParent == null)
	            return;
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
	        eParent.appendChild(eIcon);
	    };
	    HeaderComp.prototype.setupTap = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isSuppressTouch()) {
	            return;
	        }
	        var touchListener = new touchListener_1.TouchListener(this.getGui());
	        if (this.params.enableMenu) {
	            var longTapListener = function (event) {
	                _this.gridOptionsWrapper.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
	            };
	            this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_LONG_TAP, longTapListener);
	        }
	        if (this.params.enableSorting) {
	            var tapListener = function () {
	                _this.sortController.progressSort(_this.params.column, false);
	            };
	            this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, tapListener);
	        }
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	    };
	    HeaderComp.prototype.setupMenu = function () {
	        var _this = this;
	        // if no menu provided in template, do nothing
	        if (!this.eMenu) {
	            return;
	        }
	        if (!this.params.enableMenu) {
	            utils_1.Utils.removeFromParent(this.eMenu);
	            return;
	        }
	        this.eMenu.addEventListener('click', function () { return _this.showMenu(_this.eMenu); });
	        if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	            this.eMenu.style.opacity = '0';
	            this.addGuiEventListener('mouseover', function () {
	                _this.eMenu.style.opacity = '1';
	            });
	            this.addGuiEventListener('mouseout', function () {
	                _this.eMenu.style.opacity = '0';
	            });
	        }
	        var style = this.eMenu.style;
	        style['transition'] = 'opacity 0.2s, border 0.2s';
	        style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
	    };
	    HeaderComp.prototype.showMenu = function (eventSource) {
	        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
	    };
	    HeaderComp.prototype.removeSortIcons = function () {
	        utils_1.Utils.removeFromParent(this.eSortAsc);
	        utils_1.Utils.removeFromParent(this.eSortDesc);
	        utils_1.Utils.removeFromParent(this.eSortNone);
	        utils_1.Utils.removeFromParent(this.eSortOrder);
	    };
	    HeaderComp.prototype.setupSort = function () {
	        var _this = this;
	        var enableSorting = this.params.enableSorting;
	        if (!enableSorting) {
	            this.removeSortIcons();
	            return;
	        }
	        // add the event on the header, so when clicked, we do sorting
	        if (this.eLabel) {
	            this.addDestroyableEventListener(this.eLabel, 'click', function (event) {
	                _this.params.progressSort(event.shiftKey);
	            });
	        }
	        this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.onSortChanged();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
	        this.setMultiSortOrder();
	    };
	    HeaderComp.prototype.onSortChanged = function () {
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-asc', this.params.column.isSortAscending());
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-desc', this.params.column.isSortDescending());
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-none', this.params.column.isSortNone());
	        if (this.eSortAsc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.params.column.isSortAscending());
	        }
	        if (this.eSortDesc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.params.column.isSortDescending());
	        }
	        if (this.eSortNone) {
	            var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
	            utils_1.Utils.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());
	        }
	    };
	    // we listen here for global sort events, NOT column sort events, as we want to do this
	    // when sorting has been set on all column (if we listened just for our col (where we
	    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
	    HeaderComp.prototype.setMultiSortOrder = function () {
	        if (!this.eSortOrder) {
	            return;
	        }
	        var col = this.params.column;
	        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
	        var indexThisCol = allColumnsWithSorting.indexOf(col);
	        var moreThanOneColSorting = allColumnsWithSorting.length > 1;
	        var showIndex = col.isSorting() && moreThanOneColSorting;
	        utils_1.Utils.setVisible(this.eSortOrder, showIndex);
	        if (indexThisCol >= 0) {
	            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
	        }
	        else {
	            this.eSortOrder.innerHTML = '';
	        }
	    };
	    HeaderComp.prototype.setupFilterIcon = function () {
	        if (!this.eFilter) {
	            return;
	        }
	        this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	    };
	    HeaderComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.params.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.eFilter, 'ag-hidden', !filterPresent);
	    };
	    HeaderComp.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">' +
	        '  <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>' +
	        '  <div ref="eLabel" class="ag-header-cell-label" role="presentation">' +
	        '    <span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
	        '    <span ref="eFilter" class="ag-header-icon ag-filter-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortOrder" class="ag-header-icon ag-sort-order" aria-hidden="true"></span>' +
	        '    <span ref="eSortAsc" class="ag-header-icon ag-sort-ascending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortDesc" class="ag-header-icon ag-sort-descending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortNone" class="ag-header-icon ag-sort-none-icon" aria-hidden="true"></span>' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], HeaderComp.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderComp.prototype, "eventService", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eFilter'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eFilter", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortAsc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortAsc", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortDesc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortDesc", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortNone'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortNone", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortOrder'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortOrder", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eMenu'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eMenu", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLabel'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eLabel", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eText'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eText", void 0);
	    return HeaderComp;
	}(component_1.Component));
	exports.HeaderComp = HeaderComp;


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var column_1 = __webpack_require__(299);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var context_2 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var gridApi_1 = __webpack_require__(294);
	var SortController = (function () {
	    function SortController() {
	    }
	    SortController_1 = SortController;
	    SortController.prototype.progressSort = function (column, multiSort) {
	        var nextDirection = this.getNextSortDirection(column);
	        this.setSortForColumn(column, nextDirection, multiSort);
	    };
	    SortController.prototype.setSortForColumn = function (column, sort, multiSort) {
	        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)
	        if (sort !== column_1.Column.SORT_ASC && sort !== column_1.Column.SORT_DESC) {
	            sort = null;
	        }
	        // update sort on current col
	        column.setSort(sort);
	        // sortedAt used for knowing order of cols when multi-col sort
	        if (column.getSort()) {
	            var sortedAt = Number(new Date().valueOf());
	            column.setSortedAt(sortedAt);
	        }
	        else {
	            column.setSortedAt(null);
	        }
	        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
	        // clear sort on all columns except this one, and update the icons
	        if (!doingMultiSort) {
	            this.clearSortBarThisColumn(column);
	        }
	        this.dispatchSortChangedEvents();
	    };
	    // gets called by API, so if data changes, use can call this, which will end up
	    // working out the sort order again of the rows.
	    SortController.prototype.onSortChanged = function () {
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.dispatchSortChangedEvents = function () {
	        var event = {
	            type: events_1.Events.EVENT_SORT_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SortController.prototype.clearSortBarThisColumn = function (columnToSkip) {
	        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {
	            // Do not clear if either holding shift, or if column in question was clicked
	            if (!(columnToClear === columnToSkip)) {
	                columnToClear.setSort(null);
	            }
	        });
	    };
	    SortController.prototype.getNextSortDirection = function (column) {
	        var sortingOrder;
	        if (column.getColDef().sortingOrder) {
	            sortingOrder = column.getColDef().sortingOrder;
	        }
	        else if (this.gridOptionsWrapper.getSortingOrder()) {
	            sortingOrder = this.gridOptionsWrapper.getSortingOrder();
	        }
	        else {
	            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
	        }
	        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
	            console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s ' + sortingOrder);
	            return;
	        }
	        var currentIndex = sortingOrder.indexOf(column.getSort());
	        var notInArray = currentIndex < 0;
	        var lastItemInArray = currentIndex == sortingOrder.length - 1;
	        var result;
	        if (notInArray || lastItemInArray) {
	            result = sortingOrder[0];
	        }
	        else {
	            result = sortingOrder[currentIndex + 1];
	        }
	        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid
	        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
	            console.warn('ag-grid: invalid sort type ' + result);
	            return null;
	        }
	        return result;
	    };
	    // used by the public api, for saving the sort model
	    SortController.prototype.getSortModel = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils_1.Utils.map(columnsWithSorting, function (column) {
	            return {
	                colId: column.getColId(),
	                sort: column.getSort()
	            };
	        });
	    };
	    SortController.prototype.setSortModel = function (sortModel) {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isEnableSorting()) {
	            console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
	            return;
	        }
	        // first up, clear any previous sort
	        var sortModelProvided = sortModel && sortModel.length > 0;
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        allColumnsIncludingAuto.forEach(function (column) {
	            var sortForCol = null;
	            var sortedAt = -1;
	            if (sortModelProvided && !column.getColDef().suppressSorting) {
	                for (var j = 0; j < sortModel.length; j++) {
	                    var sortModelEntry = sortModel[j];
	                    if (typeof sortModelEntry.colId === 'string'
	                        && typeof column.getColId() === 'string'
	                        && _this.compareColIds(sortModelEntry, column)) {
	                        sortForCol = sortModelEntry.sort;
	                        sortedAt = j;
	                    }
	                }
	            }
	            if (sortForCol) {
	                column.setSort(sortForCol);
	                column.setSortedAt(sortedAt);
	            }
	            else {
	                column.setSort(null);
	                column.setSortedAt(null);
	            }
	        });
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.compareColIds = function (sortModelEntry, column) {
	        return sortModelEntry.colId === column.getColId();
	    };
	    SortController.prototype.getColumnsWithSortingOrdered = function () {
	        // pull out all the columns that have sorting set
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        var columnsWithSorting = utils_1.Utils.filter(allColumnsIncludingAuto, function (column) { return !!column.getSort(); });
	        // put the columns in order of which one got sorted first
	        columnsWithSorting.sort(function (a, b) { return a.sortedAt - b.sortedAt; });
	        return columnsWithSorting;
	    };
	    // used by row controller, when doing the sorting
	    SortController.prototype.getSortForRowController = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils_1.Utils.map(columnsWithSorting, function (column) {
	            var ascending = column.getSort() === column_1.Column.SORT_ASC;
	            return {
	                inverter: ascending ? 1 : -1,
	                column: column
	            };
	        });
	    };
	    SortController.DEFAULT_SORTING_ORDER = [column_1.Column.SORT_ASC, column_1.Column.SORT_DESC, null];
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], SortController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SortController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SortController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SortController.prototype, "gridApi", void 0);
	    SortController = SortController_1 = __decorate([
	        context_2.Bean('sortController')
	    ], SortController);
	    return SortController;
	    var SortController_1;
	}());
	exports.SortController = SortController;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var utils_1 = __webpack_require__(288);
	var TouchListener = (function () {
	    function TouchListener(eElement) {
	        var _this = this;
	        this.destroyFuncs = [];
	        this.touching = false;
	        this.eventService = new eventService_1.EventService();
	        this.eElement = eElement;
	        var startListener = this.onTouchStart.bind(this);
	        var moveListener = this.onTouchMove.bind(this);
	        var endListener = this.onTouchEnd.bind(this);
	        this.eElement.addEventListener('touchstart', startListener, { passive: true });
	        this.eElement.addEventListener('touchmove', moveListener, { passive: true });
	        this.eElement.addEventListener('touchend', endListener, { passive: true });
	        this.destroyFuncs.push(function () {
	            _this.eElement.addEventListener('touchstart', startListener, { passive: true });
	            _this.eElement.addEventListener('touchmove', moveListener, { passive: true });
	            _this.eElement.addEventListener('touchend', endListener, { passive: true });
	        });
	    }
	    TouchListener.prototype.getActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    TouchListener.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    TouchListener.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    TouchListener.prototype.onTouchStart = function (touchEvent) {
	        var _this = this;
	        // only looking at one touch point at any time
	        if (this.touching) {
	            return;
	        }
	        this.touchStart = touchEvent.touches[0];
	        this.touching = true;
	        this.moved = false;
	        var touchStartCopy = this.touchStart;
	        setTimeout(function () {
	            var touchesMatch = _this.touchStart === touchStartCopy;
	            if (_this.touching && touchesMatch && !_this.moved) {
	                _this.moved = true;
	                var event_1 = {
	                    type: TouchListener.EVENT_LONG_TAP,
	                    touchStart: _this.touchStart
	                };
	                _this.eventService.dispatchEvent(event_1);
	            }
	        }, 500);
	    };
	    TouchListener.prototype.onTouchMove = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        var touch = this.getActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        var eventIsFarAway = !utils_1.Utils.areEventsNear(touch, this.touchStart, 4);
	        if (eventIsFarAway) {
	            this.moved = true;
	        }
	    };
	    TouchListener.prototype.onTouchEnd = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        if (!this.moved) {
	            var event_2 = {
	                type: TouchListener.EVENT_TAP,
	                touchStart: this.touchStart
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	        this.touching = false;
	    };
	    TouchListener.prototype.destroy = function () {
	        this.destroyFuncs.forEach(function (func) { return func(); });
	    };
	    // private mostRecentTouch: Touch;
	    TouchListener.EVENT_TAP = 'tap';
	    TouchListener.EVENT_LONG_TAP = 'longTap';
	    return TouchListener;
	}());
	exports.TouchListener = TouchListener;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var utils_1 = __webpack_require__(288);
	var columnController_1 = __webpack_require__(297);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var touchListener_1 = __webpack_require__(345);
	var componentAnnotations_1 = __webpack_require__(330);
	var originalColumnGroup_1 = __webpack_require__(301);
	var HeaderGroupComp = (function (_super) {
	    __extends(HeaderGroupComp, _super);
	    function HeaderGroupComp() {
	        return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
	    }
	    HeaderGroupComp.prototype.init = function (params) {
	        this.params = params;
	        this.setupLabel();
	        this.addGroupExpandIcon();
	        this.setupExpandIcons();
	    };
	    HeaderGroupComp.prototype.setupExpandIcons = function () {
	        this.addInIcon('columnGroupOpened', 'agOpened');
	        this.addInIcon('columnGroupClosed', 'agClosed');
	        this.addTouchAndClickListeners(this.eCloseIcon);
	        this.addTouchAndClickListeners(this.eOpenIcon);
	        this.updateIconVisibility();
	        var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
	        this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
	        this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
	    };
	    HeaderGroupComp.prototype.addTouchAndClickListeners = function (eElement) {
	        var _this = this;
	        var expandAction = function () {
	            var newExpandedValue = !_this.params.columnGroup.isExpanded();
	            _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue);
	        };
	        var touchListener = new touchListener_1.TouchListener(this.eCloseIcon);
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, expandAction);
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	        this.addDestroyableEventListener(eElement, 'click', expandAction);
	    };
	    HeaderGroupComp.prototype.updateIconVisibility = function () {
	        var columnGroup = this.params.columnGroup;
	        if (columnGroup.isExpandable()) {
	            var expanded = this.params.columnGroup.isExpanded();
	            utils_1.Utils.setVisible(this.eOpenIcon, !expanded);
	            utils_1.Utils.setVisible(this.eCloseIcon, expanded);
	        }
	        else {
	            utils_1.Utils.setVisible(this.eOpenIcon, false);
	            utils_1.Utils.setVisible(this.eCloseIcon, false);
	        }
	    };
	    HeaderGroupComp.prototype.addInIcon = function (iconName, refName) {
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, null);
	        this.getRefElement(refName).appendChild(eIcon);
	    };
	    HeaderGroupComp.prototype.addGroupExpandIcon = function () {
	        if (!this.params.columnGroup.isExpandable()) {
	            utils_1.Utils.setVisible(this.eOpenIcon, false);
	            utils_1.Utils.setVisible(this.eCloseIcon, false);
	            return;
	        }
	    };
	    HeaderGroupComp.prototype.setupLabel = function () {
	        // no renderer, default text render
	        if (this.params.displayName && this.params.displayName !== '') {
	            if (utils_1.Utils.isBrowserSafari()) {
	                this.getGui().style.display = 'table-cell';
	            }
	            var eInnerText = this.getRefElement('agLabel');
	            eInnerText.innerHTML = this.params.displayName;
	        }
	    };
	    HeaderGroupComp.TEMPLATE = "<div class=\"ag-header-group-cell-label\">" +
	        "<span ref=\"agLabel\" class=\"ag-header-group-text\"></span>" +
	        "<span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>" +
	        "<span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>" +
	        "</div>";
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderGroupComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderGroupComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('agOpened'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eOpenIcon", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('agClosed'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eCloseIcon", void 0);
	    return HeaderGroupComp;
	}(component_1.Component));
	exports.HeaderGroupComp = HeaderGroupComp;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var dateFilter_1 = __webpack_require__(340);
	var componentAnnotations_1 = __webpack_require__(330);
	var utils_1 = __webpack_require__(288);
	var componentRecipes_1 = __webpack_require__(342);
	var component_1 = __webpack_require__(317);
	var constants_1 = __webpack_require__(289);
	var InputTextFloatingFilterComp = (function (_super) {
	    __extends(InputTextFloatingFilterComp, _super);
	    function InputTextFloatingFilterComp() {
	        var _this = _super.call(this, "<div><input  ref=\"eColumnFloatingFilter\" class=\"ag-floating-filter-input\"></div>") || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    InputTextFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils_1._.debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'input', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keypress', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keydown', toDebounce);
	        var columnDef = params.column.getDefinition();
	        if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange') {
	            this.eColumnFloatingFilter.readOnly = true;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        if (this.equalModels(this.lastKnownModel, parentModel))
	            return;
	        this.lastKnownModel = parentModel;
	        var incomingTextValue = this.asFloatingFilterText(parentModel);
	        if (incomingTextValue === this.eColumnFloatingFilter.value)
	            return;
	        this.eColumnFloatingFilter.value = incomingTextValue;
	    };
	    InputTextFloatingFilterComp.prototype.syncUpWithParentFilter = function (e) {
	        var model = this.asParentModel();
	        if (this.equalModels(this.lastKnownModel, model))
	            return;
	        var modelUpdated = null;
	        if (utils_1._.isKeyPressed(e, constants_1.Constants.KEY_ENTER)) {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: true
	            });
	        }
	        else {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: false
	            });
	        }
	        if (modelUpdated) {
	            this.lastKnownModel = model;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils_1._.referenceCompare(left, right))
	            return true;
	        if (!left || !right)
	            return false;
	        if (Array.isArray(left) || Array.isArray(right))
	            return false;
	        return (utils_1._.referenceCompare(left.type, right.type) &&
	            utils_1._.referenceCompare(left.filter, right.filter) &&
	            utils_1._.referenceCompare(left.filterTo, right.filterTo) &&
	            utils_1._.referenceCompare(left.filterType, right.filterType));
	    };
	    __decorate([
	        componentAnnotations_1.RefSelector('eColumnFloatingFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], InputTextFloatingFilterComp.prototype, "eColumnFloatingFilter", void 0);
	    return InputTextFloatingFilterComp;
	}(component_1.Component));
	exports.InputTextFloatingFilterComp = InputTextFloatingFilterComp;
	var TextFloatingFilterComp = (function (_super) {
	    __extends(TextFloatingFilterComp, _super);
	    function TextFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        if (!parentModel)
	            return '';
	        return parentModel.filter;
	    };
	    TextFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        return {
	            type: currentParentModel.type,
	            filter: this.eColumnFloatingFilter.value,
	            filterType: 'text'
	        };
	    };
	    return TextFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.TextFloatingFilterComp = TextFloatingFilterComp;
	var DateFloatingFilterComp = (function (_super) {
	    __extends(DateFloatingFilterComp, _super);
	    function DateFloatingFilterComp() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    DateFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils_1._.debounce(this.onDateChanged.bind(this), debounceMs);
	        var dateComponentParams = {
	            onDateChanged: toDebounce
	        };
	        this.dateComponentPromise = this.componentRecipes.newDateComponent(dateComponentParams);
	        var body = utils_1._.loadTemplate("<div></div>");
	        this.dateComponentPromise.then(function (dateComponent) {
	            body.appendChild(dateComponent.getGui());
	        });
	        this.setTemplateFromElement(body);
	    };
	    DateFloatingFilterComp.prototype.onDateChanged = function () {
	        var parentModel = this.currentParentModel();
	        var model = this.asParentModel();
	        if (this.equalModels(parentModel, model))
	            return;
	        this.onFloatingFilterChanged({
	            model: model,
	            apply: true
	        });
	        this.lastKnownModel = model;
	    };
	    DateFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils_1._.referenceCompare(left, right))
	            return true;
	        if (!left || !right)
	            return false;
	        if (Array.isArray(left) || Array.isArray(right))
	            return false;
	        return (utils_1._.referenceCompare(left.type, right.type) &&
	            utils_1._.referenceCompare(left.dateFrom, right.dateFrom) &&
	            utils_1._.referenceCompare(left.dateTo, right.dateTo) &&
	            utils_1._.referenceCompare(left.filterType, right.filterType));
	    };
	    DateFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueDate = this.dateComponentPromise.resolveNow(null, function (dateComponent) { return dateComponent.getDate(); });
	        var filterValueText = utils_1._.serializeDateToYyyyMmDd(dateFilter_1.DateFilter.removeTimezone(filterValueDate), "-");
	        return {
	            type: currentParentModel.type,
	            dateFrom: filterValueText,
	            dateTo: currentParentModel ? currentParentModel.dateTo : null,
	            filterType: 'date'
	        };
	    };
	    DateFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        this.lastKnownModel = parentModel;
	        this.dateComponentPromise.then(function (dateComponent) {
	            if (!parentModel || !parentModel.dateFrom) {
	                dateComponent.setDate(null);
	                return;
	            }
	            dateComponent.setDate(utils_1._.parseYyyyMmDdToDate(parentModel.dateFrom, '-'));
	        });
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], DateFloatingFilterComp.prototype, "componentRecipes", void 0);
	    return DateFloatingFilterComp;
	}(component_1.Component));
	exports.DateFloatingFilterComp = DateFloatingFilterComp;
	var NumberFloatingFilterComp = (function (_super) {
	    __extends(NumberFloatingFilterComp, _super);
	    function NumberFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        var rawParentModel = this.currentParentModel();
	        if (parentModel == null && rawParentModel == null)
	            return '';
	        if (parentModel == null && rawParentModel != null && rawParentModel.type !== 'inRange') {
	            this.eColumnFloatingFilter.readOnly = false;
	            return '';
	        }
	        if (rawParentModel != null && rawParentModel.type === 'inRange') {
	            this.eColumnFloatingFilter.readOnly = true;
	            var number_1 = this.asNumber(rawParentModel.filter);
	            var numberTo = this.asNumber(rawParentModel.filterTo);
	            return (number_1 ? number_1 + '' : '') +
	                '-' +
	                (numberTo ? numberTo + '' : '');
	        }
	        var number = this.asNumber(parentModel.filter);
	        this.eColumnFloatingFilter.readOnly = false;
	        return number != null ? number + '' : '';
	    };
	    NumberFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueNumber = this.asNumber(this.eColumnFloatingFilter.value);
	        var filterValueText = this.eColumnFloatingFilter.value;
	        var modelFilterValue = null;
	        if (filterValueNumber == null && filterValueText === '') {
	            modelFilterValue = null;
	        }
	        else if (filterValueNumber == null) {
	            modelFilterValue = currentParentModel.filter;
	        }
	        else {
	            modelFilterValue = filterValueNumber;
	        }
	        return {
	            type: currentParentModel.type,
	            filter: modelFilterValue,
	            filterTo: !currentParentModel ? null : currentParentModel.filterTo,
	            filterType: 'number'
	        };
	    };
	    NumberFloatingFilterComp.prototype.asNumber = function (value) {
	        if (value == null)
	            return null;
	        if (value === '')
	            return null;
	        var asNumber = Number(value);
	        var invalidNumber = !utils_1._.isNumeric(asNumber);
	        return invalidNumber ? null : asNumber;
	    };
	    return NumberFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.NumberFloatingFilterComp = NumberFloatingFilterComp;
	var SetFloatingFilterComp = (function (_super) {
	    __extends(SetFloatingFilterComp, _super);
	    function SetFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SetFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.readOnly = true;
	    };
	    SetFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        if (!parentModel || parentModel.length === 0)
	            return '';
	        var arrayToDisplay = parentModel.length > 10 ? parentModel.slice(0, 10).concat(['...']) : parentModel;
	        return "(" + parentModel.length + ") " + arrayToDisplay.join(",");
	    };
	    SetFloatingFilterComp.prototype.asParentModel = function () {
	        if (this.eColumnFloatingFilter.value == null || this.eColumnFloatingFilter.value === '')
	            return null;
	        return this.eColumnFloatingFilter.value.split(",");
	    };
	    return SetFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.SetFloatingFilterComp = SetFloatingFilterComp;
	var ReadModelAsStringFloatingFilterComp = (function (_super) {
	    __extends(ReadModelAsStringFloatingFilterComp, _super);
	    function ReadModelAsStringFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ReadModelAsStringFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.readOnly = true;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        this.eColumnFloatingFilter.value = this.asFloatingFilterText(this.currentParentModel());
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        return parentModel;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asParentModel = function () {
	        return null;
	    };
	    return ReadModelAsStringFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.ReadModelAsStringFloatingFilterComp = ReadModelAsStringFloatingFilterComp;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var column_1 = __webpack_require__(299);
	var utils_1 = __webpack_require__(288);
	var setLeftFeature_1 = __webpack_require__(349);
	var component_1 = __webpack_require__(317);
	var componentAnnotations_1 = __webpack_require__(330);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var beans_1 = __webpack_require__(350);
	var BaseFilterWrapperComp = (function (_super) {
	    __extends(BaseFilterWrapperComp, _super);
	    function BaseFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilterWrapperComp.prototype.init = function (params) {
	        this.column = params.column;
	        var base = utils_1._.loadTemplate("<div class=\"ag-header-cell\" aria-hidden=\"true\"><div class=\"ag-floating-filter-body\" aria-hidden=\"true\"></div></div>");
	        this.enrichBody(base);
	        this.setTemplateFromElement(base);
	        this.setupWidth();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getGui(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    BaseFilterWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    BaseFilterWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getGui().style.width = this.column.getActualWidth() + 'px';
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BaseFilterWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], BaseFilterWrapperComp.prototype, "beans", void 0);
	    return BaseFilterWrapperComp;
	}(component_1.Component));
	exports.BaseFilterWrapperComp = BaseFilterWrapperComp;
	var FloatingFilterWrapperComp = (function (_super) {
	    __extends(FloatingFilterWrapperComp, _super);
	    function FloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FloatingFilterWrapperComp.prototype.init = function (params) {
	        this.floatingFilterCompPromise = params.floatingFilterComp;
	        this.suppressFilterButton = params.suppressFilterButton;
	        _super.prototype.init.call(this, params);
	        this.addEventListeners();
	    };
	    FloatingFilterWrapperComp.prototype.addEventListeners = function () {
	        if (!this.suppressFilterButton && this.eButtonShowMainFilter) {
	            this.addDestroyableEventListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));
	        }
	    };
	    FloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	        var _this = this;
	        this.floatingFilterCompPromise.then(function (floatingFilterComp) {
	            var floatingFilterBody = body.querySelector('.ag-floating-filter-body');
	            var floatingFilterCompUi = floatingFilterComp.getGui();
	            if (_this.suppressFilterButton) {
	                floatingFilterBody.appendChild(floatingFilterCompUi);
	                utils_1._.removeCssClass(floatingFilterBody, 'ag-floating-filter-body');
	                utils_1._.addCssClass(floatingFilterBody, 'ag-floating-filter-full-body');
	            }
	            else {
	                floatingFilterBody.appendChild(floatingFilterCompUi);
	                body.appendChild(utils_1._.loadTemplate("<div class=\"ag-floating-filter-button\" aria-hidden=\"true\">\n                        <button ref=\"eButtonShowMainFilter\"></button>\n                </div>"));
	                var eIcon = utils_1._.createIconNoSpan('filter', _this.gridOptionsWrapper, _this.column);
	                body.querySelector('button').appendChild(eIcon);
	            }
	            if (floatingFilterComp.afterGuiAttached) {
	                floatingFilterComp.afterGuiAttached();
	            }
	            _this.wireQuerySelectors();
	            _this.addEventListeners();
	        });
	    };
	    FloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	        this.floatingFilterCompPromise.then(function (floatingFilterComp) {
	            floatingFilterComp.onParentModelChanged(parentModel);
	        });
	    };
	    FloatingFilterWrapperComp.prototype.showParentFilter = function () {
	        this.menuFactory.showMenuAfterButtonClick(this.column, this.eButtonShowMainFilter, 'filterMenuTab', ['filterMenuTab']);
	    };
	    __decorate([
	        componentAnnotations_1.RefSelector('eButtonShowMainFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], FloatingFilterWrapperComp.prototype, "eButtonShowMainFilter", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], FloatingFilterWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FloatingFilterWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    return FloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.FloatingFilterWrapperComp = FloatingFilterWrapperComp;
	var EmptyFloatingFilterWrapperComp = (function (_super) {
	    __extends(EmptyFloatingFilterWrapperComp, _super);
	    function EmptyFloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyFloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	    };
	    EmptyFloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	    };
	    return EmptyFloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.EmptyFloatingFilterWrapperComp = EmptyFloatingFilterWrapperComp;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var column_1 = __webpack_require__(299);
	var beanStub_1 = __webpack_require__(318);
	var SetLeftFeature = (function (_super) {
	    __extends(SetLeftFeature, _super);
	    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
	        var _this = _super.call(this) || this;
	        _this.columnOrGroup = columnOrGroup;
	        _this.eCell = eCell;
	        _this.colsSpanning = colsSpanning;
	        _this.beans = beans;
	        return _this;
	    }
	    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {
	        this.colsSpanning = colsSpanning;
	        this.onLeftChanged();
	    };
	    SetLeftFeature.prototype.getColumnOrGroup = function () {
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            return this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            return this.columnOrGroup;
	        }
	    };
	    SetLeftFeature.prototype.init = function () {
	        this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.setLeftFirstTime();
	    };
	    SetLeftFeature.prototype.setLeftFirstTime = function () {
	        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
	        var oldLeftExists = utils_1.Utils.exists(this.columnOrGroup.getOldLeft());
	        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
	        if (animateColumnMove) {
	            this.animateInLeft();
	        }
	        else {
	            this.onLeftChanged();
	        }
	    };
	    SetLeftFeature.prototype.animateInLeft = function () {
	        var _this = this;
	        var left = this.getColumnOrGroup().getLeft();
	        var oldLeft = this.getColumnOrGroup().getOldLeft();
	        this.setLeft(oldLeft);
	        // we must keep track of the left we want to set to, as this would otherwise lead to a race
	        // condition, if the user changed the left value many times in one VM turn, then we want to make
	        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
	        // position. eg if user changes column position twice, then setLeft() below executes twice in next
	        // VM turn, but only one (the correct one) should get applied.
	        this.actualLeft = left;
	        this.beans.columnAnimationService.executeNextVMTurn(function () {
	            // test this left value is the latest one to be applied, and if not, do nothing
	            if (_this.actualLeft === left) {
	                _this.setLeft(left);
	            }
	        });
	    };
	    SetLeftFeature.prototype.onLeftChanged = function () {
	        this.actualLeft = this.getColumnOrGroup().getLeft();
	        this.setLeft(this.actualLeft);
	    };
	    SetLeftFeature.prototype.setLeft = function (value) {
	        // if the value is null, then that means the column is no longer
	        // displayed. there is logic in the rendering to fade these columns
	        // out, so we don't try and change their left positions.
	        if (utils_1.Utils.exists(value)) {
	            this.eCell.style.left = value + 'px';
	        }
	    };
	    return SetLeftFeature;
	}(beanStub_1.BeanStub));
	exports.SetLeftFeature = SetLeftFeature;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var expressionService_1 = __webpack_require__(302);
	var rowRenderer_1 = __webpack_require__(305);
	var templateService_1 = __webpack_require__(332);
	var valueService_1 = __webpack_require__(313);
	var eventService_1 = __webpack_require__(285);
	var columnAnimationService_1 = __webpack_require__(351);
	var focusedCellController_1 = __webpack_require__(320);
	var cellEditorFactory_1 = __webpack_require__(352);
	var cellRendererFactory_1 = __webpack_require__(353);
	var popupService_1 = __webpack_require__(335);
	var cellRendererService_1 = __webpack_require__(357);
	var valueFormatterService_1 = __webpack_require__(358);
	var stylingService_1 = __webpack_require__(359);
	var columnHoverService_1 = __webpack_require__(360);
	var gridPanel_1 = __webpack_require__(306);
	var paginationProxy_1 = __webpack_require__(323);
	var animationFrameService_1 = __webpack_require__(327);
	var componentResolver_1 = __webpack_require__(336);
	var Beans = (function () {
	    function Beans() {
	    }
	    Beans.prototype.postConstruct = function () {
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
	    };
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], Beans.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], Beans.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], Beans.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], Beans.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], Beans.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], Beans.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], Beans.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], Beans.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('templateService'),
	        __metadata("design:type", templateService_1.TemplateService)
	    ], Beans.prototype, "templateService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], Beans.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], Beans.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], Beans.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService_1.ColumnAnimationService)
	    ], Beans.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], Beans.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory_1.CellEditorFactory)
	    ], Beans.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory_1.CellRendererFactory)
	    ], Beans.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], Beans.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService_1.CellRendererService)
	    ], Beans.prototype, "cellRendererService", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], Beans.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context_1.Autowired('stylingService'),
	        __metadata("design:type", stylingService_1.StylingService)
	    ], Beans.prototype, "stylingService", void 0);
	    __decorate([
	        context_1.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService_1.ColumnHoverService)
	    ], Beans.prototype, "columnHoverService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], Beans.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], Beans.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], Beans.prototype, "taskQueue", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Beans.prototype, "postConstruct", null);
	    Beans = __decorate([
	        context_1.Bean('beans')
	    ], Beans);
	    return Beans;
	}());
	exports.Beans = Beans;


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var gridPanel_1 = __webpack_require__(306);
	var utils_1 = __webpack_require__(288);
	var ColumnAnimationService = (function () {
	    function ColumnAnimationService() {
	        this.executeNextFuncs = [];
	        this.executeLaterFuncs = [];
	        this.active = false;
	        this.animationThreadCount = 0;
	    }
	    ColumnAnimationService.prototype.isActive = function () {
	        return this.active;
	    };
	    ColumnAnimationService.prototype.start = function () {
	        if (this.active) {
	            return;
	        }
	        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
	            return;
	        }
	        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
	        // the animation moves all the row the the right rather than to the left (ie it's the static
	        // columns that actually get their coordinates updated)
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            return;
	        }
	        this.ensureAnimationCssClassPresent();
	        this.active = true;
	    };
	    ColumnAnimationService.prototype.finish = function () {
	        if (!this.active) {
	            return;
	        }
	        this.flush();
	        this.active = false;
	    };
	    ColumnAnimationService.prototype.executeNextVMTurn = function (func) {
	        if (this.active) {
	            this.executeNextFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.executeLaterVMTurn = function (func) {
	        if (this.active) {
	            this.executeLaterFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function () {
	        var _this = this;
	        // up the count, so we can tell if someone else has updated the count
	        // by the time the 'wait' func executes
	        this.animationThreadCount++;
	        var animationThreadCountCopy = this.animationThreadCount;
	        utils_1.Utils.addCssClass(this.gridPanel.getRoot(), 'ag-column-moving');
	        this.executeLaterFuncs.push(function () {
	            // only remove the class if this thread was the last one to update it
	            if (_this.animationThreadCount === animationThreadCountCopy) {
	                utils_1.Utils.removeCssClass(_this.gridPanel.getRoot(), 'ag-column-moving');
	            }
	        });
	    };
	    ColumnAnimationService.prototype.flush = function () {
	        var nowFuncs = this.executeNextFuncs;
	        this.executeNextFuncs = [];
	        var waitFuncs = this.executeLaterFuncs;
	        this.executeLaterFuncs = [];
	        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
	            return;
	        }
	        setTimeout(function () { return nowFuncs.forEach(function (func) { return func(); }); }, 0);
	        setTimeout(function () { return waitFuncs.forEach(function (func) { return func(); }); }, 300);
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnAnimationService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], ColumnAnimationService.prototype, "gridPanel", void 0);
	    ColumnAnimationService = __decorate([
	        context_1.Bean('columnAnimationService')
	    ], ColumnAnimationService);
	    return ColumnAnimationService;
	}());
	exports.ColumnAnimationService = ColumnAnimationService;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var popupEditorWrapper_1 = __webpack_require__(324);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var componentResolver_1 = __webpack_require__(336);
	var CellEditorFactory = (function () {
	    function CellEditorFactory() {
	    }
	    CellEditorFactory.prototype.init = function () {
	    };
	    CellEditorFactory.prototype.addCellEditor = function (key, cellEditor) {
	        console.warn("ag-grid: since v13.3.1 this method is not supported anymore. If you want to register your own editor check the docs: https://www.ag-grid.com/javascript-grid-cell-editor/");
	    };
	    // private registerEditorsFromGridOptions(): void {
	    //     let userProvidedCellEditors = this.gridOptionsWrapper.getCellEditors();
	    //     _.iterateObject(userProvidedCellEditors, (key: string, cellEditor: {new(): ICellEditor})=> {
	    //         this.addCellEditor(key, cellEditor);
	    //     });
	    // }
	    CellEditorFactory.prototype.createCellEditor = function (column, params) {
	        var _this = this;
	        var cellEditorPromise = this.componentResolver.createAgGridComponent(column, params, 'cellEditor');
	        return cellEditorPromise.map(function (cellEditor) {
	            var isPopup = cellEditor.isPopup && cellEditor.isPopup();
	            if (!isPopup) {
	                return cellEditor;
	            }
	            if (_this.gridOptionsWrapper.isFullRowEdit()) {
	                console.warn('ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +
	                    '- either turn off fullRowEdit, or stop using popup editors.');
	            }
	            // if a popup, then we wrap in a popup editor and return the popup
	            var popupEditorWrapper = new popupEditorWrapper_1.PopupEditorWrapper(cellEditor);
	            _this.context.wireBean(popupEditorWrapper);
	            popupEditorWrapper.init(params);
	            return popupEditorWrapper;
	        });
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], CellEditorFactory.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], CellEditorFactory.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellEditorFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellEditorFactory.prototype, "init", null);
	    CellEditorFactory = __decorate([
	        context_1.Bean('cellEditorFactory')
	    ], CellEditorFactory);
	    return CellEditorFactory;
	}());
	exports.CellEditorFactory = CellEditorFactory;


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var eventService_1 = __webpack_require__(285);
	var expressionService_1 = __webpack_require__(302);
	var animateSlideCellRenderer_1 = __webpack_require__(354);
	var animateShowChangeCellRenderer_1 = __webpack_require__(355);
	var groupCellRenderer_1 = __webpack_require__(356);
	var CellRendererFactory = (function () {
	    function CellRendererFactory() {
	        this.cellRendererMap = {};
	    }
	    CellRendererFactory_1 = CellRendererFactory;
	    CellRendererFactory.prototype.init = function () {
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = animateSlideCellRenderer_1.AnimateSlideCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.GROUP] = groupCellRenderer_1.GroupCellRenderer;
	        // this.registerRenderersFromGridOptions();
	    };
	    // private registerRenderersFromGridOptions(): void {
	    //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();
	    //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {
	    //         this.addCellRenderer(key, cellRenderer);
	    //     });
	    // }
	    CellRendererFactory.prototype.addCellRenderer = function (key, cellRenderer) {
	        this.cellRendererMap[key] = cellRenderer;
	    };
	    CellRendererFactory.prototype.getCellRenderer = function (key) {
	        var result = this.cellRendererMap[key];
	        if (utils_1.Utils.missing(result)) {
	            console.warn('ag-Grid: unable to find cellRenderer for key ' + key);
	            return null;
	        }
	        return result;
	    };
	    CellRendererFactory.ANIMATE_SLIDE = 'animateSlide';
	    CellRendererFactory.ANIMATE_SHOW_CHANGE = 'animateShowChange';
	    CellRendererFactory.GROUP = 'group';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellRendererFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], CellRendererFactory.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], CellRendererFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellRendererFactory.prototype, "init", null);
	    CellRendererFactory = CellRendererFactory_1 = __decorate([
	        context_1.Bean('cellRendererFactory')
	    ], CellRendererFactory);
	    return CellRendererFactory;
	    var CellRendererFactory_1;
	}());
	exports.CellRendererFactory = CellRendererFactory;


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var component_1 = __webpack_require__(317);
	var AnimateSlideCellRenderer = (function (_super) {
	    __extends(AnimateSlideCellRenderer, _super);
	    function AnimateSlideCellRenderer() {
	        var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');
	        return _this;
	    }
	    AnimateSlideCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        this.refresh(params);
	    };
	    AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {
	        var _this = this;
	        this.refreshCount++;
	        // below we keep checking this, and stop working on the animation
	        // if it no longer matches - this means another animation has started
	        // and this one is stale.
	        var refreshCountCopy = this.refreshCount;
	        // if old animation, remove it
	        if (this.ePrevious) {
	            this.getGui().removeChild(this.ePrevious);
	        }
	        this.ePrevious = utils_1.Utils.loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
	        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
	        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
	        // having timeout of 0 allows use to skip to the next css turn,
	        // so we know the previous css classes have been applied. so the
	        // complex set of setTimeout below creates the animation
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            utils_1.Utils.addCssClass(_this.ePrevious, 'ag-value-slide-out-end');
	        }, 50);
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            _this.getGui().removeChild(_this.ePrevious);
	            _this.ePrevious = null;
	        }, 3000);
	    };
	    AnimateSlideCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (utils_1.Utils.missing(value)) {
	            value = '';
	        }
	        if (value === this.lastValue) {
	            return;
	        }
	        this.addSlideAnimation();
	        this.lastValue = value;
	        if (utils_1.Utils.exists(params.valueFormatted)) {
	            this.eCurrent.innerHTML = params.valueFormatted;
	        }
	        else if (utils_1.Utils.exists(params.value)) {
	            this.eCurrent.innerHTML = value;
	        }
	        else {
	            this.eCurrent.innerHTML = '';
	        }
	        return true;
	    };
	    AnimateSlideCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-slide-current"></span>' +
	        '</span>';
	    return AnimateSlideCellRenderer;
	}(component_1.Component));
	exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var component_1 = __webpack_require__(317);
	var ARROW_UP = '&#65514;';
	var ARROW_DOWN = '&#65516;';
	var AnimateShowChangeCellRenderer = (function (_super) {
	    __extends(AnimateShowChangeCellRenderer, _super);
	    function AnimateShowChangeCellRenderer() {
	        var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        return _this;
	    }
	    AnimateShowChangeCellRenderer.prototype.init = function (params) {
	        // this.params = params;
	        this.eValue = this.queryForHtmlElement('.ag-value-change-value');
	        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');
	        this.refresh(params);
	    };
	    AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {
	        var absDelta = Math.abs(delta);
	        var valueFormatted = params.formatValue(absDelta);
	        var valueToUse = utils_1.Utils.exists(valueFormatted) ? valueFormatted : absDelta;
	        var deltaUp = (delta >= 0);
	        if (deltaUp) {
	            this.eDelta.innerHTML = ARROW_UP + valueToUse;
	        }
	        else {
	            // because negative, use ABS to remove sign
	            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
	        }
	        // class makes it green (in ag-fresh)
	        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp);
	        // class makes it red (in ag-fresh)
	        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);
	    };
	    AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {
	        var _this = this;
	        // the refreshCount makes sure that if the value updates again while
	        // the below timer is waiting, then the below timer will realise it
	        // is not the most recent and will not try to remove the delta value.
	        this.refreshCount++;
	        var refreshCountCopy = this.refreshCount;
	        setTimeout(function () {
	            if (refreshCountCopy === _this.refreshCount) {
	                _this.hideDeltaValue();
	            }
	        }, 2000);
	    };
	    AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {
	        utils_1.Utils.removeCssClass(this.eValue, 'ag-value-change-value-highlight');
	        this.eDelta.innerHTML = '';
	    };
	    AnimateShowChangeCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (value === this.lastValue) {
	            return;
	        }
	        if (utils_1.Utils.exists(params.valueFormatted)) {
	            this.eValue.innerHTML = params.valueFormatted;
	        }
	        else if (utils_1.Utils.exists(params.value)) {
	            this.eValue.innerHTML = value;
	        }
	        else {
	            this.eValue.innerHTML = '';
	        }
	        if (typeof value === 'number' && typeof this.lastValue === 'number') {
	            var delta = value - this.lastValue;
	            this.showDelta(params, delta);
	        }
	        // highlight the current value, but only if it's not new, otherwise it
	        // would get highlighted first time the value is shown
	        if (this.lastValue) {
	            utils_1.Utils.addCssClass(this.eValue, 'ag-value-change-value-highlight');
	        }
	        this.setTimerToRemoveDelta();
	        this.lastValue = value;
	        return true;
	    };
	    AnimateShowChangeCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-change-delta"></span>' +
	        '<span class="ag-value-change-value"></span>' +
	        '</span>';
	    return AnimateShowChangeCellRenderer;
	}(component_1.Component));
	exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var expressionService_1 = __webpack_require__(302);
	var eventService_1 = __webpack_require__(285);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var component_1 = __webpack_require__(317);
	var rowNode_1 = __webpack_require__(312);
	var cellRendererService_1 = __webpack_require__(357);
	var valueFormatterService_1 = __webpack_require__(358);
	var checkboxSelectionComponent_1 = __webpack_require__(319);
	var columnController_1 = __webpack_require__(297);
	var column_1 = __webpack_require__(299);
	var componentAnnotations_1 = __webpack_require__(330);
	var mouseEventService_1 = __webpack_require__(310);
	var GroupCellRenderer = (function (_super) {
	    __extends(GroupCellRenderer, _super);
	    function GroupCellRenderer() {
	        return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
	    }
	    GroupCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
	        // This allows for empty strings to appear as groups since
	        // it will only return for null or undefined.
	        var cellIsEmpty = params.value == null;
	        this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;
	        if (this.cellIsBlank) {
	            return;
	        }
	        this.setupDragOpenParents();
	        this.addExpandAndContract();
	        this.addCheckboxIfNeeded();
	        this.addValueElement();
	        this.setupIndent();
	    };
	    // if we are doing embedded full width rows, we only show the renderer when
	    // in the body, or if pinning in the pinned section, or if pinning and RTL,
	    // in the right section. otherwise we would have the cell repeated in each section.
	    GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {
	        if (this.params.fullWidth && this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	            var pinnedLeftCell = this.params.pinned === column_1.Column.PINNED_LEFT;
	            var pinnedRightCell = this.params.pinned === column_1.Column.PINNED_RIGHT;
	            var bodyCell = !pinnedLeftCell && !pinnedRightCell;
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedRightCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	            else {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedLeftCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	        }
	        else {
	            return false;
	        }
	    };
	    GroupCellRenderer.prototype.setIndent = function () {
	        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        var params = this.params;
	        var rowNode = params.node;
	        // let paddingPx: number;
	        var paddingCount = rowNode.uiLevel;
	        var pivotModeAndLeafGroup = this.columnController.isPivotMode() && params.node.leafGroup;
	        if (rowNode.footer || !rowNode.isExpandable() || pivotModeAndLeafGroup) {
	            paddingCount += 1;
	        }
	        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
	        if (userProvidedPaddingPixelsTheDeprecatedWay) {
	            this.setPaddingDeprecatedWay(paddingCount, params.padding);
	            return;
	        }
	        if (this.indentClass) {
	            this.removeCssClass(this.indentClass);
	        }
	        this.indentClass = 'ag-row-group-indent-' + paddingCount;
	        this.addCssClass(this.indentClass);
	    };
	    GroupCellRenderer.prototype.setPaddingDeprecatedWay = function (paddingCount, padding) {
	        utils_1.Utils.doOnce(function () { return console.warn('ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation.'); }, 'groupCellRenderer->doDeprecatedWay');
	        var paddingPx = paddingCount * padding;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // if doing rtl, padding is on the right
	            this.getGui().style.paddingRight = paddingPx + 'px';
	        }
	        else {
	            // otherwise it is on the left
	            this.getGui().style.paddingLeft = paddingPx + 'px';
	        }
	    };
	    GroupCellRenderer.prototype.setupIndent = function () {
	        // only do this if an indent - as this overwrites the padding that
	        // the theme set, which will make things look 'not aligned' for the
	        // first group level.
	        var node = this.params.node;
	        var suppressPadding = this.params.suppressPadding;
	        if (!suppressPadding) {
	            this.addDestroyableEventListener(node, rowNode_1.RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
	            this.setIndent();
	        }
	    };
	    GroupCellRenderer.prototype.addValueElement = function () {
	        var params = this.params;
	        var rowNode = this.displayedGroup;
	        if (rowNode.footer) {
	            this.createFooterCell();
	        }
	        else if (rowNode.hasChildren() ||
	            utils_1.Utils.get(params.colDef, 'cellRendererParams.innerRenderer', null) ||
	            utils_1.Utils.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {
	            this.createGroupCell();
	            if (rowNode.hasChildren()) {
	                this.addChildCount();
	            }
	        }
	        else {
	            this.createLeafCell();
	        }
	    };
	    GroupCellRenderer.prototype.createFooterCell = function () {
	        var footerValue;
	        var footerValueGetter = this.params.footerValueGetter;
	        if (footerValueGetter) {
	            // params is same as we were given, except we set the value as the item to display
	            var paramsClone = utils_1.Utils.cloneObject(this.params);
	            paramsClone.value = this.params.value;
	            if (typeof footerValueGetter === 'function') {
	                footerValue = footerValueGetter(paramsClone);
	            }
	            else if (typeof footerValueGetter === 'string') {
	                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
	            }
	            else {
	                console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
	            }
	        }
	        else {
	            footerValue = 'Total ' + this.params.value;
	        }
	        this.eValue.innerHTML = footerValue;
	    };
	    GroupCellRenderer.prototype.createGroupCell = function () {
	        var params = this.params;
	        var rowGroupColumn = this.displayedGroup.rowGroupColumn;
	        // we try and use the cellRenderer of the column used for the grouping if we can
	        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
	        var groupName = this.params.value;
	        var valueFormatted = columnToUse ?
	            this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
	        params.valueFormatted = valueFormatted;
	        if (params.fullWidth == true) {
	            this.cellRendererService.useFullWidthGroupRowInnerCellRenderer(this.eValue, params);
	        }
	        else {
	            this.cellRendererService.useInnerCellRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), this.eValue, params);
	        }
	    };
	    GroupCellRenderer.prototype.addChildCount = function () {
	        // only include the child count if it's included, eg if user doing custom aggregation,
	        // then this could be left out, or set to -1, ie no child count
	        if (this.params.suppressCount) {
	            return;
	        }
	        this.addDestroyableEventListener(this.displayedGroup, rowNode_1.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
	        // filtering changes the child count, so need to cater for it
	        this.updateChildCount();
	    };
	    GroupCellRenderer.prototype.updateChildCount = function () {
	        var allChildrenCount = this.displayedGroup.allChildrenCount;
	        this.eChildCount.innerHTML = allChildrenCount >= 0 ? "(" + allChildrenCount + ")" : "";
	    };
	    GroupCellRenderer.prototype.createLeafCell = function () {
	        if (utils_1.Utils.exists(this.params.value)) {
	            this.eValue.innerHTML = this.params.value;
	        }
	    };
	    GroupCellRenderer.prototype.isUserWantsSelected = function () {
	        var paramsCheckbox = this.params.checkbox;
	        if (typeof paramsCheckbox === 'function') {
	            return paramsCheckbox(this.params);
	        }
	        else {
	            return paramsCheckbox === true;
	        }
	    };
	    GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {
	        var rowNode = this.params.node;
	        var checkboxNeeded = this.isUserWantsSelected()
	            && !rowNode.footer
	            && !rowNode.rowPinned
	            && !rowNode.detail;
	        if (checkboxNeeded) {
	            var cbSelectionComponent_1 = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
	            this.context.wireBean(cbSelectionComponent_1);
	            cbSelectionComponent_1.init({ rowNode: rowNode, column: this.params.column });
	            this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
	            this.addDestroyFunc(function () { return cbSelectionComponent_1.destroy(); });
	        }
	    };
	    GroupCellRenderer.prototype.addExpandAndContract = function () {
	        var params = this.params;
	        var eGroupCell = params.eGridCell;
	        var eExpandedIcon = utils_1.Utils.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);
	        var eContractedIcon = utils_1.Utils.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);
	        this.eExpanded.appendChild(eExpandedIcon);
	        this.eContracted.appendChild(eContractedIcon);
	        this.addDestroyableEventListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));
	        this.addDestroyableEventListener(this.eContracted, 'click', this.onExpandClicked.bind(this));
	        // expand / contract as the user hits enter
	        this.addDestroyableEventListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));
	        this.addDestroyableEventListener(params.node, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
	        this.showExpandAndContractIcons();
	        // because we don't show the expand / contract when there are no children, we need to check every time
	        // the number of children change.
	        this.addDestroyableEventListener(this.displayedGroup, rowNode_1.RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.showExpandAndContractIcons.bind(this));
	        // if editing groups, then double click is to start editing
	        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable()) {
	            this.addDestroyableEventListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));
	        }
	    };
	    GroupCellRenderer.prototype.onKeyDown = function (event) {
	        if (utils_1.Utils.isKeyPressed(event, constants_1.Constants.KEY_ENTER)) {
	            var cellEditable = this.params.column.isCellEditable(this.params.node);
	            if (cellEditable) {
	                return;
	            }
	            event.preventDefault();
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.setupDragOpenParents = function () {
	        var column = this.params.column;
	        var rowNode = this.params.node;
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            this.draggedFromHideOpenParents = false;
	        }
	        else if (!rowNode.hasChildren()) {
	            // if we are here, and we are not a group, then we must of been dragged down,
	            // as otherwise the cell would be blank, and if cell is blank, this method is never called.
	            this.draggedFromHideOpenParents = true;
	        }
	        else {
	            var rowGroupColumn = rowNode.rowGroupColumn;
	            // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
	            // then nothing was dragged down
	            this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
	        }
	        if (this.draggedFromHideOpenParents) {
	            var pointer = rowNode.parent;
	            while (true) {
	                if (utils_1.Utils.missing(pointer)) {
	                    break;
	                }
	                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
	                    this.displayedGroup = pointer;
	                    break;
	                }
	                pointer = pointer.parent;
	            }
	        }
	        // if we didn't find a displayed group, set it to the row node
	        if (utils_1.Utils.missing(this.displayedGroup)) {
	            this.displayedGroup = rowNode;
	        }
	    };
	    GroupCellRenderer.prototype.onExpandClicked = function () {
	        this.onExpandOrContract();
	    };
	    GroupCellRenderer.prototype.onCellDblClicked = function (event) {
	        // we want to avoid acting on double click events on the expand / contract icon,
	        // as that icons already has expand / collapse functionality on it. otherwise if
	        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
	        // is open->close->open, however double click should be open->close only.
	        var targetIsExpandIcon = utils_1.Utils.isElementInEventPath(this.eExpanded, event)
	            || utils_1.Utils.isElementInEventPath(this.eContracted, event);
	        if (!targetIsExpandIcon) {
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.onExpandOrContract = function () {
	        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
	        var rowNode = this.displayedGroup;
	        rowNode.setExpanded(!rowNode.expanded);
	        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	            this.params.api.redrawRows({ rowNodes: [rowNode] });
	        }
	    };
	    GroupCellRenderer.prototype.isExpandable = function () {
	        var rowNode = this.params.node;
	        var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
	        return this.draggedFromHideOpenParents ||
	            (rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode);
	    };
	    GroupCellRenderer.prototype.showExpandAndContractIcons = function () {
	        var rowNode = this.params.node;
	        if (this.isExpandable()) {
	            // if expandable, show one based on expand state.
	            // if we were dragged down, means our parent is always expanded
	            var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;
	            utils_1.Utils.setVisible(this.eContracted, !expanded);
	            utils_1.Utils.setVisible(this.eExpanded, expanded);
	        }
	        else {
	            // it not expandable, show neither
	            utils_1.Utils.setVisible(this.eExpanded, false);
	            utils_1.Utils.setVisible(this.eContracted, false);
	        }
	    };
	    GroupCellRenderer.prototype.refresh = function () {
	        return false;
	    };
	    GroupCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-group-expanded" ref="eExpanded"></span>' +
	        '<span class="ag-group-contracted" ref="eContracted"></span>' +
	        '<span class="ag-group-checkbox" ref="eCheckbox"></span>' +
	        '<span class="ag-group-value" ref="eValue"></span>' +
	        '<span class="ag-group-child-count" ref="eChildCount"></span>' +
	        '</span>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GroupCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], GroupCellRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GroupCellRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService_1.CellRendererService)
	    ], GroupCellRenderer.prototype, "cellRendererService", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], GroupCellRenderer.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GroupCellRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GroupCellRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService_1.MouseEventService)
	    ], GroupCellRenderer.prototype, "mouseEventService", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eExpanded'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eExpanded", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eContracted'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eContracted", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eCheckbox'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eCheckbox", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eValue'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eValue", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eChildCount'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eChildCount", void 0);
	    return GroupCellRenderer;
	}(component_1.Component));
	exports.GroupCellRenderer = GroupCellRenderer;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var componentRecipes_1 = __webpack_require__(342);
	var componentResolver_1 = __webpack_require__(336);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	/** Class to use a cellRenderer. */
	var CellRendererService = (function () {
	    function CellRendererService() {
	    }
	    CellRendererService.prototype.useCellRenderer = function (target, eTarget, params) {
	        var _this = this;
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target, params);
	        if (cellRendererPromise != null) {
	            cellRendererPromise.then(function (cellRenderer) {
	                if (cellRenderer == null) {
	                    eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	                }
	                else {
	                    _this.bindToHtml(cellRendererPromise, eTarget);
	                }
	            });
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useFilterCellRenderer = function (target, eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target.filterParams, params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            if (params.valueFormatted == null && params.value == null) {
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                eTarget.innerText = '(' + localeTextFunc('blanks', 'Blanks') + ')';
	            }
	            else {
	                eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	            }
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useRichSelectCellRenderer = function (target, eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newCellRenderer(target.cellEditorParams, params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.useInnerCellRenderer = function (target, originalColumn, eTarget, params) {
	        var _this = this;
	        var rendererToUsePromise = null;
	        var componentToUse = this.componentResolver.getComponentToUse(target, "innerRenderer");
	        if (componentToUse && componentToUse.component != null && componentToUse.source != componentResolver_1.ComponentSource.DEFAULT) {
	            //THERE IS ONE INNER CELL RENDERER HARDCODED IN THE COLDEF FOR THIS GROUP COLUMN
	            rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(target, params);
	        }
	        else {
	            var otherRenderer = this.componentResolver.getComponentToUse(originalColumn, "cellRenderer");
	            if (otherRenderer && otherRenderer.source != componentResolver_1.ComponentSource.DEFAULT) {
	                //Only if the original column is using an specific renderer, it it is a using a DEFAULT one
	                //ignore it
	                //THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, WE REUSE ITS RENDERER
	                rendererToUsePromise = this.componentRecipes.newCellRenderer(originalColumn, params);
	            }
	            else if (otherRenderer && otherRenderer.source == componentResolver_1.ComponentSource.DEFAULT && (utils_1._.get(originalColumn, 'cellRendererParams.innerRenderer', null))) {
	                //EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
	                //AND HAS A INNER CELL RENDERER
	                rendererToUsePromise = this.componentRecipes.newInnerCellRenderer(originalColumn.cellRendererParams, params);
	            }
	            else {
	                //This forces the retrieval of the default plain cellRenderer that just renders the values.
	                rendererToUsePromise = this.componentRecipes.newCellRenderer({}, params);
	            }
	        }
	        if (rendererToUsePromise != null) {
	            rendererToUsePromise.then(function (rendererToUse) {
	                if (rendererToUse == null) {
	                    eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	                    return;
	                }
	                _this.bindToHtml(rendererToUsePromise, eTarget);
	            });
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return rendererToUsePromise;
	    };
	    CellRendererService.prototype.useFullWidthGroupRowInnerCellRenderer = function (eTarget, params) {
	        var cellRendererPromise = this.componentRecipes.newFullWidthGroupRowInnerCellRenderer(params);
	        if (cellRendererPromise != null) {
	            this.bindToHtml(cellRendererPromise, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRendererPromise;
	    };
	    CellRendererService.prototype.bindToHtml = function (cellRendererPromise, eTarget) {
	        cellRendererPromise.then(function (cellRenderer) {
	            var gui = cellRenderer.getGui();
	            if (gui != null) {
	                if (typeof gui == 'object') {
	                    eTarget.appendChild(gui);
	                }
	                else {
	                    eTarget.innerHTML = gui;
	                }
	            }
	        });
	        return cellRendererPromise;
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], CellRendererService.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], CellRendererService.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellRendererService.prototype, "gridOptionsWrapper", void 0);
	    CellRendererService = __decorate([
	        context_1.Bean('cellRendererService')
	    ], CellRendererService);
	    return CellRendererService;
	}());
	exports.CellRendererService = CellRendererService;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var expressionService_1 = __webpack_require__(302);
	var ValueFormatterService = (function () {
	    function ValueFormatterService() {
	    }
	    ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {
	        var formatter;
	        var colDef = column.getColDef();
	        // if floating, give preference to the floating formatter
	        if (rowNode && rowNode.rowPinned) {
	            formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
	        }
	        else {
	            formatter = colDef.valueFormatter;
	        }
	        var result = null;
	        if (formatter) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode ? rowNode.data : null,
	                colDef: column.getColDef(),
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            // originally we put the angular 1 scope here, but we don't want the scope
	            // in the params interface, as other frameworks will see the interface, and
	            // angular 1 is not cool any more. so we hack the scope in here (we cannot
	            // include it above, as it's not in the interface, so would cause a compile error).
	            // in the future, when we stop supporting angular 1, we can take this out.
	            params.$scope = $scope;
	            result = this.expressionService.evaluate(formatter, params);
	        }
	        else if (colDef.refData) {
	            return colDef.refData[value];
	        }
	        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (ie with spaces)
	        if ((result === null || result === undefined) && Array.isArray(value)) {
	            result = value.join(', ');
	        }
	        return result;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueFormatterService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ValueFormatterService.prototype, "expressionService", void 0);
	    ValueFormatterService = __decorate([
	        context_1.Bean('valueFormatterService')
	    ], ValueFormatterService);
	    return ValueFormatterService;
	}());
	exports.ValueFormatterService = ValueFormatterService;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var expressionService_1 = __webpack_require__(302);
	var StylingService = (function () {
	    function StylingService() {
	    }
	    StylingService.prototype.processAllCellClasses = function (colDef, params, onApplicableClass, onNotApplicableClass) {
	        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
	        this.processStaticCellClasses(colDef, params, onApplicableClass);
	    };
	    StylingService.prototype.processClassRules = function (classRules, params, onApplicableClass, onNotApplicableClass) {
	        if (typeof classRules === 'object' && classRules !== null) {
	            var classNames = Object.keys(classRules);
	            for (var i = 0; i < classNames.length; i++) {
	                var className = classNames[i];
	                var rule = classRules[className];
	                var resultOfRule = void 0;
	                if (typeof rule === 'string') {
	                    resultOfRule = this.expressionService.evaluate(rule, params);
	                }
	                else if (typeof rule === 'function') {
	                    resultOfRule = rule(params);
	                }
	                if (resultOfRule) {
	                    onApplicableClass(className);
	                }
	                else if (onNotApplicableClass) {
	                    onNotApplicableClass(className);
	                }
	            }
	        }
	    };
	    StylingService.prototype.processStaticCellClasses = function (colDef, params, onApplicableClass) {
	        var cellClass = colDef.cellClass;
	        if (cellClass) {
	            var classOrClasses = void 0;
	            if (typeof colDef.cellClass === 'function') {
	                var cellClassFunc = colDef.cellClass;
	                classOrClasses = cellClassFunc(params);
	            }
	            else {
	                classOrClasses = colDef.cellClass;
	            }
	            if (typeof classOrClasses === 'string') {
	                onApplicableClass(classOrClasses);
	            }
	            else if (Array.isArray(classOrClasses)) {
	                classOrClasses.forEach(function (cssClassItem) {
	                    onApplicableClass(cssClassItem);
	                });
	            }
	        }
	    };
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], StylingService.prototype, "expressionService", void 0);
	    StylingService = __decorate([
	        context_1.Bean('stylingService')
	    ], StylingService);
	    return StylingService;
	}());
	exports.StylingService = StylingService;


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(285);
	var context_1 = __webpack_require__(287);
	var events_1 = __webpack_require__(291);
	var beanStub_1 = __webpack_require__(318);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var ColumnHoverService = (function (_super) {
	    __extends(ColumnHoverService, _super);
	    function ColumnHoverService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ColumnHoverService.prototype.init = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_MOUSE_OVER, this.onCellMouseOver.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_MOUSE_OUT, this.onCellMouseOut.bind(this));
	    };
	    ColumnHoverService.prototype.onCellMouseOver = function (cellEvent) {
	        this.currentlySelectedColumn = cellEvent.column;
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.onCellMouseOut = function () {
	        this.currentlySelectedColumn = null;
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.isHovered = function (column) {
	        return column == this.currentlySelectedColumn;
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ColumnHoverService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ColumnHoverService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnHoverService.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnHoverService.prototype, "init", null);
	    ColumnHoverService = __decorate([
	        context_1.Bean('columnHoverService')
	    ], ColumnHoverService);
	    return ColumnHoverService;
	}(beanStub_1.BeanStub));
	exports.ColumnHoverService = ColumnHoverService;


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var utils_1 = __webpack_require__(288);
	var constants_1 = __webpack_require__(289);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var valueFormatterService_1 = __webpack_require__(358);
	var SelectCellEditor = (function (_super) {
	    __extends(SelectCellEditor, _super);
	    function SelectCellEditor() {
	        var _this = _super.call(this, '<div class="ag-cell-edit-input"><select class="ag-cell-edit-input"/></div>') || this;
	        _this.eSelect = _this.getGui().querySelector('select');
	        return _this;
	    }
	    SelectCellEditor.prototype.init = function (params) {
	        var _this = this;
	        this.focusAfterAttached = params.cellStartedEdit;
	        if (utils_1.Utils.missing(params.values)) {
	            console.log('ag-Grid: no values found for select cellEditor');
	            return;
	        }
	        params.values.forEach(function (value) {
	            var option = document.createElement('option');
	            option.value = value;
	            var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            option.text = valueFormattedExits ? valueFormatted : value;
	            if (params.value === value) {
	                option.selected = true;
	            }
	            _this.eSelect.appendChild(option);
	        });
	        // we don't want to add this if full row editing, otherwise selecting will stop the
	        // full row editing.
	        if (!this.gridOptionsWrapper.isFullRowEdit()) {
	            this.addDestroyableEventListener(this.eSelect, 'change', function () { return params.stopEditing(); });
	        }
	        this.addDestroyableEventListener(this.eSelect, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants_1.Constants.KEY_UP || event.keyCode === constants_1.Constants.KEY_DOWN;
	            if (isNavigationKey) {
	                event.stopPropagation();
	            }
	        });
	        this.addDestroyableEventListener(this.eSelect, 'mousedown', function (event) {
	            event.stopPropagation();
	        });
	    };
	    SelectCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.eSelect.focus();
	        }
	    };
	    SelectCellEditor.prototype.focusIn = function () {
	        this.eSelect.focus();
	    };
	    SelectCellEditor.prototype.getValue = function () {
	        return this.eSelect.value;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectCellEditor.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], SelectCellEditor.prototype, "valueFormatterService", void 0);
	    return SelectCellEditor;
	}(component_1.Component));
	exports.SelectCellEditor = SelectCellEditor;


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var textCellEditor_1 = __webpack_require__(339);
	var PopupTextCellEditor = (function (_super) {
	    __extends(PopupTextCellEditor, _super);
	    function PopupTextCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupTextCellEditor;
	}(textCellEditor_1.TextCellEditor));
	exports.PopupTextCellEditor = PopupTextCellEditor;


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var selectCellEditor_1 = __webpack_require__(361);
	var PopupSelectCellEditor = (function (_super) {
	    __extends(PopupSelectCellEditor, _super);
	    function PopupSelectCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupSelectCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupSelectCellEditor;
	}(selectCellEditor_1.SelectCellEditor));
	exports.PopupSelectCellEditor = PopupSelectCellEditor;


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var LargeTextCellEditor = (function (_super) {
	    __extends(LargeTextCellEditor, _super);
	    function LargeTextCellEditor() {
	        return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
	    }
	    LargeTextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        this.focusAfterAttached = params.cellStartedEdit;
	        this.textarea = document.createElement("textarea");
	        this.textarea.maxLength = params.maxLength ? params.maxLength : "200";
	        this.textarea.cols = params.cols ? params.cols : "60";
	        this.textarea.rows = params.rows ? params.rows : "10";
	        if (utils_1.Utils.exists(params.value)) {
	            this.textarea.value = params.value.toString();
	        }
	        this.getGui().querySelector('.ag-large-textarea').appendChild(this.textarea);
	        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
	    };
	    LargeTextCellEditor.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        if (key == constants_1.Constants.KEY_LEFT ||
	            key == constants_1.Constants.KEY_UP ||
	            key == constants_1.Constants.KEY_RIGHT ||
	            key == constants_1.Constants.KEY_DOWN ||
	            (event.shiftKey && key == constants_1.Constants.KEY_ENTER)) {
	            event.stopPropagation();
	        }
	    };
	    LargeTextCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.textarea.focus();
	        }
	    };
	    LargeTextCellEditor.prototype.getValue = function () {
	        return this.textarea.value;
	    };
	    LargeTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    LargeTextCellEditor.TEMPLATE = 
	    // tab index is needed so we can focus, which is needed for keyboard events
	    '<div class="ag-large-text" tabindex="0">' +
	        '<div class="ag-large-textarea"></div>' +
	        '</div>';
	    return LargeTextCellEditor;
	}(component_1.Component));
	exports.LargeTextCellEditor = LargeTextCellEditor;


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var baseFilter_1 = __webpack_require__(341);
	var componentAnnotations_1 = __webpack_require__(330);
	var TextFilter = (function (_super) {
	    __extends(TextFilter, _super);
	    function TextFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFilter.prototype.getDefaultType = function () {
	        return baseFilter_1.BaseFilter.CONTAINS;
	    };
	    TextFilter.prototype.customInit = function () {
	        this.comparator = this.filterParams.textCustomComparator ? this.filterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;
	        this.formatter =
	            this.filterParams.textFormatter ? this.filterParams.textFormatter :
	                this.filterParams.caseSensitive == true ? TextFilter.DEFAULT_FORMATTER :
	                    TextFilter.DEFAULT_LOWERCASE_FORMATTER;
	        _super.prototype.customInit.call(this);
	    };
	    TextFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: from,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.STARTS_WITH, baseFilter_1.BaseFilter.ENDS_WITH,
	            baseFilter_1.BaseFilter.CONTAINS, baseFilter_1.BaseFilter.NOT_CONTAINS];
	    };
	    TextFilter.prototype.bodyTemplate = function () {
	        var translate = this.translate.bind(this);
	        return "<div class=\"ag-filter-body\">\n            <input class=\"ag-filter-filter\" id=\"filterText\" type=\"text\" placeholder=\"" + translate('filterOoo', 'Filter...') + "\"/>\n        </div>";
	    };
	    TextFilter.prototype.initialiseFilterBodyUi = function () {
	        _super.prototype.initialiseFilterBodyUi.call(this);
	        var debounceMs = this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 500;
	        var toDebounce = utils_1.Utils.debounce(this.onFilterTextFieldChanged.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eFilterTextField, 'input', toDebounce);
	    };
	    TextFilter.prototype.refreshFilterBodyUi = function () { };
	    TextFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    TextFilter.prototype.filterValues = function () {
	        return this.filterText;
	    };
	    TextFilter.prototype.doesFilterPass = function (params) {
	        if (!this.filterText) {
	            return true;
	        }
	        var value = this.filterParams.valueGetter(params.node);
	        if (!value) {
	            if (this.filter === baseFilter_1.BaseFilter.NOT_EQUAL || this.filter === baseFilter_1.BaseFilter.NOT_CONTAINS) {
	                // if there is no value, but the filter type was 'not equals',
	                // then it should pass, as a missing value is not equal whatever
	                // the user is filtering on
	                return true;
	            }
	            else {
	                // otherwise it's some type of comparison, to which empty value
	                // will always fail
	                return false;
	            }
	        }
	        var valueFormatted = this.formatter(value);
	        return this.comparator(this.filter, valueFormatted, this.filterText);
	    };
	    TextFilter.prototype.onFilterTextFieldChanged = function () {
	        var filterText = utils_1.Utils.makeNull(this.eFilterTextField.value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        if (this.filterText !== filterText) {
	            var newLowerCase = filterText && this.filterParams.caseSensitive != true ? filterText.toLowerCase() :
	                filterText;
	            var previousLowerCase = this.filterText && this.filterParams.caseSensitive != true ? this.filterText.toLowerCase() :
	                this.filterText;
	            this.filterText = this.formatter(filterText);
	            if (previousLowerCase !== newLowerCase) {
	                this.onFilterChanged();
	            }
	        }
	    };
	    TextFilter.prototype.setFilter = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter) {
	            this.filterText = this.formatter(filter);
	            this.eFilterTextField.value = filter;
	        }
	        else {
	            this.filterText = null;
	            this.eFilterTextField.value = null;
	        }
	    };
	    TextFilter.prototype.getFilter = function () {
	        return this.filterText;
	    };
	    TextFilter.prototype.resetState = function () {
	        this.setFilter(null);
	        this.setFilterType(this.defaultFilter);
	    };
	    TextFilter.prototype.serialize = function () {
	        return {
	            type: this.filter ? this.filter : this.defaultFilter,
	            filter: this.filterText,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.parse = function (model) {
	        this.setFilterType(model.type);
	        this.setFilter(model.filter);
	    };
	    TextFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    TextFilter.DEFAULT_FORMATTER = function (from) {
	        return from;
	    };
	    TextFilter.DEFAULT_LOWERCASE_FORMATTER = function (from) {
	        if (from == null)
	            return null;
	        return from.toString().toLowerCase();
	    };
	    TextFilter.DEFAULT_COMPARATOR = function (filter, value, filterText) {
	        switch (filter) {
	            case TextFilter.CONTAINS:
	                return value.indexOf(filterText) >= 0;
	            case TextFilter.NOT_CONTAINS:
	                return value.indexOf(filterText) === -1;
	            case TextFilter.EQUALS:
	                return value === filterText;
	            case TextFilter.NOT_EQUAL:
	                return value != filterText;
	            case TextFilter.STARTS_WITH:
	                return value.indexOf(filterText) === 0;
	            case TextFilter.ENDS_WITH:
	                var index = value.lastIndexOf(filterText);
	                return index >= 0 && index === (value.length - filterText.length);
	            default:
	                // should never happen
	                console.warn('invalid filter type ' + filter);
	                return false;
	        }
	    };
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterText'),
	        __metadata("design:type", HTMLInputElement)
	    ], TextFilter.prototype, "eFilterTextField", void 0);
	    return TextFilter;
	}(baseFilter_1.ComparableBaseFilter));
	exports.TextFilter = TextFilter;


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var componentAnnotations_1 = __webpack_require__(330);
	var baseFilter_1 = __webpack_require__(341);
	var NumberFilter = (function (_super) {
	    __extends(NumberFilter, _super);
	    function NumberFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: Number(from),
	            filterTo: this.filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.LESS_THAN_OR_EQUAL,
	            baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.GREATER_THAN_OR_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
	    };
	    NumberFilter.prototype.bodyTemplate = function () {
	        var translate = this.translate.bind(this);
	        return "<div class=\"ag-filter-body\">\n            <div>\n                <input class=\"ag-filter-filter\" id=\"filterText\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n             <div class=\"ag-filter-number-to\" id=\"filterNumberToPanel\">\n                <input class=\"ag-filter-filter\" id=\"filterToText\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n        </div>";
	    };
	    NumberFilter.prototype.initialiseFilterBodyUi = function () {
	        this.filterNumber = null;
	        this.eFilterTextField = this.queryForHtmlInputElement("#filterText");
	        var debounceMs = this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 500;
	        var toDebounce = utils_1.Utils.debounce(this.onTextFieldsChanged.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eFilterTextField, "input", toDebounce);
	        this.addDestroyableEventListener(this.eFilterToTextField, "input", toDebounce);
	    };
	    NumberFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    NumberFilter.prototype.comparator = function () {
	        return function (left, right) {
	            if (left === right)
	                return 0;
	            if (left < right)
	                return 1;
	            if (left > right)
	                return -1;
	        };
	    };
	    NumberFilter.prototype.onTextFieldsChanged = function () {
	        var newFilter = this.stringToFloat(this.eFilterTextField.value);
	        var newFilterTo = this.stringToFloat(this.eFilterToTextField.value);
	        if (this.filterNumber !== newFilter || this.filterNumberTo !== newFilterTo) {
	            this.filterNumber = newFilter;
	            this.filterNumberTo = newFilterTo;
	            this.onFilterChanged();
	        }
	    };
	    NumberFilter.prototype.filterValues = function () {
	        return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ?
	            this.asNumber(this.filterNumber) :
	            [this.asNumber(this.filterNumber), this.asNumber(this.filterNumberTo)];
	    };
	    NumberFilter.prototype.asNumber = function (value) {
	        return utils_1.Utils.isNumeric(value) ? value : null;
	    };
	    NumberFilter.prototype.stringToFloat = function (value) {
	        var filterText = utils_1.Utils.makeNull(value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        var newFilter;
	        if (filterText !== null && filterText !== undefined) {
	            newFilter = parseFloat(filterText);
	        }
	        else {
	            newFilter = null;
	        }
	        return newFilter;
	    };
	    NumberFilter.prototype.setFilter = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        this.filterNumber = filter;
	        this.eFilterTextField.value = filter;
	    };
	    NumberFilter.prototype.setFilterTo = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        this.filterNumberTo = filter;
	        this.eFilterToTextField.value = filter;
	    };
	    NumberFilter.prototype.getFilter = function () {
	        return this.filterNumber;
	    };
	    NumberFilter.prototype.serialize = function () {
	        return {
	            type: this.filter ? this.filter : this.defaultFilter,
	            filter: this.filterNumber,
	            filterTo: this.filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.parse = function (model) {
	        this.setFilterType(model.type);
	        this.setFilter(model.filter);
	        this.setFilterTo(model.filterTo);
	    };
	    NumberFilter.prototype.refreshFilterBodyUi = function () {
	        var visible = this.filter === NumberFilter.IN_RANGE;
	        utils_1.Utils.setVisible(this.eNumberToPanel, visible);
	    };
	    NumberFilter.prototype.resetState = function () {
	        this.setFilterType(this.defaultFilter);
	        this.setFilter(null);
	        this.setFilterTo(null);
	    };
	    NumberFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    NumberFilter.LESS_THAN = 'lessThan'; //3;
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterNumberToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], NumberFilter.prototype, "eNumberToPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterToText'),
	        __metadata("design:type", HTMLInputElement)
	    ], NumberFilter.prototype, "eFilterToTextField", void 0);
	    return NumberFilter;
	}(baseFilter_1.ScalarBaseFilter));
	exports.NumberFilter = NumberFilter;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var componentMetadataProvider_1 = __webpack_require__(368);
	var utils_1 = __webpack_require__(288);
	var AgComponentUtils = (function () {
	    function AgComponentUtils() {
	    }
	    AgComponentUtils.prototype.adaptFunction = function (propertyName, hardcodedJsFunction, type, source) {
	        if (hardcodedJsFunction == null)
	            return {
	                component: null,
	                type: type,
	                source: source
	            };
	        var metadata = this.componentMetadataProvider.retrieve(propertyName);
	        if (metadata && metadata.functionAdapter) {
	            return {
	                type: type,
	                component: metadata.functionAdapter(hardcodedJsFunction),
	                source: source
	            };
	        }
	        console.error("It seems like you are providing a function as a component: " + hardcodedJsFunction + ", but this component: [" + propertyName + "] doesnt accept functions");
	        return null;
	    };
	    AgComponentUtils.prototype.adaptCellRendererFunction = function (callback) {
	        var Adapter = (function () {
	            function Adapter() {
	            }
	            Adapter.prototype.refresh = function (params) {
	                return false;
	            };
	            Adapter.prototype.getGui = function () {
	                var callbackResult = callback(this.params);
	                if (typeof callbackResult != 'string')
	                    return callbackResult;
	                return utils_1._.loadTemplate('<span>' + callbackResult + '</span>');
	            };
	            Adapter.prototype.init = function (params) {
	                this.params = params;
	            };
	            return Adapter;
	        }());
	        return Adapter;
	    };
	    AgComponentUtils.prototype.doesImplementIComponent = function (candidate) {
	        if (!candidate)
	            return false;
	        return candidate.prototype && 'getGui' in candidate.prototype;
	    };
	    __decorate([
	        context_1.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)
	    ], AgComponentUtils.prototype, "componentMetadataProvider", void 0);
	    AgComponentUtils = __decorate([
	        context_1.Bean("agComponentUtils")
	    ], AgComponentUtils);
	    return AgComponentUtils;
	}());
	exports.AgComponentUtils = AgComponentUtils;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var agComponentUtils_1 = __webpack_require__(367);
	var ComponentMetadataProvider = (function () {
	    function ComponentMetadataProvider() {
	    }
	    ComponentMetadataProvider.prototype.postConstruct = function () {
	        this.componentMetaData = {
	            dateComponent: {
	                mandatoryMethodList: ['getDate', 'setDate'],
	                optionalMethodList: []
	            },
	            headerComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            headerGroupComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            floatingFilterComponent: {
	                mandatoryMethodList: ['onParentModelChanged'],
	                optionalMethodList: ['afterGuiAttached']
	            },
	            floatingFilterWrapperComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            filterComponent: {
	                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
	                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
	            },
	            cellRenderer: {
	                mandatoryMethodList: ['refresh'],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            cellEditor: {
	                mandatoryMethodList: ['getValue'],
	                optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'focusIn', 'focusOut', 'afterGuiAttached']
	            },
	            innerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            fullWidthCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            pinnedRowCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            groupRowInnerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            filter: {
	                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
	                optionalMethodList: ['onNewRowsLoaded', 'onFloatingFilterChanged'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            }
	        };
	    };
	    ComponentMetadataProvider.prototype.retrieve = function (name) {
	        return this.componentMetaData[name];
	    };
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentMetadataProvider.prototype, "postConstruct", null);
	    ComponentMetadataProvider = __decorate([
	        context_1.Bean("componentMetadataProvider")
	    ], ComponentMetadataProvider);
	    return ComponentMetadataProvider;
	}());
	exports.ComponentMetadataProvider = ComponentMetadataProvider;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var componentAnnotations_1 = __webpack_require__(330);
	var utils_1 = __webpack_require__(288);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var rowRenderer_1 = __webpack_require__(305);
	var paginationProxy_1 = __webpack_require__(323);
	var PaginationComp = (function (_super) {
	    __extends(PaginationComp, _super);
	    function PaginationComp() {
	        return _super.call(this) || this;
	    }
	    PaginationComp.prototype.postConstruct = function () {
	        this.setTemplate(this.getTemplate());
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(this.btFirst, 'click', this.onBtFirst.bind(this));
	        this.addDestroyableEventListener(this.btLast, 'click', this.onBtLast.bind(this));
	        this.addDestroyableEventListener(this.btNext, 'click', this.onBtNext.bind(this));
	        this.addDestroyableEventListener(this.btPrevious, 'click', this.onBtPrevious.bind(this));
	        this.onPaginationChanged();
	    };
	    PaginationComp.prototype.onPaginationChanged = function () {
	        this.enableOrDisableButtons();
	        this.updateRowLabels();
	        this.setCurrentPageLabel();
	        this.setTotalLabels();
	    };
	    PaginationComp.prototype.setCurrentPageLabel = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        this.lbCurrent.innerHTML = this.formatNumber(currentPage + 1);
	    };
	    PaginationComp.prototype.formatNumber = function (value) {
	        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
	        if (userFunc) {
	            return userFunc({ value: value });
	        }
	        else {
	            return utils_1._.formatNumberCommas(value);
	        }
	    };
	    PaginationComp.prototype.getTemplate = function () {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var strPage = localeTextFunc('page', 'Page');
	        var strTo = localeTextFunc('to', 'to');
	        var strOf = localeTextFunc('of', 'of');
	        var strFirst = localeTextFunc('first', 'First');
	        var strPrevious = localeTextFunc('previous', 'Previous');
	        var strNext = localeTextFunc('next', 'Next');
	        var strLast = localeTextFunc('last', 'Last');
	        return "<div class=\"ag-paging-panel ag-font-style\">\n                <span ref=\"eSummaryPanel\" class=\"ag-paging-row-summary-panel\">\n                    <span ref=\"lbFirstRowOnPage\"></span> " + strTo + " <span ref=\"lbLastRowOnPage\"></span> " + strOf + " <span ref=\"lbRecordCount\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\">\n                    <button class=\"ag-paging-button\" ref=\"btFirst\">" + strFirst + "</button>\n                    <button class=\"ag-paging-button\" ref=\"btPrevious\">" + strPrevious + "</button>\n                    " + strPage + " <span ref=\"lbCurrent\"></span> " + strOf + " <span ref=\"lbTotal\"></span>\n                    <button class=\"ag-paging-button\" ref=\"btNext\">" + strNext + "</button>\n                    <button class=\"ag-paging-button\" ref=\"btLast\">" + strLast + "</button>\n                </span>\n            </div>";
	    };
	    PaginationComp.prototype.onBtNext = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    PaginationComp.prototype.onBtPrevious = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    PaginationComp.prototype.onBtFirst = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    PaginationComp.prototype.onBtLast = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    PaginationComp.prototype.enableOrDisableButtons = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var disablePreviousAndFirst = currentPage === 0;
	        this.btPrevious.disabled = disablePreviousAndFirst;
	        this.btFirst.disabled = disablePreviousAndFirst;
	        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
	        var onLastPage = maxRowFound && currentPage === (totalPages - 1);
	        var disableNext = onLastPage || zeroPagesToDisplay;
	        this.btNext.disabled = disableNext;
	        var disableLast = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);
	        this.btLast.disabled = disableLast;
	    };
	    PaginationComp.prototype.updateRowLabels = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var pageSize = this.paginationProxy.getPageSize();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        var startRow;
	        var endRow;
	        if (this.isZeroPagesToDisplay()) {
	            startRow = 0;
	            endRow = 0;
	        }
	        else {
	            startRow = (pageSize * currentPage) + 1;
	            endRow = startRow + pageSize - 1;
	            if (maxRowFound && endRow > rowCount) {
	                endRow = rowCount;
	            }
	        }
	        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
	        this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
	    };
	    PaginationComp.prototype.isZeroPagesToDisplay = function () {
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        return maxRowFound && totalPages === 0;
	    };
	    PaginationComp.prototype.setTotalLabels = function () {
	        var lastPageFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        if (lastPageFound) {
	            this.lbTotal.innerHTML = this.formatNumber(totalPages);
	            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
	        }
	        else {
	            var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
	            this.lbTotal.innerHTML = moreText;
	            this.lbRecordCount.innerHTML = moreText;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], PaginationComp.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], PaginationComp.prototype, "rowRenderer", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btFirst'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btFirst", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btPrevious'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btPrevious", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btNext'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btNext", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btLast'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btLast", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbRecordCount'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbRecordCount", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbFirstRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbFirstRowOnPage", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbLastRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbLastRowOnPage", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSummaryPanel'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "eSummaryPanel", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbCurrent'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbCurrent", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbTotal'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbTotal", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationComp.prototype, "postConstruct", null);
	    return PaginationComp;
	}(component_1.Component));
	exports.PaginationComp = PaginationComp;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var constants_1 = __webpack_require__(289);
	var columnController_1 = __webpack_require__(297);
	var utils_1 = __webpack_require__(288);
	var gridRow_1 = __webpack_require__(316);
	var gridCell_1 = __webpack_require__(315);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var pinnedRowModel_1 = __webpack_require__(326);
	var CellNavigationService = (function () {
	    function CellNavigationService() {
	    }
	    // returns null if no cell to focus on, ie at the end of the grid
	    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
	        // starting with the provided cell, we keep moving until we find a cell we can
	        // focus on.
	        var pointer = lastCellToFocus;
	        var finished = false;
	        // finished will be true when either:
	        // a) cell found that we can focus on
	        // b) run out of cells (ie the method returns null)
	        while (!finished) {
	            switch (key) {
	                case constants_1.Constants.KEY_UP:
	                    pointer = this.getCellAbove(pointer);
	                    break;
	                case constants_1.Constants.KEY_DOWN:
	                    pointer = this.getCellBelow(pointer);
	                    break;
	                case constants_1.Constants.KEY_RIGHT:
	                    if (this.gridOptionsWrapper.isEnableRtl()) {
	                        pointer = this.getCellToLeft(pointer);
	                    }
	                    else {
	                        pointer = this.getCellToRight(pointer);
	                    }
	                    break;
	                case constants_1.Constants.KEY_LEFT:
	                    if (this.gridOptionsWrapper.isEnableRtl()) {
	                        pointer = this.getCellToRight(pointer);
	                    }
	                    else {
	                        pointer = this.getCellToLeft(pointer);
	                    }
	                    break;
	                default:
	                    console.log('ag-Grid: unknown key for navigation ' + key);
	                    pointer = null;
	                    break;
	            }
	            if (pointer) {
	                finished = this.isCellGoodToFocusOn(pointer);
	            }
	            else {
	                finished = true;
	            }
	        }
	        return pointer;
	    };
	    CellNavigationService.prototype.isCellGoodToFocusOn = function (gridCell) {
	        var column = gridCell.column;
	        var rowNode;
	        switch (gridCell.floating) {
	            case constants_1.Constants.PINNED_TOP:
	                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
	                break;
	            case constants_1.Constants.PINNED_BOTTOM:
	                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
	                break;
	            default:
	                rowNode = this.rowModel.getRow(gridCell.rowIndex);
	                break;
	        }
	        var suppressNavigable = column.isSuppressNavigable(rowNode);
	        return !suppressNavigable;
	    };
	    CellNavigationService.prototype.getCellToLeft = function (lastCell) {
	        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
	        if (!colToLeft) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToLeft, floating: lastCell.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getCellToRight = function (lastCell) {
	        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
	        // if already on right, do nothing
	        if (!colToRight) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToRight, floating: lastCell.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getRowBelow = function (lastRow) {
	        // if already on top row, do nothing
	        if (this.isLastRowInContainer(lastRow)) {
	            if (lastRow.isFloatingBottom()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
	                    return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                if (this.rowModel.isRowsToRender()) {
	                    return new gridRow_1.GridRow(0, null);
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
	                    return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow_1.GridRow(lastRow.rowIndex + 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellBelow = function (lastCell) {
	        var rowBelow = this.getRowBelow(lastCell.getGridRow());
	        if (rowBelow) {
	            var gridCellDef = { rowIndex: rowBelow.rowIndex, column: lastCell.column, floating: rowBelow.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.isLastRowInContainer = function (gridRow) {
	        if (gridRow.isFloatingTop()) {
	            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	            return lastTopIndex <= gridRow.rowIndex;
	        }
	        else if (gridRow.isFloatingBottom()) {
	            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
	            return lastBottomIndex <= gridRow.rowIndex;
	        }
	        else {
	            var lastBodyIndex = this.rowModel.getPageLastRow();
	            return lastBodyIndex <= gridRow.rowIndex;
	        }
	    };
	    CellNavigationService.prototype.getRowAbove = function (lastRow) {
	        // if already on top row, do nothing
	        if (lastRow.rowIndex === 0) {
	            if (lastRow.isFloatingTop()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                // last floating bottom
	                if (this.rowModel.isRowsToRender()) {
	                    return this.getLastBodyCell();
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow_1.GridRow(lastRow.rowIndex - 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellAbove = function (lastCell) {
	        var rowAbove = this.getRowAbove(lastCell.getGridRow());
	        if (rowAbove) {
	            var gridCellDef = { rowIndex: rowAbove.rowIndex, column: lastCell.column, floating: rowAbove.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.getLastBodyCell = function () {
	        var lastBodyRow = this.rowModel.getPageLastRow();
	        return new gridRow_1.GridRow(lastBodyRow, null);
	    };
	    CellNavigationService.prototype.getLastFloatingTopRow = function () {
	        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	        return new gridRow_1.GridRow(lastFloatingRow, constants_1.Constants.PINNED_TOP);
	    };
	    CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {
	        if (backwards) {
	            return this.getNextTabbedCellBackwards(gridCell);
	        }
	        else {
	            return this.getNextTabbedCellForwards(gridCell);
	        }
	    };
	    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell.rowIndex;
	        var newFloating = gridCell.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[0];
	            var rowBelow = this.getRowBelow(gridCell.getGridRow());
	            if (utils_1.Utils.missing(rowBelow)) {
	                return;
	            }
	            newRowIndex = rowBelow.rowIndex;
	            newFloating = rowBelow.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell.rowIndex;
	        var newFloating = gridCell.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[displayedColumns.length - 1];
	            var rowAbove = this.getRowAbove(gridCell.getGridRow());
	            if (utils_1.Utils.missing(rowAbove)) {
	                return;
	            }
	            newRowIndex = rowAbove.rowIndex;
	            newFloating = rowAbove.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], CellNavigationService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], CellNavigationService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], CellNavigationService.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellNavigationService.prototype, "gridOptionsWrapper", void 0);
	    CellNavigationService = __decorate([
	        context_1.Bean('cellNavigationService')
	    ], CellNavigationService);
	    return CellNavigationService;
	}());
	exports.CellNavigationService = CellNavigationService;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var gridPanel_1 = __webpack_require__(306);
	var column_1 = __webpack_require__(299);
	var context_1 = __webpack_require__(287);
	var headerContainer_1 = __webpack_require__(372);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var scrollVisibleService_1 = __webpack_require__(321);
	var HeaderRenderer = (function () {
	    function HeaderRenderer() {
	    }
	    HeaderRenderer.prototype.init = function () {
	        var _this = this;
	        this.eHeaderViewport = this.gridPanel.getHeaderViewport();
	        this.eRoot = this.gridPanel.getRoot();
	        this.eHeaderOverlay = this.gridPanel.getHeaderOverlay();
	        this.centerContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getHeaderContainer(), this.gridPanel.getHeaderViewport(), this.eRoot, null);
	        this.childContainers = [this.centerContainer];
	        if (!this.gridOptionsWrapper.isForPrint()) {
	            this.pinnedLeftContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getPinnedLeftHeader(), null, this.eRoot, column_1.Column.PINNED_LEFT);
	            this.pinnedRightContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getPinnedRightHeader(), null, this.eRoot, column_1.Column.PINNED_RIGHT);
	            this.childContainers.push(this.pinnedLeftContainer);
	            this.childContainers.push(this.pinnedRightContainer);
	        }
	        this.childContainers.forEach(function (container) { return _this.context.wireBean(container); });
	        // when grid columns change, it means the number of rows in the header has changed and it's all new columns
	        this.eventService.addEventListener(events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	        // shotgun way to get labels to change, eg from sum(amount) to avg(amount)
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));
	        // for resized, the individual cells take care of this, so don't need to refresh everything
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.setPinnedColContainerWidth.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.setPinnedColContainerWidth.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        if (this.columnController.isReady()) {
	            this.refreshHeader();
	        }
	    };
	    HeaderRenderer.prototype.onScrollVisibilityChanged = function () {
	        this.setPinnedColContainerWidth();
	    };
	    HeaderRenderer.prototype.forEachHeaderElement = function (callback) {
	        this.childContainers.forEach(function (childContainer) { return childContainer.forEachHeaderElement(callback); });
	    };
	    HeaderRenderer.prototype.destroy = function () {
	        this.childContainers.forEach(function (container) { return container.destroy(); });
	    };
	    HeaderRenderer.prototype.onGridColumnsChanged = function () {
	        this.setHeight();
	    };
	    HeaderRenderer.prototype.refreshHeader = function () {
	        this.setHeight();
	        this.childContainers.forEach(function (container) { return container.refresh(); });
	        this.setPinnedColContainerWidth();
	    };
	    HeaderRenderer.prototype.setHeight = function () {
	        // if forPrint, overlay is missing
	        if (this.eHeaderOverlay) {
	            var rowHeight = this.gridOptionsWrapper.getHeaderHeight();
	            // we can probably get rid of this when we no longer need the overlay
	            var dept = this.columnController.getHeaderRowCount();
	            this.eHeaderOverlay.style.height = rowHeight + 'px';
	            this.eHeaderOverlay.style.top = ((dept - 1) * rowHeight) + 'px';
	        }
	    };
	    HeaderRenderer.prototype.setPinnedColContainerWidth = function () {
	        // pinned col doesn't exist when doing forPrint
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth();
	        var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth();
	        this.eHeaderViewport.style.marginLeft = pinnedLeftWidthWithScroll + 'px';
	        this.eHeaderViewport.style.marginRight = pinnedRightWidthWithScroll + 'px';
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], HeaderRenderer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], HeaderRenderer.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRenderer.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRenderer.prototype, "destroy", null);
	    HeaderRenderer = __decorate([
	        context_1.Bean('headerRenderer')
	    ], HeaderRenderer);
	    return HeaderRenderer;
	}());
	exports.HeaderRenderer = HeaderRenderer;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var dragAndDropService_1 = __webpack_require__(373);
	var columnController_1 = __webpack_require__(297);
	var gridPanel_1 = __webpack_require__(306);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var headerRowComp_1 = __webpack_require__(375);
	var bodyDropTarget_1 = __webpack_require__(384);
	var column_1 = __webpack_require__(299);
	var scrollVisibleService_1 = __webpack_require__(321);
	var HeaderContainer = (function () {
	    function HeaderContainer(eContainer, eViewport, eRoot, pinned) {
	        this.headerRowComps = [];
	        this.eContainer = eContainer;
	        this.eRoot = eRoot;
	        this.pinned = pinned;
	        this.eViewport = eViewport;
	    }
	    HeaderContainer.prototype.forEachHeaderElement = function (callback) {
	        this.headerRowComps.forEach(function (headerRowComp) { return headerRowComp.forEachHeaderElement(callback); });
	    };
	    HeaderContainer.prototype.init = function () {
	        this.setupDragAndDrop();
	        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
	        // if pivoting, then the columns have changed
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	    };
	    // if row group changes, that means we may need to add aggFunc's to the column headers,
	    // if the grid goes from no aggregation (ie no grouping) to grouping
	    HeaderContainer.prototype.onColumnRowGroupChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    // if the agg func of a column changes, then we may need to update the agg func in columns header
	    HeaderContainer.prototype.onColumnValueChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.onColumnResized = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.onDisplayedColumnsChanged = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.onScrollVisibilityChanged = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.setWidthIfPinnedContainer = function () {
	        if (this.pinned === column_1.Column.PINNED_LEFT) {
	            var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth();
	            this.eContainer.style.width = pinnedLeftWidthWithScroll + 'px';
	        }
	        else if (this.pinned === column_1.Column.PINNED_RIGHT) {
	            var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth();
	            this.eContainer.style.width = pinnedRightWidthWithScroll + 'px';
	        }
	    };
	    HeaderContainer.prototype.destroy = function () {
	        this.removeHeaderRowComps();
	    };
	    // grid cols have changed - this also means the number of rows in the header can have
	    // changed. so we remove all the old rows and insert new ones for a complete refresh
	    HeaderContainer.prototype.onGridColumnsChanged = function () {
	        this.removeHeaderRowComps();
	        this.createHeaderRowComps();
	    };
	    // we expose this for gridOptions.api.refreshHeader() to call
	    HeaderContainer.prototype.refresh = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.setupDragAndDrop = function () {
	        var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
	        var bodyDropTarget = new bodyDropTarget_1.BodyDropTarget(this.pinned, dropContainer);
	        this.context.wireBean(bodyDropTarget);
	    };
	    HeaderContainer.prototype.removeHeaderRowComps = function () {
	        this.headerRowComps.forEach(function (headerRowComp) {
	            headerRowComp.destroy();
	        });
	        this.headerRowComps.length = 0;
	        utils_1.Utils.removeAllChildren(this.eContainer);
	    };
	    HeaderContainer.prototype.createHeaderRowComps = function () {
	        // if we are displaying header groups, then we have many rows here.
	        // go through each row of the header, one by one.
	        var rowCount = this.columnController.getHeaderRowCount();
	        for (var dept = 0; dept < rowCount; dept++) {
	            var groupRow = dept !== (rowCount - 1);
	            var type = groupRow ? headerRowComp_1.HeaderRowType.COLUMN_GROUP : headerRowComp_1.HeaderRowType.COLUMN;
	            var headerRowComp = new headerRowComp_1.HeaderRowComp(dept, type, this.pinned, this.eRoot, this.dropTarget);
	            this.context.wireBean(headerRowComp);
	            this.headerRowComps.push(headerRowComp);
	            this.eContainer.appendChild(headerRowComp.getGui());
	        }
	        var includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();
	        if (includeFloatingFilterRow) {
	            var headerRowComp = new headerRowComp_1.HeaderRowComp(rowCount, headerRowComp_1.HeaderRowType.FLOATING_FILTER, this.pinned, this.eRoot, this.dropTarget);
	            this.context.wireBean(headerRowComp);
	            this.headerRowComps.push(headerRowComp);
	            this.eContainer.appendChild(headerRowComp.getGui());
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderContainer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderContainer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], HeaderContainer.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderContainer.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderContainer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], HeaderContainer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderContainer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], HeaderContainer.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderContainer.prototype, "init", null);
	    return HeaderContainer;
	}());
	exports.HeaderContainer = HeaderContainer;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(286);
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var dragService_1 = __webpack_require__(308);
	var columnController_1 = __webpack_require__(297);
	var environment_1 = __webpack_require__(374);
	var DragSourceType;
	(function (DragSourceType) {
	    DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
	    DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
	})(DragSourceType = exports.DragSourceType || (exports.DragSourceType = {}));
	var VDirection;
	(function (VDirection) {
	    VDirection[VDirection["Up"] = 0] = "Up";
	    VDirection[VDirection["Down"] = 1] = "Down";
	})(VDirection = exports.VDirection || (exports.VDirection = {}));
	var HDirection;
	(function (HDirection) {
	    HDirection[HDirection["Left"] = 0] = "Left";
	    HDirection[HDirection["Right"] = 1] = "Right";
	})(HDirection = exports.HDirection || (exports.HDirection = {}));
	var DragAndDropService = (function () {
	    function DragAndDropService() {
	        this.dragSourceAndParamsList = [];
	        this.dropTargets = [];
	    }
	    DragAndDropService_1 = DragAndDropService;
	    DragAndDropService.prototype.init = function () {
	        this.ePinnedIcon = utils_1.Utils.createIcon('columnMovePin', this.gridOptionsWrapper, null);
	        this.ePlusIcon = utils_1.Utils.createIcon('columnMoveAdd', this.gridOptionsWrapper, null);
	        this.eHiddenIcon = utils_1.Utils.createIcon('columnMoveHide', this.gridOptionsWrapper, null);
	        this.eMoveIcon = utils_1.Utils.createIcon('columnMoveMove', this.gridOptionsWrapper, null);
	        this.eLeftIcon = utils_1.Utils.createIcon('columnMoveLeft', this.gridOptionsWrapper, null);
	        this.eRightIcon = utils_1.Utils.createIcon('columnMoveRight', this.gridOptionsWrapper, null);
	        this.eGroupIcon = utils_1.Utils.createIcon('columnMoveGroup', this.gridOptionsWrapper, null);
	        this.eAggregateIcon = utils_1.Utils.createIcon('columnMoveValue', this.gridOptionsWrapper, null);
	        this.ePivotIcon = utils_1.Utils.createIcon('columnMovePivot', this.gridOptionsWrapper, null);
	        this.eDropNotAllowedIcon = utils_1.Utils.createIcon('dropNotAllowed', this.gridOptionsWrapper, null);
	    };
	    DragAndDropService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('OldToolPanelDragAndDropService');
	    };
	    DragAndDropService.prototype.addDragSource = function (dragSource, allowTouch) {
	        if (allowTouch === void 0) { allowTouch = false; }
	        var params = {
	            eElement: dragSource.eElement,
	            onDragStart: this.onDragStart.bind(this, dragSource),
	            onDragStop: this.onDragStop.bind(this),
	            onDragging: this.onDragging.bind(this)
	        };
	        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });
	        this.dragService.addDragSource(params, allowTouch);
	    };
	    DragAndDropService.prototype.removeDragSource = function (dragSource) {
	        var sourceAndParams = utils_1.Utils.find(this.dragSourceAndParamsList, function (item) { return item.dragSource === dragSource; });
	        if (sourceAndParams) {
	            this.dragService.removeDragSource(sourceAndParams.params);
	            utils_1.Utils.removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
	        }
	    };
	    DragAndDropService.prototype.destroy = function () {
	        var _this = this;
	        this.dragSourceAndParamsList.forEach(function (sourceAndParams) {
	            _this.dragService.removeDragSource(sourceAndParams.params);
	        });
	        this.dragSourceAndParamsList.length = 0;
	    };
	    DragAndDropService.prototype.nudge = function () {
	        if (this.dragging) {
	            this.onDragging(this.eventLastTime, true);
	        }
	    };
	    DragAndDropService.prototype.onDragStart = function (dragSource, mouseEvent) {
	        this.dragging = true;
	        this.dragSource = dragSource;
	        this.eventLastTime = mouseEvent;
	        this.dragItem = this.dragSource.dragItemCallback();
	        this.dragItem.columns.forEach(function (column) { return column.setMoving(true); });
	        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
	        this.createGhost();
	    };
	    DragAndDropService.prototype.onDragStop = function (mouseEvent) {
	        this.eventLastTime = null;
	        this.dragging = false;
	        this.dragItem.columns.forEach(function (column) { return column.setMoving(false); });
	        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
	            var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
	            this.lastDropTarget.onDragStop(draggingEvent);
	        }
	        this.lastDropTarget = null;
	        this.dragItem = null;
	        this.removeGhost();
	    };
	    DragAndDropService.prototype.onDragging = function (mouseEvent, fromNudge) {
	        var hDirection = this.workOutHDirection(mouseEvent);
	        var vDirection = this.workOutVDirection(mouseEvent);
	        this.eventLastTime = mouseEvent;
	        this.positionGhost(mouseEvent);
	        // check if mouseEvent intersects with any of the drop targets
	        var dropTarget = utils_1.Utils.find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));
	        if (dropTarget !== this.lastDropTarget) {
	            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
	            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            this.lastDropTarget = dropTarget;
	        }
	        else if (dropTarget) {
	            var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            dropTarget.onDragging(draggingEvent);
	        }
	    };
	    DragAndDropService.prototype.enterDragTargetIfExists = function (dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!dropTarget) {
	            return;
	        }
	        var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        dropTarget.onDragEnter(dragEnterEvent);
	        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
	    };
	    DragAndDropService.prototype.leaveLastTargetIfExists = function (mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!this.lastDropTarget) {
	            return;
	        }
	        var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        this.lastDropTarget.onDragLeave(dragLeaveEvent);
	        this.setGhostIcon(null);
	    };
	    DragAndDropService.prototype.getAllContainersFromDropTarget = function (dropTarget) {
	        var containers = [dropTarget.getContainer()];
	        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
	        if (secondaryContainers) {
	            containers = containers.concat(secondaryContainers);
	        }
	        return containers;
	    };
	    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
	    DragAndDropService.prototype.isMouseOnDropTarget = function (mouseEvent, dropTarget) {
	        var allContainers = this.getAllContainersFromDropTarget(dropTarget);
	        var gotMatch = false;
	        allContainers.forEach(function (eContainer) {
	            if (!eContainer) {
	                return;
	            } // secondary can be missing
	            var rect = eContainer.getBoundingClientRect();
	            // if element is not visible, then width and height are zero
	            if (rect.width === 0 || rect.height === 0) {
	                return;
	            }
	            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
	            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;
	            //console.log(`rect.width = ${rect.width} || rect.height = ${rect.height} ## verticalFit = ${verticalFit}, horizontalFit = ${horizontalFit}, `);
	            if (horizontalFit && verticalFit) {
	                gotMatch = true;
	            }
	        });
	        return gotMatch;
	    };
	    DragAndDropService.prototype.addDropTarget = function (dropTarget) {
	        this.dropTargets.push(dropTarget);
	    };
	    DragAndDropService.prototype.workOutHDirection = function (event) {
	        if (this.eventLastTime.clientX > event.clientX) {
	            return HDirection.Left;
	        }
	        else if (this.eventLastTime.clientX < event.clientX) {
	            return HDirection.Right;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.workOutVDirection = function (event) {
	        if (this.eventLastTime.clientY > event.clientY) {
	            return VDirection.Up;
	        }
	        else if (this.eventLastTime.clientY < event.clientY) {
	            return VDirection.Down;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.createDropTargetEvent = function (dropTarget, event, hDirection, vDirection, fromNudge) {
	        // localise x and y to the target component
	        var rect = dropTarget.getContainer().getBoundingClientRect();
	        var x = event.clientX - rect.left;
	        var y = event.clientY - rect.top;
	        var dropTargetEvent = {
	            event: event,
	            x: x,
	            y: y,
	            vDirection: vDirection,
	            hDirection: hDirection,
	            dragSource: this.dragSource,
	            fromNudge: fromNudge,
	            dragItem: this.dragItem
	        };
	        return dropTargetEvent;
	    };
	    DragAndDropService.prototype.positionGhost = function (event) {
	        var ghostRect = this.eGhost.getBoundingClientRect();
	        var ghostHeight = ghostRect.height;
	        // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
	        // then brought in scrollbars to the browser. no idea why, but putting in -2 here
	        // works around it which is good enough for me.
	        var browserWidth = utils_1.Utils.getBodyWidth() - 2;
	        var browserHeight = utils_1.Utils.getBodyHeight() - 2;
	        // put ghost vertically in middle of cursor
	        var top = event.pageY - (ghostHeight / 2);
	        // horizontally, place cursor just right of icon
	        var left = event.pageX - 30;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
	        var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
	        // check ghost is not positioned outside of the browser
	        if (browserWidth > 0) {
	            if ((left + this.eGhost.clientWidth) > (browserWidth + windowScrollX)) {
	                left = browserWidth + windowScrollX - this.eGhost.clientWidth;
	            }
	        }
	        if (left < 0) {
	            left = 0;
	        }
	        if (browserHeight > 0) {
	            if ((top + this.eGhost.clientHeight) > (browserHeight + windowScrollY)) {
	                top = browserHeight + windowScrollY - this.eGhost.clientHeight;
	            }
	        }
	        if (top < 0) {
	            top = 0;
	        }
	        this.eGhost.style.left = left + 'px';
	        this.eGhost.style.top = top + 'px';
	    };
	    DragAndDropService.prototype.removeGhost = function () {
	        if (this.eGhost && this.eGhostParent) {
	            this.eGhostParent.removeChild(this.eGhost);
	        }
	        this.eGhost = null;
	    };
	    DragAndDropService.prototype.createGhost = function () {
	        this.eGhost = utils_1.Utils.loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
	        this.eGhost.classList.add(this.environment.getTheme());
	        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');
	        this.setGhostIcon(null);
	        var eText = this.eGhost.querySelector('.ag-dnd-ghost-label');
	        eText.innerHTML = this.dragSource.dragItemName;
	        this.eGhost.style.height = '25px';
	        this.eGhost.style.top = '20px';
	        this.eGhost.style.left = '20px';
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        this.eGhostParent = usrDocument.querySelector('body');
	        if (!this.eGhostParent) {
	            console.warn('ag-Grid: could not find document body, it is needed for dragging columns');
	        }
	        else {
	            this.eGhostParent.appendChild(this.eGhost);
	        }
	    };
	    DragAndDropService.prototype.setGhostIcon = function (iconName, shake) {
	        if (shake === void 0) { shake = false; }
	        utils_1.Utils.removeAllChildren(this.eGhostIcon);
	        var eIcon;
	        switch (iconName) {
	            case DragAndDropService_1.ICON_ADD:
	                eIcon = this.ePlusIcon;
	                break;
	            case DragAndDropService_1.ICON_PINNED:
	                eIcon = this.ePinnedIcon;
	                break;
	            case DragAndDropService_1.ICON_MOVE:
	                eIcon = this.eMoveIcon;
	                break;
	            case DragAndDropService_1.ICON_LEFT:
	                eIcon = this.eLeftIcon;
	                break;
	            case DragAndDropService_1.ICON_RIGHT:
	                eIcon = this.eRightIcon;
	                break;
	            case DragAndDropService_1.ICON_GROUP:
	                eIcon = this.eGroupIcon;
	                break;
	            case DragAndDropService_1.ICON_AGGREGATE:
	                eIcon = this.eAggregateIcon;
	                break;
	            case DragAndDropService_1.ICON_PIVOT:
	                eIcon = this.ePivotIcon;
	                break;
	            case DragAndDropService_1.ICON_NOT_ALLOWED:
	                eIcon = this.eDropNotAllowedIcon;
	                break;
	            default:
	                eIcon = this.eHiddenIcon;
	                break;
	        }
	        this.eGhostIcon.appendChild(eIcon);
	        utils_1.Utils.addOrRemoveCssClass(this.eGhostIcon, 'ag-shake-left-to-right', shake);
	    };
	    DragAndDropService.ICON_PINNED = 'pinned';
	    DragAndDropService.ICON_ADD = 'add';
	    DragAndDropService.ICON_MOVE = 'move';
	    DragAndDropService.ICON_LEFT = 'left';
	    DragAndDropService.ICON_RIGHT = 'right';
	    DragAndDropService.ICON_GROUP = 'group';
	    DragAndDropService.ICON_AGGREGATE = 'aggregate';
	    DragAndDropService.ICON_PIVOT = 'pivot';
	    DragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';
	    DragAndDropService.GHOST_TEMPLATE = '<div class="ag-dnd-ghost">' +
	        '  <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>' +
	        '  <div class="ag-dnd-ghost-label">' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], DragAndDropService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragService'),
	        __metadata("design:type", dragService_1.DragService)
	    ], DragAndDropService.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('environment'),
	        __metadata("design:type", environment_1.Environment)
	    ], DragAndDropService.prototype, "environment", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], DragAndDropService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "init", null);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "setBeans", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "destroy", null);
	    DragAndDropService = DragAndDropService_1 = __decorate([
	        context_1.Bean('dragAndDropService')
	    ], DragAndDropService);
	    return DragAndDropService;
	    var DragAndDropService_1;
	}());
	exports.DragAndDropService = DragAndDropService;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var themeNames = ['fresh', 'dark', 'blue', 'bootstrap', 'material'];
	var themes = themeNames.concat(themeNames.map(function (name) { return "theme-" + name; }));
	var themeClass = new RegExp("ag-(" + themes.join('|') + ")");
	var matGridSize = 8;
	var freshGridSize = 4;
	var HARD_CODED_SIZES = {
	    'ag-theme-material': {
	        headerHeight: matGridSize * 7,
	        virtualItemHeight: matGridSize * 5,
	        rowHeight: matGridSize * 6
	    },
	    'ag-theme-classic': {
	        headerHeight: 25,
	        virtualItemHeight: freshGridSize * 5,
	        rowHeight: 25
	    }
	};
	var Environment = (function () {
	    function Environment() {
	        this.sassVariables = {};
	    }
	    // Approach described here:
	    // https://www.ofcodeandcolor.com/2017/04/02/encoding-data-in-css/
	    Environment.prototype.loadSassVariables = function () {
	        /*
	        var element = document.createElement('div');
	        element.className = 'sass-variables';
	        this.eGridDiv.appendChild(element);

	        var content = window.getComputedStyle(element, '::after').content;

	        try {
	            this.sassVariables = JSON.parse(JSON.parse(content));
	        } catch (e) {
	            throw new Error("Failed loading the theme sizing - check that you have the theme set up correctly.");
	        }

	        this.eGridDiv.removeChild(element);
	        */
	    };
	    Environment.prototype.getSassVariable = function (theme, key) {
	        if (theme == 'ag-theme-material') {
	            return HARD_CODED_SIZES['ag-theme-material'][key];
	        }
	        return HARD_CODED_SIZES['ag-theme-classic'][key];
	        /*
	        const result = parseInt(this.sassVariables[key]);
	        if (!result || isNaN(result)) {
	            throw new Error(`Failed loading ${key} Sass variable from ${this.sassVariables}`);
	        }
	        return result;
	        */
	    };
	    Environment.prototype.getTheme = function () {
	        var themeMatch;
	        var element = this.eGridDiv;
	        while (element != document.documentElement && themeMatch == null) {
	            themeMatch = element.className.match(themeClass);
	            element = element.parentElement;
	            if (element == null) {
	                break;
	            }
	        }
	        if (themeMatch) {
	            return themeMatch[0];
	        }
	        else {
	            return 'ag-fresh';
	        }
	    };
	    __decorate([
	        context_1.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], Environment.prototype, "eGridDiv", void 0);
	    Environment = __decorate([
	        context_1.Bean('environment')
	    ], Environment);
	    return Environment;
	}());
	exports.Environment = Environment;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var column_1 = __webpack_require__(299);
	var renderedHeaderCell_1 = __webpack_require__(376);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var utils_1 = __webpack_require__(288);
	var headerWrapperComp_1 = __webpack_require__(380);
	var headerGroupWrapperComp_1 = __webpack_require__(383);
	var filterManager_1 = __webpack_require__(334);
	var componentRecipes_1 = __webpack_require__(342);
	var HeaderRowType;
	(function (HeaderRowType) {
	    HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
	    HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
	    HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
	})(HeaderRowType = exports.HeaderRowType || (exports.HeaderRowType = {}));
	var HeaderRowComp = (function (_super) {
	    __extends(HeaderRowComp, _super);
	    function HeaderRowComp(dept, type, pinned, eRoot, dropTarget) {
	        var _this = _super.call(this, "<div class=\"ag-header-row\" role=\"presentation\"/>") || this;
	        _this.headerCompPromises = {};
	        _this.warnedUserOnOldHeaderTemplate = false;
	        _this.dept = dept;
	        _this.type = type;
	        _this.pinned = pinned;
	        _this.eRoot = eRoot;
	        _this.dropTarget = dropTarget;
	        return _this;
	    }
	    HeaderRowComp.prototype.forEachHeaderElement = function (callback) {
	        var _this = this;
	        var promises = [];
	        Object.keys(this.headerCompPromises).forEach(function (key) {
	            promises.push(_this.headerCompPromises[key]);
	        });
	        utils_1.Promise.all(promises).then(function (combined) { return combined.forEach(function (headerElement) { return callback(headerElement); }); });
	    };
	    HeaderRowComp.prototype.destroy = function () {
	        var idsOfAllChildren = Object.keys(this.headerCompPromises);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	        _super.prototype.destroy.call(this);
	    };
	    HeaderRowComp.prototype.removeAndDestroyChildComponents = function (idsToDestroy) {
	        var _this = this;
	        idsToDestroy.forEach(function (id) {
	            _this.headerCompPromises[id].then(function (childPromise) {
	                _this.getGui().removeChild(childPromise.getGui());
	                if (childPromise.destroy) {
	                    childPromise.destroy();
	                }
	                delete _this.headerCompPromises[id];
	            });
	        });
	    };
	    HeaderRowComp.prototype.onRowHeightChanged = function () {
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var sizes = [];
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        for (var i = 0; i < numberOfGroups; i++)
	            sizes.push(groupHeight);
	        sizes.push(headerHeight);
	        for (var i = 0; i < numberOfFloating; i++)
	            sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
	        var rowHeight = 0;
	        for (var i = 0; i < this.dept; i++)
	            rowHeight += sizes[i];
	        this.getGui().style.top = rowHeight + 'px';
	        this.getGui().style.height = sizes[this.dept] + 'px';
	    };
	    //noinspection JSUnusedLocalSymbols
	    HeaderRowComp.prototype.init = function () {
	        this.onRowHeightChanged();
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    HeaderRowComp.prototype.onColumnResized = function () {
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.setWidth = function () {
	        var mainRowWidth = this.columnController.getContainerWidth(this.pinned) + 'px';
	        this.getGui().style.width = mainRowWidth;
	    };
	    HeaderRowComp.prototype.onGridColumnsChanged = function () {
	        this.removeAndDestroyAllChildComponents();
	    };
	    HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function () {
	        var idsOfAllChildren = Object.keys(this.headerCompPromises);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	    };
	    HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.onVirtualColumnsChanged = function () {
	        var _this = this;
	        var currentChildIds = Object.keys(this.headerCompPromises);
	        var itemsAtDepth = this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ?
	            this.dept - 1 :
	            this.dept);
	        var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
	        var eBefore;
	        itemsAtDepth.forEach(function (child) {
	            // skip groups that have no displayed children. this can happen when the group is broken,
	            // and this section happens to have nothing to display for the open / closed state.
	            // (a broken group is one that is split, ie columns in the group have a non-group column
	            // in between them)
	            if (child.isEmptyGroup()) {
	                return;
	            }
	            var idOfChild = child.getUniqueId();
	            var eParentContainer = _this.getGui();
	            // if we already have this cell rendered, do nothing
	            var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;
	            var headerCompPromise;
	            var eHeaderCompGui;
	            if (colAlreadyInDom) {
	                utils_1.Utils.removeFromArray(currentChildIds, idOfChild);
	                headerCompPromise = _this.headerCompPromises[idOfChild];
	                headerCompPromise.then(function (headerComp) {
	                    eBefore = eHeaderCompGui;
	                    eHeaderCompGui = headerComp.getGui();
	                    if (ensureDomOrder) {
	                        utils_1.Utils.ensureDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                    }
	                });
	            }
	            else {
	                headerCompPromise = _this.createHeaderComp(child);
	                _this.headerCompPromises[idOfChild] = headerCompPromise;
	                headerCompPromise.then(function (headerComp) {
	                    eBefore = eHeaderCompGui;
	                    eHeaderCompGui = headerComp.getGui();
	                    if (ensureDomOrder) {
	                        utils_1.Utils.insertWithDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                    }
	                    else {
	                        eParentContainer.appendChild(eHeaderCompGui);
	                    }
	                });
	            }
	        });
	        // at this point, anything left in currentChildIds is an element that is no longer in the viewport
	        this.removeAndDestroyChildComponents(currentChildIds);
	    };
	    // check if user is using the deprecated
	    HeaderRowComp.prototype.isUsingOldHeaderRenderer = function (column) {
	        var colDef = column.getColDef();
	        var usingOldHeaderRenderer = utils_1.Utils.anyExists([
	            // header template
	            this.gridOptionsWrapper.getHeaderCellTemplateFunc(),
	            this.gridOptionsWrapper.getHeaderCellTemplate(),
	            colDef.headerCellTemplate,
	            // header cellRenderer
	            colDef.headerCellRenderer,
	            this.gridOptionsWrapper.getHeaderCellRenderer()
	        ]);
	        if (usingOldHeaderRenderer && !this.warnedUserOnOldHeaderTemplate) {
	            if (this.gridOptionsWrapper.getHeaderCellTemplate() || this.gridOptionsWrapper.getHeaderCellTemplateFunc()) {
	                console.warn('ag-Grid: Since ag-Grid v14 you can now specify a template for the default header component. The ability to specify header template using colDef.headerCellTemplate is now deprecated and will be removed in v15. Please change your code to specify the template as colDef.headerComponentParams.template');
	            }
	            if (this.gridOptionsWrapper.getHeaderCellRenderer()) {
	                console.warn('ag-Grid: Using headerCellRenderer is deprecated and will be removed in ag-Grid v15. Please use Header Component instead.');
	            }
	            this.warnedUserOnOldHeaderTemplate = true;
	        }
	        return usingOldHeaderRenderer;
	    };
	    HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {
	        var _this = this;
	        var resultPromise;
	        switch (this.type) {
	            case HeaderRowType.COLUMN:
	                if (this.isUsingOldHeaderRenderer(columnGroupChild)) {
	                    resultPromise = utils_1.Promise.resolve(new renderedHeaderCell_1.RenderedHeaderCell(columnGroupChild, this.eRoot, this.dropTarget, this.pinned));
	                }
	                else {
	                    resultPromise = utils_1.Promise.resolve(new headerWrapperComp_1.HeaderWrapperComp(columnGroupChild, this.eRoot, this.dropTarget, this.pinned));
	                }
	                break;
	            case HeaderRowType.COLUMN_GROUP:
	                resultPromise = utils_1.Promise.resolve(new headerGroupWrapperComp_1.HeaderGroupWrapperComp(columnGroupChild, this.eRoot, this.dropTarget, this.pinned));
	                break;
	            case HeaderRowType.FLOATING_FILTER:
	                var column = columnGroupChild;
	                resultPromise = this.createFloatingFilterWrapper(column);
	                break;
	        }
	        resultPromise.then(function (result) { return _this.context.wireBean(result); });
	        return resultPromise;
	    };
	    HeaderRowComp.prototype.createFloatingFilterWrapper = function (column) {
	        var _this = this;
	        var floatingFilterParams = this.createFloatingFilterParams(column);
	        var floatingFilterWrapperPromise = this.componentRecipes.newFloatingFilterWrapperComponent(column, floatingFilterParams);
	        floatingFilterWrapperPromise.then(function (floatingFilterWrapper) {
	            _this.addDestroyableEventListener(column, column_1.Column.EVENT_FILTER_CHANGED, function () {
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column);
	                floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));
	            });
	            var cachedFilter = _this.filterManager.cachedFilter(column);
	            if (cachedFilter) {
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column);
	                floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));
	            }
	        });
	        return floatingFilterWrapperPromise;
	    };
	    HeaderRowComp.prototype.createFloatingFilterParams = function (column) {
	        var _this = this;
	        // We always get the freshest reference to the baseFilter because the filters get sometimes created
	        // and destroyed between calls
	        //
	        // let filterComponent:BaseFilter<any, any, any> = <any>this.filterManager.getFilterComponent(column);
	        //
	        var baseParams = {
	            column: column,
	            currentParentModel: function () {
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column);
	                return filterComponentPromise.resolveNow(null, function (filter) {
	                    return (filter.getNullableModel) ?
	                        filter.getNullableModel() :
	                        filter.getModel();
	                });
	            },
	            onFloatingFilterChanged: function (change) {
	                var captureModelChangedResolveFunc;
	                var modelChanged = new utils_1.Promise(function (resolve) {
	                    captureModelChangedResolveFunc = resolve;
	                });
	                var filterComponentPromise = _this.filterManager.getFilterComponent(column);
	                filterComponentPromise.then(function (filterComponent) {
	                    if (filterComponent.onFloatingFilterChanged) {
	                        //If going through this branch of code the user MUST
	                        //be passing an object of type change that contains
	                        //a model propery inside and some other stuff
	                        var result = filterComponent.onFloatingFilterChanged(change);
	                        captureModelChangedResolveFunc(result);
	                    }
	                    else {
	                        //If going through this branch of code the user MUST
	                        //be passing the plain model and delegating to ag-Grid
	                        //the responsibility to set the parent model and refresh
	                        //the filters
	                        filterComponent.setModel(change);
	                        _this.filterManager.onFilterChanged();
	                        captureModelChangedResolveFunc(true);
	                    }
	                });
	                return modelChanged.resolveNow(true, function (modelChanged) { return modelChanged; });
	            },
	            //This one might be overriden from the colDef
	            suppressFilterButton: false
	        };
	        return baseParams;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderRowComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderRowComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderRowComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderRowComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], HeaderRowComp.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderRowComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRowComp.prototype, "init", null);
	    return HeaderRowComp;
	}(component_1.Component));
	exports.HeaderRowComp = HeaderRowComp;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var column_1 = __webpack_require__(299);
	var filterManager_1 = __webpack_require__(334);
	var columnController_1 = __webpack_require__(297);
	var headerTemplateLoader_1 = __webpack_require__(377);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var horizontalDragService_1 = __webpack_require__(378);
	var gridCore_1 = __webpack_require__(333);
	var context_1 = __webpack_require__(287);
	var cssClassApplier_1 = __webpack_require__(379);
	var dragAndDropService_1 = __webpack_require__(373);
	var sortController_1 = __webpack_require__(344);
	var setLeftFeature_1 = __webpack_require__(349);
	var touchListener_1 = __webpack_require__(345);
	var component_1 = __webpack_require__(317);
	var beans_1 = __webpack_require__(350);
	var RenderedHeaderCell = (function (_super) {
	    __extends(RenderedHeaderCell, _super);
	    function RenderedHeaderCell(column, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this) || this;
	        _this.column = column;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    RenderedHeaderCell.prototype.getColumn = function () {
	        return this.column;
	    };
	    RenderedHeaderCell.prototype.init = function () {
	        var eGui = this.headerTemplateLoader.createHeaderElement(this.column);
	        this.setGui(eGui);
	        this.createScope();
	        this.addAttributes();
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), eGui, this.gridOptionsWrapper, this.column, null);
	        utils_1.Utils.addCssClass(eGui, 'ag-header-cell');
	        // label div
	        var eHeaderCellLabel = eGui.querySelector('#agHeaderCellLabel');
	        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.setupResize();
	        this.setupTap();
	        this.setupMove(eHeaderCellLabel);
	        this.setupMenu();
	        this.setupSort(eHeaderCellLabel);
	        this.setupFilterIcon();
	        this.setupText();
	        this.setupWidth();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, eGui, this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    RenderedHeaderCell.prototype.setupTooltip = function () {
	        var colDef = this.column.getColDef();
	        // add tooltip if exists
	        if (colDef.headerTooltip) {
	            this.getGui().title = colDef.headerTooltip;
	        }
	    };
	    RenderedHeaderCell.prototype.setupText = function () {
	        var colDef = this.column.getColDef();
	        // render the cell, use a renderer if one is provided
	        var headerCellRenderer;
	        if (colDef.headerCellRenderer) {
	            headerCellRenderer = colDef.headerCellRenderer;
	        }
	        else if (this.gridOptionsWrapper.getHeaderCellRenderer()) {
	            headerCellRenderer = this.gridOptionsWrapper.getHeaderCellRenderer();
	        }
	        var eText = this.queryForHtmlElement('#agText');
	        if (eText) {
	            if (headerCellRenderer) {
	                this.useRenderer(this.displayName, headerCellRenderer, eText);
	            }
	            else {
	                // no renderer, default text render
	                eText.innerHTML = this.displayName;
	                // i don't remember why this is here, take it out???
	                utils_1.Utils.addCssClass(eText, 'ag-header-cell-text');
	            }
	        }
	    };
	    RenderedHeaderCell.prototype.setupFilterIcon = function () {
	        this.eFilterIcon = this.queryForHtmlElement('#agFilter');
	        if (!this.eFilterIcon) {
	            return;
	        }
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	    };
	    RenderedHeaderCell.prototype.onFilterChanged = function () {
	        var filterPresent = this.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-filtered', filterPresent);
	        utils_1.Utils.addOrRemoveCssClass(this.eFilterIcon, 'ag-hidden', !filterPresent);
	    };
	    RenderedHeaderCell.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    RenderedHeaderCell.prototype.onColumnWidthChanged = function () {
	        this.getGui().style.width = this.column.getActualWidth() + 'px';
	    };
	    RenderedHeaderCell.prototype.createScope = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	            this.childScope = this.$scope.$new();
	            this.childScope.colDef = this.column.getColDef();
	            this.childScope.colDefWrapper = this.column;
	            this.childScope.context = this.gridOptionsWrapper.getContext();
	            this.addDestroyFunc(function () {
	                _this.childScope.$destroy();
	            });
	        }
	    };
	    RenderedHeaderCell.prototype.addAttributes = function () {
	        this.getGui().setAttribute("colId", this.column.getColId());
	    };
	    RenderedHeaderCell.prototype.setupMenu = function () {
	        var _this = this;
	        var eMenu = this.queryForHtmlElement('#agMenu');
	        // if no menu provided in template, do nothing
	        if (!eMenu) {
	            return;
	        }
	        var skipMenu = !this.menuFactory.isMenuEnabled(this.column) || this.column.getColDef().suppressMenu;
	        if (skipMenu) {
	            utils_1.Utils.removeFromParent(eMenu);
	            return;
	        }
	        eMenu.addEventListener('click', function () { return _this.showMenu(eMenu); });
	        if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	            eMenu.style.opacity = '0';
	            this.addGuiEventListener('mouseover', function () {
	                eMenu.style.opacity = '1';
	            });
	            this.addGuiEventListener('mouseout', function () {
	                eMenu.style.opacity = '0';
	            });
	        }
	        var style = eMenu.style;
	        style['transition'] = 'opacity 0.2s, border 0.2s';
	        style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
	    };
	    RenderedHeaderCell.prototype.showMenu = function (eventSource) {
	        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource);
	    };
	    RenderedHeaderCell.prototype.setupMovingCss = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
	        this.onColumnMovingChanged();
	    };
	    RenderedHeaderCell.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.column.isMoving()) {
	            utils_1.Utils.addCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	    };
	    RenderedHeaderCell.prototype.setupMove = function (eHeaderCellLabel) {
	        var _this = this;
	        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.column.getColDef().suppressMovable
	            || this.gridOptionsWrapper.isForPrint();
	        if (suppressMove) {
	            return;
	        }
	        if (eHeaderCellLabel) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderCellLabel,
	                dragItemCallback: function () { return _this.createDragItem(); },
	                dragItemName: this.displayName,
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    RenderedHeaderCell.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    RenderedHeaderCell.prototype.setupTap = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isSuppressTouch()) {
	            return;
	        }
	        var touchListener = new touchListener_1.TouchListener(this.getGui());
	        var tapListener = function (event) {
	            _this.sortController.progressSort(_this.column, false);
	        };
	        var longTapListener = function (event) {
	            _this.gridOptionsWrapper.getApi().showColumnMenuAfterMouseClick(_this.column, event.touchStart);
	        };
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, tapListener);
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_LONG_TAP, longTapListener);
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	    };
	    RenderedHeaderCell.prototype.setupResize = function () {
	        var _this = this;
	        var colDef = this.column.getColDef();
	        var eResize = this.queryForHtmlElement('#agResizeBar');
	        // if no eResize in template, do nothing
	        if (!eResize) {
	            return;
	        }
	        var weWantResize = this.gridOptionsWrapper.isEnableColResize() && !colDef.suppressResize;
	        if (!weWantResize) {
	            utils_1.Utils.removeFromParent(eResize);
	            return;
	        }
	        this.horizontalDragService.addDragHandling({
	            eDraggableElement: eResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	        if (weWantAutoSize) {
	            this.addDestroyableEventListener(eResize, 'dblclick', function () {
	                _this.columnController.autoSizeColumn(_this.column);
	            });
	        }
	    };
	    RenderedHeaderCell.prototype.useRenderer = function (headerNameValue, headerCellRenderer, eText) {
	        // renderer provided, use it
	        var cellRendererParams = {
	            colDef: this.column.getColDef(),
	            $scope: this.childScope,
	            context: this.gridOptionsWrapper.getContext(),
	            value: headerNameValue,
	            api: this.gridOptionsWrapper.getApi(),
	            eHeaderCell: this.getGui()
	        };
	        var cellRendererResult = headerCellRenderer(cellRendererParams);
	        var childToAppend;
	        if (utils_1.Utils.isNodeOrElement(cellRendererResult)) {
	            // a dom node or element was returned, so add child
	            childToAppend = cellRendererResult;
	        }
	        else {
	            // otherwise assume it was html, so just insert
	            var eTextSpan = document.createElement("span");
	            eTextSpan.innerHTML = cellRendererResult;
	            childToAppend = eTextSpan;
	        }
	        // angular compile header if option is turned on
	        if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	            var childToAppendCompiled = this.$compile(childToAppend)(this.childScope)[0];
	            eText.appendChild(childToAppendCompiled);
	        }
	        else {
	            eText.appendChild(childToAppend);
	        }
	    };
	    RenderedHeaderCell.prototype.setupSort = function (eHeaderCellLabel) {
	        var _this = this;
	        var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	        var element = this.getGui();
	        if (!enableSorting) {
	            utils_1.Utils.removeFromParent(element.querySelector('#agSortAsc'));
	            utils_1.Utils.removeFromParent(element.querySelector('#agSortDesc'));
	            utils_1.Utils.removeFromParent(element.querySelector('#agNoSort'));
	            return;
	        }
	        // add sortable class for styling
	        utils_1.Utils.addCssClass(element, 'ag-header-cell-sortable');
	        // add the event on the header, so when clicked, we do sorting
	        if (eHeaderCellLabel) {
	            eHeaderCellLabel.addEventListener("click", function (event) {
	                _this.sortController.progressSort(_this.column, event.shiftKey);
	            });
	        }
	        // add listener for sort changing, and update the icons accordingly
	        this.eSortAsc = this.queryForHtmlElement('#agSortAsc');
	        this.eSortDesc = this.queryForHtmlElement('#agSortDesc');
	        this.eSortNone = this.queryForHtmlElement('#agNoSort');
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.onSortChanged();
	    };
	    RenderedHeaderCell.prototype.onSortChanged = function () {
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-asc', this.column.isSortAscending());
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-desc', this.column.isSortDescending());
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-sorted-none', this.column.isSortNone());
	        if (this.eSortAsc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.column.isSortAscending());
	        }
	        if (this.eSortDesc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.column.isSortDescending());
	        }
	        if (this.eSortNone) {
	            var alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
	            utils_1.Utils.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.column.isSortNone());
	        }
	    };
	    RenderedHeaderCell.prototype.onDragStart = function () {
	        this.startWidth = this.column.getActualWidth();
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
	    RenderedHeaderCell.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    RenderedHeaderCell.prototype.onDragging = function (dragChange, finished) {
	        var dragChangeNormalised = this.normaliseDragChange(dragChange);
	        var newWidth = this.startWidth + dragChangeNormalised;
	        this.columnController.setColumnWidth(this.column, newWidth, finished);
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RenderedHeaderCell.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], RenderedHeaderCell.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RenderedHeaderCell.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], RenderedHeaderCell.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('headerTemplateLoader'),
	        __metadata("design:type", headerTemplateLoader_1.HeaderTemplateLoader)
	    ], RenderedHeaderCell.prototype, "headerTemplateLoader", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], RenderedHeaderCell.prototype, "horizontalDragService", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RenderedHeaderCell.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], RenderedHeaderCell.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], RenderedHeaderCell.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], RenderedHeaderCell.prototype, "beans", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RenderedHeaderCell.prototype, "init", null);
	    return RenderedHeaderCell;
	}(component_1.Component));
	exports.RenderedHeaderCell = RenderedHeaderCell;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var HeaderTemplateLoader = (function () {
	    function HeaderTemplateLoader() {
	    }
	    HeaderTemplateLoader_1 = HeaderTemplateLoader;
	    HeaderTemplateLoader.prototype.createHeaderElement = function (column) {
	        var params = {
	            column: column,
	            colDef: column.getColDef,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi()
	        };
	        // option 1 - see if user provided a template in colDef
	        var userProvidedTemplate = column.getColDef().headerCellTemplate;
	        if (typeof userProvidedTemplate === 'function') {
	            var colDefFunc = userProvidedTemplate;
	            userProvidedTemplate = colDefFunc(params);
	        }
	        // option 2 - check the gridOptions for cellTemplate
	        if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplate()) {
	            userProvidedTemplate = this.gridOptionsWrapper.getHeaderCellTemplate();
	        }
	        // option 3 - check the gridOptions for templateFunction
	        if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplateFunc()) {
	            var gridOptionsFunc = this.gridOptionsWrapper.getHeaderCellTemplateFunc();
	            userProvidedTemplate = gridOptionsFunc(params);
	        }
	        // finally, if still no template, use the default
	        if (!userProvidedTemplate) {
	            userProvidedTemplate = this.createDefaultHeaderElement(column);
	        }
	        // template can be a string or a dom element, if string we need to convert to a dom element
	        var result;
	        if (typeof userProvidedTemplate === 'string') {
	            result = utils_1.Utils.loadTemplate(userProvidedTemplate);
	        }
	        else if (utils_1.Utils.isNodeOrElement(userProvidedTemplate)) {
	            result = userProvidedTemplate;
	        }
	        else {
	            console.error('ag-Grid: header template must be a string or an HTML element');
	        }
	        return result;
	    };
	    HeaderTemplateLoader.prototype.createDefaultHeaderElement = function (column) {
	        var eTemplate = utils_1.Utils.loadTemplate(HeaderTemplateLoader_1.HEADER_CELL_TEMPLATE);
	        this.addInIcon(eTemplate, 'sortAscending', '#agSortAsc', column);
	        this.addInIcon(eTemplate, 'sortDescending', '#agSortDesc', column);
	        this.addInIcon(eTemplate, 'sortUnSort', '#agNoSort', column);
	        this.addInIcon(eTemplate, 'menu', '#agMenu', column);
	        this.addInIcon(eTemplate, 'filter', '#agFilter', column);
	        return eTemplate;
	    };
	    HeaderTemplateLoader.prototype.addInIcon = function (eTemplate, iconName, cssSelector, column) {
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
	        eTemplate.querySelector(cssSelector).appendChild(eIcon);
	    };
	    HeaderTemplateLoader.HEADER_CELL_TEMPLATE = '<div class="ag-header-cell">' +
	        '  <div id="agResizeBar" class="ag-header-cell-resize"></div>' +
	        '  <span id="agMenu" class="ag-header-icon ag-header-cell-menu-button"></span>' +
	        '  <div id="agHeaderCellLabel" class="ag-header-cell-label">' +
	        '    <span id="agSortAsc" class="ag-header-icon ag-sort-ascending-icon"></span>' +
	        '    <span id="agSortDesc" class="ag-header-icon ag-sort-descending-icon"></span>' +
	        '    <span id="agNoSort" class="ag-header-icon ag-sort-none-icon"></span>' +
	        '    <span id="agFilter" class="ag-header-icon ag-filter-icon"></span>' +
	        '    <span id="agText" class="ag-header-cell-text"></span>' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderTemplateLoader.prototype, "gridOptionsWrapper", void 0);
	    HeaderTemplateLoader = HeaderTemplateLoader_1 = __decorate([
	        context_1.Bean('headerTemplateLoader')
	    ], HeaderTemplateLoader);
	    return HeaderTemplateLoader;
	    var HeaderTemplateLoader_1;
	}());
	exports.HeaderTemplateLoader = HeaderTemplateLoader;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var HorizontalDragService = (function () {
	    function HorizontalDragService() {
	    }
	    HorizontalDragService.prototype.addDragHandling = function (params) {
	        var _this = this;
	        params.eDraggableElement.addEventListener('mousedown', function (startEvent) {
	            var myDocument = _this.gridOptionsWrapper.getDocument();
	            var eBody = myDocument.querySelector('body');
	            new DragInstance(params, startEvent, eBody);
	        });
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HorizontalDragService.prototype, "gridOptionsWrapper", void 0);
	    HorizontalDragService = __decorate([
	        context_1.Bean('horizontalDragService')
	    ], HorizontalDragService);
	    return HorizontalDragService;
	}());
	exports.HorizontalDragService = HorizontalDragService;
	var DragInstance = (function () {
	    function DragInstance(params, startEvent, eBody) {
	        this.mouseMove = this.onMouseMove.bind(this);
	        this.mouseUp = this.onMouseUp.bind(this);
	        this.mouseLeave = this.onMouseLeave.bind(this);
	        this.lastDelta = 0;
	        this.params = params;
	        this.eDragParent = eBody;
	        this.dragStartX = startEvent.clientX;
	        this.startEvent = startEvent;
	        this.eDragParent.addEventListener('mousemove', this.mouseMove);
	        this.eDragParent.addEventListener('mouseup', this.mouseUp);
	        this.eDragParent.addEventListener('mouseleave', this.mouseLeave);
	        this.draggingStarted = false;
	        var startAfterPixelsExist = typeof params.startAfterPixels === 'number' && params.startAfterPixels > 0;
	        if (!startAfterPixelsExist) {
	            this.startDragging();
	        }
	    }
	    DragInstance.prototype.startDragging = function () {
	        this.draggingStarted = true;
	        this.oldBodyCursor = this.params.eBody.style.cursor;
	        this.oldParentCursor = this.eDragParent.style.cursor;
	        this.oldMsUserSelect = this.eDragParent.style.msUserSelect;
	        this.oldWebkitUserSelect = this.eDragParent.style.webkitUserSelect;
	        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'
	        this.params.eBody.style.cursor = this.params.cursor;
	        // same for outside the grid, we want to keep the resize (or move) cursor
	        this.eDragParent.style.cursor = this.params.cursor;
	        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
	        this.eDragParent.style.msUserSelect = 'none';
	        this.eDragParent.style.webkitUserSelect = 'none';
	        this.params.onDragStart(this.startEvent);
	    };
	    DragInstance.prototype.onMouseMove = function (moveEvent) {
	        var newX = moveEvent.clientX;
	        this.lastDelta = newX - this.dragStartX;
	        if (!this.draggingStarted) {
	            var dragExceededStartAfterPixels = Math.abs(this.lastDelta) >= this.params.startAfterPixels;
	            if (dragExceededStartAfterPixels) {
	                this.startDragging();
	            }
	        }
	        if (this.draggingStarted) {
	            this.params.onDragging(this.lastDelta, false);
	        }
	    };
	    DragInstance.prototype.onMouseUp = function () {
	        this.stopDragging();
	    };
	    DragInstance.prototype.onMouseLeave = function () {
	        this.stopDragging();
	    };
	    DragInstance.prototype.stopDragging = function () {
	        // reset cursor back to original cursor, if they were changed in the first place
	        if (this.draggingStarted) {
	            this.params.eBody.style.cursor = this.oldBodyCursor;
	            this.eDragParent.style.cursor = this.oldParentCursor;
	            this.eDragParent.style.msUserSelect = this.oldMsUserSelect;
	            this.eDragParent.style.webkitUserSelect = this.oldWebkitUserSelect;
	            this.params.onDragging(this.lastDelta, true);
	        }
	        // always remove the listeners, as these are always added
	        this.eDragParent.removeEventListener('mousemove', this.mouseMove);
	        this.eDragParent.removeEventListener('mouseup', this.mouseUp);
	        this.eDragParent.removeEventListener('mouseleave', this.mouseLeave);
	    };
	    return DragInstance;
	}());


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var CssClassApplier = (function () {
	    function CssClassApplier() {
	    }
	    CssClassApplier.addHeaderClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addToolPanelClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addColumnClassesFromCollDef = function (classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(classesOrFunc)) {
	            return;
	        }
	        var classToUse;
	        if (typeof classesOrFunc === 'function') {
	            var params = {
	                // bad naming, as colDef here can be a group or a column,
	                // however most people won't appreciate the difference,
	                // so keeping it as colDef to avoid confusion.
	                colDef: abstractColDef,
	                column: column,
	                columnGroup: columnGroup,
	                context: gridOptionsWrapper.getContext(),
	                api: gridOptionsWrapper.getApi()
	            };
	            var headerClassFunc = classesOrFunc;
	            classToUse = headerClassFunc(params);
	        }
	        else {
	            classToUse = classesOrFunc;
	        }
	        if (typeof classToUse === 'string') {
	            utils_1.Utils.addCssClass(eHeaderCell, classToUse);
	        }
	        else if (Array.isArray(classToUse)) {
	            classToUse.forEach(function (cssClassItem) {
	                utils_1.Utils.addCssClass(eHeaderCell, cssClassItem);
	            });
	        }
	    };
	    return CssClassApplier;
	}());
	exports.CssClassApplier = CssClassApplier;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var context_1 = __webpack_require__(287);
	var column_1 = __webpack_require__(299);
	var utils_1 = __webpack_require__(288);
	var dragAndDropService_1 = __webpack_require__(373);
	var columnController_1 = __webpack_require__(297);
	var horizontalDragService_1 = __webpack_require__(378);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var cssClassApplier_1 = __webpack_require__(379);
	var setLeftFeature_1 = __webpack_require__(349);
	var gridApi_1 = __webpack_require__(294);
	var sortController_1 = __webpack_require__(344);
	var eventService_1 = __webpack_require__(285);
	var componentRecipes_1 = __webpack_require__(342);
	var agCheckbox_1 = __webpack_require__(381);
	var componentAnnotations_1 = __webpack_require__(330);
	var selectAllFeature_1 = __webpack_require__(382);
	var events_1 = __webpack_require__(291);
	var columnHoverService_1 = __webpack_require__(360);
	var beans_1 = __webpack_require__(350);
	var HeaderWrapperComp = (function (_super) {
	    __extends(HeaderWrapperComp, _super);
	    function HeaderWrapperComp(column, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;
	        _this.column = column;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderWrapperComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    HeaderWrapperComp.prototype.init = function () {
	        this.instantiate(this.context);
	        var displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
	        var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	        var enableMenu = this.menuFactory.isMenuEnabled(this.column) && !this.column.getColDef().suppressMenu;
	        this.appendHeaderComp(displayName, enableSorting, enableMenu);
	        this.setupWidth();
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.setupResize();
	        this.setupMenuClass();
	        this.setupSortableClass(enableSorting);
	        this.addColumnHoverListener();
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	        this.addFeature(this.context, new selectAllFeature_1.SelectAllFeature(this.cbSelectAll, this.column));
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getGui(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	        this.addAttributes();
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
	    };
	    HeaderWrapperComp.prototype.addColumnHoverListener = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.onColumnHover();
	    };
	    HeaderWrapperComp.prototype.onColumnHover = function () {
	        var isHovered = this.columnHoverService.isHovered(this.column);
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-column-hover', isHovered);
	    };
	    HeaderWrapperComp.prototype.setupSortableClass = function (enableSorting) {
	        if (enableSorting) {
	            var element = this.getGui();
	            utils_1.Utils.addCssClass(element, 'ag-header-cell-sortable');
	        }
	    };
	    HeaderWrapperComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.getGui(), 'ag-header-cell-filtered', filterPresent);
	    };
	    HeaderWrapperComp.prototype.appendHeaderComp = function (displayName, enableSorting, enableMenu) {
	        var _this = this;
	        var params = {
	            column: this.column,
	            displayName: displayName,
	            enableSorting: enableSorting,
	            enableMenu: enableMenu,
	            showColumnMenu: function (source) {
	                _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
	            },
	            progressSort: function (multiSort) {
	                _this.sortController.progressSort(_this.column, !!multiSort);
	            },
	            setSort: function (sort, multiSort) {
	                _this.sortController.setSortForColumn(_this.column, sort, !!multiSort);
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        var callback = this.afterHeaderCompCreated.bind(this, displayName);
	        this.componentRecipes.newHeaderComponent(params).then(callback);
	    };
	    HeaderWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerComp) {
	        this.appendChild(headerComp);
	        this.setupMove(headerComp.getGui(), displayName);
	        if (headerComp.destroy) {
	            this.addDestroyFunc(headerComp.destroy.bind(headerComp));
	        }
	    };
	    HeaderWrapperComp.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.column.isMoving()) {
	            utils_1.Utils.addCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.getGui(), 'ag-header-cell-moving');
	        }
	    };
	    HeaderWrapperComp.prototype.setupMove = function (eHeaderCellLabel, displayName) {
	        var _this = this;
	        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.column.getColDef().suppressMovable
	            || this.gridOptionsWrapper.isForPrint();
	        if (suppressMove) {
	            return;
	        }
	        if (eHeaderCellLabel) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderCellLabel,
	                dragItemCallback: function () { return _this.createDragItem(); },
	                dragItemName: displayName,
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    HeaderWrapperComp.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    HeaderWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        var colDef = this.column.getColDef();
	        // if no eResize in template, do nothing
	        if (!this.eResize) {
	            return;
	        }
	        if (!this.column.isResizable()) {
	            utils_1.Utils.removeFromParent(this.eResize);
	            return;
	        }
	        this.horizontalDragService.addDragHandling({
	            eDraggableElement: this.eResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	        if (weWantAutoSize) {
	            this.addDestroyableEventListener(this.eResize, 'dblclick', function () {
	                _this.columnController.autoSizeColumn(_this.column);
	            });
	        }
	    };
	    HeaderWrapperComp.prototype.onDragging = function (dragChange, finished) {
	        var dragChangeNormalised = this.normaliseDragChange(dragChange);
	        var newWidth = this.startWidth + dragChangeNormalised;
	        this.columnController.setColumnWidth(this.column, newWidth, finished);
	    };
	    HeaderWrapperComp.prototype.onDragStart = function () {
	        this.startWidth = this.column.getActualWidth();
	    };
	    HeaderWrapperComp.prototype.setupTooltip = function () {
	        var colDef = this.column.getColDef();
	        // add tooltip if exists
	        if (colDef.headerTooltip) {
	            this.getGui().title = colDef.headerTooltip;
	        }
	    };
	    HeaderWrapperComp.prototype.setupMovingCss = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
	        this.onColumnMovingChanged();
	    };
	    HeaderWrapperComp.prototype.addAttributes = function () {
	        this.getGui().setAttribute("col-id", this.column.getColId());
	    };
	    HeaderWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.setupMenuClass = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.onMenuVisible = function () {
	        this.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());
	    };
	    HeaderWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getGui().style.width = this.column.getActualWidth() + 'px';
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
	    HeaderWrapperComp.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderWrapperComp.TEMPLATE = '<div class="ag-header-cell" role="presentation" >' +
	        '<div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>' +
	        '<ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox>' +
	        // <inner component goes here>
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], HeaderWrapperComp.prototype, "horizontalDragService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], HeaderWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], HeaderWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], HeaderWrapperComp.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderWrapperComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService_1.ColumnHoverService)
	    ], HeaderWrapperComp.prototype, "columnHoverService", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], HeaderWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eResize'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderWrapperComp.prototype, "eResize", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('cbSelectAll'),
	        __metadata("design:type", agCheckbox_1.AgCheckbox)
	    ], HeaderWrapperComp.prototype, "cbSelectAll", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderWrapperComp.prototype, "init", null);
	    return HeaderWrapperComp;
	}(component_1.Component));
	exports.HeaderWrapperComp = HeaderWrapperComp;


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var componentAnnotations_1 = __webpack_require__(330);
	var utils_1 = __webpack_require__(288);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var AgCheckbox = (function (_super) {
	    __extends(AgCheckbox, _super);
	    function AgCheckbox() {
	        var _this = _super.call(this) || this;
	        _this.selected = false;
	        _this.readOnly = false;
	        _this.passive = false;
	        return _this;
	    }
	    AgCheckbox.prototype.postConstruct = function () {
	        this.setTemplate(AgCheckbox.TEMPLATE);
	        this.loadIcons();
	        this.updateIcons();
	    };
	    AgCheckbox.prototype.attributesSet = function () {
	        _super.prototype.attributesSet.call(this);
	        var label = this.getAttribute('label');
	        if (label) {
	            this.eLabel.innerText = label;
	        }
	    };
	    AgCheckbox.prototype.loadIcons = function () {
	        utils_1.Utils.removeAllChildren(this.eChecked);
	        utils_1.Utils.removeAllChildren(this.eUnchecked);
	        utils_1.Utils.removeAllChildren(this.eIndeterminate);
	        if (this.readOnly) {
	            this.eChecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxCheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxUncheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils_1.Utils.createIconNoSpan('checkboxIndeterminateReadOnly', this.gridOptionsWrapper, null));
	        }
	        else {
	            this.eChecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils_1.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, null));
	        }
	    };
	    AgCheckbox.prototype.onClick = function () {
	        if (!this.readOnly) {
	            this.toggle();
	        }
	    };
	    AgCheckbox.prototype.getNextValue = function () {
	        if (this.selected === undefined) {
	            return true;
	        }
	        else {
	            return !this.selected;
	        }
	    };
	    AgCheckbox.prototype.setPassive = function (passive) {
	        this.passive = passive;
	    };
	    AgCheckbox.prototype.setReadOnly = function (readOnly) {
	        this.readOnly = readOnly;
	        this.loadIcons();
	    };
	    AgCheckbox.prototype.isReadOnly = function () {
	        return this.readOnly;
	    };
	    AgCheckbox.prototype.isSelected = function () {
	        return this.selected;
	    };
	    AgCheckbox.prototype.toggle = function () {
	        var nextValue = this.getNextValue();
	        if (this.passive) {
	            var event_1 = {
	                type: AgCheckbox.EVENT_CHANGED,
	                selected: nextValue
	            };
	            this.dispatchEvent(event_1);
	        }
	        else {
	            this.setSelected(nextValue);
	        }
	    };
	    AgCheckbox.prototype.setSelected = function (selected) {
	        if (this.selected === selected) {
	            return;
	        }
	        if (selected === true) {
	            this.selected = true;
	        }
	        else if (selected === false) {
	            this.selected = false;
	        }
	        else {
	            this.selected = undefined;
	        }
	        this.updateIcons();
	        var event = {
	            type: AgCheckbox.EVENT_CHANGED,
	            selected: this.selected
	        };
	        this.dispatchEvent(event);
	    };
	    AgCheckbox.prototype.updateIcons = function () {
	        utils_1.Utils.setVisible(this.eChecked, this.selected === true);
	        utils_1.Utils.setVisible(this.eUnchecked, this.selected === false);
	        utils_1.Utils.setVisible(this.eIndeterminate, this.selected === undefined);
	    };
	    AgCheckbox.EVENT_CHANGED = 'change';
	    AgCheckbox.TEMPLATE = '<span class="ag-checkbox" role="presentation">' +
	        '  <span class="ag-checkbox-checked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-unchecked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-indeterminate" role="presentation"></span>' +
	        '  <span class="ag-checkbox-label" role="presentation"></span>' +
	        '</span>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AgCheckbox.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-checked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eChecked", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-unchecked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eUnchecked", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-indeterminate'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eIndeterminate", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-label'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eLabel", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "postConstruct", null);
	    __decorate([
	        componentAnnotations_1.Listener('click'),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "onClick", null);
	    return AgCheckbox;
	}(component_1.Component));
	exports.AgCheckbox = AgCheckbox;


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var agCheckbox_1 = __webpack_require__(381);
	var beanStub_1 = __webpack_require__(318);
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var gridApi_1 = __webpack_require__(294);
	var events_1 = __webpack_require__(291);
	var eventService_1 = __webpack_require__(285);
	var constants_1 = __webpack_require__(289);
	var selectionController_1 = __webpack_require__(309);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var SelectAllFeature = (function (_super) {
	    __extends(SelectAllFeature, _super);
	    function SelectAllFeature(cbSelectAll, column) {
	        var _this = _super.call(this) || this;
	        _this.cbSelectAllVisible = false;
	        _this.processingEventFromCheckbox = false;
	        _this.cbSelectAll = cbSelectAll;
	        _this.column = column;
	        var colDef = column.getColDef();
	        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
	        return _this;
	    }
	    SelectAllFeature.prototype.postConstruct = function () {
	        this.showOrHideSelectAll();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
	        this.addDestroyableEventListener(this.cbSelectAll, agCheckbox_1.AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
	    };
	    SelectAllFeature.prototype.showOrHideSelectAll = function () {
	        this.cbSelectAllVisible = this.isCheckboxSelection();
	        this.cbSelectAll.setVisible(this.cbSelectAllVisible);
	        if (this.cbSelectAllVisible) {
	            // in case user is trying this feature with the wrong model type
	            this.checkRightRowModelType();
	            // make sure checkbox is showing the right state
	            this.updateStateOfCheckbox();
	        }
	    };
	    SelectAllFeature.prototype.onModelChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.onSelectionChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.getNextCheckboxState = function (selectionCount) {
	        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
	            // if no rows, always have it unselected
	            return false;
	        }
	        else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
	            // if mix of selected and unselected, this is the tri-state
	            return null;
	        }
	        else if (selectionCount.selected > 0) {
	            // only selected
	            return true;
	        }
	        else {
	            // nothing selected
	            return false;
	        }
	    };
	    SelectAllFeature.prototype.updateStateOfCheckbox = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        this.processingEventFromCheckbox = true;
	        var selectionCount = this.getSelectionCount();
	        var allSelected = this.getNextCheckboxState(selectionCount);
	        this.cbSelectAll.setSelected(allSelected);
	        this.processingEventFromCheckbox = false;
	    };
	    SelectAllFeature.prototype.getSelectionCount = function () {
	        var selectedCount = 0;
	        var notSelectedCount = 0;
	        var callback = function (node) {
	            if (node.isSelected()) {
	                selectedCount++;
	            }
	            else {
	                notSelectedCount++;
	            }
	        };
	        if (this.filteredOnly) {
	            this.gridApi.forEachNodeAfterFilter(callback);
	        }
	        else {
	            this.gridApi.forEachNode(callback);
	        }
	        return {
	            notSelected: notSelectedCount,
	            selected: selectedCount
	        };
	    };
	    SelectAllFeature.prototype.checkRightRowModelType = function () {
	        var rowModelType = this.rowModel.getType();
	        var rowModelMatches = rowModelType === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        if (!rowModelMatches) {
	            console.log("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
	        }
	    };
	    SelectAllFeature.prototype.onCbSelectAll = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        var value = this.cbSelectAll.isSelected();
	        if (value) {
	            this.selectionController.selectAllRowNodes(this.filteredOnly);
	        }
	        else {
	            this.selectionController.deselectAllRowNodes(this.filteredOnly);
	        }
	    };
	    SelectAllFeature.prototype.isCheckboxSelection = function () {
	        var result = this.column.getColDef().headerCheckboxSelection;
	        if (typeof result === 'function') {
	            var func = result;
	            result = func({
	                column: this.column,
	                colDef: this.column.getColDef(),
	                columnApi: this.columnApi,
	                api: this.gridApi
	            });
	        }
	        if (result) {
	            if (this.gridOptionsWrapper.isRowModelEnterprise()) {
	                console.warn('headerCheckboxSelection is not supported for Enterprise Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelInfinite()) {
	                console.warn('headerCheckboxSelection is not supported for Infinite Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelViewport()) {
	                console.warn('headerCheckboxSelection is not supported for Viewport Row Model');
	                return false;
	            }
	            // otherwise the row model is compatible, so return true
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SelectAllFeature.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SelectAllFeature.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SelectAllFeature.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectAllFeature.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], SelectAllFeature.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectAllFeature.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectAllFeature.prototype, "postConstruct", null);
	    return SelectAllFeature;
	}(beanStub_1.BeanStub));
	exports.SelectAllFeature = SelectAllFeature;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(317);
	var column_1 = __webpack_require__(299);
	var utils_1 = __webpack_require__(288);
	var columnGroup_1 = __webpack_require__(298);
	var columnController_1 = __webpack_require__(297);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var horizontalDragService_1 = __webpack_require__(378);
	var context_1 = __webpack_require__(287);
	var cssClassApplier_1 = __webpack_require__(379);
	var dragAndDropService_1 = __webpack_require__(373);
	var setLeftFeature_1 = __webpack_require__(349);
	var gridApi_1 = __webpack_require__(294);
	var componentRecipes_1 = __webpack_require__(342);
	var beans_1 = __webpack_require__(350);
	var HeaderGroupWrapperComp = (function (_super) {
	    __extends(HeaderGroupWrapperComp, _super);
	    function HeaderGroupWrapperComp(columnGroup, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;
	        // the children can change, we keep destroy functions related to listening to the children here
	        _this.childColumnsDestroyFuncs = [];
	        _this.columnGroup = columnGroup;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderGroupWrapperComp.prototype.postConstruct = function () {
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.columnGroup.getColGroupDef(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);
	        var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');
	        this.appendHeaderGroupComp(displayName);
	        this.setupResize();
	        this.addClasses();
	        this.setupWidth();
	        this.addAttributes();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.columnGroup, this.getGui(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    HeaderGroupWrapperComp.prototype.addAttributes = function () {
	        this.getGui().setAttribute("col-id", this.columnGroup.getUniqueId());
	    };
	    HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {
	        var _this = this;
	        var params = {
	            displayName: displayName,
	            columnGroup: this.columnGroup,
	            setExpanded: function (expanded) {
	                _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded);
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        var callback = this.afterHeaderCompCreated.bind(this, displayName);
	        this.componentRecipes.newHeaderGroupComponent(params).then(callback);
	    };
	    HeaderGroupWrapperComp.prototype.afterHeaderCompCreated = function (displayName, headerGroupComp) {
	        this.appendChild(headerGroupComp);
	        this.setupMove(headerGroupComp.getGui(), displayName);
	        if (headerGroupComp.destroy) {
	            this.addDestroyFunc(headerGroupComp.destroy.bind(headerGroupComp));
	        }
	    };
	    HeaderGroupWrapperComp.prototype.addClasses = function () {
	        // having different classes below allows the style to not have a bottom border
	        // on the group header, if no group is specified
	        // columnGroup.getColGroupDef
	        if (this.columnGroup.isPadding()) {
	            this.addCssClass('ag-header-group-cell-no-group');
	        }
	        else {
	            this.addCssClass('ag-header-group-cell-with-group');
	        }
	    };
	    HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {
	        var _this = this;
	        if (!eHeaderGroup) {
	            return;
	        }
	        if (this.isSuppressMoving()) {
	            return;
	        }
	        if (eHeaderGroup) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderGroup,
	                dragItemName: displayName,
	                // we add in the original group leaf columns, so we move both visible and non-visible items
	                dragItemCallback: this.getDragItemForGroup.bind(this),
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
	    // and in the order they are currently in the screen.
	    HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {
	        var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
	        // capture visible state, used when reentering grid to dictate which columns should be visible
	        var visibleState = {};
	        allColumnsOriginalOrder.forEach(function (column) { return visibleState[column.getId()] = column.isVisible(); });
	        var allColumnsCurrentOrder = [];
	        this.columnController.getAllDisplayedColumns().forEach(function (column) {
	            if (allColumnsOriginalOrder.indexOf(column) >= 0) {
	                allColumnsCurrentOrder.push(column);
	                utils_1.Utils.removeFromArray(allColumnsOriginalOrder, column);
	            }
	        });
	        // we are left with non-visible columns, stick these in at the end
	        allColumnsOriginalOrder.forEach(function (column) { return allColumnsCurrentOrder.push(column); });
	        // create and return dragItem
	        return {
	            columns: allColumnsCurrentOrder,
	            visibleState: visibleState
	        };
	    };
	    HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {
	        // if any child is fixed, then don't allow moving
	        var childSuppressesMoving = false;
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            if (column.getColDef().suppressMovable) {
	                childSuppressesMoving = true;
	            }
	        });
	        var result = childSuppressesMoving
	            || this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.gridOptionsWrapper.isForPrint();
	        return result;
	    };
	    HeaderGroupWrapperComp.prototype.setupWidth = function () {
	        // we need to listen to changes in child columns, as they impact our width
	        this.addListenersToChildrenColumns();
	        // the children belonging to this group can change, so we need to add and remove listeners as they change
	        this.addDestroyableEventListener(this.columnGroup, columnGroup_1.ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
	        this.onWidthChanged();
	        // the child listeners are not tied to this components lifecycle, as children can get added and removed
	        // to the group - hence they are on a different lifecycle. so we must make sure the existing children
	        // listeners are removed when we finally get destroyed
	        this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));
	    };
	    HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {
	        this.addListenersToChildrenColumns();
	        this.onWidthChanged();
	    };
	    HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {
	        var _this = this;
	        // first destroy any old listeners
	        this.destroyListenersOnChildrenColumns();
	        // now add new listeners to the new set of children
	        var widthChangedListener = this.onWidthChanged.bind(this);
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            column.addEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	            column.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            _this.childColumnsDestroyFuncs.push(function () {
	                column.removeEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	                column.removeEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            });
	        });
	    };
	    HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function () {
	        this.childColumnsDestroyFuncs.forEach(function (func) { return func(); });
	        this.childColumnsDestroyFuncs = [];
	    };
	    HeaderGroupWrapperComp.prototype.onWidthChanged = function () {
	        this.getGui().style.width = this.columnGroup.getActualWidth() + 'px';
	    };
	    HeaderGroupWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        this.eHeaderCellResize = this.getRefElement('agResize');
	        if (!this.columnGroup.isResizable()) {
	            utils_1.Utils.removeFromParent(this.eHeaderCellResize);
	            return;
	        }
	        this.dragService.addDragHandling({
	            eDraggableElement: this.eHeaderCellResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
	            this.eHeaderCellResize.addEventListener('dblclick', function (event) {
	                // get list of all the column keys we are responsible for
	                var keys = [];
	                _this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	                    // not all cols in the group may be participating with auto-resize
	                    if (!column.getColDef().suppressAutoSize) {
	                        keys.push(column.getColId());
	                    }
	                });
	                if (keys.length > 0) {
	                    _this.columnController.autoSizeColumns(keys);
	                }
	            });
	        }
	    };
	    HeaderGroupWrapperComp.prototype.onDragStart = function () {
	        var _this = this;
	        this.groupWidthStart = this.columnGroup.getActualWidth();
	        this.childrenWidthStarts = [];
	        this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	            _this.childrenWidthStarts.push(column.getActualWidth());
	        });
	    };
	    HeaderGroupWrapperComp.prototype.onDragging = function (dragChange, finished) {
	        var _this = this;
	        // this will be the width we have to distribute to the resizable columns
	        var widthForResizableCols;
	        // this is all the displayed cols in the group less those that we cannot resize
	        var resizableCols;
	        // a lot of variables defined for the first set of maths, but putting
	        // braces in, we localise the variables to this bit of the method
	        {
	            var dragChangeNormalised = this.normaliseDragChange(dragChange);
	            var totalGroupWidth = this.groupWidthStart + dragChangeNormalised;
	            var displayedColumns = this.columnGroup.getDisplayedLeafColumns();
	            resizableCols = utils_1.Utils.filter(displayedColumns, function (col) { return col.isResizable(); });
	            var nonResizableCols = utils_1.Utils.filter(displayedColumns, function (col) { return !col.isResizable(); });
	            var nonResizableColsWidth_1 = 0;
	            nonResizableCols.forEach(function (col) { return nonResizableColsWidth_1 += col.getActualWidth(); });
	            widthForResizableCols = totalGroupWidth - nonResizableColsWidth_1;
	            var minWidth_1 = 0;
	            resizableCols.forEach(function (col) { return minWidth_1 += col.getMinWidth(); });
	            if (widthForResizableCols < minWidth_1) {
	                widthForResizableCols = minWidth_1;
	            }
	        }
	        // distribute the new width to the child headers
	        var changeRatio = widthForResizableCols / this.groupWidthStart;
	        // keep track of pixels used, and last column gets the remaining,
	        // to cater for rounding errors, and min width adjustments
	        var pixelsToDistribute = widthForResizableCols;
	        resizableCols.forEach(function (column, index) {
	            var notLastCol = index !== (resizableCols.length - 1);
	            var newChildSize;
	            if (notLastCol) {
	                // if not the last col, calculate the column width as normal
	                var startChildSize = _this.childrenWidthStarts[index];
	                newChildSize = startChildSize * changeRatio;
	                if (newChildSize < column.getMinWidth()) {
	                    newChildSize = column.getMinWidth();
	                }
	                pixelsToDistribute -= newChildSize;
	            }
	            else {
	                // if last col, give it the remaining pixels
	                newChildSize = pixelsToDistribute;
	            }
	            _this.columnController.setColumnWidth(column, newChildSize, finished);
	        });
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderCell - should refactor out?
	    HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderGroupWrapperComp.TEMPLATE = '<div class="ag-header-group-cell">' +
	        '<div ref="agResize" class="ag-header-cell-resize"></div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderGroupWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderGroupWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], HeaderGroupWrapperComp.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderGroupWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderGroupWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], HeaderGroupWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], HeaderGroupWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], HeaderGroupWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderGroupWrapperComp.prototype, "postConstruct", null);
	    return HeaderGroupWrapperComp;
	}(component_1.Component));
	exports.HeaderGroupWrapperComp = HeaderGroupWrapperComp;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var dragAndDropService_1 = __webpack_require__(373);
	var context_1 = __webpack_require__(287);
	var moveColumnController_1 = __webpack_require__(385);
	var column_1 = __webpack_require__(299);
	var gridPanel_1 = __webpack_require__(306);
	var bodyDropPivotTarget_1 = __webpack_require__(386);
	var columnController_1 = __webpack_require__(297);
	var BodyDropTarget = (function () {
	    function BodyDropTarget(pinned, eContainer) {
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	    }
	    BodyDropTarget.prototype.getSecondaryContainers = function () {
	        return this.eSecondaryContainers;
	    };
	    BodyDropTarget.prototype.getContainer = function () {
	        return this.eContainer;
	    };
	    BodyDropTarget.prototype.init = function () {
	        this.moveColumnController = new moveColumnController_1.MoveColumnController(this.pinned, this.eContainer);
	        this.context.wireBean(this.moveColumnController);
	        this.bodyDropPivotTarget = new bodyDropPivotTarget_1.BodyDropPivotTarget(this.pinned);
	        this.context.wireBean(this.bodyDropPivotTarget);
	        switch (this.pinned) {
	            case column_1.Column.PINNED_LEFT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
	                break;
	            case column_1.Column.PINNED_RIGHT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetPinnedRightContainers();
	                break;
	            default:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
	                break;
	        }
	        this.dragAndDropService.addDropTarget(this);
	    };
	    BodyDropTarget.prototype.getIconName = function () {
	        return this.currentDropListener.getIconName();
	    };
	    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
	    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
	    // dropped into the grid's body.
	    BodyDropTarget.prototype.isUseBodyDropPivotTarget = function (draggingEvent) {
	        // if not in pivot mode, then we never use the pivot drop target
	        if (!this.columnController.isPivotMode()) {
	            return false;
	        }
	        // otherwise we use the drop target if the column came from the toolPanel (ie not reordering)
	        return draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel;
	    };
	    BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {
	        // we pick the drop listener depending on whether we are in pivot mode are not. if we are
	        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
	        // we change visibility state and position.
	        // if (this.columnController.isPivotMode()) {
	        var useBodyDropPivotTarget = this.isUseBodyDropPivotTarget(draggingEvent);
	        if (useBodyDropPivotTarget) {
	            this.currentDropListener = this.bodyDropPivotTarget;
	        }
	        else {
	            this.currentDropListener = this.moveColumnController;
	        }
	        this.currentDropListener.onDragEnter(draggingEvent);
	    };
	    BodyDropTarget.prototype.onDragLeave = function (params) {
	        this.currentDropListener.onDragLeave(params);
	    };
	    BodyDropTarget.prototype.onDragging = function (params) {
	        this.currentDropListener.onDragging(params);
	    };
	    BodyDropTarget.prototype.onDragStop = function (params) {
	        this.currentDropListener.onDragStop(params);
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BodyDropTarget.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], BodyDropTarget.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], BodyDropTarget.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], BodyDropTarget.prototype, "columnController", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], BodyDropTarget.prototype, "init", null);
	    return BodyDropTarget;
	}());
	exports.BodyDropTarget = BodyDropTarget;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var logger_1 = __webpack_require__(286);
	var columnController_1 = __webpack_require__(297);
	var column_1 = __webpack_require__(299);
	var utils_1 = __webpack_require__(288);
	var dragAndDropService_1 = __webpack_require__(373);
	var gridPanel_1 = __webpack_require__(306);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var MoveColumnController = (function () {
	    function MoveColumnController(pinned, eContainer) {
	        this.needToMoveLeft = false;
	        this.needToMoveRight = false;
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	        this.centerContainer = !utils_1.Utils.exists(pinned);
	    }
	    MoveColumnController.prototype.init = function () {
	        this.logger = this.loggerFactory.create('MoveColumnController');
	    };
	    MoveColumnController.prototype.getIconName = function () {
	        return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
	    };
	    MoveColumnController.prototype.onDragEnter = function (draggingEvent) {
	        // we do dummy drag, so make sure column appears in the right location when first placed
	        var columns = draggingEvent.dragItem.columns;
	        var dragCameFromToolPanel = draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel;
	        if (dragCameFromToolPanel) {
	            // the if statement doesn't work if drag leaves grid, then enters again
	            this.columnController.setColumnsVisible(columns, true);
	        }
	        else {
	            // restore previous state of visible columns upon re-entering
	            var visibleState_1 = draggingEvent.dragItem.visibleState;
	            var visibleColumns = columns.filter(function (column) { return visibleState_1[column.getId()]; });
	            this.columnController.setColumnsVisible(visibleColumns, true);
	        }
	        this.columnController.setColumnsPinned(columns, this.pinned);
	        this.onDragging(draggingEvent, true);
	    };
	    MoveColumnController.prototype.onDragLeave = function (draggingEvent) {
	        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
	        if (hideColumnOnExit) {
	            var dragItem = draggingEvent.dragSource.dragItemCallback();
	            var columns = dragItem.columns;
	            this.columnController.setColumnsVisible(columns, false);
	        }
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.onDragStop = function () {
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.normaliseX = function (x) {
	        // flip the coordinate if doing RTL
	        var flipHorizontallyForRtl = this.gridOptionsWrapper.isEnableRtl();
	        if (flipHorizontallyForRtl) {
	            var clientWidth = this.eContainer.clientWidth;
	            x = clientWidth - x;
	        }
	        // adjust for scroll only if centre container (the pinned containers dont scroll)
	        var adjustForScroll = this.centerContainer;
	        if (adjustForScroll) {
	            x += this.gridPanel.getBodyViewportScrollLeft();
	        }
	        return x;
	    };
	    MoveColumnController.prototype.checkCenterForScrolling = function (xAdjustedForScroll) {
	        if (this.centerContainer) {
	            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
	            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
	            var firstVisiblePixel = this.gridPanel.getBodyViewportScrollLeft();
	            var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            else {
	                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            if (this.needToMoveLeft || this.needToMoveRight) {
	                this.ensureIntervalStarted();
	            }
	            else {
	                this.ensureIntervalCleared();
	            }
	        }
	    };
	    MoveColumnController.prototype.onDragging = function (draggingEvent, fromEnter) {
	        if (fromEnter === void 0) { fromEnter = false; }
	        this.lastDraggingEvent = draggingEvent;
	        // if moving up or down (ie not left or right) then do nothing
	        if (utils_1.Utils.missing(draggingEvent.hDirection)) {
	            return;
	        }
	        var xNormalised = this.normaliseX(draggingEvent.x);
	        // if the user is dragging into the panel, ie coming from the side panel into the main grid,
	        // we don't want to scroll the grid this time, it would appear like the table is jumping
	        // each time a column is dragged in.
	        if (!fromEnter) {
	            this.checkCenterForScrolling(xNormalised);
	        }
	        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
	        var dragSourceType = draggingEvent.dragSource.type;
	        var columnsToMove = draggingEvent.dragSource.dragItemCallback().columns;
	        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, xNormalised, fromEnter);
	    };
	    MoveColumnController.prototype.normaliseDirection = function (hDirection) {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            switch (hDirection) {
	                case dragAndDropService_1.HDirection.Left: return dragAndDropService_1.HDirection.Right;
	                case dragAndDropService_1.HDirection.Right: return dragAndDropService_1.HDirection.Left;
	                default: console.error("ag-Grid: Unknown direction " + hDirection);
	            }
	        }
	        else {
	            return hDirection;
	        }
	    };
	    // returns the index of the first column in the list ONLY if the cols are all beside
	    // each other. if the cols are not beside each other, then returns null
	    MoveColumnController.prototype.calculateOldIndex = function (movingCols) {
	        var gridCols = this.columnController.getAllGridColumns();
	        var indexes = [];
	        movingCols.forEach(function (col) { return indexes.push(gridCols.indexOf(col)); });
	        utils_1.Utils.sortNumberArray(indexes);
	        var firstIndex = indexes[0];
	        var lastIndex = indexes[indexes.length - 1];
	        var spread = lastIndex - firstIndex;
	        var gapsExist = spread !== indexes.length - 1;
	        return gapsExist ? null : firstIndex;
	    };
	    MoveColumnController.prototype.attemptMoveColumns = function (dragSourceType, allMovingColumns, hDirection, xAdjusted, fromEnter) {
	        var draggingLeft = hDirection === dragAndDropService_1.HDirection.Left;
	        var draggingRight = hDirection === dragAndDropService_1.HDirection.Right;
	        var validMoves = this.calculateValidMoves(allMovingColumns, draggingRight, xAdjusted);
	        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
	        // (ie left or right) to the mouse direction. however
	        var oldIndex = this.calculateOldIndex(allMovingColumns);
	        // fromEnter = false;
	        for (var i = 0; i < validMoves.length; i++) {
	            var newIndex = validMoves[i];
	            // the two check below stop an error when the user grabs a group my a middle column, then
	            // it is possible the mouse pointer is to the right of a column while been dragged left.
	            // so we need to make sure that the mouse pointer is actually left of the left most column
	            // if moving left, and right of the right most column if moving right
	            // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
	            // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
	            // place the column to the RHS even if the mouse is moving left and the column is already on
	            // the LHS. otherwise we stick to the rule described above.
	            var constrainDirection = oldIndex !== null && !fromEnter;
	            // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag
	            if (dragSourceType == dragAndDropService_1.DragSourceType.HeaderCell) {
	                constrainDirection = oldIndex !== null;
	            }
	            if (constrainDirection) {
	                // only allow left drag if this column is moving left
	                if (draggingLeft && newIndex >= oldIndex) {
	                    continue;
	                }
	                // only allow right drag if this column is moving right
	                if (draggingRight && newIndex <= oldIndex) {
	                    continue;
	                }
	            }
	            if (!this.columnController.doesMovePassRules(allMovingColumns, newIndex)) {
	                continue;
	            }
	            this.columnController.moveColumns(allMovingColumns, newIndex);
	            // important to return here, so once we do the first valid move, we don't try do any more
	            return;
	        }
	    };
	    MoveColumnController.prototype.calculateValidMoves = function (movingCols, draggingRight, x) {
	        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
	        var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
	        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
	        // so the result we return has to be and index location for this list
	        var allGridCols = this.columnController.getAllGridColumns();
	        var colIsMovingFunc = function (col) { return movingCols.indexOf(col) >= 0; };
	        var colIsNotMovingFunc = function (col) { return movingCols.indexOf(col) < 0; };
	        var movingDisplayedCols = allDisplayedCols.filter(colIsMovingFunc);
	        var otherDisplayedCols = allDisplayedCols.filter(colIsNotMovingFunc);
	        var otherGridCols = allGridCols.filter(colIsNotMovingFunc);
	        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
	        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
	        // col between b and c (so that it is under the mouse position).
	        var displayIndex = 0;
	        var availableWidth = x;
	        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
	        // include the width of the moving columns
	        if (draggingRight) {
	            var widthOfMovingDisplayedCols_1 = 0;
	            movingDisplayedCols.forEach(function (col) { return widthOfMovingDisplayedCols_1 += col.getActualWidth(); });
	            availableWidth -= widthOfMovingDisplayedCols_1;
	        }
	        // now count how many of the displayed columns will fit to the left
	        for (var i = 0; i < otherDisplayedCols.length; i++) {
	            var col = otherDisplayedCols[i];
	            availableWidth -= col.getActualWidth();
	            if (availableWidth < 0) {
	                break;
	            }
	            displayIndex++;
	        }
	        // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works
	        if (draggingRight) {
	            displayIndex++;
	        }
	        // the display index is with respect to all the showing columns, however when we move, it's with
	        // respect to all grid columns, so we need to translate from display index to grid index
	        var gridColIndex;
	        if (displayIndex > 0) {
	            var leftColumn = otherDisplayedCols[displayIndex - 1];
	            gridColIndex = otherGridCols.indexOf(leftColumn) + 1;
	        }
	        else {
	            gridColIndex = 0;
	        }
	        var validMoves = [gridColIndex];
	        // add in all adjacent empty columns as other valid moves. this allows us to try putting the new
	        // column in any place of a hidden column, to try different combinations so that we don't break
	        // married children. in other words, maybe the new index breaks a group, but only because some
	        // columns are hidden, maybe we can reshuffle the hidden columns to find a place that works.
	        var nextCol = allGridCols[gridColIndex];
	        while (utils_1.Utils.exists(nextCol) && this.isColumnHidden(allDisplayedCols, nextCol)) {
	            gridColIndex++;
	            validMoves.push(gridColIndex);
	            nextCol = allGridCols[gridColIndex];
	        }
	        return validMoves;
	    };
	    // isHidden takes into account visible=false and group=closed, ie it is not displayed
	    MoveColumnController.prototype.isColumnHidden = function (displayedColumns, col) {
	        return displayedColumns.indexOf(col) < 0;
	    };
	    MoveColumnController.prototype.ensureIntervalStarted = function () {
	        if (!this.movingIntervalId) {
	            this.intervalCount = 0;
	            this.failedMoveAttempts = 0;
	            this.movingIntervalId = setInterval(this.moveInterval.bind(this), 100);
	            if (this.needToMoveLeft) {
	                this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_LEFT, true);
	            }
	            else {
	                this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_RIGHT, true);
	            }
	        }
	    };
	    MoveColumnController.prototype.ensureIntervalCleared = function () {
	        if (this.moveInterval) {
	            clearInterval(this.movingIntervalId);
	            this.movingIntervalId = null;
	            this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);
	        }
	    };
	    MoveColumnController.prototype.moveInterval = function () {
	        var pixelsToMove;
	        this.intervalCount++;
	        pixelsToMove = 10 + (this.intervalCount * 5);
	        if (pixelsToMove > 100) {
	            pixelsToMove = 100;
	        }
	        var pixelsMoved;
	        if (this.needToMoveLeft) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
	        }
	        else if (this.needToMoveRight) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
	        }
	        if (pixelsMoved !== 0) {
	            this.onDragging(this.lastDraggingEvent);
	            this.failedMoveAttempts = 0;
	        }
	        else {
	            this.failedMoveAttempts++;
	            this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_PINNED);
	            if (this.failedMoveAttempts > 7) {
	                var columns = this.lastDraggingEvent.dragItem.columns;
	                var pinType = this.needToMoveLeft ? column_1.Column.PINNED_LEFT : column_1.Column.PINNED_RIGHT;
	                this.columnController.setColumnsPinned(columns, pinType);
	                this.dragAndDropService.nudge();
	            }
	        }
	    };
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], MoveColumnController.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], MoveColumnController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], MoveColumnController.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], MoveColumnController.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], MoveColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MoveColumnController.prototype, "init", null);
	    return MoveColumnController;
	}());
	exports.MoveColumnController = MoveColumnController;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var dragAndDropService_1 = __webpack_require__(373);
	var columnController_1 = __webpack_require__(297);
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var BodyDropPivotTarget = (function () {
	    function BodyDropPivotTarget(pinned) {
	        this.columnsToAggregate = [];
	        this.columnsToGroup = [];
	        this.columnsToPivot = [];
	        this.pinned = pinned;
	    }
	    /** Callback for when drag enters */
	    BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {
	        var _this = this;
	        this.clearColumnsList();
	        // in pivot mode, we don't accept any drops if functions are read only
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return;
	        }
	        var dragColumns = draggingEvent.dragItem.columns;
	        dragColumns.forEach(function (column) {
	            // we don't allow adding secondary columns
	            if (!column.isPrimary()) {
	                return;
	            }
	            if (column.isAnyFunctionActive()) {
	                return;
	            }
	            if (column.isAllowValue()) {
	                _this.columnsToAggregate.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToGroup.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToPivot.push(column);
	            }
	        });
	    };
	    BodyDropPivotTarget.prototype.getIconName = function () {
	        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
	        if (totalColumns > 0) {
	            return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
	        }
	        else {
	            return null;
	        }
	    };
	    /** Callback for when drag leaves */
	    BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {
	        // if we are taking columns out of the center, then we remove them from the report
	        this.clearColumnsList();
	    };
	    BodyDropPivotTarget.prototype.clearColumnsList = function () {
	        this.columnsToAggregate.length = 0;
	        this.columnsToGroup.length = 0;
	        this.columnsToPivot.length = 0;
	    };
	    /** Callback for when dragging */
	    BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {
	    };
	    /** Callback for when drag stops */
	    BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {
	        if (this.columnsToAggregate.length > 0) {
	            this.columnController.addValueColumns(this.columnsToAggregate);
	        }
	        if (this.columnsToGroup.length > 0) {
	            this.columnController.addRowGroupColumns(this.columnsToGroup);
	        }
	        if (this.columnsToPivot.length > 0) {
	            this.columnController.addPivotColumns(this.columnsToPivot);
	        }
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], BodyDropPivotTarget.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);
	    return BodyDropPivotTarget;
	}());
	exports.BodyDropPivotTarget = BodyDropPivotTarget;


/***/ }),
/* 387 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns unique instance id's for columns.
	// eg, the following calls (in this order) will result in:
	//
	// getInstanceIdForKey('country') => 0
	// getInstanceIdForKey('country') => 1
	// getInstanceIdForKey('country') => 2
	// getInstanceIdForKey('country') => 3
	// getInstanceIdForKey('age') => 0
	// getInstanceIdForKey('age') => 1
	// getInstanceIdForKey('country') => 4
	var GroupInstanceIdCreator = (function () {
	    function GroupInstanceIdCreator() {
	        // this map contains keys to numbers, so we remember what the last call was
	        this.existingIds = {};
	    }
	    GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
	        var lastResult = this.existingIds[key];
	        var result;
	        if (typeof lastResult !== 'number') {
	            // first time this key
	            result = 0;
	        }
	        else {
	            result = lastResult + 1;
	        }
	        this.existingIds[key] = result;
	        return result;
	    };
	    return GroupInstanceIdCreator;
	}());
	exports.GroupInstanceIdCreator = GroupInstanceIdCreator;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var column_1 = __webpack_require__(299);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var utils_1 = __webpack_require__(288);
	var columnController_1 = __webpack_require__(297);
	var AutoGroupColService = (function () {
	    function AutoGroupColService() {
	    }
	    AutoGroupColService_1 = AutoGroupColService;
	    AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {
	        var _this = this;
	        var groupAutoColumns = [];
	        var doingTreeData = this.gridOptionsWrapper.isTreeData();
	        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
	        if (doingTreeData && doingMultiAutoColumn) {
	            console.log('ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');
	            doingMultiAutoColumn = false;
	        }
	        // if doing groupMultiAutoColumn, then we call the method multiple times, once
	        // for each column we are grouping by
	        if (doingMultiAutoColumn) {
	            rowGroupColumns.forEach(function (rowGroupCol, index) {
	                groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
	            });
	        }
	        else {
	            groupAutoColumns.push(this.createOneAutoGroupColumn(null));
	        }
	        return groupAutoColumns;
	    };
	    // rowGroupCol and index are missing if groupMultiAutoColumn=false
	    AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {
	        // if one provided by user, use it, otherwise create one
	        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol, index);
	        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
	        // if doing multi, set the field
	        var colId;
	        if (rowGroupCol) {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
	        }
	        else {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
	        }
	        utils_1._.mergeDeep(defaultAutoColDef, userAutoColDef);
	        defaultAutoColDef.colId = colId;
	        var noUserFilterPreferences = userAutoColDef == null || userAutoColDef.suppressFilter == null;
	        if (noUserFilterPreferences && !this.gridOptionsWrapper.isTreeData()) {
	            var produceLeafNodeValues = defaultAutoColDef.field != null || defaultAutoColDef.valueGetter != null;
	            defaultAutoColDef.suppressFilter = !produceLeafNodeValues;
	        }
	        // if showing many cols, we don't want to show more than one with a checkbox for selection
	        if (index > 0) {
	            defaultAutoColDef.headerCheckboxSelection = false;
	        }
	        var newCol = new column_1.Column(defaultAutoColDef, colId, true);
	        this.context.wireBean(newCol);
	        return newCol;
	    };
	    AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol, index) {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var defaultAutoColDef = {
	            headerName: localeTextFunc('group', 'Group'),
	            cellRenderer: 'group'
	        };
	        // we never allow moving the group column
	        defaultAutoColDef.suppressMovable = true;
	        if (rowGroupCol) {
	            var rowGroupColDef = rowGroupCol.getColDef();
	            utils_1._.assign(defaultAutoColDef, {
	                // cellRendererParams.groupKey: colDefToCopy.field;
	                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),
	                headerValueGetter: rowGroupColDef.headerValueGetter
	            });
	            if (rowGroupColDef.cellRenderer) {
	                utils_1._.assign(defaultAutoColDef, {
	                    cellRendererParams: {
	                        innerRenderer: rowGroupColDef.cellRenderer,
	                        innerRendererParams: rowGroupColDef.cellRendererParams
	                    }
	                });
	            }
	            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
	        }
	        else {
	            defaultAutoColDef.showRowGroup = true;
	        }
	        return defaultAutoColDef;
	    };
	    AutoGroupColService.GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';
	    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID;
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AutoGroupColService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], AutoGroupColService.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], AutoGroupColService.prototype, "columnController", void 0);
	    AutoGroupColService = AutoGroupColService_1 = __decorate([
	        context_1.Bean('autoGroupColService')
	    ], AutoGroupColService);
	    return AutoGroupColService;
	    var AutoGroupColService_1;
	}());
	exports.AutoGroupColService = AutoGroupColService;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var Downloader = (function () {
	    function Downloader() {
	    }
	    Downloader.prototype.download = function (fileName, content, mimeType) {
	        // for Excel, we need \ufeff at the start
	        // http://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob
	        var blobObject = new Blob(["\ufeff", content], {
	            type: mimeType
	        });
	        // Internet Explorer
	        if (window.navigator.msSaveOrOpenBlob) {
	            window.navigator.msSaveOrOpenBlob(blobObject, fileName);
	        }
	        else {
	            // Chrome
	            var downloadLink = document.createElement("a");
	            downloadLink.href = window.URL.createObjectURL(blobObject);
	            downloadLink.download = fileName;
	            document.body.appendChild(downloadLink);
	            downloadLink.click();
	            document.body.removeChild(downloadLink);
	        }
	    };
	    Downloader = __decorate([
	        context_1.Bean('downloader')
	    ], Downloader);
	    return Downloader;
	}());
	exports.Downloader = Downloader;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var constants_1 = __webpack_require__(289);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var ImmutableService = (function () {
	    function ImmutableService() {
	    }
	    ImmutableService.prototype.postConstruct = function () {
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            this.inMemoryRowModel = this.rowModel;
	        }
	    };
	    // converts the setRowData() command to a transaction
	    ImmutableService.prototype.createTransactionForRowData = function (data) {
	        if (utils_1._.missing(this.inMemoryRowModel)) {
	            console.error('ag-Grid: ImmutableService only works with InMemoryRowModel');
	            return;
	        }
	        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (utils_1._.missing(getRowNodeIdFunc)) {
	            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');
	            return;
	        }
	        // convert the data into a transaction object by working out adds, removes and updates
	        var transaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        var existingNodesMap = this.inMemoryRowModel.getCopyOfNodesMap();
	        var orderMap = {};
	        if (utils_1._.exists(data)) {
	            // split all the new data in the following:
	            // if new, push to 'add'
	            // if update, push to 'update'
	            // if not changed, do not include in the transaction
	            data.forEach(function (dataItem, index) {
	                var id = getRowNodeIdFunc(dataItem);
	                var existingNode = existingNodesMap[id];
	                orderMap[id] = index;
	                if (existingNode) {
	                    var dataHasChanged = existingNode.data !== dataItem;
	                    if (dataHasChanged) {
	                        transaction.update.push(dataItem);
	                    }
	                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
	                    // remove from list, so we know the item is not to be removed
	                    existingNodesMap[id] = undefined;
	                }
	                else {
	                    transaction.add.push(dataItem);
	                }
	            });
	        }
	        // at this point, all rows that are left, should be removed
	        utils_1._.iterateObject(existingNodesMap, function (id, rowNode) {
	            if (rowNode) {
	                transaction.remove.push(rowNode.data);
	            }
	        });
	        return [transaction, orderMap];
	    };
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ImmutableService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ImmutableService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ImmutableService.prototype, "postConstruct", null);
	    ImmutableService = __decorate([
	        context_1.Bean('immutableService')
	    ], ImmutableService);
	    return ImmutableService;
	}());
	exports.ImmutableService = ImmutableService;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns a unique id to use for the column. it checks the existing columns, and if the requested
	// id is already taken, it will start appending numbers until it gets a unique id.
	// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
	// if no field or id provided in the col, it will try the ids of natural numbers
	var utils_1 = __webpack_require__(288);
	var ColumnKeyCreator = (function () {
	    function ColumnKeyCreator() {
	        this.existingKeys = [];
	    }
	    ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
	        // in case user passed in number for colId, convert to string
	        colId = utils_1.Utils.toStringOrNull(colId);
	        var count = 0;
	        while (true) {
	            var idToTry = void 0;
	            if (colId) {
	                idToTry = colId;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else if (colField) {
	                idToTry = colField;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else {
	                idToTry = '' + count;
	            }
	            if (this.existingKeys.indexOf(idToTry) < 0) {
	                this.existingKeys.push(idToTry);
	                return idToTry;
	            }
	            count++;
	        }
	    };
	    return ColumnKeyCreator;
	}());
	exports.ColumnKeyCreator = ColumnKeyCreator;


/***/ }),
/* 392 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DefaultColumnTypes = {
	    "numericColumn": {
	        "headerClass": "ag-numeric-header",
	        "cellClass": "ag-numeric-cell"
	    }
	};


/***/ }),
/* 393 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ColDefUtil = (function () {
	    function ColDefUtil() {
	    }
	    ColDefUtil.STRING_PROPERTIES = [
	        'headerName',
	        'columnGroupShow',
	        'headerClass',
	        'toolPanelClass',
	        'headerValueGetter',
	        'pivotKeys',
	        'groupId',
	        'colId',
	        'sort',
	        'field',
	        'type',
	        'tooltipField',
	        'headerTooltip',
	        'cellClass',
	        'showRowGroup',
	        'template',
	        'templateUrl',
	        'filter',
	        'aggFunc',
	        'cellEditor'
	    ];
	    ColDefUtil.OBJECT_PROPERTIES = [
	        'headerGroupComponent',
	        'headerGroupComponentFramework',
	        'headerGroupComponentParams',
	        'cellStyle',
	        'cellRendererParams',
	        'cellEditorFramework',
	        'cellEditorParams',
	        'pinnedRowCellRendererFramework',
	        'pinnedRowCellRendererParams',
	        'filterFramework',
	        'filterParams',
	        'pivotValueColumn',
	        'headerComponent',
	        'headerComponentFramework',
	        'headerComponentParams',
	        'floatingFilterComponent',
	        'floatingFilterComponentParams',
	        'floatingFilterComponentFramework',
	        'refData'
	    ];
	    ColDefUtil.ARRAY_PROPERTIES = [
	        'children',
	        'sortingOrder',
	        'allowedAggFuncs',
	        'menuTabs',
	        'pivotTotalColumnIds',
	        'cellClassRules',
	        'icons'
	    ];
	    ColDefUtil.NUMBER_PROPERTIES = [
	        'sortedAt',
	        'width',
	        'minWidth',
	        'maxWidth',
	        'rowGroupIndex',
	        'pivotIndex'
	    ];
	    ColDefUtil.BOOLEAN_PROPERTIES = [
	        'suppressToolPanel',
	        'openByDefault',
	        'marryChildren',
	        'hide',
	        'pinned',
	        'rowGroup',
	        'pivot',
	        'checkboxSelection',
	        'headerCheckboxSelection',
	        'headerCheckboxSelectionFilteredOnly',
	        'suppressMenu',
	        'suppressSorting',
	        'suppressMovable',
	        'suppressFilter',
	        'unSortIcon',
	        'suppressSizeToFit',
	        'suppressResize',
	        'suppressAutoSize',
	        'enableRowGroup',
	        'enablePivot',
	        'enableValue',
	        'editable',
	        'suppressPaste',
	        'suppressNavigable',
	        'volatile',
	        'enableCellChangeFlash'
	    ];
	    ColDefUtil.FUNCTION_PROPERTIES = [
	        'valueGetter',
	        'valueSetter',
	        'keyCreator',
	        'headerCellRenderer',
	        'headerCellTemplate',
	        'cellRendererFramework',
	        'pinnedRowCellRenderer',
	        'valueFormatter',
	        'pinnedRowValueFormatter',
	        'valueParser',
	        'comparator',
	        'equals',
	        'pivotComparator',
	        'suppressKeyboardEvent',
	        'colSpan',
	        'getQuickFilterText',
	        'newValueHandler',
	        'onCellValueChanged',
	        'onCellClicked',
	        'onCellDoubleClicked',
	        'onCellContextMenu'
	    ];
	    ColDefUtil.ALL_PROPERTIES = ColDefUtil.ARRAY_PROPERTIES
	        .concat(ColDefUtil.OBJECT_PROPERTIES)
	        .concat(ColDefUtil.STRING_PROPERTIES)
	        .concat(ColDefUtil.NUMBER_PROPERTIES)
	        .concat(ColDefUtil.FUNCTION_PROPERTIES)
	        .concat(ColDefUtil.BOOLEAN_PROPERTIES);
	    return ColDefUtil;
	}());
	exports.ColDefUtil = ColDefUtil;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var grid_1 = __webpack_require__(395);
	function initialiseAgGridWithAngular1(angular) {
	    var angularModule = angular.module("agGrid", []);
	    angularModule.directive("agGrid", function () {
	        return {
	            restrict: "A",
	            controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
	            scope: true
	        };
	    });
	}
	exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
	function AngularDirectiveController($element, $scope, $compile, $attrs) {
	    var gridOptions;
	    var quickFilterOnScope;
	    var keyOfGridInScope = $attrs.agGrid;
	    quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
	    gridOptions = $scope.$eval(keyOfGridInScope);
	    if (!gridOptions) {
	        console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
	        return;
	    }
	    var eGridDiv = $element[0];
	    var gridParams = {
	        $scope: $scope,
	        $compile: $compile,
	        quickFilterOnScope: quickFilterOnScope
	    };
	    var grid = new grid_1.Grid(eGridDiv, gridOptions, gridParams);
	    $scope.$on("$destroy", function () {
	        grid.destroy();
	    });
	}


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var selectionController_1 = __webpack_require__(309);
	var columnController_1 = __webpack_require__(297);
	var rowRenderer_1 = __webpack_require__(305);
	var headerRenderer_1 = __webpack_require__(371);
	var filterManager_1 = __webpack_require__(334);
	var valueService_1 = __webpack_require__(313);
	var eventService_1 = __webpack_require__(285);
	var gridPanel_1 = __webpack_require__(306);
	var gridApi_1 = __webpack_require__(294);
	var headerTemplateLoader_1 = __webpack_require__(377);
	var balancedColumnTreeBuilder_1 = __webpack_require__(283);
	var displayedGroupCreator_1 = __webpack_require__(303);
	var expressionService_1 = __webpack_require__(302);
	var templateService_1 = __webpack_require__(332);
	var popupService_1 = __webpack_require__(335);
	var logger_1 = __webpack_require__(286);
	var columnUtils_1 = __webpack_require__(300);
	var autoWidthCalculator_1 = __webpack_require__(304);
	var horizontalDragService_1 = __webpack_require__(378);
	var context_1 = __webpack_require__(287);
	var csvCreator_1 = __webpack_require__(295);
	var gridCore_1 = __webpack_require__(333);
	var standardMenu_1 = __webpack_require__(396);
	var dragAndDropService_1 = __webpack_require__(373);
	var dragService_1 = __webpack_require__(308);
	var sortController_1 = __webpack_require__(344);
	var focusedCellController_1 = __webpack_require__(320);
	var mouseEventService_1 = __webpack_require__(310);
	var cellNavigationService_1 = __webpack_require__(370);
	var utils_1 = __webpack_require__(288);
	var filterStage_1 = __webpack_require__(397);
	var sortStage_1 = __webpack_require__(399);
	var flattenStage_1 = __webpack_require__(401);
	var cellEditorFactory_1 = __webpack_require__(352);
	var events_1 = __webpack_require__(291);
	var infiniteRowModel_1 = __webpack_require__(402);
	var inMemoryRowModel_1 = __webpack_require__(408);
	var cellRendererFactory_1 = __webpack_require__(353);
	var cellRendererService_1 = __webpack_require__(357);
	var valueFormatterService_1 = __webpack_require__(358);
	var agCheckbox_1 = __webpack_require__(381);
	var baseFrameworkFactory_1 = __webpack_require__(411);
	var scrollVisibleService_1 = __webpack_require__(321);
	var downloader_1 = __webpack_require__(389);
	var xmlFactory_1 = __webpack_require__(412);
	var gridSerializer_1 = __webpack_require__(296);
	var stylingService_1 = __webpack_require__(359);
	var columnHoverService_1 = __webpack_require__(360);
	var columnAnimationService_1 = __webpack_require__(351);
	var sortService_1 = __webpack_require__(400);
	var filterService_1 = __webpack_require__(398);
	var rowNodeFactory_1 = __webpack_require__(413);
	var autoGroupColService_1 = __webpack_require__(388);
	var paginationProxy_1 = __webpack_require__(323);
	var immutableService_1 = __webpack_require__(390);
	var constants_1 = __webpack_require__(289);
	var valueCache_1 = __webpack_require__(314);
	var changeDetectionService_1 = __webpack_require__(414);
	var alignedGridsService_1 = __webpack_require__(325);
	var pinnedRowModel_1 = __webpack_require__(326);
	var componentResolver_1 = __webpack_require__(336);
	var componentRecipes_1 = __webpack_require__(342);
	var componentProvider_1 = __webpack_require__(338);
	var agComponentUtils_1 = __webpack_require__(367);
	var componentMetadataProvider_1 = __webpack_require__(368);
	var namedComponentResolver_1 = __webpack_require__(337);
	var beans_1 = __webpack_require__(350);
	var environment_1 = __webpack_require__(374);
	var animationFrameService_1 = __webpack_require__(327);
	var navigationService_1 = __webpack_require__(331);
	var Grid = (function () {
	    function Grid(eGridDiv, gridOptions, params) {
	        if (!eGridDiv) {
	            console.error('ag-Grid: no div element provided to the grid');
	        }
	        if (!gridOptions) {
	            console.error('ag-Grid: no gridOptions provided to the grid');
	        }
	        var rowModelClass = this.getRowModelClass(gridOptions);
	        var enterprise = utils_1.Utils.exists(Grid.enterpriseBeans);
	        var frameworkFactory = params ? params.frameworkFactory : null;
	        if (utils_1.Utils.missing(frameworkFactory)) {
	            frameworkFactory = new baseFrameworkFactory_1.BaseFrameworkFactory();
	        }
	        var overrideBeans = [];
	        if (Grid.enterpriseBeans) {
	            overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);
	        }
	        if (Grid.frameworkBeans) {
	            overrideBeans = overrideBeans.concat(Grid.frameworkBeans);
	        }
	        var seed = {
	            enterprise: enterprise,
	            gridOptions: gridOptions,
	            eGridDiv: eGridDiv,
	            $scope: params ? params.$scope : null,
	            $compile: params ? params.$compile : null,
	            quickFilterOnScope: params ? params.quickFilterOnScope : null,
	            globalEventListener: params ? params.globalEventListener : null,
	            frameworkFactory: frameworkFactory
	        };
	        if (params && params.seedBeanInstances) {
	            utils_1.Utils.assign(seed, params.seedBeanInstances);
	        }
	        var contextParams = {
	            overrideBeans: overrideBeans,
	            seed: seed,
	            //Careful with the order of the beans here, there are dependencies between them that need to be kept
	            beans: [rowModelClass, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, componentProvider_1.ComponentProvider, agComponentUtils_1.AgComponentUtils, componentMetadataProvider_1.ComponentMetadataProvider,
	                componentProvider_1.ComponentProvider, componentResolver_1.ComponentResolver, componentRecipes_1.ComponentRecipes, namedComponentResolver_1.NamedComponentResolver,
	                cellRendererFactory_1.CellRendererFactory, horizontalDragService_1.HorizontalDragService, headerTemplateLoader_1.HeaderTemplateLoader, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService,
	                displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, selectionController_1.SelectionController,
	                filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, headerRenderer_1.HeaderRenderer, expressionService_1.ExpressionService,
	                balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService,
	                navigationService_1.NavigationService, gridPanel_1.GridPanel, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, alignedGridsService_1.AlignedGridsService,
	                logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, popupService_1.PopupService, gridCore_1.GridCore, standardMenu_1.StandardMenuFactory,
	                dragAndDropService_1.DragAndDropService, columnController_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService,
	                cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService, rowNodeFactory_1.RowNodeFactory,
	                cellEditorFactory_1.CellEditorFactory, cellRendererService_1.CellRendererService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService,
	                columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, autoGroupColService_1.AutoGroupColService, immutableService_1.ImmutableService,
	                changeDetectionService_1.ChangeDetectionService, environment_1.Environment, beans_1.Beans, animationFrameService_1.AnimationFrameService, sortController_1.SortController],
	            components: [
	                { componentName: 'AgCheckbox', theClass: agCheckbox_1.AgCheckbox }
	            ],
	            debug: !!gridOptions.debug
	        };
	        var isLoggingFunc = function () { return contextParams.debug; };
	        this.context = new context_1.Context(contextParams, new logger_1.Logger('Context', isLoggingFunc));
	        // we do this at the end, after the boot sequence is complete
	        this.registerComponents(gridOptions);
	        this.setColumnsAndData();
	        this.dispatchGridReadyEvent(gridOptions);
	        if (gridOptions.debug) {
	            console.log('ag-Grid -> initialised successfully, enterprise = ' + enterprise);
	        }
	    }
	    Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {
	        this.enterpriseBeans = enterpriseBeans;
	        // the enterprise can inject additional row models. this is how it injects the viewportRowModel
	        utils_1.Utils.iterateObject(rowModelClasses, function (key, value) { return Grid.RowModelClasses[key] = value; });
	    };
	    Grid.setFrameworkBeans = function (frameworkBeans) {
	        this.frameworkBeans = frameworkBeans;
	    };
	    Grid.prototype.registerComponents = function (gridOptions) {
	        var componentProvider = this.context.getBean('componentProvider');
	        if (gridOptions.components != null) {
	            Object.keys(gridOptions.components).forEach(function (it) {
	                componentProvider.registerComponent(it, gridOptions.components[it]);
	            });
	        }
	        if (gridOptions.frameworkComponents != null) {
	            Object.keys(gridOptions.frameworkComponents).forEach(function (it) {
	                componentProvider.registerFwComponent(it, gridOptions.frameworkComponents[it]);
	            });
	        }
	    };
	    Grid.prototype.setColumnsAndData = function () {
	        var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');
	        var columnController = this.context.getBean('columnController');
	        var rowModel = this.context.getBean('rowModel');
	        var columnDefs = gridOptionsWrapper.getColumnDefs();
	        var rowData = gridOptionsWrapper.getRowData();
	        var nothingToSet = utils_1.Utils.missing(columnDefs) && utils_1.Utils.missing(rowData);
	        if (nothingToSet) {
	            return;
	        }
	        var valueService = this.context.getBean('valueService');
	        if (utils_1.Utils.exists(columnDefs)) {
	            columnController.setColumnDefs(columnDefs);
	        }
	        if (utils_1.Utils.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            var inMemoryRowModel = rowModel;
	            inMemoryRowModel.setRowData(rowData);
	        }
	    };
	    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {
	        var eventService = this.context.getBean('eventService');
	        var readyEvent = {
	            type: events_1.Events.EVENT_GRID_READY,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        eventService.dispatchEvent(readyEvent);
	    };
	    Grid.prototype.getRowModelClass = function (gridOptions) {
	        var rowModelType = gridOptions.rowModelType;
	        if (utils_1.Utils.exists(rowModelType)) {
	            var rowModelClass = Grid.RowModelClasses[rowModelType];
	            if (utils_1.Utils.exists(rowModelClass)) {
	                return rowModelClass;
	            }
	            else {
	                if (rowModelType === 'normal') {
	                    console.warn("ag-Grid: normal rowModel deprecated. Should now be called inMemory rowModel instead.");
	                    return inMemoryRowModel_1.InMemoryRowModel;
	                }
	                console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);
	                if (rowModelType === 'viewport') {
	                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
	                }
	                if (rowModelType === 'enterprise') {
	                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
	                }
	            }
	        }
	        return inMemoryRowModel_1.InMemoryRowModel;
	    };
	    ;
	    Grid.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    // the default is InMemoryRowModel, which is also used for pagination.
	    // the enterprise adds viewport to this list.
	    Grid.RowModelClasses = {
	        infinite: infiniteRowModel_1.InfiniteRowModel,
	        inMemory: inMemoryRowModel_1.InMemoryRowModel
	    };
	    return Grid;
	}());
	exports.Grid = Grid;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var filterManager_1 = __webpack_require__(334);
	var utils_1 = __webpack_require__(288);
	var popupService_1 = __webpack_require__(335);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var eventService_1 = __webpack_require__(285);
	var StandardMenuFactory = (function () {
	    function StandardMenuFactory() {
	    }
	    StandardMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderMouseEvent({
	                column: column,
	                type: 'columnMenu',
	                mouseEvent: mouseEvent,
	                ePopup: eMenu
	            });
	        });
	    };
	    StandardMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderComponent({ type: 'columnMenu', eventSource: eventSource,
	                ePopup: eMenu, keepWithinBounds: true, column: column });
	        });
	    };
	    StandardMenuFactory.prototype.showPopup = function (column, positionCallback) {
	        var _this = this;
	        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column);
	        var eMenu = document.createElement('div');
	        utils_1.Utils.addCssClass(eMenu, 'ag-menu');
	        filterWrapper.guiPromise.promise.then(function (gui) {
	            eMenu.appendChild(gui);
	        });
	        var hidePopup;
	        var bodyScrollListener = function (event) {
	            // if h scroll, popup is no longer over the column
	            if (event.direction === 'horizontal') {
	                hidePopup();
	            }
	        };
	        this.eventService.addEventListener('bodyScroll', bodyScrollListener);
	        var closedCallback = function () {
	            _this.eventService.removeEventListener('bodyScroll', bodyScrollListener);
	            column.setMenuVisible(false);
	        };
	        // need to show filter before positioning, as only after filter
	        // is visible can we find out what the width of it is
	        hidePopup = this.popupService.addAsModalPopup(eMenu, true, closedCallback);
	        positionCallback(eMenu);
	        filterWrapper.filterPromise.then(function (filter) {
	            if (filter.afterGuiAttached) {
	                var params = {
	                    hidePopup: hidePopup
	                };
	                filter.afterGuiAttached(params);
	            }
	        });
	        column.setMenuVisible(true);
	    };
	    StandardMenuFactory.prototype.isMenuEnabled = function (column) {
	        // for standard, we show menu if filter is enabled, and he menu is not suppressed
	        return this.gridOptionsWrapper.isEnableFilter() && column.isFilterAllowed();
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], StandardMenuFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], StandardMenuFactory.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], StandardMenuFactory.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], StandardMenuFactory.prototype, "gridOptionsWrapper", void 0);
	    StandardMenuFactory = __decorate([
	        context_1.Bean('menuFactory')
	    ], StandardMenuFactory);
	    return StandardMenuFactory;
	}());
	exports.StandardMenuFactory = StandardMenuFactory;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var filterService_1 = __webpack_require__(398);
	var FilterStage = (function () {
	    function FilterStage() {
	    }
	    FilterStage.prototype.execute = function (params) {
	        var rowNode = params.rowNode;
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.filterService.filter(rowNode, false);
	        }
	        else {
	            this.filterService.filterAccordingToColumnState(rowNode);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FilterStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterService'),
	        __metadata("design:type", filterService_1.FilterService)
	    ], FilterStage.prototype, "filterService", void 0);
	    FilterStage = __decorate([
	        context_1.Bean('filterStage')
	    ], FilterStage);
	    return FilterStage;
	}());
	exports.FilterStage = FilterStage;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var filterManager_1 = __webpack_require__(334);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var FilterService = (function () {
	    function FilterService() {
	    }
	    FilterService.prototype.postConstruct = function () {
	        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
	    };
	    FilterService.prototype.filterAccordingToColumnState = function (rowNode) {
	        var filterActive = this.filterManager.isAnyFilterPresent();
	        this.filter(rowNode, filterActive);
	    };
	    FilterService.prototype.filter = function (rowNode, filterActive) {
	        var _this = this;
	        // recursively get all children that are groups to also filter
	        if (rowNode.hasChildren()) {
	            rowNode.childrenAfterGroup.forEach(function (node) { return _this.filter(node, filterActive); });
	            // result of filter for this node
	            if (filterActive) {
	                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {
	                    // a group is included in the result if it has any children of it's own.
	                    // by this stage, the child groups are already filtered
	                    var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
	                    // both leaf level nodes and tree data nodes have data. these get added if
	                    // the data passes the filter
	                    var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);
	                    // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass
	                    return passBecauseChildren || passBecauseDataPasses;
	                });
	            }
	            else {
	                // if not filtering, the result is the original list
	                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
	            }
	            this.setAllChildrenCount(rowNode);
	        }
	        else {
	            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
	            rowNode.setAllChildrenCount(null);
	        }
	    };
	    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {
	        // for tree data, we include all children, groups and leafs
	        var allChildrenCount = 0;
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            // include child itself
	            allChildrenCount++;
	            // include children of children
	            allChildrenCount += child.allChildrenCount;
	        });
	        rowNode.setAllChildrenCount(allChildrenCount);
	    };
	    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {
	        // for grid data, we only count the leafs
	        var allChildrenCount = 0;
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.group) {
	                allChildrenCount += child.allChildrenCount;
	            }
	            else {
	                allChildrenCount++;
	            }
	        });
	        rowNode.setAllChildrenCount(allChildrenCount);
	    };
	    FilterService.prototype.setAllChildrenCount = function (rowNode) {
	        if (this.doingTreeData) {
	            this.setAllChildrenCountTreeData(rowNode);
	        }
	        else {
	            this.setAllChildrenCountGridGrouping(rowNode);
	        }
	    };
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], FilterService.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FilterService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterService.prototype, "postConstruct", null);
	    FilterService = __decorate([
	        context_1.Bean("filterService")
	    ], FilterService);
	    return FilterService;
	}());
	exports.FilterService = FilterService;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var sortService_1 = __webpack_require__(400);
	var SortStage = (function () {
	    function SortStage() {
	    }
	    SortStage.prototype.execute = function (params) {
	        // if the sorting is already done by the server, then we should not do it here
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.sortService.sort(params.rowNode, null);
	        }
	        else {
	            this.sortService.sortAccordingToColumnsState(params.rowNode);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('sortService'),
	        __metadata("design:type", sortService_1.SortService)
	    ], SortStage.prototype, "sortService", void 0);
	    SortStage = __decorate([
	        context_1.Bean('sortStage')
	    ], SortStage);
	    return SortStage;
	}());
	exports.SortStage = SortStage;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var sortController_1 = __webpack_require__(344);
	var utils_1 = __webpack_require__(288);
	var valueService_1 = __webpack_require__(313);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var SortService = (function () {
	    function SortService() {
	    }
	    SortService.prototype.sortAccordingToColumnsState = function (rowNode) {
	        var sortOptions = this.sortController.getSortForRowController();
	        this.sort(rowNode, sortOptions);
	    };
	    SortService.prototype.sort = function (rowNode, sortOptions) {
	        var _this = this;
	        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
	        // we clear out the 'pull down open parents' first, as the values mix up the sorting
	        this.pullDownDataForHideOpenParents(rowNode, true);
	        var sortActive = utils_1._.exists(sortOptions) && sortOptions.length > 0;
	        if (sortActive) {
	            // RE https://ag-grid.atlassian.net/browse/AG-444
	            //Javascript sort is non deterministic when all the array items are equals
	            //ie Comparator always returns 0, so if you want to ensure the array keeps its
	            //order, then you need to add an additional sorting condition manually, in this
	            //case we are going to inspect the original array position
	            var sortedRowNodes = rowNode.childrenAfterSort.map(function (it, pos) {
	                return { currentPos: pos, rowNode: it };
	            });
	            sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
	            rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });
	        }
	        this.updateChildIndexes(rowNode);
	        this.pullDownDataForHideOpenParents(rowNode, false);
	        // sort any groups recursively
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.hasChildren()) {
	                _this.sort(child, sortOptions);
	            }
	        });
	    };
	    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {
	        var nodeA = sortedNodeA.rowNode;
	        var nodeB = sortedNodeB.rowNode;
	        // Iterate columns, return the first that doesn't match
	        for (var i = 0, len = sortOptions.length; i < len; i++) {
	            var sortOption = sortOptions[i];
	            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
	            var isInverted = sortOption.inverter === -1;
	            var valueA = this.getValue(nodeA, sortOption.column);
	            var valueB = this.getValue(nodeB, sortOption.column);
	            var comparatorResult = void 0;
	            if (sortOption.column.getColDef().comparator) {
	                //if comparator provided, use it
	                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
	            }
	            else {
	                //otherwise do our own comparison
	                comparatorResult = utils_1._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
	            }
	            if (comparatorResult !== 0) {
	                return comparatorResult * sortOption.inverter;
	            }
	        }
	        // All matched, we make is so that the original sort order is kept:
	        return sortedNodeA.currentPos - sortedNodeB.currentPos;
	    };
	    SortService.prototype.getValue = function (nodeA, column) {
	        return this.valueService.getValue(column, nodeA);
	    };
	    SortService.prototype.updateChildIndexes = function (rowNode) {
	        if (utils_1._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (child, index) {
	            var firstChild = index === 0;
	            var lastChild = index === rowNode.childrenAfterSort.length - 1;
	            child.setFirstChild(firstChild);
	            child.setLastChild(lastChild);
	            child.setChildIndex(index);
	        });
	    };
	    SortService.prototype.pullDownDataForHideOpenParents = function (rowNode, clearOperation) {
	        var _this = this;
	        if (utils_1._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (childRowNode) {
	            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
	            groupDisplayCols.forEach(function (groupDisplayCol) {
	                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
	                if (typeof showRowGroup !== 'string') {
	                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');
	                    return;
	                }
	                var displayingGroupKey = showRowGroup;
	                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
	                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
	                if (thisRowNodeMatches) {
	                    return;
	                }
	                if (clearOperation) {
	                    // if doing a clear operation, we clear down the value for every possible group column
	                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);
	                }
	                else {
	                    // if doing a set operation, we set only where the pull down is to occur
	                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
	                    if (parentToStealFrom) {
	                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
	                    }
	                }
	            });
	        });
	    };
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], SortService.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], SortService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], SortService.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortService.prototype, "gridOptionsWrapper", void 0);
	    SortService = __decorate([
	        context_1.Bean('sortService')
	    ], SortService);
	    return SortService;
	}());
	exports.SortService = SortService;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var rowNode_1 = __webpack_require__(312);
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var selectionController_1 = __webpack_require__(309);
	var eventService_1 = __webpack_require__(285);
	var columnController_1 = __webpack_require__(297);
	var FlattenStage = (function () {
	    function FlattenStage() {
	    }
	    FlattenStage.prototype.execute = function (params) {
	        var rootNode = params.rowNode;
	        // even if not doing grouping, we do the mapping, as the client might
	        // of passed in data that already has a grouping in it somewhere
	        var result = [];
	        // putting value into a wrapper so it's passed by reference
	        var nextRowTop = { value: 0 };
	        var skipLeafNodes = this.columnController.isPivotMode();
	        // if we are reducing, and not grouping, then we want to show the root node, as that
	        // is where the pivot values are
	        var showRootNode = skipLeafNodes && rootNode.leafGroup;
	        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
	        // set all row tops to null, then set row tops on all visible rows. if we don't
	        // do this, then the algorithm below only sets row tops, old row tops from old rows
	        // will still lie around
	        this.resetRowTops(rootNode);
	        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
	        return result;
	    };
	    FlattenStage.prototype.resetRowTops = function (rowNode) {
	        rowNode.clearRowTop();
	        if (rowNode.hasChildren()) {
	            if (rowNode.childrenAfterGroup) {
	                for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
	                    this.resetRowTops(rowNode.childrenAfterGroup[i]);
	                }
	            }
	            if (rowNode.sibling) {
	                rowNode.sibling.clearRowTop();
	            }
	        }
	    };
	    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
	        if (utils_1.Utils.missingOrEmpty(rowsToFlatten)) {
	            return;
	        }
	        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
	        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
	        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
	        var groupRemoveLowestSingleChildren = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
	        for (var i = 0; i < rowsToFlatten.length; i++) {
	            var rowNode = rowsToFlatten[i];
	            // check all these cases, for working out if this row should be included in the final mapped list
	            var isParent = rowNode.hasChildren();
	            var isGroupSuppressedNode = groupSuppressRow && isParent;
	            var isSkippedLeafNode = skipLeafNodes && !isParent;
	            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
	            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
	            // hide open parents means when group is open, we don't show it. we also need to make sure the
	            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).
	            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')
	            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
	            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && (!neverAllowToExpand);
	            var thisRowShouldBeRendered = !isSkippedLeafNode && !isGroupSuppressedNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
	            if (thisRowShouldBeRendered) {
	                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
	            }
	            // if we are pivoting, we never map below the leaf group
	            if (skipLeafNodes && rowNode.leafGroup) {
	                continue;
	            }
	            if (isParent) {
	                // we traverse the group if it is expended, however we always traverse if the parent node
	                // was removed (as the group will never be opened if it is not displayed, we show the children instead)
	                if (rowNode.expanded || isRemovedSingleChildrenGroup) {
	                    // if the parent was excluded, then ui level is that of the parent
	                    var uiLevelForChildren = isRemovedSingleChildrenGroup ? uiLevel : uiLevel + 1;
	                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
	                    // put a footer in if user is looking for it
	                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	                        this.ensureFooterNodeExists(rowNode);
	                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
	                    }
	                }
	                else {
	                }
	            }
	            else if (rowNode.master && rowNode.expanded) {
	                var detailNode = this.createDetailNode(rowNode);
	                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
	            }
	        }
	    };
	    // duplicated method, it's also in floatingRowModel
	    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {
	        result.push(rowNode);
	        if (utils_1.Utils.missing(rowNode.rowHeight)) {
	            var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
	            rowNode.setRowHeight(rowHeight);
	        }
	        rowNode.setUiLevel(uiLevel);
	        rowNode.setRowTop(nextRowTop.value);
	        rowNode.setRowIndex(result.length - 1);
	        nextRowTop.value += rowNode.rowHeight;
	    };
	    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {
	        // only create footer node once, otherwise we have daemons and
	        // the animate screws up with the daemons hanging around
	        if (utils_1.Utils.exists(groupNode.sibling)) {
	            return;
	        }
	        var footerNode = new rowNode_1.RowNode();
	        this.context.wireBean(footerNode);
	        Object.keys(groupNode).forEach(function (key) {
	            footerNode[key] = groupNode[key];
	        });
	        footerNode.footer = true;
	        footerNode.rowTop = null;
	        footerNode.oldRowTop = null;
	        if (utils_1.Utils.exists(footerNode.id)) {
	            footerNode.id = 'rowGroupFooter_' + footerNode.id;
	        }
	        // get both header and footer to reference each other as siblings. this is never undone,
	        // only overwritten. so if a group is expanded, then contracted, it will have a ghost
	        // sibling - but that's fine, as we can ignore this if the header is contracted.
	        footerNode.sibling = groupNode;
	        groupNode.sibling = footerNode;
	    };
	    FlattenStage.prototype.createDetailNode = function (masterNode) {
	        if (utils_1.Utils.exists(masterNode.detailNode)) {
	            return masterNode.detailNode;
	        }
	        else {
	            var detailNode = new rowNode_1.RowNode();
	            this.context.wireBean(detailNode);
	            detailNode.detail = true;
	            // flower was renamed to 'detail', but keeping for backwards compatibility
	            detailNode.flower = detailNode.detail;
	            detailNode.parent = masterNode;
	            if (utils_1.Utils.exists(masterNode.id)) {
	                detailNode.id = 'detail_' + masterNode.id;
	            }
	            detailNode.data = masterNode.data;
	            detailNode.level = masterNode.level + 1;
	            masterNode.detailNode = detailNode;
	            masterNode.childFlower = masterNode.detailNode; // for backwards compatibility
	            return detailNode;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FlattenStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], FlattenStage.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FlattenStage.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], FlattenStage.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FlattenStage.prototype, "columnController", void 0);
	    FlattenStage = __decorate([
	        context_1.Bean('flattenStage')
	    ], FlattenStage);
	    return FlattenStage;
	}());
	exports.FlattenStage = FlattenStage;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var selectionController_1 = __webpack_require__(309);
	var events_1 = __webpack_require__(291);
	var sortController_1 = __webpack_require__(344);
	var filterManager_1 = __webpack_require__(334);
	var constants_1 = __webpack_require__(289);
	var infiniteCache_1 = __webpack_require__(403);
	var beanStub_1 = __webpack_require__(318);
	var rowNodeCache_1 = __webpack_require__(406);
	var rowNodeBlockLoader_1 = __webpack_require__(407);
	var gridApi_1 = __webpack_require__(294);
	var columnController_1 = __webpack_require__(297);
	var InfiniteRowModel = (function (_super) {
	    __extends(InfiniteRowModel, _super);
	    function InfiniteRowModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    InfiniteRowModel.prototype.getRowBounds = function (index) {
	        return {
	            rowHeight: this.rowHeight,
	            rowTop: this.rowHeight * index
	        };
	    };
	    InfiniteRowModel.prototype.init = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isRowModelInfinite()) {
	            return;
	        }
	        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        this.addEventListeners();
	        this.setDatasource(this.gridOptionsWrapper.getDatasource());
	        this.addDestroyFunc(function () { return _this.destroyCache(); });
	    };
	    InfiniteRowModel.prototype.isLastRowFound = function () {
	        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;
	    };
	    InfiniteRowModel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	    };
	    InfiniteRowModel.prototype.onFilterChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.onSortChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    InfiniteRowModel.prototype.getType = function () {
	        return constants_1.Constants.ROW_MODEL_TYPE_INFINITE;
	    };
	    InfiniteRowModel.prototype.setDatasource = function (datasource) {
	        this.datasource = datasource;
	        // only reset if we have a valid datasource to working with
	        if (datasource) {
	            this.checkForDeprecated();
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.checkForDeprecated = function () {
	        var ds = this.datasource;
	        // the number of concurrent loads we are allowed to the server
	        if (utils_1.Utils.exists(ds.maxConcurrentRequests)) {
	            console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');
	        }
	        if (utils_1.Utils.exists(ds.maxPagesInCache)) {
	            console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');
	        }
	        if (utils_1.Utils.exists(ds.overflowSize)) {
	            console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');
	        }
	        if (utils_1.Utils.exists(ds.blockSize)) {
	            console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');
	        }
	    };
	    InfiniteRowModel.prototype.isEmpty = function () {
	        return utils_1.Utils.missing(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.isRowsToRender = function () {
	        return utils_1.Utils.exists(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange);
	    };
	    InfiniteRowModel.prototype.reset = function () {
	        // important to return here, as the user could be setting filter or sort before
	        // data-source is set
	        if (utils_1.Utils.missing(this.datasource)) {
	            return;
	        }
	        // if user is providing id's, then this means we can keep the selection between datsource hits,
	        // as the rows will keep their unique id's even if, for example, server side sorting or filtering
	        // is done.
	        var userGeneratingIds = utils_1.Utils.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
	        if (!userGeneratingIds) {
	            this.selectionController.reset();
	        }
	        this.resetCache();
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {
	        return {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            // not sure if these should all be false - noticed if after implementing,
	            // maybe they should be true?
	            newPage: false,
	            newData: false,
	            keepRenderedRows: false,
	            animate: false
	        };
	    };
	    InfiniteRowModel.prototype.resetCache = function () {
	        // if not first time creating a cache, need to destroy the old one
	        this.destroyCache();
	        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
	        // there is a bi-directional dependency between the loader and the cache,
	        // so we create loader here, and then pass dependencies in setDependencies() method later
	        this.rowNodeBlockLoader = new rowNodeBlockLoader_1.RowNodeBlockLoader(maxConcurrentRequests);
	        this.context.wireBean(this.rowNodeBlockLoader);
	        var cacheSettings = {
	            // the user provided datasource
	            datasource: this.datasource,
	            // sort and filter model
	            filterModel: this.filterManager.getFilterModel(),
	            sortModel: this.sortController.getSortModel(),
	            rowNodeBlockLoader: this.rowNodeBlockLoader,
	            // properties - this way we take a snapshot of them, so if user changes any, they will be
	            // used next time we create a new cache, which is generally after a filter or sort change,
	            // or a new datasource is set
	            maxConcurrentRequests: maxConcurrentRequests,
	            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),
	            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),
	            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
	            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
	            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
	            // the cache could create this, however it is also used by the pages, so handy to create it
	            // here as the settings are also passed to the pages
	            lastAccessedSequence: new utils_1.NumberSequence()
	        };
	        // set defaults
	        if (!(cacheSettings.maxConcurrentRequests >= 1)) {
	            cacheSettings.maxConcurrentRequests = 2;
	        }
	        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
	        // server for one page at a time. so the default if not specified is 100.
	        if (!(cacheSettings.blockSize >= 1)) {
	            cacheSettings.blockSize = 100;
	        }
	        // if user doesn't give initial rows to display, we assume zero
	        if (!(cacheSettings.initialRowCount >= 1)) {
	            cacheSettings.initialRowCount = 0;
	        }
	        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
	        // the current page and request first row of next page
	        if (!(cacheSettings.overflowSize >= 1)) {
	            cacheSettings.overflowSize = 1;
	        }
	        this.infiniteCache = new infiniteCache_1.InfiniteCache(cacheSettings);
	        this.context.wireBean(this.infiniteCache);
	        this.infiniteCache.addEventListener(rowNodeCache_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
	    };
	    InfiniteRowModel.prototype.destroyCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.destroy();
	            this.infiniteCache = null;
	        }
	        if (this.rowNodeBlockLoader) {
	            this.rowNodeBlockLoader.destroy();
	            this.rowNodeBlockLoader = null;
	        }
	    };
	    InfiniteRowModel.prototype.onCacheUpdated = function () {
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.getRow = function (rowIndex) {
	        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
	    };
	    InfiniteRowModel.prototype.forEachNode = function (callback) {
	        if (this.infiniteCache) {
	            this.infiniteCache.forEachNodeDeep(callback, new utils_1.NumberSequence());
	        }
	    };
	    InfiniteRowModel.prototype.getCurrentPageHeight = function () {
	        return this.getRowCount() * this.rowHeight;
	    };
	    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {
	        if (this.rowHeight !== 0) {
	            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
	            if (rowIndexForPixel > this.getPageLastRow()) {
	                return this.getPageLastRow();
	            }
	            else {
	                return rowIndexForPixel;
	            }
	        }
	        else {
	            return 0;
	        }
	    };
	    InfiniteRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    InfiniteRowModel.prototype.getPageLastRow = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() - 1 : 0;
	    };
	    InfiniteRowModel.prototype.getRowCount = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
	    };
	    InfiniteRowModel.prototype.updateRowData = function (transaction) {
	        if (utils_1.Utils.exists(transaction.remove) || utils_1.Utils.exists(transaction.update)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');
	            return;
	        }
	        if (utils_1.Utils.missing(transaction.addIndex)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');
	            return;
	        }
	        if (this.infiniteCache) {
	            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
	        }
	    };
	    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {
	        return false;
	    };
	    InfiniteRowModel.prototype.refreshCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.refreshCache();
	        }
	    };
	    InfiniteRowModel.prototype.purgeCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.purgeCache();
	        }
	    };
	    InfiniteRowModel.prototype.getVirtualRowCount = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.getVirtualRowCount();
	        }
	        else {
	            return null;
	        }
	    };
	    InfiniteRowModel.prototype.isMaxRowFound = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.isMaxRowFound();
	        }
	    };
	    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        if (this.infiniteCache) {
	            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
	        }
	    };
	    InfiniteRowModel.prototype.getBlockState = function () {
	        if (this.rowNodeBlockLoader) {
	            return this.rowNodeBlockLoader.getBlockState();
	        }
	        else {
	            return null;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InfiniteRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], InfiniteRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], InfiniteRowModel.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], InfiniteRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InfiniteRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteRowModel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InfiniteRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InfiniteRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "destroy", null);
	    InfiniteRowModel = __decorate([
	        context_1.Bean('rowModel')
	    ], InfiniteRowModel);
	    return InfiniteRowModel;
	}(beanStub_1.BeanStub));
	exports.InfiniteRowModel = InfiniteRowModel;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var logger_1 = __webpack_require__(286);
	var infiniteBlock_1 = __webpack_require__(404);
	var rowNodeCache_1 = __webpack_require__(406);
	var gridApi_1 = __webpack_require__(294);
	var columnController_1 = __webpack_require__(297);
	var InfiniteCache = (function (_super) {
	    __extends(InfiniteCache, _super);
	    function InfiniteCache(params) {
	        return _super.call(this, params) || this;
	    }
	    InfiniteCache.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('InfiniteCache');
	    };
	    InfiniteCache.prototype.init = function () {
	        _super.prototype.init.call(this);
	        // start load of data, as the virtualRowCount will remain at 0 otherwise,
	        // so we need this to kick things off, otherwise grid would never call getRow()
	        this.getRow(0);
	    };
	    InfiniteCache.prototype.moveItemsDown = function (page, moveFromIndex, moveCount) {
	        var startRow = page.getStartRow();
	        var endRow = page.getEndRow();
	        var indexOfLastRowToMove = moveFromIndex + moveCount;
	        // all rows need to be moved down below the insertion index
	        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {
	            // don't move rows at or before the insertion index
	            if (currentRowIndex < indexOfLastRowToMove) {
	                continue;
	            }
	            var indexOfNodeWeWant = currentRowIndex - moveCount;
	            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);
	            if (nodeForThisIndex) {
	                page.setRowNode(currentRowIndex, nodeForThisIndex);
	            }
	            else {
	                page.setBlankRowNode(currentRowIndex);
	                page.setDirty();
	            }
	        }
	    };
	    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {
	        var pageStartRow = block.getStartRow();
	        var pageEndRow = block.getEndRow();
	        var newRowNodes = [];
	        // next stage is insert the rows into this page, if applicable
	        for (var index = 0; index < items.length; index++) {
	            var rowIndex = indexToInsert + index;
	            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;
	            if (currentRowInThisPage) {
	                var dataItem = items[index];
	                var newRowNode = block.setNewData(rowIndex, dataItem);
	                newRowNodes.push(newRowNode);
	            }
	        }
	        return newRowNodes;
	    };
	    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var _this = this;
	        var newNodes = [];
	        this.forEachBlockInReverseOrder(function (block) {
	            var pageEndRow = block.getEndRow();
	            // if the insertion is after this page, then this page is not impacted
	            if (pageEndRow <= indexToInsert) {
	                return;
	            }
	            _this.moveItemsDown(block, indexToInsert, items.length);
	            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);
	            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });
	        });
	        if (this.isMaxRowFound()) {
	            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
	        }
	        this.onCacheUpdated();
	        var event = {
	            type: events_1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
	    // it will want new pages in the cache as it asks for rows. only when we are inserting /
	    // removing rows via the api is dontCreatePage set, where we move rows between the pages.
	    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {
	        if (dontCreatePage === void 0) { dontCreatePage = false; }
	        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
	        var block = this.getBlock(blockId);
	        if (!block) {
	            if (dontCreatePage) {
	                return null;
	            }
	            else {
	                block = this.createBlock(blockId);
	            }
	        }
	        return block.getRow(rowIndex);
	    };
	    InfiniteCache.prototype.createBlock = function (blockNumber) {
	        var newBlock = new infiniteBlock_1.InfiniteBlock(blockNumber, this.cacheParams);
	        this.context.wireBean(newBlock);
	        this.postCreateBlock(newBlock);
	        return newBlock;
	    };
	    // we have this on infinite row model only, not enterprise row model,
	    // because for enterprise, it would leave the children in inconsistent
	    // state - eg if a node had children, but after the refresh it had data
	    // for a different row, then the children would be with the wrong row node.
	    InfiniteCache.prototype.refreshCache = function () {
	        this.forEachBlockInOrder(function (block) { return block.setDirty(); });
	        this.checkBlockToLoad();
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InfiniteCache.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteCache.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InfiniteCache.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InfiniteCache.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "setBeans", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "init", null);
	    return InfiniteCache;
	}(rowNodeCache_1.RowNodeCache));
	exports.InfiniteCache = InfiniteCache;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var context_1 = __webpack_require__(287);
	var rowNodeBlock_1 = __webpack_require__(405);
	var rowRenderer_1 = __webpack_require__(305);
	var InfiniteBlock = (function (_super) {
	    __extends(InfiniteBlock, _super);
	    function InfiniteBlock(pageNumber, params) {
	        var _this = _super.call(this, pageNumber, params) || this;
	        _this.cacheParams = params;
	        return _this;
	    }
	    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);
	        rowNode.uiLevel = 0;
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	        return rowNode;
	    };
	    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {
	        if (utils_1.Utils.exists(data)) {
	            // this means if the user is not providing id's we just use the
	            // index for the row. this will allow selection to work (that is based
	            // on index) as long user is not inserting or deleting rows,
	            // or wanting to keep selection between server side sorting or filtering
	            rowNode.setDataAndId(data, index.toString());
	        }
	        else {
	            rowNode.setDataAndId(undefined, undefined);
	        }
	    };
	    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {
	        _super.prototype.setRowNode.call(this, rowIndex, rowNode);
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	    };
	    InfiniteBlock.prototype.init = function () {
	        _super.prototype.init.call(this, {
	            context: this.context,
	            rowRenderer: this.rowRenderer
	        });
	    };
	    InfiniteBlock.prototype.getNodeIdPrefix = function () {
	        return null;
	    };
	    InfiniteBlock.prototype.getRow = function (displayIndex) {
	        return this.getRowUsingLocalIndex(displayIndex);
	    };
	    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {
	        rowNode.setRowIndex(rowIndex);
	        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
	    };
	    InfiniteBlock.prototype.loadFromDatasource = function () {
	        var _this = this;
	        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
	        // is executing before the sort is set up, so server is not getting the sort
	        // model. need to change with regards order - so the server side request is
	        // AFTER thus it gets the right sort model.
	        var params = {
	            startRow: this.getStartRow(),
	            endRow: this.getEndRow(),
	            successCallback: this.pageLoaded.bind(this, this.getVersion()),
	            failCallback: this.pageLoadFailed.bind(this),
	            sortModel: this.cacheParams.sortModel,
	            filterModel: this.cacheParams.filterModel,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        if (utils_1.Utils.missing(this.cacheParams.datasource.getRows)) {
	            console.warn("ag-Grid: datasource is missing getRows method");
	            return;
	        }
	        // check if old version of datasource used
	        var getRowsParams = utils_1.Utils.getFunctionParameters(this.cacheParams.datasource.getRows);
	        if (getRowsParams.length > 1) {
	            console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
	            console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
	        }
	        // put in timeout, to force result to be async
	        setTimeout(function () {
	            _this.cacheParams.datasource.getRows(params);
	        }, 0);
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InfiniteBlock.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteBlock.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], InfiniteBlock.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteBlock.prototype, "init", null);
	    return InfiniteBlock;
	}(rowNodeBlock_1.RowNodeBlock));
	exports.InfiniteBlock = InfiniteBlock;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var rowNode_1 = __webpack_require__(312);
	var beanStub_1 = __webpack_require__(318);
	var RowNodeBlock = (function (_super) {
	    __extends(RowNodeBlock, _super);
	    function RowNodeBlock(blockNumber, rowNodeCacheParams) {
	        var _this = _super.call(this) || this;
	        _this.version = 0;
	        _this.state = RowNodeBlock.STATE_DIRTY;
	        _this.rowNodeCacheParams = rowNodeCacheParams;
	        _this.blockNumber = blockNumber;
	        // we don't need to calculate these now, as the inputs don't change,
	        // however it makes the code easier to read if we work them out up front
	        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
	        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
	        return _this;
	    }
	    RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {
	        var result = false;
	        this.forEachNodeCallback(function (rowNode) {
	            if (rowNode.expanded) {
	                result = true;
	            }
	        }, rowCount);
	        return result;
	    };
	    RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {
	        for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {
	            // we check against rowCount as this page may be the last one, and if it is, then
	            // the last rows are not part of the set
	            if (rowIndex < rowCount) {
	                var rowNode = this.getRowUsingLocalIndex(rowIndex);
	                callback(rowNode, rowIndex);
	            }
	        }
	    };
	    RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {
	        this.forEachNodeCallback(function (rowNode) {
	            callback(rowNode, sequence.next());
	            // this will only every happen for enterprise row model, as infinite
	            // row model doesn't have groups
	            if (deep && rowNode.childrenCache) {
	                rowNode.childrenCache.forEachNodeDeep(callback, sequence);
	            }
	        }, rowCount);
	    };
	    RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, true);
	    };
	    RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, false);
	    };
	    RowNodeBlock.prototype.getVersion = function () {
	        return this.version;
	    };
	    RowNodeBlock.prototype.getLastAccessed = function () {
	        return this.lastAccessed;
	    };
	    RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex) {
	        this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
	        var localIndex = rowIndex - this.startRow;
	        return this.rowNodes[localIndex];
	    };
	    RowNodeBlock.prototype.init = function (beans) {
	        this.beans = beans;
	        this.createRowNodes();
	    };
	    RowNodeBlock.prototype.getStartRow = function () {
	        return this.startRow;
	    };
	    RowNodeBlock.prototype.getEndRow = function () {
	        return this.endRow;
	    };
	    RowNodeBlock.prototype.getBlockNumber = function () {
	        return this.blockNumber;
	    };
	    RowNodeBlock.prototype.setDirty = function () {
	        // in case any current loads in progress, this will have their results ignored
	        this.version++;
	        this.state = RowNodeBlock.STATE_DIRTY;
	    };
	    RowNodeBlock.prototype.setDirtyAndPurge = function () {
	        this.setDirty();
	        this.rowNodes.forEach(function (rowNode) {
	            rowNode.setData(null);
	        });
	    };
	    RowNodeBlock.prototype.getState = function () {
	        return this.state;
	    };
	    RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode) {
	        var localIndex = rowIndex - this.startRow;
	        this.rowNodes[localIndex] = rowNode;
	    };
	    RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {
	        var localIndex = rowIndex - this.startRow;
	        var newRowNode = this.createBlankRowNode(rowIndex);
	        this.rowNodes[localIndex] = newRowNode;
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {
	        var newRowNode = this.setBlankRowNode(rowIndex);
	        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = new rowNode_1.RowNode();
	        this.beans.context.wireBean(rowNode);
	        rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);
	        return rowNode;
	    };
	    // creates empty row nodes, data is missing as not loaded yet
	    RowNodeBlock.prototype.createRowNodes = function () {
	        this.rowNodes = [];
	        for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {
	            var rowIndex = this.startRow + i;
	            var rowNode = this.createBlankRowNode(rowIndex);
	            this.rowNodes.push(rowNode);
	        }
	    };
	    RowNodeBlock.prototype.load = function () {
	        this.state = RowNodeBlock.STATE_LOADING;
	        this.loadFromDatasource();
	    };
	    RowNodeBlock.prototype.pageLoadFailed = function () {
	        this.state = RowNodeBlock.STATE_FAILED;
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: false,
	            page: this,
	            lastRow: null
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.prototype.populateWithRowData = function (rows) {
	        var _this = this;
	        var rowNodesToRefresh = [];
	        this.rowNodes.forEach(function (rowNode, index) {
	            var data = rows[index];
	            if (rowNode.stub) {
	                rowNodesToRefresh.push(rowNode);
	            }
	            _this.setDataAndId(rowNode, data, _this.startRow + index);
	        });
	        if (rowNodesToRefresh.length > 0) {
	            this.beans.rowRenderer.redrawRows(rowNodesToRefresh);
	        }
	    };
	    RowNodeBlock.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.rowNodes.forEach(function (rowNode) {
	            if (rowNode.childrenCache) {
	                rowNode.childrenCache.destroy();
	                rowNode.childrenCache = null;
	            }
	        });
	    };
	    RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {
	        // we need to check the version, in case there was an old request
	        // from the server that was sent before we refreshed the cache,
	        // if the load was done as a result of a cache refresh
	        if (version === this.version) {
	            this.state = RowNodeBlock.STATE_LOADED;
	            this.populateWithRowData(rows);
	        }
	        lastRow = utils_1.Utils.cleanNumber(lastRow);
	        // check here if lastrow should be set
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: true,
	            page: this,
	            lastRow: lastRow
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';
	    RowNodeBlock.STATE_DIRTY = 'dirty';
	    RowNodeBlock.STATE_LOADING = 'loading';
	    RowNodeBlock.STATE_LOADED = 'loaded';
	    RowNodeBlock.STATE_FAILED = 'failed';
	    return RowNodeBlock;
	}(beanStub_1.BeanStub));
	exports.RowNodeBlock = RowNodeBlock;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var beanStub_1 = __webpack_require__(318);
	var rowNodeBlock_1 = __webpack_require__(405);
	var RowNodeCache = (function (_super) {
	    __extends(RowNodeCache, _super);
	    function RowNodeCache(cacheParams) {
	        var _this = _super.call(this) || this;
	        _this.maxRowFound = false;
	        _this.blocks = {};
	        _this.blockCount = 0;
	        _this.virtualRowCount = cacheParams.initialRowCount;
	        _this.cacheParams = cacheParams;
	        return _this;
	    }
	    RowNodeCache.prototype.destroy = function () {
	        var _this = this;
	        _super.prototype.destroy.call(this);
	        this.forEachBlockInOrder(function (block) { return _this.destroyBlock(block); });
	    };
	    RowNodeCache.prototype.init = function () {
	        var _this = this;
	        this.active = true;
	        this.addDestroyFunc(function () { return _this.active = false; });
	    };
	    RowNodeCache.prototype.isActive = function () {
	        return this.active;
	    };
	    RowNodeCache.prototype.getVirtualRowCount = function () {
	        return this.virtualRowCount;
	    };
	    RowNodeCache.prototype.hack_setVirtualRowCount = function (virtualRowCount) {
	        this.virtualRowCount = virtualRowCount;
	    };
	    RowNodeCache.prototype.isMaxRowFound = function () {
	        return this.maxRowFound;
	    };
	    // listener on EVENT_LOAD_COMPLETE
	    RowNodeCache.prototype.onPageLoaded = function (event) {
	        // if we are not active, then we ignore all events, otherwise we could end up getting the
	        // grid to refresh even though we are no longer the active cache
	        if (!this.isActive()) {
	            return;
	        }
	        this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);
	        this.cacheParams.rowNodeBlockLoader.loadComplete();
	        this.checkBlockToLoad();
	        if (event.success) {
	            this.checkVirtualRowCount(event.page, event.lastRow);
	        }
	    };
	    RowNodeCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
	        var _this = this;
	        // no purge if user didn't give maxBlocksInCache
	        if (utils_1.Utils.missing(this.cacheParams.maxBlocksInCache)) {
	            return;
	        }
	        // no purge if block count is less than max allowed
	        if (this.blockCount <= this.cacheParams.maxBlocksInCache) {
	            return;
	        }
	        // put all candidate blocks into a list for sorting
	        var blocksForPurging = [];
	        this.forEachBlockInOrder(function (block) {
	            // we exclude checking for the page just created, as this has yet to be accessed and hence
	            // the lastAccessed stamp will not be updated for the first time yet
	            if (block === blockToExclude) {
	                return;
	            }
	            blocksForPurging.push(block);
	        });
	        // todo: need to verify that this sorts items in the right order
	        blocksForPurging.sort(function (a, b) { return b.getLastAccessed() - a.getLastAccessed(); });
	        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
	        // in other words, after the splice operation below, we have taken out the blocks
	        // we want to keep, which means we are left with blocks that we can potentially purge
	        var blocksToKeep = this.cacheParams.maxBlocksInCache - 1;
	        blocksForPurging.splice(0, blocksToKeep);
	        // try and purge each block
	        blocksForPurging.forEach(function (block) {
	            // we never purge blocks if they are open, as purging them would mess up with
	            // our indexes, it would be very messy to restore the purged block to it's
	            // previous state if it had open children (and what if open children of open
	            // children, jeeeesus, just thinking about it freaks me out) so best is have a
	            // rule, if block is open, we never purge.
	            if (block.isAnyNodeOpen(_this.virtualRowCount)) {
	                return;
	            }
	            // at this point, block is not needed, and no open nodes, so burn baby burn
	            _this.removeBlockFromCache(block);
	        });
	    };
	    RowNodeCache.prototype.postCreateBlock = function (newBlock) {
	        newBlock.addEventListener(rowNodeBlock_1.RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
	        this.setBlock(newBlock.getBlockNumber(), newBlock);
	        this.purgeBlocksIfNeeded(newBlock);
	        this.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.removeBlockFromCache = function (pageToRemove) {
	        if (!pageToRemove) {
	            return;
	        }
	        this.destroyBlock(pageToRemove);
	        // we do not want to remove the 'loaded' event listener, as the
	        // concurrent loads count needs to be updated when the load is complete
	        // if the purged page is in loading state
	    };
	    // gets called after: 1) block loaded 2) block created 3) cache refresh
	    RowNodeCache.prototype.checkBlockToLoad = function () {
	        this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.checkVirtualRowCount = function (block, lastRow) {
	        // if client provided a last row, we always use it, as it could change between server calls
	        // if user deleted data and then called refresh on the grid.
	        if (typeof lastRow === 'number' && lastRow >= 0) {
	            this.virtualRowCount = lastRow;
	            this.maxRowFound = true;
	            this.onCacheUpdated();
	        }
	        else if (!this.maxRowFound) {
	            // otherwise, see if we need to add some virtual rows
	            var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
	            var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;
	            if (this.virtualRowCount < lastRowIndexPlusOverflow) {
	                this.virtualRowCount = lastRowIndexPlusOverflow;
	                this.onCacheUpdated();
	            }
	            else if (this.cacheParams.dynamicRowHeight) {
	                // the only other time is if dynamic row height, as loading rows
	                // will change the height of the block, given the height of the rows
	                // is only known after the row is loaded.
	                this.onCacheUpdated();
	            }
	        }
	    };
	    RowNodeCache.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        this.virtualRowCount = rowCount;
	        // if undefined is passed, we do not set this value, if one of {true,false}
	        // is passed, we do set the value.
	        if (utils_1.Utils.exists(maxRowFound)) {
	            this.maxRowFound = maxRowFound;
	        }
	        // if we are still searching, then the row count must not end at the end
	        // of a particular page, otherwise the searching will not pop into the
	        // next page
	        if (!this.maxRowFound) {
	            if (this.virtualRowCount % this.cacheParams.blockSize === 0) {
	                this.virtualRowCount++;
	            }
	        }
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.forEachNodeDeep = function (callback, sequence) {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) {
	            block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
	        });
	    };
	    RowNodeCache.prototype.forEachBlockInOrder = function (callback) {
	        var ids = this.getBlockIdsSorted();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockInReverseOrder = function (callback) {
	        var ids = this.getBlockIdsSorted().reverse();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockId = function (ids, callback) {
	        var _this = this;
	        ids.forEach(function (id) {
	            var block = _this.blocks[id];
	            callback(block, id);
	        });
	    };
	    RowNodeCache.prototype.getBlockIdsSorted = function () {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var numberComparator = function (a, b) { return a - b; }; // default comparator for array is string comparison
	        var blockIds = Object.keys(this.blocks).map(function (idStr) { return parseInt(idStr); }).sort(numberComparator);
	        return blockIds;
	    };
	    RowNodeCache.prototype.getBlock = function (blockId) {
	        return this.blocks[blockId];
	    };
	    RowNodeCache.prototype.setBlock = function (id, block) {
	        this.blocks[id] = block;
	        this.blockCount++;
	        this.cacheParams.rowNodeBlockLoader.addBlock(block);
	    };
	    RowNodeCache.prototype.destroyBlock = function (block) {
	        delete this.blocks[block.getBlockNumber()];
	        block.destroy();
	        this.blockCount--;
	        this.cacheParams.rowNodeBlockLoader.removeBlock(block);
	    };
	    // gets called 1) row count changed 2) cache purged 3) items inserted
	    RowNodeCache.prototype.onCacheUpdated = function () {
	        if (this.isActive()) {
	            // this results in both row models (infinite and enterprise) firing ModelUpdated,
	            // however enterprise also updates the row indexes first
	            var event_1 = {
	                type: RowNodeCache.EVENT_CACHE_UPDATED
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    RowNodeCache.prototype.purgeCache = function () {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) { return _this.removeBlockFromCache(block); });
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
	        var _this = this;
	        var result = [];
	        var lastBlockId = -1;
	        var inActiveRange = false;
	        var numberSequence = new utils_1.NumberSequence();
	        // if only one node passed, we start the selection at the top
	        if (utils_1.Utils.missing(firstInRange)) {
	            inActiveRange = true;
	        }
	        var foundGapInSelection = false;
	        this.forEachBlockInOrder(function (block, id) {
	            if (foundGapInSelection)
	                return;
	            if (inActiveRange && (lastBlockId + 1 !== id)) {
	                foundGapInSelection = true;
	                return;
	            }
	            lastBlockId = id;
	            block.forEachNodeShallow(function (rowNode) {
	                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
	                if (inActiveRange || hitFirstOrLast) {
	                    result.push(rowNode);
	                }
	                if (hitFirstOrLast) {
	                    inActiveRange = !inActiveRange;
	                }
	            }, numberSequence, _this.virtualRowCount);
	        });
	        // inActiveRange will be still true if we never hit the second rowNode
	        var invalidRange = foundGapInSelection || inActiveRange;
	        return invalidRange ? [] : result;
	    };
	    RowNodeCache.EVENT_CACHE_UPDATED = 'cacheUpdated';
	    return RowNodeCache;
	}(beanStub_1.BeanStub));
	exports.RowNodeCache = RowNodeCache;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNodeBlock_1 = __webpack_require__(405);
	var logger_1 = __webpack_require__(286);
	var context_1 = __webpack_require__(287);
	var utils_1 = __webpack_require__(288);
	var RowNodeBlockLoader = (function () {
	    function RowNodeBlockLoader(maxConcurrentRequests) {
	        this.activeBlockLoadsCount = 0;
	        this.blocks = [];
	        this.active = true;
	        this.maxConcurrentRequests = maxConcurrentRequests;
	    }
	    RowNodeBlockLoader.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('RowNodeBlockLoader');
	    };
	    RowNodeBlockLoader.prototype.addBlock = function (block) {
	        this.blocks.push(block);
	    };
	    RowNodeBlockLoader.prototype.removeBlock = function (block) {
	        utils_1._.removeFromArray(this.blocks, block);
	    };
	    RowNodeBlockLoader.prototype.destroy = function () {
	        this.active = false;
	    };
	    RowNodeBlockLoader.prototype.loadComplete = function () {
	        this.activeBlockLoadsCount--;
	    };
	    RowNodeBlockLoader.prototype.checkBlockToLoad = function () {
	        if (!this.active) {
	            return;
	        }
	        this.printCacheStatus();
	        if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
	            this.logger.log("checkBlockToLoad: max loads exceeded");
	            return;
	        }
	        var blockToLoad = null;
	        this.blocks.forEach(function (block) {
	            if (block.getState() === rowNodeBlock_1.RowNodeBlock.STATE_DIRTY) {
	                blockToLoad = block;
	            }
	        });
	        if (blockToLoad) {
	            blockToLoad.load();
	            this.activeBlockLoadsCount++;
	            this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
	            this.printCacheStatus();
	        }
	        else {
	            this.logger.log("checkBlockToLoad: no pages to load");
	        }
	    };
	    RowNodeBlockLoader.prototype.getBlockState = function () {
	        var result = {};
	        this.blocks.forEach(function (block) {
	            var nodeIdPrefix = block.getNodeIdPrefix();
	            var stateItem = {
	                blockNumber: block.getBlockNumber(),
	                startRow: block.getStartRow(),
	                endRow: block.getEndRow(),
	                pageStatus: block.getState()
	            };
	            if (utils_1._.exists(nodeIdPrefix)) {
	                result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
	            }
	            else {
	                result[block.getBlockNumber()] = stateItem;
	            }
	        });
	        return result;
	    };
	    RowNodeBlockLoader.prototype.printCacheStatus = function () {
	        if (this.logger.isLogging()) {
	            this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + ","
	                + (" blocks = " + JSON.stringify(this.getBlockState())));
	        }
	    };
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowNodeBlockLoader.prototype, "setBeans", null);
	    return RowNodeBlockLoader;
	}());
	exports.RowNodeBlockLoader = RowNodeBlockLoader;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var constants_1 = __webpack_require__(289);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var columnController_1 = __webpack_require__(297);
	var filterManager_1 = __webpack_require__(334);
	var rowNode_1 = __webpack_require__(312);
	var eventService_1 = __webpack_require__(285);
	var events_1 = __webpack_require__(291);
	var context_1 = __webpack_require__(287);
	var selectionController_1 = __webpack_require__(309);
	var inMemoryNodeManager_1 = __webpack_require__(409);
	var changedPath_1 = __webpack_require__(410);
	var valueService_1 = __webpack_require__(313);
	var valueCache_1 = __webpack_require__(314);
	var gridApi_1 = __webpack_require__(294);
	var RecursionType;
	(function (RecursionType) {
	    RecursionType[RecursionType["Normal"] = 0] = "Normal";
	    RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
	    RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
	    RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
	})(RecursionType || (RecursionType = {}));
	;
	var InMemoryRowModel = (function () {
	    function InMemoryRowModel() {
	    }
	    InMemoryRowModel.prototype.init = function () {
	        var refreshEverythingFunc = this.refreshModel.bind(this, { step: constants_1.Constants.STEP_EVERYTHING });
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingFunc);
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_PIVOT }));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
	        var refreshMapFunc = this.refreshModel.bind(this, { step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, animate: true });
	        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);
	        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);
	        this.rootNode = new rowNode_1.RowNode();
	        this.nodeManager = new inMemoryNodeManager_1.InMemoryNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController);
	        this.context.wireBean(this.rootNode);
	    };
	    InMemoryRowModel.prototype.isLastRowFound = function () {
	        return true;
	    };
	    InMemoryRowModel.prototype.getRowCount = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.getRowBounds = function (index) {
	        if (utils_1.Utils.missing(this.rowsToDisplay)) {
	            return null;
	        }
	        var rowNode = this.rowsToDisplay[index];
	        if (rowNode) {
	            return {
	                rowTop: rowNode.rowTop,
	                rowHeight: rowNode.rowHeight
	            };
	        }
	        else {
	            return null;
	        }
	    };
	    InMemoryRowModel.prototype.onRowGroupOpened = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, animate: animate });
	    };
	    InMemoryRowModel.prototype.onFilterChanged = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });
	    };
	    InMemoryRowModel.prototype.onSortChanged = function () {
	        // we only act on the sort event here if the user is doing in grid sorting.
	        // we ignore it if the sorting is happening on the server side.
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            return;
	        }
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });
	    };
	    InMemoryRowModel.prototype.getType = function () {
	        return constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	    };
	    InMemoryRowModel.prototype.onValueChanged = function () {
	        if (this.columnController.isPivotActive()) {
	            this.refreshModel({ step: constants_1.Constants.STEP_PIVOT });
	        }
	        else {
	            this.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });
	        }
	    };
	    InMemoryRowModel.prototype.createChangePath = function (transaction) {
	        if (!transaction) {
	            return null;
	        }
	        // for updates, if the row is updated at all, then we re-calc all the values
	        // in that row. we could compare each value to each old value, however if we
	        // did this, we would be calling the valueService twice, once on the old value
	        // and once on the new value. so it's less valueGetter calls if we just assume
	        // each column is different. that way the changedPath is used so that only
	        // the impacted parent rows are recalculated, parents who's children have
	        // not changed are not impacted.
	        var valueColumns = this.columnController.getValueColumns();
	        if (!valueColumns || valueColumns.length === 0) {
	            return null;
	        }
	        var changedPath = new changedPath_1.ChangedPath(false);
	        return changedPath;
	    };
	    InMemoryRowModel.prototype.refreshModel = function (params) {
	        // this goes through the pipeline of stages. what's in my head is similar
	        // to the diagram on this page:
	        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
	        // however we want to keep the results of each stage, hence we manually call
	        // each step rather than have them chain each other.
	        var _this = this;
	        // fallthrough in below switch is on purpose,
	        // eg if STEP_FILTER, then all steps below this
	        // step get done
	        // let start: number;
	        // console.log('======= start =======');
	        var changedPath = this.createChangePath(params.rowNodeTransaction);
	        switch (params.step) {
	            case constants_1.Constants.STEP_EVERYTHING:
	                // start = new Date().getTime();
	                this.doRowGrouping(params.groupState, params.rowNodeTransaction, params.rowNodeOrder, changedPath);
	            // console.log('rowGrouping = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_FILTER:
	                // start = new Date().getTime();
	                this.doFilter();
	            // console.log('filter = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_PIVOT:
	                this.doPivot();
	            case constants_1.Constants.STEP_AGGREGATE:// depends on agg fields
	                // start = new Date().getTime();
	                this.doAggregate(changedPath);
	            // console.log('aggregation = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_SORT:
	                // start = new Date().getTime();
	                this.doSort();
	            // console.log('sort = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_MAP:
	                // start = new Date().getTime();
	                this.doRowsToDisplay();
	        }
	        var event = {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            animate: params.animate,
	            keepRenderedRows: params.keepRenderedRows,
	            newData: params.newData,
	            newPage: false
	        };
	        this.eventService.dispatchEvent(event);
	        if (this.$scope) {
	            setTimeout(function () {
	                _this.$scope.$apply();
	            }, 0);
	        }
	    };
	    InMemoryRowModel.prototype.isEmpty = function () {
	        var rowsMissing;
	        var doingLegacyTreeData = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (doingLegacyTreeData) {
	            rowsMissing = utils_1.Utils.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;
	        }
	        else {
	            rowsMissing = utils_1.Utils.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
	        }
	        var empty = utils_1.Utils.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
	        return empty;
	    };
	    InMemoryRowModel.prototype.isRowsToRender = function () {
	        return utils_1.Utils.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
	    };
	    InMemoryRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        // if lastSelectedNode is missing, we start at the first row
	        var firstRowHit = !lastInRange;
	        var lastRowHit = false;
	        var lastRow;
	        var result = [];
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.forEachNodeAfterFilterAndSort(function (rowNode) {
	            var lookingForLastRow = firstRowHit && !lastRowHit;
	            // check if we need to flip the select switch
	            if (!firstRowHit) {
	                if (rowNode === lastInRange || rowNode === firstInRange) {
	                    firstRowHit = true;
	                }
	            }
	            var skipThisGroupNode = rowNode.group && groupsSelectChildren;
	            if (!skipThisGroupNode) {
	                var inRange = firstRowHit && !lastRowHit;
	                var childOfLastRow = rowNode.isParentOfNode(lastRow);
	                if (inRange || childOfLastRow) {
	                    result.push(rowNode);
	                }
	            }
	            if (lookingForLastRow) {
	                if (rowNode === lastInRange || rowNode === firstInRange) {
	                    lastRowHit = true;
	                    if (rowNode === lastInRange) {
	                        lastRow = lastInRange;
	                    }
	                    else {
	                        lastRow = firstInRange;
	                    }
	                }
	            }
	        });
	        return result;
	    };
	    InMemoryRowModel.prototype.setDatasource = function (datasource) {
	        console.error('ag-Grid: should never call setDatasource on inMemoryRowController');
	    };
	    InMemoryRowModel.prototype.getTopLevelNodes = function () {
	        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
	    };
	    InMemoryRowModel.prototype.getRootNode = function () {
	        return this.rootNode;
	    };
	    InMemoryRowModel.prototype.getRow = function (index) {
	        return this.rowsToDisplay[index];
	    };
	    InMemoryRowModel.prototype.isRowPresent = function (rowNode) {
	        return this.rowsToDisplay.indexOf(rowNode) >= 0;
	    };
	    InMemoryRowModel.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: rowModel.getVirtualRowCount() is not longer a function, use rowModel.getRowCount() instead');
	        return this.getPageLastRow();
	    };
	    InMemoryRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    InMemoryRowModel.prototype.getPageLastRow = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length - 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {
	        if (this.isEmpty()) {
	            return -1;
	        }
	        // do binary search of tree
	        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	        var bottomPointer = 0;
	        var topPointer = this.rowsToDisplay.length - 1;
	        // quick check, if the pixel is out of bounds, then return last row
	        if (pixelToMatch <= 0) {
	            // if pixel is less than or equal zero, it's always the first row
	            return 0;
	        }
	        var lastNode = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	        if (lastNode.rowTop <= pixelToMatch) {
	            return this.rowsToDisplay.length - 1;
	        }
	        while (true) {
	            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
	            var currentRowNode = this.rowsToDisplay[midPointer];
	            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
	                return midPointer;
	            }
	            else if (currentRowNode.rowTop < pixelToMatch) {
	                bottomPointer = midPointer + 1;
	            }
	            else if (currentRowNode.rowTop > pixelToMatch) {
	                topPointer = midPointer - 1;
	            }
	        }
	    };
	    InMemoryRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {
	        var topPixel = rowNode.rowTop;
	        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
	        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
	        return pixelInRow;
	    };
	    InMemoryRowModel.prototype.getCurrentPageHeight = function () {
	        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
	            var lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	            var lastPixel = lastRow.rowTop + lastRow.rowHeight;
	            return lastPixel;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.forEachLeafNode = function (callback) {
	        if (this.rootNode.allLeafChildren) {
	            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });
	        }
	    };
	    InMemoryRowModel.prototype.forEachNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
	    };
	    InMemoryRowModel.prototype.forEachNodeAfterFilter = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
	    };
	    InMemoryRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
	    };
	    InMemoryRowModel.prototype.forEachPivotNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
	    };
	    // iterates through each item in memory, and calls the callback function
	    // nodes - the rowNodes to traverse
	    // callback - the user provided callback
	    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
	    // index - works similar to the index in forEach in javascripts array function
	    InMemoryRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                callback(node, index++);
	                // go to the next level if it is a group
	                if (node.hasChildren()) {
	                    // depending on the recursion type, we pick a difference set of children
	                    var nodeChildren = void 0;
	                    switch (recursionType) {
	                        case RecursionType.Normal:
	                            nodeChildren = node.childrenAfterGroup;
	                            break;
	                        case RecursionType.AfterFilter:
	                            nodeChildren = node.childrenAfterFilter;
	                            break;
	                        case RecursionType.AfterFilterAndSort:
	                            nodeChildren = node.childrenAfterSort;
	                            break;
	                        case RecursionType.PivotNodes:
	                            // for pivot, we don't go below leafGroup levels
	                            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
	                            break;
	                    }
	                    if (nodeChildren) {
	                        index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
	                    }
	                }
	            }
	        }
	        return index;
	    };
	    // it's possible to recompute the aggregate without doing the other parts
	    // + gridApi.recomputeAggregates()
	    InMemoryRowModel.prototype.doAggregate = function (changedPath) {
	        if (this.aggregationStage) {
	            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });
	        }
	    };
	    // + gridApi.expandAll()
	    // + gridApi.collapseAll()
	    InMemoryRowModel.prototype.expandOrCollapseAll = function (expand) {
	        if (this.rootNode) {
	            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
	        }
	        function recursiveExpandOrCollapse(rowNodes) {
	            if (!rowNodes) {
	                return;
	            }
	            rowNodes.forEach(function (rowNode) {
	                if (rowNode.group) {
	                    rowNode.expanded = expand;
	                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
	                }
	            });
	        }
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP });
	    };
	    InMemoryRowModel.prototype.doSort = function () {
	        this.sortStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransaction, rowNodeOrder, changedPath) {
	        // grouping is enterprise only, so if service missing, skip the step
	        var doingLegacyTreeData = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (doingLegacyTreeData) {
	            return;
	        }
	        if (this.groupStage) {
	            if (rowNodeTransaction) {
	                this.groupStage.execute({ rowNode: this.rootNode,
	                    rowNodeTransaction: rowNodeTransaction,
	                    rowNodeOrder: rowNodeOrder,
	                    changedPath: changedPath });
	            }
	            else {
	                // groups are about to get disposed, so need to deselect any that are selected
	                this.selectionController.removeGroupsFromSelection();
	                this.groupStage.execute({ rowNode: this.rootNode });
	                // set open/closed state on groups
	                this.restoreGroupState(groupState);
	            }
	            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
	                this.selectionController.updateGroupsFromChildrenSelections();
	            }
	        }
	        else {
	            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
	        }
	    };
	    InMemoryRowModel.prototype.restoreGroupState = function (groupState) {
	        if (!groupState) {
	            return;
	        }
	        utils_1.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
	            // if the group was open last time, then open it this time. however
	            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
	            // setting will take effect.
	            if (typeof groupState[key] === 'boolean') {
	                node.expanded = groupState[key];
	            }
	        });
	    };
	    InMemoryRowModel.prototype.doFilter = function () {
	        this.filterStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.doPivot = function () {
	        if (this.pivotStage) {
	            this.pivotStage.execute({ rowNode: this.rootNode });
	        }
	    };
	    InMemoryRowModel.prototype.getGroupState = function () {
	        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
	            return null;
	        }
	        var result = {};
	        utils_1.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });
	        return result;
	    };
	    InMemoryRowModel.prototype.getCopyOfNodesMap = function () {
	        return this.nodeManager.getCopyOfNodesMap();
	    };
	    InMemoryRowModel.prototype.getRowNode = function (id) {
	        return this.nodeManager.getRowNode(id);
	    };
	    // rows: the rows to put into the model
	    InMemoryRowModel.prototype.setRowData = function (rowData) {
	        // no need to invalidate cache, as the cache is stored on the rowNode,
	        // so new rowNodes means the cache is wiped anyway.
	        // remember group state, so we can expand groups that should be expanded
	        var groupState = this.getGroupState();
	        this.nodeManager.setRowData(rowData);
	        // this event kicks off:
	        // - clears selection
	        // - updates filters
	        // - shows 'no rows' overlay if needed
	        var rowDataChangedEvent = {
	            type: events_1.Events.EVENT_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(rowDataChangedEvent);
	        this.refreshModel({
	            step: constants_1.Constants.STEP_EVERYTHING,
	            groupState: groupState,
	            newData: true
	        });
	    };
	    InMemoryRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
	        this.valueCache.onDataChanged();
	        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
	        this.refreshModel({
	            step: constants_1.Constants.STEP_EVERYTHING,
	            rowNodeTransaction: rowNodeTran,
	            rowNodeOrder: rowNodeOrder,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        });
	        var event = {
	            type: events_1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        return rowNodeTran;
	    };
	    InMemoryRowModel.prototype.doRowsToDisplay = function () {
	        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.onRowHeightChanged = function () {
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });
	    };
	    InMemoryRowModel.prototype.resetRowHeights = function () {
	        this.forEachNode(function (rowNode) { return rowNode.setRowHeight(null); });
	        this.onRowHeightChanged();
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InMemoryRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], InMemoryRowModel.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], InMemoryRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], InMemoryRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InMemoryRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InMemoryRowModel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], InMemoryRowModel.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], InMemoryRowModel.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InMemoryRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InMemoryRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('filterStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "filterStage", void 0);
	    __decorate([
	        context_1.Autowired('sortStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "sortStage", void 0);
	    __decorate([
	        context_1.Autowired('flattenStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "flattenStage", void 0);
	    __decorate([
	        context_1.Optional('groupStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "groupStage", void 0);
	    __decorate([
	        context_1.Optional('aggregationStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "aggregationStage", void 0);
	    __decorate([
	        context_1.Optional('pivotStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "pivotStage", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InMemoryRowModel.prototype, "init", null);
	    InMemoryRowModel = __decorate([
	        context_1.Bean('rowModel')
	    ], InMemoryRowModel);
	    return InMemoryRowModel;
	}());
	exports.InMemoryRowModel = InMemoryRowModel;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNode_1 = __webpack_require__(312);
	var utils_1 = __webpack_require__(288);
	var InMemoryNodeManager = (function () {
	    function InMemoryNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController) {
	        this.nextId = 0;
	        // when user is provide the id's, we also keep a map of ids to row nodes for convenience
	        this.allNodesMap = {};
	        this.rootNode = rootNode;
	        this.gridOptionsWrapper = gridOptionsWrapper;
	        this.context = context;
	        this.eventService = eventService;
	        this.columnController = columnController;
	        this.rootNode.group = true;
	        this.rootNode.level = -1;
	        this.rootNode.id = InMemoryNodeManager.ROOT_NODE_ID;
	        this.rootNode.allLeafChildren = [];
	        this.rootNode.childrenAfterGroup = [];
	        this.rootNode.childrenAfterSort = [];
	        this.rootNode.childrenAfterFilter = [];
	        // if we make this class a bean, then can annotate postConstruct
	        this.postConstruct();
	    }
	    // @PostConstruct - this is not a bean, so postConstruct called by constructor
	    InMemoryNodeManager.prototype.postConstruct = function () {
	        // func below doesn't have 'this' pointer, so need to pull out these bits
	        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();
	        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
	        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();
	        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
	        this.doingLegacyTreeData = utils_1.Utils.exists(this.getNodeChildDetails);
	        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
	    };
	    InMemoryNodeManager.prototype.getCopyOfNodesMap = function () {
	        var result = utils_1.Utils.cloneObject(this.allNodesMap);
	        return result;
	    };
	    InMemoryNodeManager.prototype.getRowNode = function (id) {
	        return this.allNodesMap[id];
	    };
	    InMemoryNodeManager.prototype.setRowData = function (rowData) {
	        this.rootNode.childrenAfterFilter = null;
	        this.rootNode.childrenAfterGroup = null;
	        this.rootNode.childrenAfterSort = null;
	        this.rootNode.childrenMapped = null;
	        this.nextId = 0;
	        this.allNodesMap = {};
	        if (!rowData) {
	            this.rootNode.allLeafChildren = [];
	            this.rootNode.childrenAfterGroup = [];
	            return;
	        }
	        // kick off recursion
	        var result = this.recursiveFunction(rowData, null, InMemoryNodeManager.TOP_LEVEL);
	        if (this.doingLegacyTreeData) {
	            this.rootNode.childrenAfterGroup = result;
	            this.setLeafChildren(this.rootNode);
	        }
	        else {
	            this.rootNode.allLeafChildren = result;
	        }
	    };
	    InMemoryNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {
	        var _this = this;
	        if (this.isLegacyTreeData()) {
	            return null;
	        }
	        var add = rowDataTran.add, addIndex = rowDataTran.addIndex, remove = rowDataTran.remove, update = rowDataTran.update;
	        var rowNodeTransaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        if (utils_1.Utils.exists(add)) {
	            var useIndex = typeof addIndex === 'number' && addIndex >= 0;
	            if (useIndex) {
	                // items get inserted in reverse order for index insertion
	                add.reverse().forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item, addIndex);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	            else {
	                add.forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	        }
	        if (utils_1.Utils.exists(remove)) {
	            remove.forEach(function (item) {
	                var removedRowNode = _this.updatedRowNode(item, false);
	                if (removedRowNode) {
	                    rowNodeTransaction.remove.push(removedRowNode);
	                }
	            });
	        }
	        if (utils_1.Utils.exists(update)) {
	            update.forEach(function (item) {
	                var updatedRowNode = _this.updatedRowNode(item, true);
	                if (updatedRowNode) {
	                    rowNodeTransaction.update.push(updatedRowNode);
	                }
	            });
	        }
	        if (rowNodeOrder) {
	            utils_1.Utils.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
	        }
	        return rowNodeTransaction;
	    };
	    InMemoryNodeManager.prototype.addRowNode = function (data, index) {
	        var newNode = this.createNode(data, null, InMemoryNodeManager.TOP_LEVEL);
	        if (utils_1.Utils.exists(index)) {
	            utils_1.Utils.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
	        }
	        else {
	            this.rootNode.allLeafChildren.push(newNode);
	        }
	        return newNode;
	    };
	    InMemoryNodeManager.prototype.updatedRowNode = function (data, update) {
	        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        var rowNode;
	        if (utils_1.Utils.exists(rowNodeIdFunc)) {
	            // find rowNode us id
	            var id = rowNodeIdFunc(data);
	            rowNode = this.allNodesMap[id];
	            if (!rowNode) {
	                console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
	                return null;
	            }
	        }
	        else {
	            // find rowNode using object references
	            rowNode = utils_1.Utils.find(this.rootNode.allLeafChildren, function (rowNode) { return rowNode.data === data; });
	            if (!rowNode) {
	                console.error("ag-Grid: could not find data item as object was not found", data);
	                return null;
	            }
	        }
	        if (update) {
	            // do update
	            rowNode.updateData(data);
	        }
	        else {
	            // do delete
	            rowNode.setSelected(false);
	            utils_1.Utils.removeFromArray(this.rootNode.allLeafChildren, rowNode);
	            this.allNodesMap[rowNode.id] = undefined;
	        }
	        return rowNode;
	    };
	    InMemoryNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {
	        var _this = this;
	        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum
	        if (typeof rowData === 'string') {
	            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');
	            return;
	        }
	        var rowNodes = [];
	        rowData.forEach(function (dataItem) {
	            var node = _this.createNode(dataItem, parent, level);
	            rowNodes.push(node);
	        });
	        return rowNodes;
	    };
	    InMemoryNodeManager.prototype.createNode = function (dataItem, parent, level) {
	        var node = new rowNode_1.RowNode();
	        this.context.wireBean(node);
	        var doingTreeData = this.gridOptionsWrapper.isTreeData();
	        var doingLegacyTreeData = !doingTreeData && utils_1.Utils.exists(this.getNodeChildDetails);
	        var nodeChildDetails = doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;
	        if (nodeChildDetails && nodeChildDetails.group) {
	            node.group = true;
	            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);
	            node.expanded = nodeChildDetails.expanded === true;
	            node.field = nodeChildDetails.field;
	            node.key = nodeChildDetails.key;
	            node.canFlower = node.master; // deprecated, is now 'master'
	            // pull out all the leaf children and add to our node
	            this.setLeafChildren(node);
	        }
	        else {
	            node.group = false;
	            if (doingTreeData) {
	                node.master = false;
	                node.expanded = false;
	            }
	            else {
	                // this is the default, for when doing grid data
	                if (this.doesDataFlower) {
	                    node.master = this.doesDataFlower(dataItem);
	                }
	                else if (this.doingMasterDetail) {
	                    // if we are doing master detail, then the
	                    // default is that everything can flower.
	                    if (this.isRowMasterFunc) {
	                        node.master = this.isRowMasterFunc(dataItem);
	                    }
	                    else {
	                        node.master = true;
	                    }
	                }
	                else {
	                    node.master = false;
	                }
	                node.expanded = node.master ? this.isExpanded(level) : false;
	            }
	        }
	        // support for backwards compatibility, canFlow is now called 'master'
	        node.canFlower = node.master;
	        if (parent && !this.suppressParentsInRowNodes) {
	            node.parent = parent;
	        }
	        node.level = level;
	        node.setDataAndId(dataItem, this.nextId.toString());
	        this.allNodesMap[node.id] = node;
	        this.nextId++;
	        return node;
	    };
	    InMemoryNodeManager.prototype.isExpanded = function (level) {
	        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
	        if (expandByDefault === -1) {
	            return true;
	        }
	        else {
	            return level < expandByDefault;
	        }
	    };
	    // this is only used for doing legacy tree data
	    InMemoryNodeManager.prototype.setLeafChildren = function (node) {
	        node.allLeafChildren = [];
	        if (node.childrenAfterGroup) {
	            node.childrenAfterGroup.forEach(function (childAfterGroup) {
	                if (childAfterGroup.group) {
	                    if (childAfterGroup.allLeafChildren) {
	                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });
	                    }
	                }
	                else {
	                    node.allLeafChildren.push(childAfterGroup);
	                }
	            });
	        }
	    };
	    InMemoryNodeManager.prototype.insertItemsAtIndex = function (index, rowData) {
	        if (this.isLegacyTreeData()) {
	            return null;
	        }
	        var nodeList = this.rootNode.allLeafChildren;
	        if (index > nodeList.length) {
	            console.warn("ag-Grid: invalid index " + index + ", max index is " + nodeList.length);
	            return;
	        }
	        var newNodes = [];
	        // go through the items backwards, otherwise they get added in reverse order
	        for (var i = rowData.length - 1; i >= 0; i--) {
	            var data = rowData[i];
	            var newNode = this.createNode(data, null, InMemoryNodeManager.TOP_LEVEL);
	            utils_1.Utils.insertIntoArray(nodeList, newNode, index);
	            newNodes.push(newNode);
	        }
	        return newNodes.length > 0 ? newNodes : null;
	    };
	    InMemoryNodeManager.prototype.addItems = function (items) {
	        var nodeList = this.rootNode.allLeafChildren;
	        return this.insertItemsAtIndex(nodeList.length, items);
	    };
	    InMemoryNodeManager.prototype.isLegacyTreeData = function () {
	        var rowsAlreadyGrouped = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' +
	                'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    InMemoryNodeManager.TOP_LEVEL = 0;
	    InMemoryNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';
	    return InMemoryNodeManager;
	}());
	exports.InMemoryNodeManager = InMemoryNodeManager;


/***/ }),
/* 410 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ChangedPath = (function () {
	    function ChangedPath(keepingColumns) {
	        this.nodeIdsToBoolean = {};
	        this.nodeIdsToColumns = {};
	        this.keepingColumns = keepingColumns;
	    }
	    ChangedPath.prototype.addParentNode = function (rowNode, columns) {
	        var _this = this;
	        var pointer = rowNode;
	        while (pointer) {
	            // add this item to the path, all the way to parent
	            this.nodeIdsToBoolean[pointer.id] = true;
	            // if columns, add the columns in all the way to parent, merging
	            // in any other columns that might be there already
	            if (this.keepingColumns && columns) {
	                if (!this.nodeIdsToColumns[pointer.id]) {
	                    this.nodeIdsToColumns[pointer.id] = {};
	                }
	                columns.forEach(function (col) { return _this.nodeIdsToColumns[pointer.id][col.getId()] = true; });
	            }
	            pointer = pointer.parent;
	        }
	    };
	    ChangedPath.prototype.isInPath = function (rowNode) {
	        return this.nodeIdsToBoolean[rowNode.id];
	    };
	    ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {
	        if (!this.keepingColumns) {
	            return valueColumns;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return colsForThisNode[col.getId()]; });
	        return result;
	    };
	    ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {
	        if (!this.keepingColumns) {
	            return null;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return !colsForThisNode[col.getId()]; });
	        return result;
	    };
	    return ChangedPath;
	}());
	exports.ChangedPath = ChangedPath;


/***/ }),
/* 411 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */
	var BaseFrameworkFactory = (function () {
	    function BaseFrameworkFactory() {
	    }
	    BaseFrameworkFactory.prototype.dateComponent = function (gridOptions) {
	        return gridOptions.dateComponent;
	    };
	    BaseFrameworkFactory.prototype.colDefFloatingCellRenderer = function (colDef) {
	        return colDef.pinnedRowCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellRenderer = function (colDef) {
	        return colDef.cellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellEditor = function (colDef) {
	        return colDef.cellEditor;
	    };
	    BaseFrameworkFactory.prototype.colDefFilter = function (colDef) {
	        return colDef.filter;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsFullWidthCellRenderer = function (gridOptions) {
	        return gridOptions.fullWidthCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowRenderer = function (gridOptions) {
	        return gridOptions.groupRowRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowInnerRenderer = function (gridOptions) {
	        return gridOptions.groupRowInnerRenderer;
	    };
	    BaseFrameworkFactory.prototype.setTimeout = function (action, timeout) {
	        setTimeout(action, timeout);
	    };
	    return BaseFrameworkFactory;
	}());
	exports.BaseFrameworkFactory = BaseFrameworkFactory;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var LINE_SEPARATOR = '\r\n';
	var XmlFactory = (function () {
	    function XmlFactory() {
	    }
	    XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {
	        var _this = this;
	        var props = "";
	        if (xmlElement.properties) {
	            if (xmlElement.properties.prefixedAttributes) {
	                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
	                    Object.keys(prefixedSet.map).forEach(function (key) {
	                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
	                    });
	                });
	            }
	            if (xmlElement.properties.rawMap) {
	                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
	                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
	                });
	            }
	        }
	        var result = "<" + xmlElement.name + props;
	        if (!xmlElement.children && xmlElement.textNode == null) {
	            return result + "/>" + LINE_SEPARATOR;
	        }
	        if (xmlElement.textNode != null) {
	            return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	        }
	        result += ">" + LINE_SEPARATOR;
	        xmlElement.children.forEach(function (it) {
	            result += _this.createXml(it, booleanTransformer);
	        });
	        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	    };
	    XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
	        if (!value) {
	            return "";
	        }
	        var xmlValue = value;
	        if ((typeof (value) === 'boolean')) {
	            if (booleanTransformer) {
	                xmlValue = booleanTransformer(value);
	            }
	        }
	        xmlValue = '"' + xmlValue + '"';
	        return " " + key + "=" + xmlValue;
	    };
	    XmlFactory = __decorate([
	        context_1.Bean('xmlFactory')
	    ], XmlFactory);
	    return XmlFactory;
	}());
	exports.XmlFactory = XmlFactory;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNode_1 = __webpack_require__(312);
	var inMemoryNodeManager_1 = __webpack_require__(409);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var eventService_1 = __webpack_require__(285);
	var context_1 = __webpack_require__(287);
	var columnController_1 = __webpack_require__(297);
	var RowNodeFactory = (function () {
	    function RowNodeFactory() {
	    }
	    RowNodeFactory.prototype.create = function (data) {
	        var rootNode = new rowNode_1.RowNode();
	        var nodeManager = new inMemoryNodeManager_1.InMemoryNodeManager(rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController);
	        this.context.wireBean(rootNode);
	        nodeManager.setRowData(data);
	        return rootNode;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowNodeFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowNodeFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowNodeFactory.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowNodeFactory.prototype, "columnController", void 0);
	    RowNodeFactory = __decorate([
	        context_1.Bean("rowNodeFactory")
	    ], RowNodeFactory);
	    return RowNodeFactory;
	}());
	exports.RowNodeFactory = RowNodeFactory;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(287);
	var gridOptionsWrapper_1 = __webpack_require__(284);
	var changedPath_1 = __webpack_require__(410);
	var rowRenderer_1 = __webpack_require__(305);
	var eventService_1 = __webpack_require__(285);
	var constants_1 = __webpack_require__(289);
	var beanStub_1 = __webpack_require__(318);
	var events_1 = __webpack_require__(291);
	var ChangeDetectionService = (function (_super) {
	    __extends(ChangeDetectionService, _super);
	    function ChangeDetectionService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ChangeDetectionService.prototype.init = function () {
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            this.inMemoryRowModel = this.rowModel;
	        }
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
	    };
	    ChangeDetectionService.prototype.onCellValueChanged = function (event) {
	        this.doChangeDetection(event.node, event.column);
	    };
	    ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {
	        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            return;
	        }
	        // step 1 of change detection is to update the aggregated values
	        if (this.inMemoryRowModel) {
	            var changedPath = void 0;
	            if (rowNode.parent) {
	                var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
	                changedPath = new changedPath_1.ChangedPath(onlyChangedColumns);
	                changedPath.addParentNode(rowNode.parent, [column]);
	            }
	            this.inMemoryRowModel.doAggregate(changedPath);
	        }
	        // step 2 of change detection is to refresh the cells
	        this.rowRenderer.refreshCells();
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ChangeDetectionService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ChangeDetectionService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], ChangeDetectionService.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ChangeDetectionService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ChangeDetectionService.prototype, "init", null);
	    ChangeDetectionService = __decorate([
	        context_1.Bean('changeDetectionService')
	    ], ChangeDetectionService);
	    return ChangeDetectionService;
	}(beanStub_1.BeanStub));
	exports.ChangeDetectionService = ChangeDetectionService;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var componentUtil_1 = __webpack_require__(290);
	var grid_1 = __webpack_require__(395);
	var registered = false;
	function initialiseAgGridWithWebComponents() {
	    console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');
	    // only register to WebComponents once
	    if (registered) {
	        return;
	    }
	    registered = true;
	    if (typeof document === 'undefined' || !document.registerElement) {
	        console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');
	    }
	    // i don't think this type of extension is possible in TypeScript, so back to
	    // plain Javascript to create this object
	    var AgileGridProto = Object.create(HTMLElement.prototype);
	    // wrap each property with a get and set method, so we can track when changes are done
	    componentUtil_1.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
	        Object.defineProperty(AgileGridProto, key, {
	            set: function (v) {
	                this.__agGridSetProperty(key, v);
	            },
	            get: function () {
	                return this.__agGridGetProperty(key);
	            },
	            enumerable: true,
	            configurable: true
	        });
	    });
	    var agGridProtoNoType = AgileGridProto;
	    agGridProtoNoType.__agGridSetProperty = function (key, value) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        this.__attributes[key] = value;
	        // keeping this consistent with the ng2 onChange, so I can reuse the handling code
	        var changeObject = {};
	        changeObject[key] = { currentValue: value };
	        this.onChange(changeObject);
	    };
	    agGridProtoNoType.onChange = function (changes) {
	        if (this._initialised) {
	            componentUtil_1.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
	        }
	    };
	    agGridProtoNoType.__agGridGetProperty = function (key) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        return this.__attributes[key];
	    };
	    agGridProtoNoType.setGridOptions = function (options) {
	        var globalEventListener = this.globalEventListener.bind(this);
	        this._gridOptions = componentUtil_1.ComponentUtil.copyAttributesToGridOptions(options, this);
	        var gridParams = {
	            globalEventListener: globalEventListener
	        };
	        this._agGrid = new grid_1.Grid(this, this._gridOptions, gridParams);
	        this.api = options.api;
	        this.columnApi = options.columnApi;
	        this._initialised = true;
	    };
	    // copies all the attributes into this object
	    agGridProtoNoType.createdCallback = function () {
	        for (var i = 0; i < this.attributes.length; i++) {
	            var attribute = this.attributes[i];
	            this.setPropertyFromAttribute(attribute);
	        }
	    };
	    agGridProtoNoType.setPropertyFromAttribute = function (attribute) {
	        var name = toCamelCase(attribute.nodeName);
	        var value = attribute.nodeValue;
	        if (componentUtil_1.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
	            this[name] = value;
	        }
	    };
	    agGridProtoNoType.attachedCallback = function (params) { };
	    agGridProtoNoType.detachedCallback = function (params) { };
	    agGridProtoNoType.attributeChangedCallback = function (attributeName) {
	        var attribute = this.attributes[attributeName];
	        this.setPropertyFromAttribute(attribute);
	    };
	    agGridProtoNoType.globalEventListener = function (eventType, event) {
	        var eventLowerCase = eventType.toLowerCase();
	        var browserEvent = new Event(eventLowerCase);
	        var browserEventNoType = browserEvent;
	        browserEventNoType.agGridDetails = event;
	        this.dispatchEvent(browserEvent);
	        var callbackMethod = 'on' + eventLowerCase;
	        if (typeof this[callbackMethod] === 'function') {
	            this[callbackMethod](browserEvent);
	        }
	    };
	    // finally, register
	    document.registerElement('ag-grid', { prototype: AgileGridProto });
	}
	exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
	function toCamelCase(myString) {
	    if (typeof myString === 'string') {
	        var result = myString.replace(/-([a-z])/g, function (g) {
	            return g[1].toUpperCase();
	        });
	        return result;
	    }
	    else {
	        return myString;
	    }
	}


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	var TabbedLayout = (function () {
	    function TabbedLayout(params) {
	        var _this = this;
	        this.items = [];
	        this.params = params;
	        this.eGui = document.createElement('div');
	        this.eGui.innerHTML = TabbedLayout.TEMPLATE;
	        this.eHeader = this.eGui.querySelector('#tabHeader');
	        this.eBody = this.eGui.querySelector('#tabBody');
	        utils_1.Utils.addCssClass(this.eGui, params.cssClass);
	        if (params.items) {
	            params.items.forEach(function (item) { return _this.addItem(item); });
	        }
	    }
	    TabbedLayout.prototype.setAfterAttachedParams = function (params) {
	        this.afterAttachedParams = params;
	    };
	    TabbedLayout.prototype.getMinWidth = function () {
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        this.eGui.appendChild(eDummyContainer);
	        var minWidth = 0;
	        this.items.forEach(function (itemWrapper) {
	            utils_1.Utils.removeAllChildren(eDummyContainer);
	            var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function (body) { return body.cloneNode(true); });
	            if (eClone == null)
	                return;
	            eDummyContainer.appendChild(eClone);
	            if (minWidth < eDummyContainer.offsetWidth) {
	                minWidth = eDummyContainer.offsetWidth;
	            }
	        });
	        this.eGui.removeChild(eDummyContainer);
	        return minWidth;
	    };
	    TabbedLayout.prototype.showFirstItem = function () {
	        if (this.items.length > 0) {
	            this.showItemWrapper(this.items[0]);
	        }
	    };
	    TabbedLayout.prototype.addItem = function (item) {
	        var eHeaderButton = document.createElement('span');
	        eHeaderButton.appendChild(item.title);
	        utils_1.Utils.addCssClass(eHeaderButton, 'ag-tab');
	        this.eHeader.appendChild(eHeaderButton);
	        var wrapper = {
	            tabbedItem: item,
	            eHeaderButton: eHeaderButton
	        };
	        this.items.push(wrapper);
	        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));
	    };
	    TabbedLayout.prototype.showItem = function (tabbedItem) {
	        var itemWrapper = utils_1.Utils.find(this.items, function (itemWrapper) {
	            return itemWrapper.tabbedItem === tabbedItem;
	        });
	        if (itemWrapper) {
	            this.showItemWrapper(itemWrapper);
	        }
	    };
	    TabbedLayout.prototype.showItemWrapper = function (wrapper) {
	        var _this = this;
	        if (this.params.onItemClicked) {
	            this.params.onItemClicked({ item: wrapper.tabbedItem });
	        }
	        if (this.activeItem === wrapper) {
	            utils_1.Utils.callIfPresent(this.params.onActiveItemClicked);
	            return;
	        }
	        utils_1.Utils.removeAllChildren(this.eBody);
	        wrapper.tabbedItem.bodyPromise.then(function (body) {
	            _this.eBody.appendChild(body);
	        });
	        if (this.activeItem) {
	            utils_1.Utils.removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');
	        }
	        utils_1.Utils.addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');
	        this.activeItem = wrapper;
	        if (wrapper.tabbedItem.afterAttachedCallback) {
	            wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
	        }
	    };
	    TabbedLayout.prototype.getGui = function () {
	        return this.eGui;
	    };
	    TabbedLayout.TEMPLATE = '<div>' +
	        '<div id="tabHeader" class="ag-tab-header"></div>' +
	        '<div id="tabBody" class="ag-tab-body"></div>' +
	        '</div>';
	    return TabbedLayout;
	}());
	exports.TabbedLayout = TabbedLayout;


/***/ }),
/* 417 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var VerticalStack = (function () {
	    function VerticalStack() {
	        this.isLayoutPanel = true;
	        this.childPanels = [];
	        this.eGui = document.createElement('div');
	        this.eGui.style.height = '100%';
	    }
	    VerticalStack.prototype.addPanel = function (panel, height) {
	        var component;
	        if (panel.isLayoutPanel) {
	            this.childPanels.push(panel);
	            component = panel.getGui();
	        }
	        else {
	            component = panel;
	        }
	        if (height) {
	            component.style.height = height;
	        }
	        this.eGui.appendChild(component);
	    };
	    VerticalStack.prototype.getGui = function () {
	        return this.eGui;
	    };
	    VerticalStack.prototype.doLayout = function () {
	        for (var i = 0; i < this.childPanels.length; i++) {
	            this.childPanels[i].doLayout();
	        }
	    };
	    return VerticalStack;
	}());
	exports.VerticalStack = VerticalStack;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	function simpleHttpRequest(params) {
	    return new utils_1.Promise(function (resolve) {
	        var httpRequest = new XMLHttpRequest();
	        httpRequest.open('GET', params.url);
	        httpRequest.send();
	        httpRequest.onreadystatechange = function () {
	            if (httpRequest.readyState == 4 && httpRequest.status == 200) {
	                var httpResponse = JSON.parse(httpRequest.responseText);
	                resolve(httpResponse);
	            }
	        };
	    });
	}
	exports.simpleHttpRequest = simpleHttpRequest;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(288);
	function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
	    if (accentedCompare === void 0) { accentedCompare = false; }
	    console.warn('ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');
	    var nodeAIsGroup = utils_1.Utils.exists(nodeA) && nodeA.group;
	    var nodeBIsGroup = utils_1.Utils.exists(nodeB) && nodeB.group;
	    var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
	    var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
	    if (bothAreGroups) {
	        return utils_1.Utils.defaultComparator(nodeA.key, nodeB.key, accentedCompare);
	    }
	    else if (bothAreNormal) {
	        return utils_1.Utils.defaultComparator(valueA, valueB, accentedCompare);
	    }
	    else if (nodeAIsGroup) {
	        return 1;
	    }
	    else {
	        return -1;
	    }
	}
	exports.defaultGroupComparator = defaultGroupComparator;


/***/ }),
/* 420 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v14.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var BaseComponentWrapper = (function () {
	    function BaseComponentWrapper() {
	    }
	    BaseComponentWrapper.prototype.wrap = function (OriginalConstructor, mandatoryMethodList, optionalMethodList, componentName) {
	        var _this = this;
	        var wrapper = this.createWrapper(OriginalConstructor, componentName);
	        mandatoryMethodList.forEach((function (methodName) {
	            _this.createMethod(wrapper, methodName, true);
	        }));
	        if (optionalMethodList) {
	            optionalMethodList.forEach((function (methodName) {
	                _this.createMethod(wrapper, methodName, false);
	            }));
	        }
	        return wrapper;
	    };
	    BaseComponentWrapper.prototype.createMethod = function (wrapper, methodName, mandatory) {
	        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
	    };
	    BaseComponentWrapper.prototype.createMethodProxy = function (wrapper, methodName, mandatory) {
	        return function () {
	            if (wrapper.hasMethod(methodName)) {
	                return wrapper.callMethod(methodName, arguments);
	            }
	            if (mandatory) {
	                console.warn('ag-Grid: Framework component is missing the method ' + methodName + '()');
	            }
	            return null;
	        };
	    };
	    return BaseComponentWrapper;
	}());
	exports.BaseComponentWrapper = BaseComponentWrapper;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-react v14.2.0
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(159);
	var AgGrid = __webpack_require__(282);
	var ag_grid_1 = __webpack_require__(282);
	var AgReactComponent = /** @class */ (function () {
	    function AgReactComponent(reactComponent, parentComponent) {
	        this.reactComponent = reactComponent;
	        this.parentComponent = parentComponent;
	    }
	    AgReactComponent.prototype.getFrameworkComponentInstance = function () {
	        return this.componentRef;
	    };
	    AgReactComponent.prototype.init = function (params) {
	        var _this = this;
	        return new ag_grid_1.Promise(function (resolve) {
	            _this.eParentElement = document.createElement('div');
	            AgGrid.Utils.addCssClass(_this.eParentElement, 'ag-react-container');
	            // so user can have access to the react container,
	            // to add css class or style
	            params.reactContainer = _this.eParentElement;
	            var self = _this;
	            var ReactComponent = React.createElement(_this.reactComponent, params);
	            if (!_this.parentComponent) {
	                // MUST be a function, not an arrow function
	                ReactDOM.render(ReactComponent, _this.eParentElement, function () {
	                    self.componentRef = this;
	                    resolve(null);
	                });
	            }
	            else {
	                // MUST be a function, not an arrow function
	                ReactDOM.unstable_renderSubtreeIntoContainer(_this.parentComponent, ReactComponent, _this.eParentElement, function () {
	                    self.componentRef = this;
	                    resolve(null);
	                });
	            }
	        });
	    };
	    AgReactComponent.prototype.getGui = function () {
	        return this.eParentElement;
	    };
	    AgReactComponent.prototype.destroy = function () {
	        ReactDOM.unmountComponentAtNode(this.eParentElement);
	    };
	    return AgReactComponent;
	}());
	exports.AgReactComponent = AgReactComponent;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function(f) {
	  if (true) {
	    module.exports = f(__webpack_require__(2));
	    /* global define */
	  } else if (typeof define === 'function' && define.amd) {
	    define(['react'], f);
	  } else {
	    var g;
	    if (typeof window !== 'undefined') {
	      g = window;
	    } else if (typeof global !== 'undefined') {
	      g = global;
	    } else if (typeof self !== 'undefined') {
	      g = self;
	    } else {
	      g = this;
	    }

	    if (typeof g.React === 'undefined') {
	      throw Error('React module should be required before ReactDOMFactories');
	    }

	    g.ReactDOMFactories = f(g.React);
	  }
	})(function(React) {
	  /**
	   * Create a factory that creates HTML tag elements.
	   */
	  function createDOMFactory(type) {
	    var factory = React.createElement.bind(null, type);
	    // Expose the type on the factory and the prototype so that it can be
	    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	    // This should not be named `constructor` since this may not be the function
	    // that created the element, and it may not even be a constructor.
	    factory.type = type;
	    return factory;
	  };

	  /**
	   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	   */
	  var ReactDOMFactories = {
	    a: createDOMFactory('a'),
	    abbr: createDOMFactory('abbr'),
	    address: createDOMFactory('address'),
	    area: createDOMFactory('area'),
	    article: createDOMFactory('article'),
	    aside: createDOMFactory('aside'),
	    audio: createDOMFactory('audio'),
	    b: createDOMFactory('b'),
	    base: createDOMFactory('base'),
	    bdi: createDOMFactory('bdi'),
	    bdo: createDOMFactory('bdo'),
	    big: createDOMFactory('big'),
	    blockquote: createDOMFactory('blockquote'),
	    body: createDOMFactory('body'),
	    br: createDOMFactory('br'),
	    button: createDOMFactory('button'),
	    canvas: createDOMFactory('canvas'),
	    caption: createDOMFactory('caption'),
	    cite: createDOMFactory('cite'),
	    code: createDOMFactory('code'),
	    col: createDOMFactory('col'),
	    colgroup: createDOMFactory('colgroup'),
	    data: createDOMFactory('data'),
	    datalist: createDOMFactory('datalist'),
	    dd: createDOMFactory('dd'),
	    del: createDOMFactory('del'),
	    details: createDOMFactory('details'),
	    dfn: createDOMFactory('dfn'),
	    dialog: createDOMFactory('dialog'),
	    div: createDOMFactory('div'),
	    dl: createDOMFactory('dl'),
	    dt: createDOMFactory('dt'),
	    em: createDOMFactory('em'),
	    embed: createDOMFactory('embed'),
	    fieldset: createDOMFactory('fieldset'),
	    figcaption: createDOMFactory('figcaption'),
	    figure: createDOMFactory('figure'),
	    footer: createDOMFactory('footer'),
	    form: createDOMFactory('form'),
	    h1: createDOMFactory('h1'),
	    h2: createDOMFactory('h2'),
	    h3: createDOMFactory('h3'),
	    h4: createDOMFactory('h4'),
	    h5: createDOMFactory('h5'),
	    h6: createDOMFactory('h6'),
	    head: createDOMFactory('head'),
	    header: createDOMFactory('header'),
	    hgroup: createDOMFactory('hgroup'),
	    hr: createDOMFactory('hr'),
	    html: createDOMFactory('html'),
	    i: createDOMFactory('i'),
	    iframe: createDOMFactory('iframe'),
	    img: createDOMFactory('img'),
	    input: createDOMFactory('input'),
	    ins: createDOMFactory('ins'),
	    kbd: createDOMFactory('kbd'),
	    keygen: createDOMFactory('keygen'),
	    label: createDOMFactory('label'),
	    legend: createDOMFactory('legend'),
	    li: createDOMFactory('li'),
	    link: createDOMFactory('link'),
	    main: createDOMFactory('main'),
	    map: createDOMFactory('map'),
	    mark: createDOMFactory('mark'),
	    menu: createDOMFactory('menu'),
	    menuitem: createDOMFactory('menuitem'),
	    meta: createDOMFactory('meta'),
	    meter: createDOMFactory('meter'),
	    nav: createDOMFactory('nav'),
	    noscript: createDOMFactory('noscript'),
	    object: createDOMFactory('object'),
	    ol: createDOMFactory('ol'),
	    optgroup: createDOMFactory('optgroup'),
	    option: createDOMFactory('option'),
	    output: createDOMFactory('output'),
	    p: createDOMFactory('p'),
	    param: createDOMFactory('param'),
	    picture: createDOMFactory('picture'),
	    pre: createDOMFactory('pre'),
	    progress: createDOMFactory('progress'),
	    q: createDOMFactory('q'),
	    rp: createDOMFactory('rp'),
	    rt: createDOMFactory('rt'),
	    ruby: createDOMFactory('ruby'),
	    s: createDOMFactory('s'),
	    samp: createDOMFactory('samp'),
	    script: createDOMFactory('script'),
	    section: createDOMFactory('section'),
	    select: createDOMFactory('select'),
	    small: createDOMFactory('small'),
	    source: createDOMFactory('source'),
	    span: createDOMFactory('span'),
	    strong: createDOMFactory('strong'),
	    style: createDOMFactory('style'),
	    sub: createDOMFactory('sub'),
	    summary: createDOMFactory('summary'),
	    sup: createDOMFactory('sup'),
	    table: createDOMFactory('table'),
	    tbody: createDOMFactory('tbody'),
	    td: createDOMFactory('td'),
	    textarea: createDOMFactory('textarea'),
	    tfoot: createDOMFactory('tfoot'),
	    th: createDOMFactory('th'),
	    thead: createDOMFactory('thead'),
	    time: createDOMFactory('time'),
	    title: createDOMFactory('title'),
	    tr: createDOMFactory('tr'),
	    track: createDOMFactory('track'),
	    u: createDOMFactory('u'),
	    ul: createDOMFactory('ul'),
	    var: createDOMFactory('var'),
	    video: createDOMFactory('video'),
	    wbr: createDOMFactory('wbr'),

	    // SVG
	    circle: createDOMFactory('circle'),
	    clipPath: createDOMFactory('clipPath'),
	    defs: createDOMFactory('defs'),
	    ellipse: createDOMFactory('ellipse'),
	    g: createDOMFactory('g'),
	    image: createDOMFactory('image'),
	    line: createDOMFactory('line'),
	    linearGradient: createDOMFactory('linearGradient'),
	    mask: createDOMFactory('mask'),
	    path: createDOMFactory('path'),
	    pattern: createDOMFactory('pattern'),
	    polygon: createDOMFactory('polygon'),
	    polyline: createDOMFactory('polyline'),
	    radialGradient: createDOMFactory('radialGradient'),
	    rect: createDOMFactory('rect'),
	    stop: createDOMFactory('stop'),
	    svg: createDOMFactory('svg'),
	    text: createDOMFactory('text'),
	    tspan: createDOMFactory('tspan'),
	  };

	  // due to wrapper and conditionals at the top, this will either become
	  // `module.exports ReactDOMFactories` if that is available,
	  // otherwise it will be defined via `define(['react'], ReactDOMFactories)`
	  // if that is available,
	  // otherwise it will be defined as global variable.
	  return ReactDOMFactories;
	});



/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-react v14.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var React = __webpack_require__(2);
	var react_1 = __webpack_require__(2);
	var PropTypes = __webpack_require__(205);
	var AgGrid = __webpack_require__(282);
	var AgGridColumn = /** @class */ (function (_super) {
	    __extends(AgGridColumn, _super);
	    function AgGridColumn(props, state) {
	        var _this = _super.call(this, props, state) || this;
	        _this.props = props;
	        _this.state = state;
	        return _this;
	    }
	    AgGridColumn.prototype.render = function () {
	        return null;
	    };
	    AgGridColumn.mapChildColumnDefs = function (columnProps) {
	        return React.Children.map(columnProps.children, function (child) {
	            return AgGridColumn.toColDef(child.props);
	        });
	    };
	    AgGridColumn.toColDef = function (columnProps) {
	        var colDef = AgGridColumn.createColDefFromGridColumn(columnProps);
	        if (AgGridColumn.hasChildColumns(columnProps)) {
	            colDef["children"] = AgGridColumn.getChildColDefs(columnProps.children);
	        }
	        return colDef;
	    };
	    AgGridColumn.hasChildColumns = function (columnProps) {
	        return React.Children.count(columnProps.children) > 0;
	    };
	    AgGridColumn.getChildColDefs = function (columnChildren) {
	        return React.Children.map(columnChildren, function (child) {
	            return AgGridColumn.createColDefFromGridColumn(child.props);
	        });
	    };
	    ;
	    AgGridColumn.createColDefFromGridColumn = function (columnProps) {
	        var colDef = {};
	        AgGridColumn.assign(colDef, columnProps);
	        delete colDef.children;
	        return colDef;
	    };
	    ;
	    AgGridColumn.assign = function (colDef, from) {
	        // effectively Object.assign - here for IE compatibility
	        return [from].reduce(function (r, o) {
	            Object.keys(o).forEach(function (k) {
	                r[k] = o[k];
	            });
	            return r;
	        }, colDef);
	    };
	    return AgGridColumn;
	}(react_1.Component));
	exports.AgGridColumn = AgGridColumn;
	addProperties(AgGrid.ColDefUtil.BOOLEAN_PROPERTIES, PropTypes.bool);
	addProperties(AgGrid.ColDefUtil.STRING_PROPERTIES, PropTypes.string);
	addProperties(AgGrid.ColDefUtil.OBJECT_PROPERTIES, PropTypes.object);
	addProperties(AgGrid.ColDefUtil.ARRAY_PROPERTIES, PropTypes.array);
	addProperties(AgGrid.ColDefUtil.NUMBER_PROPERTIES, PropTypes.number);
	addProperties(AgGrid.ColDefUtil.FUNCTION_PROPERTIES, PropTypes.func);
	function addProperties(listOfProps, propType) {
	    listOfProps.forEach(function (propKey) {
	        AgGridColumn[propKey] = propType;
	    });
	}


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.CardExpandable = exports.CardActions = exports.CardText = exports.CardMedia = exports.CardTitle = exports.CardHeader = exports.Card = undefined;

	var _Card2 = __webpack_require__(425);

	var _Card3 = _interopRequireDefault(_Card2);

	var _CardHeader2 = __webpack_require__(565);

	var _CardHeader3 = _interopRequireDefault(_CardHeader2);

	var _CardTitle2 = __webpack_require__(568);

	var _CardTitle3 = _interopRequireDefault(_CardTitle2);

	var _CardMedia2 = __webpack_require__(569);

	var _CardMedia3 = _interopRequireDefault(_CardMedia2);

	var _CardText2 = __webpack_require__(570);

	var _CardText3 = _interopRequireDefault(_CardText2);

	var _CardActions2 = __webpack_require__(571);

	var _CardActions3 = _interopRequireDefault(_CardActions2);

	var _CardExpandable2 = __webpack_require__(522);

	var _CardExpandable3 = _interopRequireDefault(_CardExpandable2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Card = _Card3.default;
	exports.CardHeader = _CardHeader3.default;
	exports.CardTitle = _CardTitle3.default;
	exports.CardMedia = _CardMedia3.default;
	exports.CardText = _CardText3.default;
	exports.CardActions = _CardActions3.default;
	exports.CardExpandable = _CardExpandable3.default;
	exports.default = _Card3.default;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Paper = __webpack_require__(518);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _CardExpandable = __webpack_require__(522);

	var _CardExpandable2 = _interopRequireDefault(_CardExpandable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Card = function (_Component) {
	  (0, _inherits3.default)(Card, _Component);

	  function Card() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Card);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Card.__proto__ || (0, _getPrototypeOf2.default)(Card)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      expanded: null
	    }, _this.handleExpanding = function (event) {
	      event.preventDefault();
	      var newExpandedState = !_this.state.expanded;
	      // no automatic state update when the component is controlled
	      if (_this.props.expanded === null) {
	        _this.setState({ expanded: newExpandedState });
	      }
	      if (_this.props.onExpandChange) {
	        _this.props.onExpandChange(newExpandedState);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Card, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        expanded: this.props.expanded === null ? this.props.initiallyExpanded === true : this.props.expanded
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // update the state when the component is controlled.
	      if (nextProps.expanded !== null) this.setState({ expanded: nextProps.expanded });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          style = _props.style,
	          containerStyle = _props.containerStyle,
	          children = _props.children,
	          expandable = _props.expandable,
	          expandedProp = _props.expanded,
	          initiallyExpanded = _props.initiallyExpanded,
	          onExpandChange = _props.onExpandChange,
	          other = (0, _objectWithoutProperties3.default)(_props, ['style', 'containerStyle', 'children', 'expandable', 'expanded', 'initiallyExpanded', 'onExpandChange']);


	      var lastElement = void 0;
	      var expanded = this.state.expanded;
	      var newChildren = _react2.default.Children.map(children, function (currentChild) {
	        var doClone = false;
	        var newChild = undefined;
	        var newProps = {};
	        var element = currentChild;
	        if (!currentChild || !currentChild.props) {
	          return null;
	        }
	        if (expanded === false && currentChild.props.expandable === true) return;
	        if (currentChild.props.actAsExpander === true) {
	          doClone = true;
	          newProps.onClick = _this2.handleExpanding;
	          newProps.style = (0, _simpleAssign2.default)({ cursor: 'pointer' }, currentChild.props.style);
	        }
	        if (currentChild.props.showExpandableButton === true) {
	          doClone = true;
	          newChild = _react2.default.createElement(_CardExpandable2.default, {
	            closeIcon: currentChild.props.closeIcon,
	            expanded: expanded,
	            onExpanding: _this2.handleExpanding,
	            openIcon: currentChild.props.openIcon,
	            iconStyle: currentChild.props.iconStyle
	          });
	        }
	        if (doClone) {
	          element = _react2.default.cloneElement(currentChild, newProps, currentChild.props.children, newChild);
	        }
	        lastElement = element;
	        return element;
	      }, this);

	      // If the last element is text or a title we should add
	      // 8px padding to the bottom of the card
	      var addBottomPadding = lastElement && (lastElement.type.muiName === 'CardText' || lastElement.type.muiName === 'CardTitle');

	      var mergedStyles = (0, _simpleAssign2.default)({
	        zIndex: 1
	      }, style);
	      var containerMergedStyles = (0, _simpleAssign2.default)({
	        paddingBottom: addBottomPadding ? 8 : 0
	      }, containerStyle);

	      return _react2.default.createElement(
	        _Paper2.default,
	        (0, _extends3.default)({}, other, { style: mergedStyles }),
	        _react2.default.createElement(
	          'div',
	          { style: containerMergedStyles },
	          newChildren
	        )
	      );
	    }
	  }]);
	  return Card;
	}(_react.Component);

	Card.defaultProps = {
	  expandable: false,
	  expanded: null,
	  initiallyExpanded: false
	};
	Card.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Can be used to render elements inside the Card.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Override the inline-styles of the container element.
	   */
	  containerStyle: _propTypes2.default.object,
	  /**
	   * If true, this card component is expandable. Can be set on any child of the `Card` component.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * Whether this card is expanded.
	   * If `true` or `false` the component is controlled.
	   * if `null` the component is uncontrolled.
	   */
	  expanded: _propTypes2.default.bool,
	  /**
	   * Whether this card is initially expanded.
	   */
	  initiallyExpanded: _propTypes2.default.bool,
	  /**
	   * Callback function fired when the `expandable` state of the card has changed.
	   *
	   * @param {boolean} newExpandedState Represents the new `expanded` state of the card.
	   */
	  onExpandChange: _propTypes2.default.func,
	  /**
	   * If true, this card component will include a button to expand the card. `CardTitle`,
	   * `CardHeader` and `CardActions` implement `showExpandableButton`. Any child component
	   * of `Card` can implements `showExpandableButton` or forwards the property to a child
	   * component supporting it.
	   */
	  showExpandableButton: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = Card;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _assign = __webpack_require__(427);

	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(428), __esModule: true };

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(429);
	module.exports = __webpack_require__(432).Object.assign;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(430);

	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(445) });


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(431);
	var core = __webpack_require__(432);
	var ctx = __webpack_require__(433);
	var hide = __webpack_require__(435);
	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 431 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 432 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.5.1' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(434);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 434 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(436);
	var createDesc = __webpack_require__(444);
	module.exports = __webpack_require__(440) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(437);
	var IE8_DOM_DEFINE = __webpack_require__(439);
	var toPrimitive = __webpack_require__(443);
	var dP = Object.defineProperty;

	exports.f = __webpack_require__(440) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(438);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 438 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(440) && !__webpack_require__(441)(function () {
	  return Object.defineProperty(__webpack_require__(442)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(441)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 441 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(438);
	var document = __webpack_require__(431).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(438);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 444 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(446);
	var gOPS = __webpack_require__(461);
	var pIE = __webpack_require__(462);
	var toObject = __webpack_require__(463);
	var IObject = __webpack_require__(450);
	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(441)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(447);
	var enumBugKeys = __webpack_require__(460);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(448);
	var toIObject = __webpack_require__(449);
	var arrayIndexOf = __webpack_require__(453)(false);
	var IE_PROTO = __webpack_require__(457)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 448 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(450);
	var defined = __webpack_require__(452);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(451);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 451 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 452 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(449);
	var toLength = __webpack_require__(454);
	var toAbsoluteIndex = __webpack_require__(456);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(455);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 455 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(455);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(458)('keys');
	var uid = __webpack_require__(459);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(431);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


/***/ }),
/* 459 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 460 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 461 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 462 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(452);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 464 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(466), __esModule: true };

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(467);
	module.exports = __webpack_require__(432).Object.getPrototypeOf;


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(463);
	var $getPrototypeOf = __webpack_require__(468);

	__webpack_require__(469)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(448);
	var toObject = __webpack_require__(463);
	var IE_PROTO = __webpack_require__(457)('IE_PROTO');
	var ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(430);
	var core = __webpack_require__(432);
	var fails = __webpack_require__(441);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 470 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _defineProperty = __webpack_require__(472);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(473), __esModule: true };

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(474);
	var $Object = __webpack_require__(432).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(430);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(440), 'Object', { defineProperty: __webpack_require__(436).f });


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _typeof2 = __webpack_require__(476);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _iterator = __webpack_require__(477);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(496);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(478), __esModule: true };

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(479);
	__webpack_require__(491);
	module.exports = __webpack_require__(495).f('iterator');


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(480)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(481)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(455);
	var defined = __webpack_require__(452);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(482);
	var $export = __webpack_require__(430);
	var redefine = __webpack_require__(483);
	var hide = __webpack_require__(435);
	var has = __webpack_require__(448);
	var Iterators = __webpack_require__(484);
	var $iterCreate = __webpack_require__(485);
	var setToStringTag = __webpack_require__(489);
	var getPrototypeOf = __webpack_require__(468);
	var ITERATOR = __webpack_require__(490)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 482 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(435);


/***/ }),
/* 484 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(486);
	var descriptor = __webpack_require__(444);
	var setToStringTag = __webpack_require__(489);
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(435)(IteratorPrototype, __webpack_require__(490)('iterator'), function () { return this; });

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(437);
	var dPs = __webpack_require__(487);
	var enumBugKeys = __webpack_require__(460);
	var IE_PROTO = __webpack_require__(457)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(442)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(488).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(436);
	var anObject = __webpack_require__(437);
	var getKeys = __webpack_require__(446);

	module.exports = __webpack_require__(440) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(431).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(436).f;
	var has = __webpack_require__(448);
	var TAG = __webpack_require__(490)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(458)('wks');
	var uid = __webpack_require__(459);
	var Symbol = __webpack_require__(431).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(492);
	var global = __webpack_require__(431);
	var hide = __webpack_require__(435);
	var Iterators = __webpack_require__(484);
	var TO_STRING_TAG = __webpack_require__(490)('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(493);
	var step = __webpack_require__(494);
	var Iterators = __webpack_require__(484);
	var toIObject = __webpack_require__(449);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(481)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 493 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 494 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(490);


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(497), __esModule: true };

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(498);
	__webpack_require__(506);
	__webpack_require__(507);
	__webpack_require__(508);
	module.exports = __webpack_require__(432).Symbol;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(431);
	var has = __webpack_require__(448);
	var DESCRIPTORS = __webpack_require__(440);
	var $export = __webpack_require__(430);
	var redefine = __webpack_require__(483);
	var META = __webpack_require__(499).KEY;
	var $fails = __webpack_require__(441);
	var shared = __webpack_require__(458);
	var setToStringTag = __webpack_require__(489);
	var uid = __webpack_require__(459);
	var wks = __webpack_require__(490);
	var wksExt = __webpack_require__(495);
	var wksDefine = __webpack_require__(500);
	var enumKeys = __webpack_require__(501);
	var isArray = __webpack_require__(502);
	var anObject = __webpack_require__(437);
	var toIObject = __webpack_require__(449);
	var toPrimitive = __webpack_require__(443);
	var createDesc = __webpack_require__(444);
	var _create = __webpack_require__(486);
	var gOPNExt = __webpack_require__(503);
	var $GOPD = __webpack_require__(505);
	var $DP = __webpack_require__(436);
	var $keys = __webpack_require__(446);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(504).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(462).f = $propertyIsEnumerable;
	  __webpack_require__(461).f = $getOwnPropertySymbols;

	  if (DESCRIPTORS && !__webpack_require__(482)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(435)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(459)('meta');
	var isObject = __webpack_require__(438);
	var has = __webpack_require__(448);
	var setDesc = __webpack_require__(436).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(441)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(431);
	var core = __webpack_require__(432);
	var LIBRARY = __webpack_require__(482);
	var wksExt = __webpack_require__(495);
	var defineProperty = __webpack_require__(436).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(446);
	var gOPS = __webpack_require__(461);
	var pIE = __webpack_require__(462);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(451);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(449);
	var gOPN = __webpack_require__(504).f;
	var toString = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(447);
	var hiddenKeys = __webpack_require__(460).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(462);
	var createDesc = __webpack_require__(444);
	var toIObject = __webpack_require__(449);
	var toPrimitive = __webpack_require__(443);
	var has = __webpack_require__(448);
	var IE8_DOM_DEFINE = __webpack_require__(439);
	var gOPD = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(440) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 506 */
/***/ (function(module, exports) {

	

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(500)('asyncIterator');


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(500)('observable');


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(510);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(514);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(476);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(511), __esModule: true };

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(512);
	module.exports = __webpack_require__(432).Object.setPrototypeOf;


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(430);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(513).set });


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(438);
	var anObject = __webpack_require__(437);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(433)(Function.call, __webpack_require__(505).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(515), __esModule: true };

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(516);
	var $Object = __webpack_require__(432).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(430);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(486) });


/***/ }),
/* 517 */
/***/ (function(module, exports) {

	module.exports = function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	  return target;
	};


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Paper = __webpack_require__(519);

	var _Paper2 = _interopRequireDefault(_Paper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Paper2.default;

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _propTypes3 = __webpack_require__(520);

	var _propTypes4 = _interopRequireDefault(_propTypes3);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var rounded = props.rounded,
	      circle = props.circle,
	      transitionEnabled = props.transitionEnabled,
	      zDepth = props.zDepth;
	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      paper = _context$muiTheme.paper,
	      borderRadius = _context$muiTheme.borderRadius;


	  return {
	    root: {
	      color: paper.color,
	      backgroundColor: paper.backgroundColor,
	      transition: transitionEnabled && _transitions2.default.easeOut(),
	      boxSizing: 'border-box',
	      fontFamily: baseTheme.fontFamily,
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)', // Remove mobile color flashing (deprecated)
	      boxShadow: paper.zDepthShadows[zDepth - 1], // No shadow for 0 depth papers
	      borderRadius: circle ? '50%' : rounded ? borderRadius : '0px'
	    }
	  };
	}

	var Paper = function (_Component) {
	  (0, _inherits3.default)(Paper, _Component);

	  function Paper() {
	    (0, _classCallCheck3.default)(this, Paper);
	    return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Paper, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          circle = _props.circle,
	          rounded = _props.rounded,
	          style = _props.style,
	          transitionEnabled = _props.transitionEnabled,
	          zDepth = _props.zDepth,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'circle', 'rounded', 'style', 'transitionEnabled', 'zDepth']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        children
	      );
	    }
	  }]);
	  return Paper;
	}(_react.Component);

	Paper.defaultProps = {
	  circle: false,
	  rounded: true,
	  transitionEnabled: true,
	  zDepth: 1
	};
	Paper.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	Paper.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Children passed into the paper element.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Set to true to generate a circular paper container.
	   */
	  circle: _propTypes2.default.bool,
	  /**
	   * By default, the paper container will have a border radius.
	   * Set this to false to generate a container with sharp corners.
	   */
	  rounded: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * Set to false to disable CSS transitions for the paper element.
	   */
	  transitionEnabled: _propTypes2.default.bool,
	  /**
	   * This number represents the zDepth of the paper shadow.
	   */
	  zDepth: _propTypes4.default.zDepth
	} : {};
	exports.default = Paper;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var horizontal = _propTypes2.default.oneOf(['left', 'middle', 'right']);
	var vertical = _propTypes2.default.oneOf(['top', 'center', 'bottom']);

	exports.default = {

	  corners: _propTypes2.default.oneOf(['bottom-left', 'bottom-right', 'top-left', 'top-right']),

	  horizontal: horizontal,

	  vertical: vertical,

	  origin: _propTypes2.default.shape({
	    horizontal: horizontal,
	    vertical: vertical
	  }),

	  cornersAndCenter: _propTypes2.default.oneOf(['bottom-center', 'bottom-left', 'bottom-right', 'top-center', 'top-left', 'top-right']),

	  stringOrNumber: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	  zDepth: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5])

	};

/***/ }),
/* 521 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {

	  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
	  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',

	  easeOut: function easeOut(duration, property, delay, easeFunction) {
	    easeFunction = easeFunction || this.easeOutFunction;

	    if (property && Object.prototype.toString.call(property) === '[object Array]') {
	      var transitions = '';
	      for (var i = 0; i < property.length; i++) {
	        if (transitions) transitions += ',';
	        transitions += this.create(duration, property[i], delay, easeFunction);
	      }

	      return transitions;
	    } else {
	      return this.create(duration, property, delay, easeFunction);
	    }
	  },
	  create: function create(duration, property, delay, easeFunction) {
	    duration = duration || '450ms';
	    property = property || 'all';
	    delay = delay || '0ms';
	    easeFunction = easeFunction || 'linear';

	    return property + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	  }
	};

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _keyboardArrowUp = __webpack_require__(523);

	var _keyboardArrowUp2 = _interopRequireDefault(_keyboardArrowUp);

	var _keyboardArrowDown = __webpack_require__(534);

	var _keyboardArrowDown2 = _interopRequireDefault(_keyboardArrowDown);

	var _IconButton = __webpack_require__(535);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles() {
	  return {
	    root: {
	      top: 0,
	      bottom: 0,
	      right: 4,
	      margin: 'auto',
	      position: 'absolute'
	    }
	  };
	}

	var CardExpandable = function (_Component) {
	  (0, _inherits3.default)(CardExpandable, _Component);

	  function CardExpandable() {
	    (0, _classCallCheck3.default)(this, CardExpandable);
	    return (0, _possibleConstructorReturn3.default)(this, (CardExpandable.__proto__ || (0, _getPrototypeOf2.default)(CardExpandable)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardExpandable, [{
	    key: 'render',
	    value: function render() {
	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(
	        _IconButton2.default,
	        {
	          style: (0, _simpleAssign2.default)(styles.root, this.props.style),
	          onClick: this.props.onExpanding,
	          iconStyle: this.props.iconStyle
	        },
	        this.props.expanded ? this.props.openIcon : this.props.closeIcon
	      );
	    }
	  }]);
	  return CardExpandable;
	}(_react.Component);

	CardExpandable.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardExpandable.defaultProps = {
	  closeIcon: _react2.default.createElement(_keyboardArrowDown2.default, null),
	  openIcon: _react2.default.createElement(_keyboardArrowUp2.default, null)
	};
	CardExpandable.propTypes = process.env.NODE_ENV !== "production" ? {
	  closeIcon: _propTypes2.default.node,
	  expanded: _propTypes2.default.bool,
	  iconStyle: _propTypes2.default.object,
	  onExpanding: _propTypes2.default.func.isRequired,
	  openIcon: _propTypes2.default.node,
	  style: _propTypes2.default.object
	} : {};
	exports.default = CardExpandable;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(524);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(532);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HardwareKeyboardArrowUp = function HardwareKeyboardArrowUp(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _react2.default.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
	  );
	};
	HardwareKeyboardArrowUp = (0, _pure2.default)(HardwareKeyboardArrowUp);
	HardwareKeyboardArrowUp.displayName = 'HardwareKeyboardArrowUp';
	HardwareKeyboardArrowUp.muiName = 'SvgIcon';

	exports.default = HardwareKeyboardArrowUp;

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _shouldUpdate = __webpack_require__(525);

	var _shouldUpdate2 = _interopRequireDefault(_shouldUpdate);

	var _shallowEqual = __webpack_require__(530);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _setDisplayName = __webpack_require__(526);

	var _setDisplayName2 = _interopRequireDefault(_setDisplayName);

	var _wrapDisplayName = __webpack_require__(528);

	var _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pure = function pure(BaseComponent) {
	  var hoc = (0, _shouldUpdate2.default)(function (props, nextProps) {
	    return !(0, _shallowEqual2.default)(props, nextProps);
	  });

	  if (process.env.NODE_ENV !== 'production') {
	    return (0, _setDisplayName2.default)((0, _wrapDisplayName2.default)(BaseComponent, 'pure'))(hoc(BaseComponent));
	  }

	  return hoc(BaseComponent);
	};

	exports.default = pure;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _setDisplayName = __webpack_require__(526);

	var _setDisplayName2 = _interopRequireDefault(_setDisplayName);

	var _wrapDisplayName = __webpack_require__(528);

	var _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var shouldUpdate = function shouldUpdate(test) {
	  return function (BaseComponent) {
	    var factory = (0, _react.createFactory)(BaseComponent);

	    var ShouldUpdate = function (_Component) {
	      _inherits(ShouldUpdate, _Component);

	      function ShouldUpdate() {
	        _classCallCheck(this, ShouldUpdate);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	      }

	      ShouldUpdate.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return test(this.props, nextProps);
	      };

	      ShouldUpdate.prototype.render = function render() {
	        return factory(this.props);
	      };

	      return ShouldUpdate;
	    }(_react.Component);

	    if (process.env.NODE_ENV !== 'production') {
	      return (0, _setDisplayName2.default)((0, _wrapDisplayName2.default)(BaseComponent, 'shouldUpdate'))(ShouldUpdate);
	    }
	    return ShouldUpdate;
	  };
	};

	exports.default = shouldUpdate;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _setStatic = __webpack_require__(527);

	var _setStatic2 = _interopRequireDefault(_setStatic);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var setDisplayName = function setDisplayName(displayName) {
	  return (0, _setStatic2.default)('displayName', displayName);
	};

	exports.default = setDisplayName;

/***/ }),
/* 527 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var setStatic = function setStatic(key, value) {
	  return function (BaseComponent) {
	    /* eslint-disable no-param-reassign */
	    BaseComponent[key] = value;
	    /* eslint-enable no-param-reassign */
	    return BaseComponent;
	  };
	};

	exports.default = setStatic;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _getDisplayName = __webpack_require__(529);

	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
	  return hocName + '(' + (0, _getDisplayName2.default)(BaseComponent) + ')';
	};

	exports.default = wrapDisplayName;

/***/ }),
/* 529 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var getDisplayName = function getDisplayName(Component) {
	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (!Component) {
	    return undefined;
	  }

	  return Component.displayName || Component.name || 'Component';
	};

	exports.default = getDisplayName;

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shallowEqual = __webpack_require__(531);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _shallowEqual2.default;

/***/ }),
/* 531 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _SvgIcon = __webpack_require__(533);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _SvgIcon2.default;

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var SvgIcon = function (_Component) {
	  (0, _inherits3.default)(SvgIcon, _Component);

	  function SvgIcon() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, SvgIcon);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SvgIcon.__proto__ || (0, _getPrototypeOf2.default)(SvgIcon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleMouseEnter = function (event) {
	      _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(SvgIcon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          color = _props.color,
	          hoverColor = _props.hoverColor,
	          onMouseEnter = _props.onMouseEnter,
	          onMouseLeave = _props.onMouseLeave,
	          style = _props.style,
	          viewBox = _props.viewBox,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'color', 'hoverColor', 'onMouseEnter', 'onMouseLeave', 'style', 'viewBox']);
	      var _context$muiTheme = this.context.muiTheme,
	          svgIcon = _context$muiTheme.svgIcon,
	          prepareStyles = _context$muiTheme.prepareStyles;


	      var offColor = color ? color : 'currentColor';
	      var onColor = hoverColor ? hoverColor : offColor;

	      var mergedStyles = (0, _simpleAssign2.default)({
	        display: 'inline-block',
	        color: svgIcon.color,
	        fill: this.state.hovered ? onColor : offColor,
	        height: 24,
	        width: 24,
	        userSelect: 'none',
	        transition: _transitions2.default.easeOut()
	      }, style);

	      return _react2.default.createElement(
	        'svg',
	        (0, _extends3.default)({}, other, {
	          onMouseEnter: this.handleMouseEnter,
	          onMouseLeave: this.handleMouseLeave,
	          style: prepareStyles(mergedStyles),
	          viewBox: viewBox
	        }),
	        children
	      );
	    }
	  }]);
	  return SvgIcon;
	}(_react.Component);

	SvgIcon.muiName = 'SvgIcon';
	SvgIcon.defaultProps = {
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  viewBox: '0 0 24 24'
	};
	SvgIcon.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	SvgIcon.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Elements passed into the SVG Icon.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * This is the fill color of the svg icon.
	   * If not specified, this component will default
	   * to muiTheme.palette.textColor.
	   */
	  color: _propTypes2.default.string,
	  /**
	   * This is the icon color when the mouse hovers over the icon.
	   */
	  hoverColor: _propTypes2.default.string,
	  /** @ignore */
	  onMouseEnter: _propTypes2.default.func,
	  /** @ignore */
	  onMouseLeave: _propTypes2.default.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * Allows you to redefine what the coordinates
	   * without units mean inside an svg element. For example,
	   * if the SVG element is 500 (width) by 200 (height), and you
	   * pass viewBox="0 0 50 20", this means that the coordinates inside
	   * the svg will go from the top left corner (0,0) to bottom right (50,20)
	   * and each unit will be worth 10px.
	   */
	  viewBox: _propTypes2.default.string
	} : {};
	exports.default = SvgIcon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(524);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(532);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HardwareKeyboardArrowDown = function HardwareKeyboardArrowDown(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _react2.default.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
	  );
	};
	HardwareKeyboardArrowDown = (0, _pure2.default)(HardwareKeyboardArrowDown);
	HardwareKeyboardArrowDown.displayName = 'HardwareKeyboardArrowDown';
	HardwareKeyboardArrowDown.muiName = 'SvgIcon';

	exports.default = HardwareKeyboardArrowDown;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _IconButton = __webpack_require__(536);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _IconButton2.default;

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _propTypes3 = __webpack_require__(520);

	var _propTypes4 = _interopRequireDefault(_propTypes3);

	var _EnhancedButton = __webpack_require__(537);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _FontIcon = __webpack_require__(561);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	var _Tooltip = __webpack_require__(563);

	var _Tooltip2 = _interopRequireDefault(_Tooltip);

	var _childUtils = __webpack_require__(564);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var baseTheme = context.muiTheme.baseTheme;


	  return {
	    root: {
	      boxSizing: 'border-box',
	      overflow: 'visible',
	      transition: _transitions2.default.easeOut(),
	      padding: baseTheme.spacing.iconSize / 2,
	      width: baseTheme.spacing.iconSize * 2,
	      height: baseTheme.spacing.iconSize * 2,
	      fontSize: 0
	    },
	    tooltip: {
	      boxSizing: 'border-box'
	    },
	    disabled: {
	      color: baseTheme.palette.disabledColor,
	      fill: baseTheme.palette.disabledColor,
	      cursor: 'default'
	    }
	  };
	}

	var IconButton = function (_Component) {
	  (0, _inherits3.default)(IconButton, _Component);

	  function IconButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, IconButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      // Not to be confonded with the touch property.
	      // This state is to determined if it's a mobile device.
	      touch: false,
	      tooltipShown: false
	    }, _this.handleBlur = function (event) {
	      _this.hideTooltip();
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleFocus = function (event) {
	      _this.showTooltip();
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _this.handleMouseLeave = function (event) {
	      if (!_this.button.isKeyboardFocused()) {
	        _this.hideTooltip();
	      }
	      _this.setState({ hovered: false });
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	    }, _this.handleMouseOut = function (event) {
	      if (_this.props.disabled) _this.hideTooltip();
	      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
	    }, _this.handleMouseEnter = function (event) {
	      _this.showTooltip();

	      // Cancel hover styles for touch devices
	      if (!_this.state.touch) {
	        _this.setState({ hovered: true });
	      }
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(event);
	      }
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });

	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(event);
	      }
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          onFocus = _this$props.onFocus,
	          onBlur = _this$props.onBlur,
	          onKeyboardFocus = _this$props.onKeyboardFocus;

	      if (isKeyboardFocused && !disabled) {
	        _this.showTooltip();
	        if (onFocus) {
	          onFocus(event);
	        }
	      } else {
	        _this.hideTooltip();
	        if (onBlur) {
	          onBlur(event);
	        }
	      }

	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      if (onKeyboardFocus) {
	        onKeyboardFocus(event, isKeyboardFocused);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(IconButton, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.disabled) {
	        this.setState({ hovered: false });
	      }
	    }
	  }, {
	    key: 'setKeyboardFocus',
	    value: function setKeyboardFocus() {
	      this.button.setKeyboardFocus();
	    }
	  }, {
	    key: 'showTooltip',
	    value: function showTooltip() {
	      if (this.props.tooltip) {
	        this.setState({ tooltipShown: true });
	      }
	    }
	  }, {
	    key: 'hideTooltip',
	    value: function hideTooltip() {
	      if (this.props.tooltip) this.setState({ tooltipShown: false });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          disabled = _props.disabled,
	          hoveredStyle = _props.hoveredStyle,
	          disableTouchRipple = _props.disableTouchRipple,
	          children = _props.children,
	          iconClassName = _props.iconClassName,
	          style = _props.style,
	          tooltip = _props.tooltip,
	          tooltipPositionProp = _props.tooltipPosition,
	          tooltipStyles = _props.tooltipStyles,
	          touch = _props.touch,
	          iconStyle = _props.iconStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['disabled', 'hoveredStyle', 'disableTouchRipple', 'children', 'iconClassName', 'style', 'tooltip', 'tooltipPosition', 'tooltipStyles', 'touch', 'iconStyle']);

	      var fonticon = void 0;

	      var styles = getStyles(this.props, this.context);
	      var tooltipPosition = tooltipPositionProp.split('-');

	      var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	      var mergedRootStyles = (0, _simpleAssign2.default)(styles.root, style, hovered ? hoveredStyle : {});

	      var tooltipElement = tooltip ? _react2.default.createElement(_Tooltip2.default, {
	        label: tooltip,
	        show: this.state.tooltipShown,
	        touch: touch,
	        style: (0, _simpleAssign2.default)(styles.tooltip, tooltipStyles),
	        verticalPosition: tooltipPosition[0],
	        horizontalPosition: tooltipPosition[1]
	      }) : null;

	      if (iconClassName) {
	        var iconHoverColor = iconStyle.iconHoverColor,
	            iconStyleFontIcon = (0, _objectWithoutProperties3.default)(iconStyle, ['iconHoverColor']);


	        fonticon = _react2.default.createElement(
	          _FontIcon2.default,
	          {
	            className: iconClassName,
	            hoverColor: disabled ? null : iconHoverColor,
	            style: (0, _simpleAssign2.default)({}, disabled && styles.disabled, iconStyleFontIcon),
	            color: this.context.muiTheme.baseTheme.palette.textColor
	          },
	          children
	        );
	      }

	      var childrenStyle = disabled ? (0, _simpleAssign2.default)({}, iconStyle, styles.disabled) : iconStyle;

	      return _react2.default.createElement(
	        _EnhancedButton2.default,
	        (0, _extends3.default)({
	          ref: function ref(_ref2) {
	            return _this2.button = _ref2;
	          }
	        }, other, {
	          centerRipple: true,
	          disabled: disabled,
	          onTouchStart: this.handleTouchStart,
	          style: mergedRootStyles,
	          disableTouchRipple: disableTouchRipple,
	          onBlur: this.handleBlur,
	          onFocus: this.handleFocus,
	          onMouseLeave: this.handleMouseLeave,
	          onMouseEnter: this.handleMouseEnter,
	          onMouseOut: this.handleMouseOut,
	          onKeyboardFocus: this.handleKeyboardFocus
	        }),
	        tooltipElement,
	        fonticon,
	        (0, _childUtils.extendChildren)(children, {
	          style: childrenStyle
	        })
	      );
	    }
	  }]);
	  return IconButton;
	}(_react.Component);

	IconButton.muiName = 'IconButton';
	IconButton.defaultProps = {
	  disabled: false,
	  disableTouchRipple: false,
	  iconStyle: {},
	  tooltipPosition: 'bottom-center',
	  touch: false
	};
	IconButton.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	IconButton.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Can be used to pass a `FontIcon` element as the icon for the button.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If true, the element's ripple effect will be disabled.
	   */
	  disableTouchRipple: _propTypes2.default.bool,
	  /**
	   * If true, the element will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element when the component is hovered.
	   */
	  hoveredStyle: _propTypes2.default.object,
	  /**
	   * The URL to link to when the button is clicked.
	   */
	  href: _propTypes2.default.string,
	  /**
	   * The CSS class name of the icon. Used for setting the icon with a stylesheet.
	   */
	  iconClassName: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the icon element.
	   * Note: you can specify iconHoverColor as a String inside this object.
	   */
	  iconStyle: _propTypes2.default.object,
	  /** @ignore */
	  onBlur: _propTypes2.default.func,
	  /**
	   * Callback function fired when the button is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the button.
	   */
	  onClick: _propTypes2.default.func,
	  /** @ignore */
	  onFocus: _propTypes2.default.func,
	  /**
	   * Callback function fired when the element is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the element.
	   * @param {boolean} keyboardFocused Indicates whether the element is focused.
	   */
	  onKeyboardFocus: _propTypes2.default.func,
	  /** @ignore */
	  onMouseEnter: _propTypes2.default.func,
	  /** @ignore */
	  onMouseLeave: _propTypes2.default.func,
	  /** @ignore */
	  onMouseOut: _propTypes2.default.func,
	  /** @ignore */
	  onTouchStart: _propTypes2.default.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * The text to supply to the element's tooltip.
	   */
	  tooltip: _propTypes2.default.node,
	  /**
	   * The vertical and horizontal positions, respectively, of the element's tooltip.
	   * Possible values are: "bottom-center", "top-center", "bottom-right", "top-right",
	   * "bottom-left", and "top-left".
	   */
	  tooltipPosition: _propTypes4.default.cornersAndCenter,
	  /**
	   * Override the inline-styles of the tooltip element.
	   */
	  tooltipStyles: _propTypes2.default.object,
	  /**
	   * If true, increase the tooltip element's size. Useful for increasing tooltip
	   * readability on mobile devices.
	   */
	  touch: _propTypes2.default.bool
	} : {};
	exports.default = IconButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _events = __webpack_require__(538);

	var _events2 = _interopRequireDefault(_events);

	var _keycode = __webpack_require__(539);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _FocusRipple = __webpack_require__(540);

	var _FocusRipple2 = _interopRequireDefault(_FocusRipple);

	var _TouchRipple = __webpack_require__(547);

	var _TouchRipple2 = _interopRequireDefault(_TouchRipple);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styleInjected = false;
	var listening = false;
	var tabPressed = false;

	function injectStyle() {
	  if (!styleInjected) {
	    // Remove inner padding and border in Firefox 4+.
	    var style = document.createElement('style');
	    style.innerHTML = '\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ';

	    document.body.appendChild(style);
	    styleInjected = true;
	  }
	}

	function listenForTabPresses() {
	  if (!listening) {
	    _events2.default.on(window, 'keydown', function (event) {
	      tabPressed = (0, _keycode2.default)(event) === 'tab';
	    });
	    listening = true;
	  }
	}

	var EnhancedButton = function (_Component) {
	  (0, _inherits3.default)(EnhancedButton, _Component);

	  function EnhancedButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, EnhancedButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = EnhancedButton.__proto__ || (0, _getPrototypeOf2.default)(EnhancedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isKeyboardFocused: false
	    }, _this.handleKeyDown = function (event) {
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        if ((0, _keycode2.default)(event) === 'enter' && _this.state.isKeyboardFocused) {
	          _this.handleTouchTap(event);
	        }
	        if ((0, _keycode2.default)(event) === 'esc' && _this.state.isKeyboardFocused) {
	          _this.removeKeyboardFocus(event);
	        }
	      }
	      _this.props.onKeyDown(event);
	    }, _this.handleKeyUp = function (event) {
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        if ((0, _keycode2.default)(event) === 'space' && _this.state.isKeyboardFocused) {
	          _this.handleTouchTap(event);
	        }
	      }
	      _this.props.onKeyUp(event);
	    }, _this.handleBlur = function (event) {
	      _this.cancelFocusTimeout();
	      _this.removeKeyboardFocus(event);
	      _this.props.onBlur(event);
	    }, _this.handleFocus = function (event) {
	      if (event) event.persist();
	      if (!_this.props.disabled && !_this.props.disableKeyboardFocus) {
	        // setTimeout is needed because the focus event fires first
	        // Wait so that we can capture if this was a keyboard focus
	        // or touch focus
	        _this.focusTimeout = setTimeout(function () {
	          if (tabPressed) {
	            _this.setKeyboardFocus(event);
	            tabPressed = false;
	          }
	        }, 150);

	        _this.props.onFocus(event);
	      }
	    }, _this.handleTouchTap = function (event) {
	      _this.cancelFocusTimeout();
	      if (!_this.props.disabled) {
	        tabPressed = false;
	        _this.removeKeyboardFocus(event);
	        _this.props.onClick(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(EnhancedButton, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          disabled = _props.disabled,
	          disableKeyboardFocus = _props.disableKeyboardFocus,
	          keyboardFocused = _props.keyboardFocused;

	      if (!disabled && keyboardFocused && !disableKeyboardFocus) {
	        this.setState({ isKeyboardFocused: true });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      injectStyle();
	      listenForTabPresses();
	      if (this.state.isKeyboardFocused) {
	        this.button.focus();
	        this.props.onKeyboardFocus(null, true);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if ((nextProps.disabled || nextProps.disableKeyboardFocus) && this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: false });
	        if (nextProps.onKeyboardFocus) {
	          nextProps.onKeyboardFocus(null, false);
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.focusTimeout) {
	        clearTimeout(this.focusTimeout);
	      }
	    }
	  }, {
	    key: 'isKeyboardFocused',
	    value: function isKeyboardFocused() {
	      return this.state.isKeyboardFocused;
	    }
	  }, {
	    key: 'removeKeyboardFocus',
	    value: function removeKeyboardFocus(event) {
	      if (this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: false });
	        this.props.onKeyboardFocus(event, false);
	      }
	    }
	  }, {
	    key: 'setKeyboardFocus',
	    value: function setKeyboardFocus(event) {
	      if (!this.state.isKeyboardFocused) {
	        this.setState({ isKeyboardFocused: true });
	        this.props.onKeyboardFocus(event, true);
	      }
	    }
	  }, {
	    key: 'cancelFocusTimeout',
	    value: function cancelFocusTimeout() {
	      if (this.focusTimeout) {
	        clearTimeout(this.focusTimeout);
	        this.focusTimeout = null;
	      }
	    }
	  }, {
	    key: 'createButtonChildren',
	    value: function createButtonChildren() {
	      var _props2 = this.props,
	          centerRipple = _props2.centerRipple,
	          children = _props2.children,
	          disabled = _props2.disabled,
	          disableFocusRipple = _props2.disableFocusRipple,
	          disableKeyboardFocus = _props2.disableKeyboardFocus,
	          disableTouchRipple = _props2.disableTouchRipple,
	          focusRippleColor = _props2.focusRippleColor,
	          focusRippleOpacity = _props2.focusRippleOpacity,
	          touchRippleColor = _props2.touchRippleColor,
	          touchRippleOpacity = _props2.touchRippleOpacity;
	      var isKeyboardFocused = this.state.isKeyboardFocused;

	      // Focus Ripple

	      var focusRipple = isKeyboardFocused && !disabled && !disableFocusRipple && !disableKeyboardFocus ? _react2.default.createElement(_FocusRipple2.default, {
	        color: focusRippleColor,
	        opacity: focusRippleOpacity,
	        show: isKeyboardFocused,
	        style: {
	          overflow: 'hidden'
	        },
	        key: 'focusRipple'
	      }) : undefined;

	      // Touch Ripple
	      var touchRipple = !disabled && !disableTouchRipple ? _react2.default.createElement(
	        _TouchRipple2.default,
	        {
	          centerRipple: centerRipple,
	          color: touchRippleColor,
	          opacity: touchRippleOpacity,
	          key: 'touchRipple'
	        },
	        children
	      ) : undefined;

	      return [focusRipple, touchRipple, touchRipple ? undefined : children];
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props3 = this.props,
	          centerRipple = _props3.centerRipple,
	          children = _props3.children,
	          containerElement = _props3.containerElement,
	          disabled = _props3.disabled,
	          disableFocusRipple = _props3.disableFocusRipple,
	          disableKeyboardFocus = _props3.disableKeyboardFocus,
	          disableTouchRipple = _props3.disableTouchRipple,
	          focusRippleColor = _props3.focusRippleColor,
	          focusRippleOpacity = _props3.focusRippleOpacity,
	          href = _props3.href,
	          keyboardFocused = _props3.keyboardFocused,
	          touchRippleColor = _props3.touchRippleColor,
	          touchRippleOpacity = _props3.touchRippleOpacity,
	          onBlur = _props3.onBlur,
	          onClick = _props3.onClick,
	          onFocus = _props3.onFocus,
	          onKeyUp = _props3.onKeyUp,
	          onKeyDown = _props3.onKeyDown,
	          onKeyboardFocus = _props3.onKeyboardFocus,
	          style = _props3.style,
	          tabIndex = _props3.tabIndex,
	          type = _props3.type,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['centerRipple', 'children', 'containerElement', 'disabled', 'disableFocusRipple', 'disableKeyboardFocus', 'disableTouchRipple', 'focusRippleColor', 'focusRippleOpacity', 'href', 'keyboardFocused', 'touchRippleColor', 'touchRippleOpacity', 'onBlur', 'onClick', 'onFocus', 'onKeyUp', 'onKeyDown', 'onKeyboardFocus', 'style', 'tabIndex', 'type']);
	      var _context$muiTheme = this.context.muiTheme,
	          prepareStyles = _context$muiTheme.prepareStyles,
	          enhancedButton = _context$muiTheme.enhancedButton;


	      var mergedStyles = (0, _simpleAssign2.default)({
	        border: 10,
	        boxSizing: 'border-box',
	        display: 'inline-block',
	        fontFamily: this.context.muiTheme.baseTheme.fontFamily,
	        WebkitTapHighlightColor: enhancedButton.tapHighlightColor, // Remove mobile color flashing (deprecated)
	        cursor: disabled ? 'default' : 'pointer',
	        textDecoration: 'none',
	        margin: 0,
	        padding: 0,
	        outline: 'none',
	        fontSize: 'inherit',
	        fontWeight: 'inherit',
	        position: 'relative', // This is needed so that ripples do not bleed past border radius.
	        verticalAlign: href ? 'middle' : null
	      }, style);

	      // Passing both background:none & backgroundColor can break due to object iteration order
	      if (!mergedStyles.backgroundColor && !mergedStyles.background) {
	        mergedStyles.background = 'none';
	      }

	      if (disabled && href) {
	        return _react2.default.createElement(
	          'span',
	          (0, _extends3.default)({}, other, {
	            style: mergedStyles
	          }),
	          children
	        );
	      }

	      var buttonProps = (0, _extends3.default)({}, other, {
	        style: prepareStyles(mergedStyles),
	        ref: function ref(node) {
	          return _this2.button = node;
	        },
	        disabled: disabled,
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onKeyUp: this.handleKeyUp,
	        onKeyDown: this.handleKeyDown,
	        onClick: this.handleTouchTap,
	        tabIndex: disabled || disableKeyboardFocus ? -1 : tabIndex
	      });

	      if (href) buttonProps.href = href;

	      var buttonChildren = this.createButtonChildren();

	      if (_react2.default.isValidElement(containerElement)) {
	        return _react2.default.cloneElement(containerElement, buttonProps, buttonChildren);
	      }

	      if (!href && containerElement === 'button') {
	        buttonProps.type = type;
	      }

	      return _react2.default.createElement(href ? 'a' : containerElement, buttonProps, buttonChildren);
	    }
	  }]);
	  return EnhancedButton;
	}(_react.Component);

	EnhancedButton.defaultProps = {
	  containerElement: 'button',
	  onBlur: function onBlur() {},
	  onClick: function onClick() {},
	  onFocus: function onFocus() {},
	  onKeyDown: function onKeyDown() {},
	  onKeyUp: function onKeyUp() {},
	  onKeyboardFocus: function onKeyboardFocus() {},
	  tabIndex: 0,
	  type: 'button'
	};
	EnhancedButton.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	EnhancedButton.propTypes = process.env.NODE_ENV !== "production" ? {
	  centerRipple: _propTypes2.default.bool,
	  children: _propTypes2.default.node,
	  containerElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	  disableFocusRipple: _propTypes2.default.bool,
	  disableKeyboardFocus: _propTypes2.default.bool,
	  disableTouchRipple: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  focusRippleColor: _propTypes2.default.string,
	  focusRippleOpacity: _propTypes2.default.number,
	  href: _propTypes2.default.string,
	  keyboardFocused: _propTypes2.default.bool,
	  onBlur: _propTypes2.default.func,
	  onClick: _propTypes2.default.func,
	  onFocus: _propTypes2.default.func,
	  onKeyDown: _propTypes2.default.func,
	  onKeyUp: _propTypes2.default.func,
	  onKeyboardFocus: _propTypes2.default.func,
	  style: _propTypes2.default.object,
	  tabIndex: _propTypes2.default.number,
	  touchRippleColor: _propTypes2.default.string,
	  touchRippleOpacity: _propTypes2.default.number,
	  type: _propTypes2.default.string
	} : {};
	exports.default = EnhancedButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 538 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  once: function once(el, type, callback) {
	    var typeArray = type ? type.split(' ') : [];
	    var recursiveFunction = function recursiveFunction(event) {
	      event.target.removeEventListener(event.type, recursiveFunction);
	      return callback(event);
	    };

	    for (var i = typeArray.length - 1; i >= 0; i--) {
	      this.on(el, typeArray[i], recursiveFunction);
	    }
	  },
	  on: function on(el, type, callback) {
	    if (el.addEventListener) {
	      el.addEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.attachEvent('on' + type, function () {
	        callback.call(el);
	      });
	    }
	  },
	  off: function off(el, type, callback) {
	    if (el.removeEventListener) {
	      el.removeEventListener(type, callback);
	    } else {
	      // IE8+ Support
	      el.detachEvent('on' + type, callback);
	    }
	  },
	  isKeyboard: function isKeyboard(event) {
	    return ['keydown', 'keypress', 'keyup'].indexOf(event.type) !== -1;
	  }
	};

/***/ }),
/* 539 */
/***/ (function(module, exports) {

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
	    if (hasKeyCode) searchInput = hasKeyCode
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]

	  // Everything else (cast to string)
	  var search = String(searchInput)

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)

	  return undefined
	}

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	}

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	}


	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i

	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111

	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */

	var names = exports.names = exports.title = {} // title for backward compat

	// Create reverse mapping
	for (i in codes) names[codes[i]] = i

	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias]
	}


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(530);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _autoPrefix = __webpack_require__(541);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _ScaleIn = __webpack_require__(542);

	var _ScaleIn2 = _interopRequireDefault(_ScaleIn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pulsateDuration = 750;

	var FocusRipple = function (_Component) {
	  (0, _inherits3.default)(FocusRipple, _Component);

	  function FocusRipple() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FocusRipple);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FocusRipple.__proto__ || (0, _getPrototypeOf2.default)(FocusRipple)).call.apply(_ref, [this].concat(args))), _this), _this.pulsate = function () {
	      var innerCircle = _reactDom2.default.findDOMNode(_this.refs.innerCircle);
	      if (!innerCircle) return;

	      var startScale = 'scale(1)';
	      var endScale = 'scale(0.85)';
	      var currentScale = innerCircle.style.transform || startScale;
	      var nextScale = currentScale === startScale ? endScale : startScale;

	      _autoPrefix2.default.set(innerCircle.style, 'transform', nextScale);
	      _this.timeout = setTimeout(_this.pulsate, pulsateDuration);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FocusRipple, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      } else {
	        if (this.timeout) clearTimeout(this.timeout);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeout);
	    }
	  }, {
	    key: 'getRippleElement',
	    value: function getRippleElement(props) {
	      var color = props.color,
	          innerStyle = props.innerStyle,
	          opacity = props.opacity;
	      var _context$muiTheme = this.context.muiTheme,
	          prepareStyles = _context$muiTheme.prepareStyles,
	          ripple = _context$muiTheme.ripple;


	      var innerStyles = (0, _simpleAssign2.default)({
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        borderRadius: '50%',
	        opacity: opacity ? opacity : 0.16,
	        backgroundColor: color || ripple.color,
	        transition: _transitions2.default.easeOut(pulsateDuration + 'ms', 'transform', null, _transitions2.default.easeInOutFunction)
	      }, innerStyle);

	      return _react2.default.createElement('div', { ref: 'innerCircle', style: prepareStyles((0, _simpleAssign2.default)({}, innerStyles)) });
	    }
	  }, {
	    key: 'setRippleSize',
	    value: function setRippleSize() {
	      var el = _reactDom2.default.findDOMNode(this.refs.innerCircle);
	      var height = el.offsetHeight;
	      var width = el.offsetWidth;
	      var size = Math.max(height, width);

	      var oldTop = 0;
	      // For browsers that don't support endsWith()
	      if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
	        oldTop = parseInt(el.style.top);
	      }
	      el.style.height = size + 'px';
	      el.style.top = height / 2 - size / 2 + oldTop + 'px';
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          show = _props.show,
	          style = _props.style;


	      var mergedRootStyles = (0, _simpleAssign2.default)({
	        height: '100%',
	        width: '100%',
	        position: 'absolute',
	        top: 0,
	        left: 0
	      }, style);

	      var ripple = show ? this.getRippleElement(this.props) : null;

	      return _react2.default.createElement(
	        _ScaleIn2.default,
	        {
	          maxScale: 0.85,
	          style: mergedRootStyles
	        },
	        ripple
	      );
	    }
	  }]);
	  return FocusRipple;
	}(_react.Component);

	FocusRipple.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	FocusRipple.propTypes = process.env.NODE_ENV !== "production" ? {
	  color: _propTypes2.default.string,
	  innerStyle: _propTypes2.default.object,
	  opacity: _propTypes2.default.number,
	  show: _propTypes2.default.bool,
	  style: _propTypes2.default.object
	} : {};
	exports.default = FocusRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 541 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  set: function set(style, key, value) {
	    style[key] = value;
	  }
	};

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _TransitionGroup = __webpack_require__(543);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _ScaleInChild = __webpack_require__(546);

	var _ScaleInChild2 = _interopRequireDefault(_ScaleInChild);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ScaleIn = function (_Component) {
	  (0, _inherits3.default)(ScaleIn, _Component);

	  function ScaleIn() {
	    (0, _classCallCheck3.default)(this, ScaleIn);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleIn.__proto__ || (0, _getPrototypeOf2.default)(ScaleIn)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(ScaleIn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          childStyle = _props.childStyle,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'relative',
	        height: '100%'
	      }, style);

	      var newChildren = _react2.default.Children.map(children, function (child) {
	        return _react2.default.createElement(
	          _ScaleInChild2.default,
	          {
	            key: child.key,
	            enterDelay: enterDelay,
	            maxScale: maxScale,
	            minScale: minScale,
	            style: childStyle
	          },
	          child
	        );
	      });

	      return _react2.default.createElement(
	        _TransitionGroup2.default,
	        (0, _extends3.default)({}, other, {
	          style: prepareStyles(mergedRootStyles),
	          component: 'div'
	        }),
	        newChildren
	      );
	    }
	  }]);
	  return ScaleIn;
	}(_react.Component);

	ScaleIn.defaultProps = {
	  enterDelay: 0
	};
	ScaleIn.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	ScaleIn.propTypes = process.env.NODE_ENV !== "production" ? {
	  childStyle: _propTypes2.default.object,
	  children: _propTypes2.default.node,
	  enterDelay: _propTypes2.default.number,
	  maxScale: _propTypes2.default.number,
	  minScale: _propTypes2.default.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = ScaleIn;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _chainFunction = __webpack_require__(544);

	var _chainFunction2 = _interopRequireDefault(_chainFunction);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _ChildMapping = __webpack_require__(545);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var propTypes = {
	  component: _propTypes2.default.any,
	  childFactory: _propTypes2.default.func,
	  children: _propTypes2.default.node
	};

	var defaultProps = {
	  component: 'span',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};

	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.performAppear = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));
	      } else {
	        _this._handleDoneAppearing(key, component);
	      }
	    };

	    _this._handleDoneAppearing = function (key, component) {
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performEnter = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));
	      } else {
	        _this._handleDoneEntering(key, component);
	      }
	    };

	    _this._handleDoneEntering = function (key, component) {
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key, component);
	      }
	    };

	    _this.performLeave = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;

	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key, component);
	      }
	    };

	    _this._handleDoneLeaving = function (key, component) {
	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }

	      delete _this.currentlyTransitioningKeys[key];

	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);

	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.keysToEnter.push(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _extends({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    };

	    _this.childRefs = Object.create(null);

	    _this.state = {
	      children: (0, _ChildMapping.getChildMapping)(props.children)
	    };
	    return _this;
	  }

	  TransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };

	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key, this.childRefs[key]);
	      }
	    }
	  };

	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)
	    });

	    for (var key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (var _key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);
	      if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {
	        this.keysToLeave.push(_key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  };

	  TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;

	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(function (key) {
	      return _this2.performEnter(key, _this2.childRefs[key]);
	    });

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(function (key) {
	      return _this2.performLeave(key, _this2.childRefs[key]);
	    });
	  };

	  TransitionGroup.prototype.render = function render() {
	    var _this3 = this;

	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];

	    var _loop = function _loop(key) {
	      var child = _this3.state.children[key];
	      if (child) {
	        var isCallbackRef = typeof child.ref !== 'string';
	        var factoryChild = _this3.props.childFactory(child);
	        var ref = function ref(r) {
	          _this3.childRefs[key] = r;
	        };

	        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(isCallbackRef, 'string refs are not supported on children of TransitionGroup and will be ignored. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute') : void 0;

	        // Always chaining the refs leads to problems when the childFactory
	        // wraps the child. The child ref callback gets called twice with the
	        // wrapper and the child. So we only need to chain the ref if the
	        // factoryChild is not different from child.
	        if (factoryChild === child && isCallbackRef) {
	          ref = (0, _chainFunction2.default)(child.ref, ref);
	        }

	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(_react2.default.cloneElement(factoryChild, {
	          key: key,
	          ref: ref
	        }));
	      }
	    };

	    for (var key in this.state.children) {
	      _loop(key);
	    }

	    // Do not forward TransitionGroup props to primitive DOM nodes
	    var props = _extends({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;

	    return _react2.default.createElement(this.props.component, props, childrenToRender);
	  };

	  return TransitionGroup;
	}(_react2.default.Component);

	TransitionGroup.displayName = 'TransitionGroup';


	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	TransitionGroup.defaultProps = defaultProps;

	exports.default = TransitionGroup;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 544 */
/***/ (function(module, exports) {

	
	module.exports = function chain(){
	  var len = arguments.length
	  var args = [];

	  for (var i = 0; i < len; i++)
	    args[i] = arguments[i]

	  args = args.filter(function(fn){ return fn != null })

	  if (args.length === 0) return undefined
	  if (args.length === 1) return args[0]

	  return args.reduce(function(current, next){
	    return function chainedFunction() {
	      current.apply(this, arguments);
	      next.apply(this, arguments);
	    };
	  })
	}


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;

	var _react = __webpack_require__(2);

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children) {
	  if (!children) {
	    return children;
	  }
	  var result = {};
	  _react.Children.map(children, function (child) {
	    return child;
	  }).forEach(function (child) {
	    result[child.key] = child;
	  });
	  return result;
	}

	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    if (next.hasOwnProperty(key)) {
	      return next[key];
	    }

	    return prev[key];
	  }

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = {};

	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (next.hasOwnProperty(prevKey)) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending.hasOwnProperty(nextKey)) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }

	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _autoPrefix = __webpack_require__(541);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ScaleInChild = function (_Component) {
	  (0, _inherits3.default)(ScaleInChild, _Component);

	  function ScaleInChild() {
	    (0, _classCallCheck3.default)(this, ScaleInChild);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleInChild.__proto__ || (0, _getPrototypeOf2.default)(ScaleInChild)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(ScaleInChild, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimer);
	      clearTimeout(this.leaveTimer);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentDidAppear',
	    value: function componentDidAppear() {
	      this.animate();
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.animate();
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.minScale + ')');

	      this.leaveTimer = setTimeout(callback, 450);
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '1';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
	    }
	  }, {
	    key: 'initializeAnimation',
	    value: function initializeAnimation(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;

	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(0)');

	      this.enterTimer = setTimeout(callback, this.props.enterDelay);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        top: 0,
	        left: 0,
	        transition: _transitions2.default.easeOut(null, ['transform', 'opacity'])
	      }, style);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles(mergedRootStyles) }),
	        children
	      );
	    }
	  }]);
	  return ScaleInChild;
	}(_react.Component);

	ScaleInChild.defaultProps = {
	  enterDelay: 0,
	  maxScale: 1,
	  minScale: 0
	};
	ScaleInChild.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	ScaleInChild.propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.default.node,
	  enterDelay: _propTypes2.default.number,
	  maxScale: _propTypes2.default.number,
	  minScale: _propTypes2.default.number,
	  style: _propTypes2.default.object
	} : {};
	exports.default = ScaleInChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _toConsumableArray2 = __webpack_require__(548);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _toArray2 = __webpack_require__(558);

	var _toArray3 = _interopRequireDefault(_toArray2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _TransitionGroup = __webpack_require__(543);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	var _dom = __webpack_require__(559);

	var _dom2 = _interopRequireDefault(_dom);

	var _CircleRipple = __webpack_require__(560);

	var _CircleRipple2 = _interopRequireDefault(_CircleRipple);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Remove the first element of the array
	var shift = function shift(_ref) {
	  var _ref2 = (0, _toArray3.default)(_ref),
	      newArray = _ref2.slice(1);

	  return newArray;
	};

	var TouchRipple = function (_Component) {
	  (0, _inherits3.default)(TouchRipple, _Component);

	  function TouchRipple(props, context) {
	    (0, _classCallCheck3.default)(this, TouchRipple);

	    // Touch start produces a mouse down event for compat reasons. To avoid
	    // showing ripples twice we skip showing a ripple for the first mouse down
	    // after a touch start. Note we don't store ignoreNextMouseDown in this.state
	    // to avoid re-rendering when we change it.
	    var _this = (0, _possibleConstructorReturn3.default)(this, (TouchRipple.__proto__ || (0, _getPrototypeOf2.default)(TouchRipple)).call(this, props, context));

	    _this.handleMouseDown = function (event) {
	      // only listen to left clicks
	      if (event.button === 0) {
	        _this.start(event, false);
	      }
	    };

	    _this.handleMouseUp = function () {
	      _this.end();
	    };

	    _this.handleMouseLeave = function () {
	      _this.end();
	    };

	    _this.handleTouchStart = function (event) {
	      event.stopPropagation();
	      // If the user is swiping (not just tapping), save the position so we can
	      // abort ripples if the user appears to be scrolling.
	      if (_this.props.abortOnScroll && event.touches) {
	        _this.startListeningForScrollAbort(event);
	        _this.startTime = Date.now();
	      }
	      _this.start(event, true);
	    };

	    _this.handleTouchEnd = function () {
	      _this.end();
	    };

	    _this.handleTouchMove = function (event) {
	      // Stop trying to abort if we're already 300ms into the animation
	      var timeSinceStart = Math.abs(Date.now() - _this.startTime);
	      if (timeSinceStart > 300) {
	        _this.stopListeningForScrollAbort();
	        return;
	      }

	      // If the user is scrolling...
	      var deltaY = Math.abs(event.touches[0].clientY - _this.firstTouchY);
	      var deltaX = Math.abs(event.touches[0].clientX - _this.firstTouchX);
	      // Call it a scroll after an arbitrary 6px (feels reasonable in testing)
	      if (deltaY > 6 || deltaX > 6) {
	        var currentRipples = _this.state.ripples;
	        var ripple = currentRipples[0];
	        // This clone will replace the ripple in ReactTransitionGroup with a
	        // version that will disappear immediately when removed from the DOM
	        var abortedRipple = _react2.default.cloneElement(ripple, { aborted: true });
	        // Remove the old ripple and replace it with the new updated one
	        currentRipples = shift(currentRipples);
	        currentRipples = [].concat((0, _toConsumableArray3.default)(currentRipples), [abortedRipple]);
	        _this.setState({ ripples: currentRipples }, function () {
	          // Call end after we've set the ripple to abort otherwise the setState
	          // in end() merges with this and the ripple abort fails
	          _this.end();
	        });
	      }
	    };

	    _this.ignoreNextMouseDown = false;

	    _this.state = {
	      // This prop allows us to only render the ReactTransitionGroup
	      // on the first click of the component, making the inital render faster.
	      hasRipples: false,
	      nextKey: 0,
	      ripples: []
	    };
	    return _this;
	  }

	  (0, _createClass3.default)(TouchRipple, [{
	    key: 'start',
	    value: function start(event, isRippleTouchGenerated) {
	      var theme = this.context.muiTheme.ripple;

	      if (this.ignoreNextMouseDown && !isRippleTouchGenerated) {
	        this.ignoreNextMouseDown = false;
	        return;
	      }

	      var ripples = this.state.ripples;

	      // Add a ripple to the ripples array
	      ripples = [].concat((0, _toConsumableArray3.default)(ripples), [_react2.default.createElement(_CircleRipple2.default, {
	        key: this.state.nextKey,
	        style: !this.props.centerRipple ? this.getRippleStyle(event) : {},
	        color: this.props.color || theme.color,
	        opacity: this.props.opacity,
	        touchGenerated: isRippleTouchGenerated
	      })]);

	      this.ignoreNextMouseDown = isRippleTouchGenerated;
	      this.setState({
	        hasRipples: true,
	        nextKey: this.state.nextKey + 1,
	        ripples: ripples
	      });
	    }
	  }, {
	    key: 'end',
	    value: function end() {
	      var currentRipples = this.state.ripples;
	      this.setState({
	        ripples: shift(currentRipples)
	      });
	      if (this.props.abortOnScroll) {
	        this.stopListeningForScrollAbort();
	      }
	    }

	    // Check if the user seems to be scrolling and abort the animation if so

	  }, {
	    key: 'startListeningForScrollAbort',
	    value: function startListeningForScrollAbort(event) {
	      this.firstTouchY = event.touches[0].clientY;
	      this.firstTouchX = event.touches[0].clientX;
	      // Note that when scolling Chrome throttles this event to every 200ms
	      // Also note we don't listen for scroll events directly as there's no general
	      // way to cover cases like scrolling within containers on the page
	      document.body.addEventListener('touchmove', this.handleTouchMove);
	    }
	  }, {
	    key: 'stopListeningForScrollAbort',
	    value: function stopListeningForScrollAbort() {
	      document.body.removeEventListener('touchmove', this.handleTouchMove);
	    }
	  }, {
	    key: 'getRippleStyle',
	    value: function getRippleStyle(event) {
	      var el = _reactDom2.default.findDOMNode(this);
	      var elHeight = el.offsetHeight;
	      var elWidth = el.offsetWidth;
	      var offset = _dom2.default.offset(el);
	      var isTouchEvent = event.touches && event.touches.length;
	      var pageX = isTouchEvent ? event.touches[0].pageX : event.pageX;
	      var pageY = isTouchEvent ? event.touches[0].pageY : event.pageY;
	      var pointerX = pageX - offset.left;
	      var pointerY = pageY - offset.top;
	      var topLeftDiag = this.calcDiag(pointerX, pointerY);
	      var topRightDiag = this.calcDiag(elWidth - pointerX, pointerY);
	      var botRightDiag = this.calcDiag(elWidth - pointerX, elHeight - pointerY);
	      var botLeftDiag = this.calcDiag(pointerX, elHeight - pointerY);
	      var rippleRadius = Math.max(topLeftDiag, topRightDiag, botRightDiag, botLeftDiag);
	      var rippleSize = rippleRadius * 2;
	      var left = pointerX - rippleRadius;
	      var top = pointerY - rippleRadius;

	      return {
	        directionInvariant: true,
	        height: rippleSize,
	        width: rippleSize,
	        top: top,
	        left: left
	      };
	    }
	  }, {
	    key: 'calcDiag',
	    value: function calcDiag(a, b) {
	      return Math.sqrt(a * a + b * b);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          style = _props.style;
	      var _state = this.state,
	          hasRipples = _state.hasRipples,
	          ripples = _state.ripples;
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      var rippleGroup = void 0;

	      if (hasRipples) {
	        var mergedStyles = (0, _simpleAssign2.default)({
	          height: '100%',
	          width: '100%',
	          position: 'absolute',
	          top: 0,
	          left: 0,
	          overflow: 'hidden',
	          pointerEvents: 'none',
	          zIndex: 1 // This is also needed so that ripples do not bleed past a parent border radius.
	        }, style);

	        rippleGroup = _react2.default.createElement(
	          _TransitionGroup2.default,
	          { style: prepareStyles(mergedStyles) },
	          ripples
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        {
	          onMouseUp: this.handleMouseUp,
	          onMouseDown: this.handleMouseDown,
	          onMouseLeave: this.handleMouseLeave,
	          onTouchStart: this.handleTouchStart,
	          onTouchEnd: this.handleTouchEnd
	        },
	        rippleGroup,
	        children
	      );
	    }
	  }]);
	  return TouchRipple;
	}(_react.Component);

	TouchRipple.defaultProps = {
	  abortOnScroll: true
	};
	TouchRipple.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	TouchRipple.propTypes = process.env.NODE_ENV !== "production" ? {
	  abortOnScroll: _propTypes2.default.bool,
	  centerRipple: _propTypes2.default.bool,
	  children: _propTypes2.default.node,
	  color: _propTypes2.default.string,
	  opacity: _propTypes2.default.number,
	  style: _propTypes2.default.object
	} : {};
	exports.default = TouchRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _from = __webpack_require__(549);

	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(550), __esModule: true };

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(479);
	__webpack_require__(551);
	module.exports = __webpack_require__(432).Array.from;


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(433);
	var $export = __webpack_require__(430);
	var toObject = __webpack_require__(463);
	var call = __webpack_require__(552);
	var isArrayIter = __webpack_require__(553);
	var toLength = __webpack_require__(454);
	var createProperty = __webpack_require__(554);
	var getIterFn = __webpack_require__(555);

	$export($export.S + $export.F * !__webpack_require__(557)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(437);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(484);
	var ITERATOR = __webpack_require__(490)('iterator');
	var ArrayProto = Array.prototype;

	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(436);
	var createDesc = __webpack_require__(444);

	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(556);
	var ITERATOR = __webpack_require__(490)('iterator');
	var Iterators = __webpack_require__(484);
	module.exports = __webpack_require__(432).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(451);
	var TAG = __webpack_require__(490)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(490)('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _from = __webpack_require__(549);

	var _from2 = _interopRequireDefault(_from);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);
	};

/***/ }),
/* 559 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  isDescendant: function isDescendant(parent, child) {
	    var node = child.parentNode;

	    while (node !== null) {
	      if (node === parent) return true;
	      node = node.parentNode;
	    }

	    return false;
	  },
	  offset: function offset(el) {
	    var rect = el.getBoundingClientRect();
	    return {
	      top: rect.top + document.body.scrollTop,
	      left: rect.left + document.body.scrollLeft
	    };
	  }
	};

/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(530);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _autoPrefix = __webpack_require__(541);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var CircleRipple = function (_Component) {
	  (0, _inherits3.default)(CircleRipple, _Component);

	  function CircleRipple() {
	    (0, _classCallCheck3.default)(this, CircleRipple);
	    return (0, _possibleConstructorReturn3.default)(this, (CircleRipple.__proto__ || (0, _getPrototypeOf2.default)(CircleRipple)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CircleRipple, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimer);
	      clearTimeout(this.leaveTimer);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentDidAppear',
	    value: function componentDidAppear() {
	      this.animate();
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.animate();
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      style.opacity = 0;
	      // If the animation is aborted, remove from the DOM immediately
	      var removeAfter = this.props.aborted ? 0 : 2000;
	      this.enterTimer = setTimeout(callback, removeAfter);
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      var transitionValue = _transitions2.default.easeOut('2s', 'opacity') + ', ' + _transitions2.default.easeOut('1s', 'transform');
	      _autoPrefix2.default.set(style, 'transition', transitionValue);
	      _autoPrefix2.default.set(style, 'transform', 'scale(1)');
	    }
	  }, {
	    key: 'initializeAnimation',
	    value: function initializeAnimation(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	      style.opacity = this.props.opacity;
	      _autoPrefix2.default.set(style, 'transform', 'scale(0)');
	      this.leaveTimer = setTimeout(callback, 0);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          aborted = _props.aborted,
	          color = _props.color,
	          opacity = _props.opacity,
	          style = _props.style,
	          touchGenerated = _props.touchGenerated,
	          other = (0, _objectWithoutProperties3.default)(_props, ['aborted', 'color', 'opacity', 'style', 'touchGenerated']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      var mergedStyles = (0, _simpleAssign2.default)({
	        position: 'absolute',
	        top: 0,
	        left: 0,
	        height: '100%',
	        width: '100%',
	        borderRadius: '50%',
	        backgroundColor: color
	      }, style);

	      return _react2.default.createElement('div', (0, _extends3.default)({}, other, { style: prepareStyles(mergedStyles) }));
	    }
	  }]);
	  return CircleRipple;
	}(_react.Component);

	CircleRipple.defaultProps = {
	  opacity: 0.1,
	  aborted: false
	};
	CircleRipple.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CircleRipple.propTypes = process.env.NODE_ENV !== "production" ? {
	  aborted: _propTypes2.default.bool,
	  color: _propTypes2.default.string,
	  opacity: _propTypes2.default.number,
	  style: _propTypes2.default.object,
	  touchGenerated: _propTypes2.default.bool
	} : {};
	exports.default = CircleRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _FontIcon = __webpack_require__(562);

	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _FontIcon2.default;

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context, state) {
	  var color = props.color,
	      hoverColor = props.hoverColor;
	  var baseTheme = context.muiTheme.baseTheme;

	  var offColor = color || baseTheme.palette.textColor;
	  var onColor = hoverColor || offColor;

	  return {
	    root: {
	      color: state.hovered ? onColor : offColor,
	      position: 'relative',
	      fontSize: baseTheme.spacing.iconSize,
	      display: 'inline-block',
	      userSelect: 'none',
	      transition: _transitions2.default.easeOut()
	    }
	  };
	}

	var FontIcon = function (_Component) {
	  (0, _inherits3.default)(FontIcon, _Component);

	  function FontIcon() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FontIcon);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FontIcon.__proto__ || (0, _getPrototypeOf2.default)(FontIcon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false
	    }, _this.handleMouseLeave = function (event) {
	      // hover is needed only when a hoverColor is defined
	      if (_this.props.hoverColor !== undefined) {
	        _this.setState({ hovered: false });
	      }
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	    }, _this.handleMouseEnter = function (event) {
	      // hover is needed only when a hoverColor is defined
	      if (_this.props.hoverColor !== undefined) {
	        _this.setState({ hovered: true });
	      }
	      if (_this.props.onMouseEnter) {
	        _this.props.onMouseEnter(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FontIcon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          hoverColor = _props.hoverColor,
	          onMouseLeave = _props.onMouseLeave,
	          onMouseEnter = _props.onMouseEnter,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['hoverColor', 'onMouseLeave', 'onMouseEnter', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      return _react2.default.createElement('span', (0, _extends3.default)({}, other, {
	        onMouseLeave: this.handleMouseLeave,
	        onMouseEnter: this.handleMouseEnter,
	        style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	      }));
	    }
	  }]);
	  return FontIcon;
	}(_react.Component);

	FontIcon.muiName = 'FontIcon';
	FontIcon.defaultProps = {
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {}
	};
	FontIcon.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	FontIcon.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * This is the font color of the font icon. If not specified,
	   * this component will default to muiTheme.palette.textColor.
	   */
	  color: _propTypes2.default.string,
	  /**
	   * This is the icon color when the mouse hovers over the icon.
	   */
	  hoverColor: _propTypes2.default.string,
	  /** @ignore */
	  onMouseEnter: _propTypes2.default.func,
	  /** @ignore */
	  onMouseLeave: _propTypes2.default.func,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = FontIcon;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context, state) {
	  var verticalPosition = props.verticalPosition;
	  var horizontalPosition = props.horizontalPosition;
	  var touchMarginOffset = props.touch ? 10 : 0;
	  var touchOffsetTop = props.touch ? -20 : -10;
	  var offset = verticalPosition === 'bottom' ? 14 + touchMarginOffset : -14 - touchMarginOffset;

	  var _context$muiTheme = context.muiTheme,
	      baseTheme = _context$muiTheme.baseTheme,
	      zIndex = _context$muiTheme.zIndex,
	      tooltip = _context$muiTheme.tooltip,
	      borderRadius = _context$muiTheme.borderRadius;


	  var styles = {
	    root: {
	      position: 'absolute',
	      fontFamily: baseTheme.fontFamily,
	      fontSize: '10px',
	      lineHeight: '22px',
	      padding: '0 8px',
	      zIndex: zIndex.tooltip,
	      color: tooltip.color,
	      overflow: 'hidden',
	      top: -10000,
	      borderRadius: borderRadius,
	      userSelect: 'none',
	      opacity: 0,
	      right: horizontalPosition === 'left' ? 12 : null,
	      left: horizontalPosition === 'center' ? (state.offsetWidth - 48) / 2 * -1 : horizontalPosition === 'right' ? 12 : null,
	      transition: _transitions2.default.easeOut('0ms', 'top', '450ms') + ', ' + _transitions2.default.easeOut('450ms', 'transform', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'opacity', '0ms')
	    },
	    label: {
	      position: 'relative',
	      whiteSpace: 'nowrap'
	    },
	    ripple: {
	      position: 'absolute',
	      left: horizontalPosition === 'center' ? '50%' : horizontalPosition === 'left' ? '100%' : '0%',
	      top: verticalPosition === 'bottom' ? 0 : '100%',
	      transform: 'translate(-50%, -50%)',
	      borderRadius: '50%',
	      backgroundColor: 'transparent',
	      transition: _transitions2.default.easeOut('0ms', 'width', '450ms') + ', ' + _transitions2.default.easeOut('0ms', 'height', '450ms') + ', ' + _transitions2.default.easeOut('450ms', 'backgroundColor', '0ms')
	    },
	    rootWhenShown: {
	      top: verticalPosition === 'top' ? touchOffsetTop : 36,
	      opacity: tooltip.opacity,
	      transform: 'translate(0px, ' + offset + 'px)',
	      transition: _transitions2.default.easeOut('0ms', 'top', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'transform', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'opacity', '0ms')
	    },
	    rootWhenTouched: {
	      fontSize: '14px',
	      lineHeight: '32px',
	      padding: '0 16px'
	    },
	    rippleWhenShown: {
	      backgroundColor: tooltip.rippleBackgroundColor,
	      transition: _transitions2.default.easeOut('450ms', 'width', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'height', '0ms') + ', ' + _transitions2.default.easeOut('450ms', 'backgroundColor', '0ms')
	    }
	  };

	  return styles;
	}

	var Tooltip = function (_Component) {
	  (0, _inherits3.default)(Tooltip, _Component);

	  function Tooltip() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Tooltip);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Tooltip.__proto__ || (0, _getPrototypeOf2.default)(Tooltip)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      offsetWidth: null
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Tooltip, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setRippleSize();
	      this.setTooltipPosition();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps() {
	      this.setTooltipPosition();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.setRippleSize();
	    }
	  }, {
	    key: 'setRippleSize',
	    value: function setRippleSize() {
	      var ripple = this.refs.ripple;
	      var tooltip = this.refs.tooltip;
	      var tooltipWidth = parseInt(tooltip.offsetWidth, 10) / (this.props.horizontalPosition === 'center' ? 2 : 1);
	      var tooltipHeight = parseInt(tooltip.offsetHeight, 10);

	      var rippleDiameter = Math.ceil(Math.sqrt(Math.pow(tooltipHeight, 2) + Math.pow(tooltipWidth, 2)) * 2);
	      if (this.props.show) {
	        ripple.style.height = rippleDiameter + 'px';
	        ripple.style.width = rippleDiameter + 'px';
	      } else {
	        ripple.style.width = '0px';
	        ripple.style.height = '0px';
	      }
	    }
	  }, {
	    key: 'setTooltipPosition',
	    value: function setTooltipPosition() {
	      this.setState({ offsetWidth: this.refs.tooltip.offsetWidth });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          horizontalPosition = _props.horizontalPosition,
	          label = _props.label,
	          show = _props.show,
	          touch = _props.touch,
	          verticalPosition = _props.verticalPosition,
	          other = (0, _objectWithoutProperties3.default)(_props, ['horizontalPosition', 'label', 'show', 'touch', 'verticalPosition']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, {
	          ref: 'tooltip',
	          style: prepareStyles((0, _simpleAssign2.default)(styles.root, this.props.show && styles.rootWhenShown, this.props.touch && styles.rootWhenTouched, this.props.style))
	        }),
	        _react2.default.createElement('div', {
	          ref: 'ripple',
	          style: prepareStyles((0, _simpleAssign2.default)(styles.ripple, this.props.show && styles.rippleWhenShown))
	        }),
	        _react2.default.createElement(
	          'span',
	          { style: prepareStyles(styles.label) },
	          label
	        )
	      );
	    }
	  }]);
	  return Tooltip;
	}(_react.Component);

	Tooltip.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	Tooltip.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * The css class name of the root element.
	   */
	  className: _propTypes2.default.string,
	  horizontalPosition: _propTypes2.default.oneOf(['left', 'right', 'center']),
	  label: _propTypes2.default.node.isRequired,
	  show: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  touch: _propTypes2.default.bool,
	  verticalPosition: _propTypes2.default.oneOf(['top', 'bottom'])
	} : {};
	exports.default = Tooltip;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.extendChildren = extendChildren;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function extendChildren(children, extendedProps, extendedChildren) {
	  return _react2.default.Children.map(children, function (child) {
	    if (!_react2.default.isValidElement(child)) {
	      return child;
	    }

	    var newProps = typeof extendedProps === 'function' ? extendedProps(child) : extendedProps;

	    var newChildren = typeof extendedChildren === 'function' ? extendedChildren(child) : extendedChildren ? extendedChildren : child.props.children;

	    return _react2.default.cloneElement(child, newProps, newChildren);
	  });
	}

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Avatar = __webpack_require__(566);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var card = context.muiTheme.card;


	  return {
	    root: {
	      padding: 16,
	      fontWeight: card.fontWeight,
	      boxSizing: 'border-box',
	      position: 'relative',
	      whiteSpace: 'nowrap'
	    },
	    text: {
	      display: 'inline-block',
	      verticalAlign: 'top',
	      whiteSpace: 'normal',
	      paddingRight: '90px'
	    },
	    avatar: {
	      marginRight: 16
	    },
	    title: {
	      color: props.titleColor || card.titleColor,
	      display: 'block',
	      fontSize: 15
	    },
	    subtitle: {
	      color: props.subtitleColor || card.subtitleColor,
	      display: 'block',
	      fontSize: 14
	    }
	  };
	}

	var CardHeader = function (_Component) {
	  (0, _inherits3.default)(CardHeader, _Component);

	  function CardHeader() {
	    (0, _classCallCheck3.default)(this, CardHeader);
	    return (0, _possibleConstructorReturn3.default)(this, (CardHeader.__proto__ || (0, _getPrototypeOf2.default)(CardHeader)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardHeader, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          avatarProp = _props.avatar,
	          children = _props.children,
	          closeIcon = _props.closeIcon,
	          expandable = _props.expandable,
	          openIcon = _props.openIcon,
	          showExpandableButton = _props.showExpandableButton,
	          style = _props.style,
	          subtitle = _props.subtitle,
	          subtitleColor = _props.subtitleColor,
	          subtitleStyle = _props.subtitleStyle,
	          textStyle = _props.textStyle,
	          title = _props.title,
	          titleColor = _props.titleColor,
	          titleStyle = _props.titleStyle,
	          iconStyle = _props.iconStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'avatar', 'children', 'closeIcon', 'expandable', 'openIcon', 'showExpandableButton', 'style', 'subtitle', 'subtitleColor', 'subtitleStyle', 'textStyle', 'title', 'titleColor', 'titleStyle', 'iconStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var avatar = avatarProp;

	      if ((0, _react.isValidElement)(avatarProp)) {
	        avatar = _react2.default.cloneElement(avatar, {
	          style: (0, _simpleAssign2.default)(styles.avatar, avatar.props.style)
	        });
	      } else if (avatar !== null) {
	        avatar = _react2.default.createElement(_Avatar2.default, { src: avatarProp, style: styles.avatar });
	      }

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        avatar,
	        _react2.default.createElement(
	          'div',
	          { style: prepareStyles((0, _simpleAssign2.default)(styles.text, textStyle)) },
	          _react2.default.createElement(
	            'span',
	            { style: prepareStyles((0, _simpleAssign2.default)(styles.title, titleStyle)) },
	            title
	          ),
	          _react2.default.createElement(
	            'span',
	            { style: prepareStyles((0, _simpleAssign2.default)(styles.subtitle, subtitleStyle)) },
	            subtitle
	          )
	        ),
	        children
	      );
	    }
	  }]);
	  return CardHeader;
	}(_react.Component);

	CardHeader.muiName = 'CardHeader';
	CardHeader.defaultProps = {
	  avatar: null
	};
	CardHeader.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _propTypes2.default.bool,
	  /**
	   * This is the [Avatar](/#/components/avatar) element to be displayed on the Card Header.
	   * If `avatar` is an `Avatar` or other element, it will be rendered.
	   * If `avatar` is a string, it will be used as the image `src` for an `Avatar`.
	   */
	  avatar: _propTypes2.default.node,
	  /**
	   * Can be used to render elements inside the Card Header.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Can be used to pass a closeIcon if you don't like the default expandable close Icon.
	   */
	  closeIcon: _propTypes2.default.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * Override the iconStyle of the Icon Button.
	   */
	  iconStyle: _propTypes2.default.object,
	  /**
	   * Can be used to pass a openIcon if you don't like the default expandable open Icon.
	   */
	  openIcon: _propTypes2.default.node,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * Can be used to render a subtitle in Card Header.
	   */
	  subtitle: _propTypes2.default.node,
	  /**
	   * Override the subtitle color.
	   */
	  subtitleColor: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the subtitle.
	   */
	  subtitleStyle: _propTypes2.default.object,
	  /**
	   * Override the inline-styles of the text.
	   */
	  textStyle: _propTypes2.default.object,
	  /**
	   * Can be used to render a title in Card Header.
	   */
	  title: _propTypes2.default.node,
	  /**
	   * Override the title color.
	   */
	  titleColor: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the title.
	   */
	  titleStyle: _propTypes2.default.object
	} : {};
	exports.default = CardHeader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Avatar = __webpack_require__(567);

	var _Avatar2 = _interopRequireDefault(_Avatar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Avatar2.default;

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var backgroundColor = props.backgroundColor,
	      color = props.color,
	      size = props.size;
	  var avatar = context.muiTheme.avatar;


	  var styles = {
	    root: {
	      color: color || avatar.color,
	      backgroundColor: backgroundColor || avatar.backgroundColor,
	      userSelect: 'none',
	      display: 'inline-flex',
	      alignItems: 'center',
	      justifyContent: 'center',
	      fontSize: size / 2,
	      borderRadius: '50%',
	      height: size,
	      width: size
	    },
	    icon: {
	      color: color || avatar.color,
	      width: size * 0.6,
	      height: size * 0.6,
	      fontSize: size * 0.6,
	      margin: size * 0.2
	    }
	  };

	  return styles;
	}

	var Avatar = function (_Component) {
	  (0, _inherits3.default)(Avatar, _Component);

	  function Avatar() {
	    (0, _classCallCheck3.default)(this, Avatar);
	    return (0, _possibleConstructorReturn3.default)(this, (Avatar.__proto__ || (0, _getPrototypeOf2.default)(Avatar)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Avatar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          backgroundColor = _props.backgroundColor,
	          icon = _props.icon,
	          src = _props.src,
	          style = _props.style,
	          className = _props.className,
	          other = (0, _objectWithoutProperties3.default)(_props, ['backgroundColor', 'icon', 'src', 'style', 'className']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      if (src) {
	        return _react2.default.createElement('img', (0, _extends3.default)({
	          style: prepareStyles((0, _simpleAssign2.default)(styles.root, style))
	        }, other, {
	          src: src,
	          className: className
	        }));
	      } else {
	        return _react2.default.createElement(
	          'div',
	          (0, _extends3.default)({}, other, {
	            style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)),
	            className: className
	          }),
	          icon && _react2.default.cloneElement(icon, {
	            color: styles.icon.color,
	            style: (0, _simpleAssign2.default)(styles.icon, icon.props.style)
	          }),
	          this.props.children
	        );
	      }
	    }
	  }]);
	  return Avatar;
	}(_react.Component);

	Avatar.muiName = 'Avatar';
	Avatar.defaultProps = {
	  size: 40
	};
	Avatar.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	Avatar.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * The backgroundColor of the avatar. Does not apply to image avatars.
	   */
	  backgroundColor: _propTypes2.default.string,
	  /**
	   * Can be used, for instance, to render a letter inside the avatar.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The css class name of the root `div` or `img` element.
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The icon or letter's color.
	   */
	  color: _propTypes2.default.string,
	  /**
	   * This is the SvgIcon or FontIcon to be used inside the avatar.
	   */
	  icon: _propTypes2.default.element,
	  /**
	   * This is the size of the avatar in pixels.
	   */
	  size: _propTypes2.default.number,
	  /**
	   * If passed in, this component will render an img element. Otherwise, a div will be rendered.
	   */
	  src: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = Avatar;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var card = context.muiTheme.card;


	  return {
	    root: {
	      padding: 16,
	      position: 'relative'
	    },
	    title: {
	      fontSize: 24,
	      color: props.titleColor || card.titleColor,
	      display: 'block',
	      lineHeight: '36px'
	    },
	    subtitle: {
	      fontSize: 14,
	      color: props.subtitleColor || card.subtitleColor,
	      display: 'block'
	    }
	  };
	}

	var CardTitle = function (_Component) {
	  (0, _inherits3.default)(CardTitle, _Component);

	  function CardTitle() {
	    (0, _classCallCheck3.default)(this, CardTitle);
	    return (0, _possibleConstructorReturn3.default)(this, (CardTitle.__proto__ || (0, _getPrototypeOf2.default)(CardTitle)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardTitle, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          closeIcon = _props.closeIcon,
	          expandable = _props.expandable,
	          showExpandableButton = _props.showExpandableButton,
	          style = _props.style,
	          subtitle = _props.subtitle,
	          subtitleColor = _props.subtitleColor,
	          subtitleStyle = _props.subtitleStyle,
	          title = _props.title,
	          titleColor = _props.titleColor,
	          titleStyle = _props.titleStyle,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'closeIcon', 'expandable', 'showExpandableButton', 'style', 'subtitle', 'subtitleColor', 'subtitleStyle', 'title', 'titleColor', 'titleStyle']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)({}, styles.root, style);
	      var extendedTitleStyle = (0, _simpleAssign2.default)({}, styles.title, titleStyle);
	      var extendedSubtitleStyle = (0, _simpleAssign2.default)({}, styles.subtitle, subtitleStyle);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }),
	        _react2.default.createElement(
	          'span',
	          { style: prepareStyles(extendedTitleStyle) },
	          title
	        ),
	        _react2.default.createElement(
	          'span',
	          { style: prepareStyles(extendedSubtitleStyle) },
	          subtitle
	        ),
	        children
	      );
	    }
	  }]);
	  return CardTitle;
	}(_react.Component);

	CardTitle.muiName = 'CardTitle';
	CardTitle.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardTitle.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _propTypes2.default.bool,
	  /**
	   * Can be used to render elements inside the Card Title.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Can be used to pass a closeIcon if you don't like the default expandable close Icon.
	   */
	  closeIcon: _propTypes2.default.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * Can be used to render a subtitle in the Card Title.
	   */
	  subtitle: _propTypes2.default.node,
	  /**
	   * Override the subtitle color.
	   */
	  subtitleColor: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the subtitle.
	   */
	  subtitleStyle: _propTypes2.default.object,
	  /**
	   * Can be used to render a title in the Card Title.
	   */
	  title: _propTypes2.default.node,
	  /**
	   * Override the title color.
	   */
	  titleColor: _propTypes2.default.string,
	  /**
	   * Override the inline-styles of the title.
	   */
	  titleStyle: _propTypes2.default.object
	} : {};
	exports.default = CardTitle;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var cardMedia = context.muiTheme.cardMedia;


	  return {
	    root: {
	      position: 'relative'
	    },
	    overlayContainer: {
	      position: 'absolute',
	      top: 0,
	      bottom: 0,
	      right: 0,
	      left: 0
	    },
	    overlay: {
	      height: '100%',
	      position: 'relative'
	    },
	    overlayContent: {
	      position: 'absolute',
	      bottom: 0,
	      right: 0,
	      left: 0,
	      paddingTop: 8,
	      background: cardMedia.overlayContentBackground
	    },
	    media: {},
	    mediaChild: {
	      verticalAlign: 'top',
	      maxWidth: '100%',
	      minWidth: '100%',
	      width: '100%'
	    }
	  };
	}

	var CardMedia = function (_Component) {
	  (0, _inherits3.default)(CardMedia, _Component);

	  function CardMedia() {
	    (0, _classCallCheck3.default)(this, CardMedia);
	    return (0, _possibleConstructorReturn3.default)(this, (CardMedia.__proto__ || (0, _getPrototypeOf2.default)(CardMedia)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardMedia, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          expandable = _props.expandable,
	          mediaStyle = _props.mediaStyle,
	          overlay = _props.overlay,
	          overlayContainerStyle = _props.overlayContainerStyle,
	          overlayContentStyle = _props.overlayContentStyle,
	          overlayStyle = _props.overlayStyle,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'expandable', 'mediaStyle', 'overlay', 'overlayContainerStyle', 'overlayContentStyle', 'overlayStyle', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)(styles.root, style);
	      var extendedMediaStyle = (0, _simpleAssign2.default)(styles.media, mediaStyle);
	      var extendedOverlayContainerStyle = (0, _simpleAssign2.default)(styles.overlayContainer, overlayContainerStyle);
	      var extendedOverlayContentStyle = (0, _simpleAssign2.default)(styles.overlayContent, overlayContentStyle);
	      var extendedOverlayStyle = (0, _simpleAssign2.default)(styles.overlay, overlayStyle);
	      var titleColor = this.context.muiTheme.cardMedia.titleColor;
	      var subtitleColor = this.context.muiTheme.cardMedia.subtitleColor;
	      var color = this.context.muiTheme.cardMedia.color;

	      var styledChildren = _react2.default.Children.map(children, function (child) {
	        if (!child) {
	          return child;
	        }

	        return _react2.default.cloneElement(child, {
	          style: prepareStyles((0, _simpleAssign2.default)({}, styles.mediaChild, child.props.style))
	        });
	      });

	      var overlayChildren = _react2.default.Children.map(overlay, function (child) {
	        var childMuiName = child && child.type ? child.type.muiName : null;

	        if (childMuiName === 'CardHeader' || childMuiName === 'CardTitle') {
	          return _react2.default.cloneElement(child, {
	            titleColor: titleColor,
	            subtitleColor: subtitleColor
	          });
	        } else if (childMuiName === 'CardText') {
	          return _react2.default.cloneElement(child, {
	            color: color
	          });
	        } else {
	          return child;
	        }
	      });

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }),
	        _react2.default.createElement(
	          'div',
	          { style: prepareStyles(extendedMediaStyle) },
	          styledChildren
	        ),
	        overlay ? _react2.default.createElement(
	          'div',
	          { style: prepareStyles(extendedOverlayContainerStyle) },
	          _react2.default.createElement(
	            'div',
	            { style: prepareStyles(extendedOverlayStyle) },
	            _react2.default.createElement(
	              'div',
	              { style: prepareStyles(extendedOverlayContentStyle) },
	              overlayChildren
	            )
	          )
	        ) : ''
	      );
	    }
	  }]);
	  return CardMedia;
	}(_react.Component);

	CardMedia.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardMedia.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _propTypes2.default.bool,
	  /**
	   * Can be used to render elements inside the Card Media.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the Card Media.
	   */
	  mediaStyle: _propTypes2.default.object,
	  /**
	   * Can be used to render overlay element in Card Media.
	   */
	  overlay: _propTypes2.default.node,
	  /**
	   * Override the inline-styles of the overlay container.
	   */
	  overlayContainerStyle: _propTypes2.default.object,
	  /**
	   * Override the inline-styles of the overlay content.
	   */
	  overlayContentStyle: _propTypes2.default.object,
	  /**
	   * Override the inline-styles of the overlay element.
	   */
	  overlayStyle: _propTypes2.default.object,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = CardMedia;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var cardText = context.muiTheme.cardText;


	  return {
	    root: {
	      padding: 16,
	      fontSize: 14,
	      color: props.color || cardText.textColor
	    }
	  };
	}

	var CardText = function (_Component) {
	  (0, _inherits3.default)(CardText, _Component);

	  function CardText() {
	    (0, _classCallCheck3.default)(this, CardText);
	    return (0, _possibleConstructorReturn3.default)(this, (CardText.__proto__ || (0, _getPrototypeOf2.default)(CardText)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardText, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          color = _props.color,
	          expandable = _props.expandable,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'color', 'expandable', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);
	      var rootStyle = (0, _simpleAssign2.default)(styles.root, style);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles(rootStyle) }),
	        children
	      );
	    }
	  }]);
	  return CardText;
	}(_react.Component);

	CardText.muiName = 'CardText';
	CardText.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardText.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _propTypes2.default.bool,
	  /**
	   * Can be used to render elements inside the Card Text.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Override the CardText color.
	   */
	  color: _propTypes2.default.string,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = CardText;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles() {
	  return {
	    root: {
	      padding: 8,
	      position: 'relative'
	    },
	    action: {
	      marginRight: 8
	    }
	  };
	}

	var CardActions = function (_Component) {
	  (0, _inherits3.default)(CardActions, _Component);

	  function CardActions() {
	    (0, _classCallCheck3.default)(this, CardActions);
	    return (0, _possibleConstructorReturn3.default)(this, (CardActions.__proto__ || (0, _getPrototypeOf2.default)(CardActions)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CardActions, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actAsExpander = _props.actAsExpander,
	          children = _props.children,
	          expandable = _props.expandable,
	          showExpandableButton = _props.showExpandableButton,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['actAsExpander', 'children', 'expandable', 'showExpandableButton', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      var styledChildren = _react2.default.Children.map(children, function (child) {
	        if (_react2.default.isValidElement(child)) {
	          return _react2.default.cloneElement(child, {
	            style: (0, _simpleAssign2.default)({}, styles.action, child.props.style)
	          });
	        }
	      });

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        styledChildren
	      );
	    }
	  }]);
	  return CardActions;
	}(_react.Component);

	CardActions.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CardActions.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, a click on this card component expands the card.
	   */
	  actAsExpander: _propTypes2.default.bool,
	  /**
	   * Can be used to render elements inside the Card Action.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * If true, this card component is expandable.
	   */
	  expandable: _propTypes2.default.bool,
	  /**
	   * If true, this card component will include a button to expand the card.
	   */
	  showExpandableButton: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = CardActions;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _FlatButton = __webpack_require__(573);

	var _FlatButton2 = _interopRequireDefault(_FlatButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _FlatButton2.default;

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _colorManipulator = __webpack_require__(574);

	var _EnhancedButton = __webpack_require__(537);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _FlatButtonLabel = __webpack_require__(575);

	var _FlatButtonLabel2 = _interopRequireDefault(_FlatButtonLabel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function validateLabel(props, propName, componentName) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!props.children && props.label !== 0 && !props.label && !props.icon) {
	      return new Error('Required prop label or children or icon was not specified in ' + componentName + '.');
	    }
	  }
	}

	var FlatButton = function (_Component) {
	  (0, _inherits3.default)(FlatButton, _Component);

	  function FlatButton() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, FlatButton);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      touch: false
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      _this.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleMouseEnter = function (event) {
	      // Cancel hover styles for touch devices
	      if (!_this.state.touch) _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchStart(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(FlatButton, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.disabled) {
	        this.setState({
	          hovered: false
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          backgroundColor = _props.backgroundColor,
	          children = _props.children,
	          disabled = _props.disabled,
	          fullWidth = _props.fullWidth,
	          hoverColor = _props.hoverColor,
	          icon = _props.icon,
	          label = _props.label,
	          labelStyle = _props.labelStyle,
	          labelPosition = _props.labelPosition,
	          primary = _props.primary,
	          rippleColor = _props.rippleColor,
	          secondary = _props.secondary,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['backgroundColor', 'children', 'disabled', 'fullWidth', 'hoverColor', 'icon', 'label', 'labelStyle', 'labelPosition', 'primary', 'rippleColor', 'secondary', 'style']);
	      var _context$muiTheme = this.context.muiTheme,
	          borderRadius = _context$muiTheme.borderRadius,
	          _context$muiTheme$but = _context$muiTheme.button,
	          buttonHeight = _context$muiTheme$but.height,
	          buttonMinWidth = _context$muiTheme$but.minWidth,
	          buttonTextTransform = _context$muiTheme$but.textTransform,
	          _context$muiTheme$fla = _context$muiTheme.flatButton,
	          buttonFilterColor = _context$muiTheme$fla.buttonFilterColor,
	          buttonColor = _context$muiTheme$fla.color,
	          disabledTextColor = _context$muiTheme$fla.disabledTextColor,
	          fontSize = _context$muiTheme$fla.fontSize,
	          fontWeight = _context$muiTheme$fla.fontWeight,
	          primaryTextColor = _context$muiTheme$fla.primaryTextColor,
	          secondaryTextColor = _context$muiTheme$fla.secondaryTextColor,
	          textColor = _context$muiTheme$fla.textColor,
	          _context$muiTheme$fla2 = _context$muiTheme$fla.textTransform,
	          textTransform = _context$muiTheme$fla2 === undefined ? buttonTextTransform || 'uppercase' : _context$muiTheme$fla2;

	      var defaultTextColor = disabled ? disabledTextColor : primary ? primaryTextColor : secondary ? secondaryTextColor : textColor;

	      var defaultHoverColor = (0, _colorManipulator.fade)(buttonFilterColor, 0.2);
	      var defaultRippleColor = buttonFilterColor;
	      var buttonHoverColor = hoverColor || defaultHoverColor;
	      var buttonRippleColor = rippleColor || defaultRippleColor;
	      var buttonBackgroundColor = backgroundColor || buttonColor;
	      var hovered = (this.state.hovered || this.state.isKeyboardFocused) && !disabled;

	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        height: buttonHeight,
	        lineHeight: buttonHeight + 'px',
	        minWidth: fullWidth ? '100%' : buttonMinWidth,
	        color: defaultTextColor,
	        transition: _transitions2.default.easeOut(),
	        borderRadius: borderRadius,
	        userSelect: 'none',
	        overflow: 'hidden',
	        backgroundColor: hovered ? buttonHoverColor : buttonBackgroundColor,
	        padding: 0,
	        margin: 0,
	        textAlign: 'center'
	      }, style);

	      var iconCloned = void 0;
	      var labelStyleIcon = {};

	      if (icon) {
	        var iconStyles = (0, _simpleAssign2.default)({
	          verticalAlign: 'middle',
	          marginLeft: label && labelPosition !== 'before' ? 12 : 0,
	          marginRight: label && labelPosition === 'before' ? 12 : 0
	        }, icon.props.style);
	        iconCloned = _react2.default.cloneElement(icon, {
	          color: icon.props.color || mergedRootStyles.color,
	          style: iconStyles,
	          key: 'iconCloned'
	        });

	        if (labelPosition === 'before') {
	          labelStyleIcon.paddingRight = 8;
	        } else {
	          labelStyleIcon.paddingLeft = 8;
	        }
	      }

	      var mergedLabelStyles = (0, _simpleAssign2.default)({
	        letterSpacing: 0,
	        textTransform: textTransform,
	        fontWeight: fontWeight,
	        fontSize: fontSize
	      }, labelStyleIcon, labelStyle);

	      var labelElement = label ? _react2.default.createElement(_FlatButtonLabel2.default, { key: 'labelElement', label: label, style: mergedLabelStyles }) : undefined;

	      // Place label before or after children.
	      var enhancedButtonChildren = labelPosition === 'before' ? [labelElement, iconCloned, children] : [children, iconCloned, labelElement];

	      return _react2.default.createElement(
	        _EnhancedButton2.default,
	        (0, _extends3.default)({}, other, {
	          disabled: disabled,
	          focusRippleColor: buttonRippleColor,
	          focusRippleOpacity: 0.3,
	          onKeyboardFocus: this.handleKeyboardFocus,
	          onMouseLeave: this.handleMouseLeave,
	          onMouseEnter: this.handleMouseEnter,
	          onTouchStart: this.handleTouchStart,
	          style: mergedRootStyles,
	          touchRippleColor: buttonRippleColor,
	          touchRippleOpacity: 0.3
	        }),
	        enhancedButtonChildren
	      );
	    }
	  }]);
	  return FlatButton;
	}(_react.Component);

	FlatButton.muiName = 'FlatButton';
	FlatButton.defaultProps = {
	  disabled: false,
	  fullWidth: false,
	  labelStyle: {},
	  labelPosition: 'after',
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onTouchStart: function onTouchStart() {},
	  primary: false,
	  secondary: false
	};
	FlatButton.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	FlatButton.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Color of button when mouse is not hovering over it.
	   */
	  backgroundColor: _propTypes2.default.string,
	  /**
	   * This is what will be displayed inside the button.
	   * If a label is specified, the text within the label prop will
	   * be displayed. Otherwise, the component will expect children
	   * which will then be displayed. (In our example,
	   * we are nesting an `<input type="file" />` and a `span`
	   * that acts as our label to be displayed.) This only
	   * applies to flat and raised buttons.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The CSS class name of the root element.
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The element to use as the container for the FlatButton. Either a string to
	   * use a DOM element or a ReactElement. This is useful for wrapping the
	   * FlatButton in a custom Link component. If a ReactElement is given, ensure
	   * that it passes all of its given props through to the underlying DOM
	   * element and renders its children prop for proper integration.
	   */
	  containerElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	  /**
	   * If true, the element's ripple effect will be disabled.
	   */
	  disableTouchRipple: _propTypes2.default.bool,
	  /**
	   * Disables the button if set to true.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If true, the button will take up the full width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,
	  /**
	   * Color of button when mouse hovers over.
	   */
	  hoverColor: _propTypes2.default.string,
	  /**
	   * The URL to link to when the button is clicked.
	   */
	  href: _propTypes2.default.string,
	  /**
	   * Use this property to display an icon.
	   */
	  icon: _propTypes2.default.node,
	  /**
	   * Label for the button.
	   */
	  label: validateLabel,
	  /**
	   * Place label before or after the passed children.
	   */
	  labelPosition: _propTypes2.default.oneOf(['before', 'after']),
	  /**
	   * Override the inline-styles of the button's label element.
	   */
	  labelStyle: _propTypes2.default.object,
	  /**
	   * Callback function fired when the button is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the button.
	   */
	  onClick: _propTypes2.default.func,
	  /**
	   * Callback function fired when the element is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the element.
	   * @param {boolean} isKeyboardFocused Indicates whether the element is focused.
	   */
	  onKeyboardFocus: _propTypes2.default.func,
	  /** @ignore */
	  onMouseEnter: _propTypes2.default.func,
	  /** @ignore */
	  onMouseLeave: _propTypes2.default.func,
	  /** @ignore */
	  onTouchStart: _propTypes2.default.func,
	  /**
	   * If true, colors button according to
	   * primaryTextColor from the Theme.
	   */
	  primary: _propTypes2.default.bool,
	  /**
	   * Color for the ripple after button is clicked.
	   */
	  rippleColor: _propTypes2.default.string,
	  /**
	   * If true, colors button according to secondaryTextColor from the theme.
	   * The primary prop has precendent if set to true.
	   */
	  secondary: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = FlatButton;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.convertColorToString = convertColorToString;
	exports.convertHexToRGB = convertHexToRGB;
	exports.decomposeColor = decomposeColor;
	exports.getContrastRatio = getContrastRatio;
	exports.getLuminance = getLuminance;
	exports.emphasize = emphasize;
	exports.fade = fade;
	exports.darken = darken;
	exports.lighten = lighten;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value, min, max) {
	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}

	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function convertColorToString(color) {
	  var type = color.type,
	      values = color.values;


	  if (type.indexOf('rgb') > -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    for (var i = 0; i < 3; i++) {
	      values[i] = parseInt(values[i]);
	    }
	  }

	  var colorString = void 0;

	  if (type.indexOf('hsl') > -1) {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';
	  } else {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];
	  }

	  if (values.length === 4) {
	    colorString += ', ' + color.values[3] + ')';
	  } else {
	    colorString += ')';
	  }

	  return colorString;
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 *  @returns {string} A CSS rgb color string
	 */
	function convertHexToRGB(color) {
	  if (color.length === 4) {
	    var extendedColor = '#';
	    for (var i = 1; i < color.length; i++) {
	      extendedColor += color.charAt(i) + color.charAt(i);
	    }
	    color = extendedColor;
	  }

	  var values = {
	    r: parseInt(color.substr(1, 2), 16),
	    g: parseInt(color.substr(3, 2), 16),
	    b: parseInt(color.substr(5, 2), 16)
	  };

	  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values and color names.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {{type: string, values: number[]}} A MUI color object
	 */
	function decomposeColor(color) {
	  if (color.charAt(0) === '#') {
	    return decomposeColor(convertHexToRGB(color));
	  }

	  var marker = color.indexOf('(');

	  process.env.NODE_ENV !== "production" ? (0, _warning2.default)(marker !== -1, 'Material-UI: The ' + color + ' color was not parsed correctly,\n  because it has an unsupported format (color name or RGB %). This may cause issues in component rendering.') : void 0;

	  var type = color.substring(0, marker);
	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });

	  return { type: type, values: values };
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.
	 */
	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);

	  return Number(contrastRatio.toFixed(2)); // Truncate at two digits
	}

	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);

	  if (color.type.indexOf('rgb') > -1) {
	    var rgb = color.values.map(function (val) {
	      val /= 255; // normalized
	      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	    });
	    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits
	  } else if (color.type.indexOf('hsl') > -1) {
	    return color.values[2] / 100;
	  }
	}

	/**
	 * Darken or lighten a colour, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function emphasize(color) {
	  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;

	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}

	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function fade(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value, 0, 1);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  color.values[3] = value;

	  return convertColorToString(color);
	}

	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return convertColorToString(color);
	}

	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }

	  return convertColorToString(color);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var baseTheme = context.muiTheme.baseTheme;


	  return {
	    root: {
	      position: 'relative',
	      paddingLeft: baseTheme.spacing.desktopGutterLess,
	      paddingRight: baseTheme.spacing.desktopGutterLess,
	      verticalAlign: 'middle'
	    }
	  };
	}

	var FlatButtonLabel = function (_Component) {
	  (0, _inherits3.default)(FlatButtonLabel, _Component);

	  function FlatButtonLabel() {
	    (0, _classCallCheck3.default)(this, FlatButtonLabel);
	    return (0, _possibleConstructorReturn3.default)(this, (FlatButtonLabel.__proto__ || (0, _getPrototypeOf2.default)(FlatButtonLabel)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(FlatButtonLabel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          label = _props.label,
	          style = _props.style;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(
	        'span',
	        { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) },
	        label
	      );
	    }
	  }]);
	  return FlatButtonLabel;
	}(_react.Component);

	FlatButtonLabel.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	FlatButtonLabel.propTypes = process.env.NODE_ENV !== "production" ? {
	  label: _propTypes2.default.node,
	  style: _propTypes2.default.object
	} : {};
	exports.default = FlatButtonLabel;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DailogBox = undefined;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _Dialog = __webpack_require__(577);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	var _List = __webpack_require__(589);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DailogBox = function DailogBox(_ref) {
	    var actions = _ref.actions,
	        open = _ref.open,
	        handleClose = _ref.handleClose,
	        pokeduxDetails = _ref.pokeduxDetails;

	    return _react2.default.createElement(
	        _Dialog2.default,
	        {
	            title: 'Pokemon Details',
	            actions: actions,
	            modal: false,
	            open: open,
	            onRequestClose: handleClose,
	            autoScrollBodyContent: true
	        },
	        _react2.default.createElement(
	            _List.List,
	            null,
	            _react2.default.createElement(_List.ListItem, {
	                primaryText: 'Name',
	                secondaryText: pokeduxDetails.name
	            }),
	            _react2.default.createElement(_List.ListItem, {
	                primaryText: 'Weight',
	                secondaryText: pokeduxDetails.weight
	            }),
	            _react2.default.createElement(_List.ListItem, {
	                primaryText: 'Height',
	                secondaryText: pokeduxDetails.height
	            }),
	            _react2.default.createElement(_List.ListItem, {
	                primaryText: 'Base Experience',
	                secondaryText: pokeduxDetails.base_experience
	            })
	        )
	    );
	};
	exports.DailogBox = DailogBox;

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Dialog = __webpack_require__(578);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Dialog2.default;

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactEventListener = __webpack_require__(579);

	var _reactEventListener2 = _interopRequireDefault(_reactEventListener);

	var _keycode = __webpack_require__(539);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _Overlay = __webpack_require__(586);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _RenderToLayer = __webpack_require__(588);

	var _RenderToLayer2 = _interopRequireDefault(_RenderToLayer);

	var _Paper = __webpack_require__(518);

	var _Paper2 = _interopRequireDefault(_Paper);

	var _TransitionGroup = __webpack_require__(543);

	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var TransitionItem = function (_Component) {
	  (0, _inherits3.default)(TransitionItem, _Component);

	  function TransitionItem() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TransitionItem);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TransitionItem.__proto__ || (0, _getPrototypeOf2.default)(TransitionItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      style: {}
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TransitionItem, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimeout);
	      clearTimeout(this.leaveTimeout);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.componentWillAppear(callback);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      var spacing = this.context.muiTheme.baseTheme.spacing;

	      this.setState({
	        style: {
	          opacity: 1,
	          transform: 'translate(0, ' + spacing.desktopKeylineIncrement + 'px)'
	        }
	      });

	      this.enterTimeout = setTimeout(callback, 450); // matches transition duration
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      this.setState({
	        style: {
	          opacity: 0,
	          transform: 'translate(0, 0)'
	        }
	      });

	      this.leaveTimeout = setTimeout(callback, 450); // matches transition duration
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          children = _props.children,
	          other = (0, _objectWithoutProperties3.default)(_props, ['style', 'children']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)({}, this.state.style, style)) }),
	        children
	      );
	    }
	  }]);
	  return TransitionItem;
	}(_react.Component);

	TransitionItem.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	TransitionItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.default.node,
	  style: _propTypes2.default.object
	} : {};


	function getStyles(props, context) {
	  var autoScrollBodyContent = props.autoScrollBodyContent,
	      open = props.open;
	  var _context$muiTheme = context.muiTheme,
	      _context$muiTheme$bas = _context$muiTheme.baseTheme,
	      spacing = _context$muiTheme$bas.spacing,
	      palette = _context$muiTheme$bas.palette,
	      dialog = _context$muiTheme.dialog,
	      zIndex = _context$muiTheme.zIndex;


	  var gutter = spacing.desktopGutter;
	  var borderScroll = '1px solid ' + palette.borderColor;

	  return {
	    root: {
	      position: 'fixed',
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)', // Remove mobile color flashing (deprecated)
	      zIndex: zIndex.dialog,
	      top: 0,
	      left: open ? 0 : -10000,
	      width: '100%',
	      height: '100%',
	      transition: open ? _transitions2.default.easeOut('0ms', 'left', '0ms') : _transitions2.default.easeOut('0ms', 'left', '450ms')
	    },
	    content: {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)', // Remove mobile color flashing (deprecated)
	      transition: _transitions2.default.easeOut(),
	      position: 'relative',
	      width: '75%',
	      maxWidth: spacing.desktopKeylineIncrement * 12,
	      margin: '0 auto',
	      zIndex: zIndex.dialog
	    },
	    actionsContainer: {
	      boxSizing: 'border-box',
	      WebkitTapHighlightColor: 'rgba(0,0,0,0)', // Remove mobile color flashing (deprecated)
	      padding: 8,
	      width: '100%',
	      textAlign: 'right',
	      marginTop: autoScrollBodyContent ? -1 : 0
	    },
	    overlay: {
	      zIndex: zIndex.dialogOverlay
	    },
	    title: {
	      margin: 0,
	      padding: gutter + 'px ' + gutter + 'px 20px ' + gutter + 'px',
	      color: palette.textColor,
	      fontSize: dialog.titleFontSize,
	      lineHeight: '32px',
	      fontWeight: 400,
	      marginBottom: autoScrollBodyContent ? -1 : 0
	    },
	    body: {
	      fontSize: dialog.bodyFontSize,
	      color: dialog.bodyColor,
	      padding: (props.title ? 0 : gutter) + 'px ' + gutter + 'px ' + gutter + 'px',
	      boxSizing: 'border-box',
	      overflowY: autoScrollBodyContent ? 'auto' : 'hidden',
	      borderTop: autoScrollBodyContent ? borderScroll : 'none',
	      borderBottom: autoScrollBodyContent ? borderScroll : 'none'
	    }
	  };
	}

	var DialogInline = function (_Component2) {
	  (0, _inherits3.default)(DialogInline, _Component2);

	  function DialogInline() {
	    var _ref2;

	    var _temp2, _this2, _ret2;

	    (0, _classCallCheck3.default)(this, DialogInline);

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return _ret2 = (_temp2 = (_this2 = (0, _possibleConstructorReturn3.default)(this, (_ref2 = DialogInline.__proto__ || (0, _getPrototypeOf2.default)(DialogInline)).call.apply(_ref2, [this].concat(args))), _this2), _this2.handleTouchTapOverlay = function () {
	      _this2.requestClose(false);
	    }, _this2.handleKeyUp = function (event) {
	      if ((0, _keycode2.default)(event) === 'esc') {
	        _this2.requestClose(false);
	      }
	    }, _this2.handleResize = function () {
	      _this2.positionDialog();
	    }, _temp2), (0, _possibleConstructorReturn3.default)(_this2, _ret2);
	  }

	  (0, _createClass3.default)(DialogInline, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.positionDialog();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.positionDialog();
	    }
	  }, {
	    key: 'positionDialog',
	    value: function positionDialog() {
	      var _props2 = this.props,
	          actions = _props2.actions,
	          autoDetectWindowHeight = _props2.autoDetectWindowHeight,
	          autoScrollBodyContent = _props2.autoScrollBodyContent,
	          bodyStyle = _props2.bodyStyle,
	          open = _props2.open,
	          repositionOnUpdate = _props2.repositionOnUpdate,
	          title = _props2.title;


	      if (!open) {
	        return;
	      }

	      var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
	      var container = _reactDom2.default.findDOMNode(this);
	      var dialogWindow = _reactDom2.default.findDOMNode(this.refs.dialogWindow);
	      var dialogContent = _reactDom2.default.findDOMNode(this.refs.dialogContent);
	      var minPaddingTop = 16;

	      // Reset the height in case the window was resized.
	      dialogWindow.style.height = '';
	      dialogContent.style.height = '';

	      var dialogWindowHeight = dialogWindow.offsetHeight;
	      var paddingTop = (clientHeight - dialogWindowHeight) / 2 - 64;
	      if (paddingTop < minPaddingTop) paddingTop = minPaddingTop;

	      // Vertically center the dialog window, but make sure it doesn't
	      // transition to that position.
	      if (repositionOnUpdate || !container.style.paddingTop) {
	        container.style.paddingTop = paddingTop + 'px';
	      }

	      // Force a height if the dialog is taller than clientHeight
	      if (autoDetectWindowHeight || autoScrollBodyContent) {
	        var styles = getStyles(this.props, this.context);
	        styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);
	        var maxDialogContentHeight = clientHeight - 2 * 64;

	        if (title) maxDialogContentHeight -= dialogContent.previousSibling.offsetHeight;

	        if (_react2.default.Children.count(actions)) {
	          maxDialogContentHeight -= dialogContent.nextSibling.offsetHeight;
	        }

	        dialogContent.style.maxHeight = maxDialogContentHeight + 'px';
	        if (maxDialogContentHeight > dialogWindowHeight) {
	          dialogContent.style.borderBottom = 'none';
	          dialogContent.style.borderTop = 'none';
	        }
	      }
	    }
	  }, {
	    key: 'requestClose',
	    value: function requestClose(buttonClicked) {
	      if (!buttonClicked && this.props.modal) {
	        return;
	      }

	      if (this.props.onRequestClose) {
	        this.props.onRequestClose(!!buttonClicked);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          actions = _props3.actions,
	          actionsContainerClassName = _props3.actionsContainerClassName,
	          actionsContainerStyle = _props3.actionsContainerStyle,
	          bodyClassName = _props3.bodyClassName,
	          bodyStyle = _props3.bodyStyle,
	          children = _props3.children,
	          className = _props3.className,
	          contentClassName = _props3.contentClassName,
	          contentStyle = _props3.contentStyle,
	          overlayClassName = _props3.overlayClassName,
	          overlayStyle = _props3.overlayStyle,
	          open = _props3.open,
	          paperClassName = _props3.paperClassName,
	          paperProps = _props3.paperProps,
	          style = _props3.style,
	          titleClassName = _props3.titleClassName,
	          titleStyle = _props3.titleStyle,
	          title = _props3.title;
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      styles.root = (0, _simpleAssign2.default)(styles.root, style);
	      styles.content = (0, _simpleAssign2.default)(styles.content, contentStyle);
	      styles.body = (0, _simpleAssign2.default)(styles.body, bodyStyle);
	      styles.actionsContainer = (0, _simpleAssign2.default)(styles.actionsContainer, actionsContainerStyle);
	      styles.overlay = (0, _simpleAssign2.default)(styles.overlay, overlayStyle);
	      styles.title = (0, _simpleAssign2.default)(styles.title, titleStyle);

	      var actionsContainer = _react2.default.Children.count(actions) > 0 && _react2.default.createElement(
	        'div',
	        { className: actionsContainerClassName, style: prepareStyles(styles.actionsContainer) },
	        _react2.default.Children.toArray(actions)
	      );

	      var titleElement = title;
	      if (_react2.default.isValidElement(title)) {
	        titleElement = _react2.default.cloneElement(title, {
	          className: title.props.className || titleClassName,
	          style: prepareStyles((0, _simpleAssign2.default)(styles.title, title.props.style))
	        });
	      } else if (typeof title === 'string') {
	        titleElement = _react2.default.createElement(
	          'h3',
	          { className: titleClassName, style: prepareStyles(styles.title) },
	          title
	        );
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: className, style: prepareStyles(styles.root) },
	        open && _react2.default.createElement(_reactEventListener2.default, {
	          target: 'window',
	          onKeyUp: this.handleKeyUp,
	          onResize: this.handleResize
	        }),
	        _react2.default.createElement(
	          _TransitionGroup2.default,
	          {
	            component: 'div',
	            ref: 'dialogWindow',
	            transitionAppear: true,
	            transitionAppearTimeout: 450,
	            transitionEnter: true,
	            transitionEnterTimeout: 450
	          },
	          open && _react2.default.createElement(
	            TransitionItem,
	            {
	              className: contentClassName,
	              style: styles.content
	            },
	            _react2.default.createElement(
	              _Paper2.default,
	              (0, _extends3.default)({ className: paperClassName, zDepth: 4 }, paperProps),
	              titleElement,
	              _react2.default.createElement(
	                'div',
	                {
	                  ref: 'dialogContent',
	                  className: bodyClassName,
	                  style: prepareStyles(styles.body)
	                },
	                children
	              ),
	              actionsContainer
	            )
	          )
	        ),
	        _react2.default.createElement(_Overlay2.default, {
	          show: open,
	          className: overlayClassName,
	          style: styles.overlay,
	          onClick: this.handleTouchTapOverlay
	        })
	      );
	    }
	  }]);
	  return DialogInline;
	}(_react.Component);

	DialogInline.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	DialogInline.propTypes = process.env.NODE_ENV !== "production" ? {
	  actions: _propTypes2.default.node,
	  actionsContainerClassName: _propTypes2.default.string,
	  actionsContainerStyle: _propTypes2.default.object,
	  autoDetectWindowHeight: _propTypes2.default.bool,
	  autoScrollBodyContent: _propTypes2.default.bool,
	  bodyClassName: _propTypes2.default.string,
	  bodyStyle: _propTypes2.default.object,
	  children: _propTypes2.default.node,
	  className: _propTypes2.default.string,
	  contentClassName: _propTypes2.default.string,
	  contentStyle: _propTypes2.default.object,
	  modal: _propTypes2.default.bool,
	  onRequestClose: _propTypes2.default.func,
	  open: _propTypes2.default.bool.isRequired,
	  overlayClassName: _propTypes2.default.string,
	  overlayStyle: _propTypes2.default.object,
	  paperClassName: _propTypes2.default.string,
	  paperProps: _propTypes2.default.object,
	  repositionOnUpdate: _propTypes2.default.bool,
	  style: _propTypes2.default.object,
	  title: _propTypes2.default.node,
	  titleClassName: _propTypes2.default.string,
	  titleStyle: _propTypes2.default.object
	} : {};

	var Dialog = function (_Component3) {
	  (0, _inherits3.default)(Dialog, _Component3);

	  function Dialog() {
	    var _ref3;

	    var _temp3, _this3, _ret3;

	    (0, _classCallCheck3.default)(this, Dialog);

	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
	      return _react2.default.createElement(DialogInline, _this3.props);
	    }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
	  }

	  (0, _createClass3.default)(Dialog, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(_RenderToLayer2.default, { render: this.renderLayer, open: true, useLayerForClickAway: false });
	    }
	  }]);
	  return Dialog;
	}(_react.Component);

	Dialog.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	Dialog.defaultProps = {
	  autoDetectWindowHeight: true,
	  autoScrollBodyContent: false,
	  modal: false,
	  repositionOnUpdate: true
	};
	Dialog.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Action buttons to display below the Dialog content (`children`).
	   * This property accepts either a React element, or an array of React elements.
	   */
	  actions: _propTypes2.default.node,
	  /**
	   * The `className` to add to the actions container's root element.
	   */
	  actionsContainerClassName: _propTypes2.default.string,
	  /**
	   * Overrides the inline-styles of the actions container's root element.
	   */
	  actionsContainerStyle: _propTypes2.default.object,
	  /**
	   * If set to true, the height of the `Dialog` will be auto detected. A max height
	   * will be enforced so that the content does not extend beyond the viewport.
	   */
	  autoDetectWindowHeight: _propTypes2.default.bool,
	  /**
	   * If set to true, the body content of the `Dialog` will be scrollable.
	   */
	  autoScrollBodyContent: _propTypes2.default.bool,
	  /**
	   * The `className` to add to the content's root element under the title.
	   */
	  bodyClassName: _propTypes2.default.string,
	  /**
	   * Overrides the inline-styles of the content's root element under the title.
	   */
	  bodyStyle: _propTypes2.default.object,
	  /**
	   * The contents of the `Dialog`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The `className` to add to the content container.
	   */
	  contentClassName: _propTypes2.default.string,
	  /**
	   * Overrides the inline-styles of the content container.
	   */
	  contentStyle: _propTypes2.default.object,
	  /**
	   * Force the user to use one of the actions in the `Dialog`.
	   * Clicking outside the `Dialog` will not trigger the `onRequestClose`.
	   */
	  modal: _propTypes2.default.bool,
	  /**
	   * Fired when the `Dialog` is requested to be closed by a click outside the `Dialog` or on the buttons.
	   *
	   * @param {bool} buttonClicked Determines whether a button click triggered this request.
	   */
	  onRequestClose: _propTypes2.default.func,
	  /**
	   * Controls whether the Dialog is opened or not.
	   */
	  open: _propTypes2.default.bool.isRequired,
	  /**
	   * The `className` to add to the `Overlay` component that is rendered behind the `Dialog`.
	   */
	  overlayClassName: _propTypes2.default.string,
	  /**
	   * Overrides the inline-styles of the `Overlay` component that is rendered behind the `Dialog`.
	   */
	  overlayStyle: _propTypes2.default.object,
	  /**
	   * The CSS class name of the `Paper` element.
	   */
	  paperClassName: _propTypes2.default.string,
	  /**
	   * Properties applied to the `Paper` element.
	   */
	  paperProps: _propTypes2.default.object,
	  /**
	   * Determines whether the `Dialog` should be repositioned when it's contents are updated.
	   */
	  repositionOnUpdate: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * The title to display on the `Dialog`. Could be number, string, element or an array containing these types.
	   */
	  title: _propTypes2.default.node,
	  /**
	   * The `className` to add to the title's root container element.
	   */
	  titleClassName: _propTypes2.default.string,
	  /**
	   * Overrides the inline-styles of the title's root container element.
	   */
	  titleStyle: _propTypes2.default.object
	} : {};
	exports.default = Dialog;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _typeof2 = __webpack_require__(476);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _keys = __webpack_require__(580);

	var _keys2 = _interopRequireDefault(_keys);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _assign = __webpack_require__(427);

	var _assign2 = _interopRequireDefault(_assign);

	exports.withOptions = withOptions;

	var _react = __webpack_require__(2);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _shallowEqual = __webpack_require__(583);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	var _supports = __webpack_require__(584);

	var supports = _interopRequireWildcard(_supports);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultEventOptions = {
	  capture: false,
	  passive: false
	};
	/* eslint-disable prefer-spread */

	function mergeDefaultEventOptions(options) {
	  return (0, _assign2.default)({}, defaultEventOptions, options);
	}

	function getEventListenerArgs(eventName, callback, options) {
	  var args = [eventName, callback];
	  args.push(supports.passiveOption ? options : options.capture);
	  return args;
	}

	function on(target, eventName, callback, options) {
	  if (supports.addEventListener) {
	    target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	  } else if (supports.attachEvent) {
	    // IE8+ Support
	    target.attachEvent('on' + eventName, function () {
	      callback.call(target);
	    });
	  }
	}

	function off(target, eventName, callback, options) {
	  if (supports.removeEventListener) {
	    target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	  } else if (supports.detachEvent) {
	    // IE8+ Support
	    target.detachEvent('on' + eventName, callback);
	  }
	}

	function forEachListener(props, iteratee) {
	  var children = props.children,
	      target = props.target,
	      eventProps = (0, _objectWithoutProperties3.default)(props, ['children', 'target']);


	  (0, _keys2.default)(eventProps).forEach(function (name) {
	    if (name.substring(0, 2) !== 'on') {
	      return;
	    }

	    var prop = eventProps[name];
	    var type = typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop);
	    var isObject = type === 'object';
	    var isFunction = type === 'function';

	    if (!isObject && !isFunction) {
	      return;
	    }

	    var capture = name.substr(-7).toLowerCase() === 'capture';
	    var eventName = name.substring(2).toLowerCase();
	    eventName = capture ? eventName.substring(0, eventName.length - 7) : eventName;

	    if (isObject) {
	      iteratee(eventName, prop.handler, prop.options);
	    } else {
	      iteratee(eventName, prop, mergeDefaultEventOptions({ capture: capture }));
	    }
	  });
	}

	function withOptions(handler, options) {
	  process.env.NODE_ENV !== "production" ? (0, _warning2.default)(options, 'react-event-listener: Should be specified options in withOptions.') : void 0;

	  return {
	    handler: handler,
	    options: mergeDefaultEventOptions(options)
	  };
	}

	var EventListener = function (_Component) {
	  (0, _inherits3.default)(EventListener, _Component);

	  function EventListener() {
	    (0, _classCallCheck3.default)(this, EventListener);
	    return (0, _possibleConstructorReturn3.default)(this, (EventListener.__proto__ || (0, _getPrototypeOf2.default)(EventListener)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(EventListener, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.addListeners();
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.addListeners();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'addListeners',
	    value: function addListeners() {
	      this.applyListeners(on);
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      this.applyListeners(off);
	    }
	  }, {
	    key: 'applyListeners',
	    value: function applyListeners(onOrOff) {
	      var target = this.props.target;


	      if (target) {
	        var element = target;

	        if (typeof target === 'string') {
	          element = window[target];
	        }

	        forEachListener(this.props, onOrOff.bind(null, element));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children || null;
	    }
	  }]);
	  return EventListener;
	}(_react.Component);

	EventListener.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * You can provide a single child too.
	   */
	  children: _propTypes2.default.element,
	  /**
	   * The DOM target to listen to.
	   */
	  target: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired
	} : {};
	exports.default = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(581), __esModule: true };

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(582);
	module.exports = __webpack_require__(432).Object.keys;


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(463);
	var $keys = __webpack_require__(446);

	__webpack_require__(469)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 583 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.passiveOption = exports.detachEvent = exports.attachEvent = exports.removeEventListener = exports.addEventListener = exports.canUseDOM = undefined;

	var _defineProperty = __webpack_require__(585);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Inspired by https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/ExecutionEnvironment.js
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = canUseDOM && 'addEventListener' in window;
	var removeEventListener = exports.removeEventListener = canUseDOM && 'removeEventListener' in window;

	// IE8+ Support
	var attachEvent = exports.attachEvent = canUseDOM && 'attachEvent' in window;
	var detachEvent = exports.detachEvent = canUseDOM && 'detachEvent' in window;

	// Passive options
	// Inspired by https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js
	var passiveOption = exports.passiveOption = function () {
	  var cache = null;

	  return function () {
	    if (cache !== null) {
	      return cache;
	    }

	    var supportsPassiveOption = false;

	    try {
	      window.addEventListener('test', null, (0, _defineProperty2.default)({}, 'passive', {
	        get: function get() {
	          supportsPassiveOption = true;
	        }
	      }));
	    } catch (e) {} // eslint-disable-line no-empty

	    cache = supportsPassiveOption;

	    return supportsPassiveOption;
	  }();
	}();

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _defineProperty = __webpack_require__(472);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	exports.default = defineProperty;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//  weak

	function defineProperty(o, p, attr) {
	  return (0, _defineProperty2.default)(o, p, attr);
	}

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _AutoLockScrolling = __webpack_require__(587);

	var _AutoLockScrolling2 = _interopRequireDefault(_AutoLockScrolling);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context) {
	  var overlay = context.muiTheme.overlay;


	  var style = {
	    root: {
	      position: 'fixed',
	      height: '100%',
	      width: '100%',
	      top: 0,
	      left: '-100%',
	      opacity: 0,
	      backgroundColor: overlay.backgroundColor,
	      WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', // Remove mobile color flashing (deprecated)

	      // Two ways to promote overlay to its own render layer
	      willChange: 'opacity',
	      transform: 'translateZ(0)',

	      transition: props.transitionEnabled && _transitions2.default.easeOut('0ms', 'left', '400ms') + ', ' + _transitions2.default.easeOut('400ms', 'opacity')
	    }
	  };

	  if (props.show) {
	    (0, _simpleAssign2.default)(style.root, {
	      left: 0,
	      opacity: 1,
	      transition: _transitions2.default.easeOut('0ms', 'left') + ', ' + _transitions2.default.easeOut('400ms', 'opacity')
	    });
	  }

	  return style;
	}

	var Overlay = function (_Component) {
	  (0, _inherits3.default)(Overlay, _Component);

	  function Overlay() {
	    (0, _classCallCheck3.default)(this, Overlay);
	    return (0, _possibleConstructorReturn3.default)(this, (Overlay.__proto__ || (0, _getPrototypeOf2.default)(Overlay)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Overlay, [{
	    key: 'setOpacity',
	    value: function setOpacity(opacity) {
	      this.refs.overlay.style.opacity = opacity;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          autoLockScrolling = _props.autoLockScrolling,
	          show = _props.show,
	          style = _props.style,
	          transitionEnabled = _props.transitionEnabled,
	          other = (0, _objectWithoutProperties3.default)(_props, ['autoLockScrolling', 'show', 'style', 'transitionEnabled']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { ref: 'overlay', style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        autoLockScrolling && _react2.default.createElement(_AutoLockScrolling2.default, { lock: show })
	      );
	    }
	  }]);
	  return Overlay;
	}(_react.Component);

	Overlay.defaultProps = {
	  autoLockScrolling: true,
	  style: {},
	  transitionEnabled: true
	};
	Overlay.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	Overlay.propTypes = process.env.NODE_ENV !== "production" ? {
	  autoLockScrolling: _propTypes2.default.bool,
	  show: _propTypes2.default.bool.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  transitionEnabled: _propTypes2.default.bool
	} : {};
	exports.default = Overlay;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(2);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var originalBodyOverflow = null;
	var lockingCounter = 0;

	var AutoLockScrolling = function (_Component) {
	  (0, _inherits3.default)(AutoLockScrolling, _Component);

	  function AutoLockScrolling() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, AutoLockScrolling);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AutoLockScrolling.__proto__ || (0, _getPrototypeOf2.default)(AutoLockScrolling)).call.apply(_ref, [this].concat(args))), _this), _this.locked = false, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(AutoLockScrolling, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.lock === true) {
	        this.preventScrolling();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.lock !== nextProps.lock) {
	        if (nextProps.lock) {
	          this.preventScrolling();
	        } else {
	          this.allowScrolling();
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.allowScrolling();
	    }

	    // force to only lock/unlock once

	  }, {
	    key: 'preventScrolling',
	    value: function preventScrolling() {
	      if (this.locked === true) {
	        return;
	      }

	      lockingCounter = lockingCounter + 1;
	      this.locked = true;

	      // only lock the first time the component is mounted.
	      if (lockingCounter === 1) {
	        var body = document.getElementsByTagName('body')[0];
	        originalBodyOverflow = body.style.overflow;
	        body.style.overflow = 'hidden';
	      }
	    }
	  }, {
	    key: 'allowScrolling',
	    value: function allowScrolling() {
	      if (this.locked === true) {
	        lockingCounter = lockingCounter - 1;
	        this.locked = false;
	      }

	      if (lockingCounter === 0 && originalBodyOverflow !== null) {
	        var body = document.getElementsByTagName('body')[0];
	        body.style.overflow = originalBodyOverflow || '';
	        originalBodyOverflow = null;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	  return AutoLockScrolling;
	}(_react.Component);

	AutoLockScrolling.propTypes = process.env.NODE_ENV !== "production" ? {
	  lock: _propTypes2.default.bool.isRequired
	} : {};
	exports.default = AutoLockScrolling;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(2);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _dom = __webpack_require__(559);

	var _dom2 = _interopRequireDefault(_dom);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// heavily inspired by https://github.com/Khan/react-components/blob/master/js/layered-component-mixin.jsx
	var RenderToLayer = function (_Component) {
	  (0, _inherits3.default)(RenderToLayer, _Component);

	  function RenderToLayer() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, RenderToLayer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RenderToLayer.__proto__ || (0, _getPrototypeOf2.default)(RenderToLayer)).call.apply(_ref, [this].concat(args))), _this), _this.onClickAway = function (event) {
	      if (event.defaultPrevented) {
	        return;
	      }

	      if (!_this.props.componentClickAway) {
	        return;
	      }

	      if (!_this.props.open) {
	        return;
	      }

	      var el = _this.layer;
	      if (event.target !== el && event.target === window || document.documentElement.contains(event.target) && !_dom2.default.isDescendant(el, event.target)) {
	        _this.props.componentClickAway(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(RenderToLayer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.renderLayer();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderLayer();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.unrenderLayer();
	    }
	  }, {
	    key: 'getLayer',
	    value: function getLayer() {
	      return this.layer;
	    }
	  }, {
	    key: 'unrenderLayer',
	    value: function unrenderLayer() {
	      if (!this.layer) {
	        return;
	      }

	      if (this.props.useLayerForClickAway) {
	        this.layer.style.position = 'relative';
	        this.layer.removeEventListener('touchstart', this.onClickAway);
	        this.layer.removeEventListener('click', this.onClickAway);
	      } else {
	        window.removeEventListener('touchstart', this.onClickAway);
	        window.removeEventListener('click', this.onClickAway);
	      }

	      (0, _reactDom.unmountComponentAtNode)(this.layer);
	      document.body.removeChild(this.layer);
	      this.layer = null;
	    }

	    /**
	     * By calling this method in componentDidMount() and
	     * componentDidUpdate(), you're effectively creating a "wormhole" that
	     * funnels React's hierarchical updates through to a DOM node on an
	     * entirely different part of the page.
	     */

	  }, {
	    key: 'renderLayer',
	    value: function renderLayer() {
	      var _this2 = this;

	      var _props = this.props,
	          open = _props.open,
	          render = _props.render;


	      if (open) {
	        if (!this.layer) {
	          this.layer = document.createElement('div');
	          document.body.appendChild(this.layer);

	          if (this.props.useLayerForClickAway) {
	            this.layer.addEventListener('touchstart', this.onClickAway);
	            this.layer.addEventListener('click', this.onClickAway);
	            this.layer.style.position = 'fixed';
	            this.layer.style.top = 0;
	            this.layer.style.bottom = 0;
	            this.layer.style.left = 0;
	            this.layer.style.right = 0;
	            this.layer.style.zIndex = this.context.muiTheme.zIndex.layer;
	          } else {
	            setTimeout(function () {
	              window.addEventListener('touchstart', _this2.onClickAway);
	              window.addEventListener('click', _this2.onClickAway);
	            }, 0);
	          }
	        }

	        var layerElement = render();
	        this.layerElement = (0, _reactDom.unstable_renderSubtreeIntoContainer)(this, layerElement, this.layer);
	      } else {
	        this.unrenderLayer();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	  return RenderToLayer;
	}(_react.Component);

	RenderToLayer.defaultProps = {
	  useLayerForClickAway: true
	};
	RenderToLayer.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	RenderToLayer.propTypes = process.env.NODE_ENV !== "production" ? {
	  componentClickAway: _propTypes2.default.func,
	  open: _propTypes2.default.bool.isRequired,
	  render: _propTypes2.default.func.isRequired,
	  useLayerForClickAway: _propTypes2.default.bool
	} : {};
	exports.default = RenderToLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.makeSelectable = exports.ListItem = exports.List = undefined;

	var _List2 = __webpack_require__(590);

	var _List3 = _interopRequireDefault(_List2);

	var _ListItem2 = __webpack_require__(593);

	var _ListItem3 = _interopRequireDefault(_ListItem2);

	var _makeSelectable2 = __webpack_require__(597);

	var _makeSelectable3 = _interopRequireDefault(_makeSelectable2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.List = _List3.default;
	exports.ListItem = _ListItem3.default;
	exports.makeSelectable = _makeSelectable3.default;
	exports.default = _List3.default;

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Subheader = __webpack_require__(591);

	var _Subheader2 = _interopRequireDefault(_Subheader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var List = function (_Component) {
	  (0, _inherits3.default)(List, _Component);

	  function List() {
	    (0, _classCallCheck3.default)(this, List);
	    return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(List, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;


	      var hasSubheader = false;

	      var firstChild = _react.Children.toArray(children)[0];
	      if ((0, _react.isValidElement)(firstChild) && firstChild.type === _Subheader2.default) {
	        hasSubheader = true;
	      }

	      var styles = {
	        root: {
	          padding: (hasSubheader ? 0 : 8) + 'px 0px 8px 0px'
	        }
	      };

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        children
	      );
	    }
	  }]);
	  return List;
	}(_react.Component);

	List.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	List.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * These are usually `ListItem`s that are passed to
	   * be part of the list.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = List;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _Subheader = __webpack_require__(592);

	var _Subheader2 = _interopRequireDefault(_Subheader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Subheader2.default;

/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Subheader = function Subheader(props, context) {
	  var children = props.children,
	      inset = props.inset,
	      style = props.style,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
	  var _context$muiTheme = context.muiTheme,
	      prepareStyles = _context$muiTheme.prepareStyles,
	      subheader = _context$muiTheme.subheader;


	  var styles = {
	    root: {
	      boxSizing: 'border-box',
	      color: subheader.color,
	      fontSize: 14,
	      fontWeight: subheader.fontWeight,
	      lineHeight: '48px',
	      paddingLeft: inset ? 72 : 16,
	      width: '100%'
	    }
	  };

	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	    children
	  );
	};

	Subheader.muiName = 'Subheader';

	Subheader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Node that will be placed inside the `Subheader`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * If true, the `Subheader` will be indented.
	   */
	  inset: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};

	Subheader.defaultProps = {
	  inset: false
	};

	Subheader.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};

	exports.default = Subheader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _reactDom = __webpack_require__(159);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _shallowEqual = __webpack_require__(530);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _colorManipulator = __webpack_require__(574);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	var _EnhancedButton = __webpack_require__(537);

	var _EnhancedButton2 = _interopRequireDefault(_EnhancedButton);

	var _IconButton = __webpack_require__(535);

	var _IconButton2 = _interopRequireDefault(_IconButton);

	var _expandLess = __webpack_require__(594);

	var _expandLess2 = _interopRequireDefault(_expandLess);

	var _expandMore = __webpack_require__(595);

	var _expandMore2 = _interopRequireDefault(_expandMore);

	var _NestedList = __webpack_require__(596);

	var _NestedList2 = _interopRequireDefault(_NestedList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getStyles(props, context, state) {
	  var autoGenerateNestedIndicator = props.autoGenerateNestedIndicator,
	      insetChildren = props.insetChildren,
	      leftAvatar = props.leftAvatar,
	      leftCheckbox = props.leftCheckbox,
	      leftIcon = props.leftIcon,
	      nestedItems = props.nestedItems,
	      nestedLevel = props.nestedLevel,
	      rightAvatar = props.rightAvatar,
	      rightIcon = props.rightIcon,
	      rightIconButton = props.rightIconButton,
	      rightToggle = props.rightToggle,
	      secondaryText = props.secondaryText,
	      secondaryTextLines = props.secondaryTextLines;
	  var muiTheme = context.muiTheme;
	  var listItem = muiTheme.listItem;


	  var textColor = muiTheme.baseTheme.palette.textColor;
	  var hoverColor = props.hoverColor || (0, _colorManipulator.fade)(textColor, 0.1);
	  var singleAvatar = !secondaryText && (leftAvatar || rightAvatar);
	  var singleNoAvatar = !secondaryText && !(leftAvatar || rightAvatar);
	  var twoLine = secondaryText && secondaryTextLines === 1;
	  var threeLine = secondaryText && secondaryTextLines > 1;

	  var isKeyboardFocused = (props.isKeyboardFocused !== undefined ? props : state).isKeyboardFocused;

	  var styles = {
	    root: {
	      backgroundColor: (isKeyboardFocused || state.hovered) && !state.rightIconButtonHovered && !state.rightIconButtonKeyboardFocused ? hoverColor : null,
	      color: textColor,
	      display: 'block',
	      fontSize: 16,
	      lineHeight: '16px',
	      position: 'relative',
	      transition: _transitions2.default.easeOut()
	    },

	    // This inner div is needed so that ripples will span the entire container
	    innerDiv: {
	      marginLeft: nestedLevel * listItem.nestedLevelDepth,
	      paddingLeft: leftIcon || leftAvatar || leftCheckbox || insetChildren ? 72 : 16,
	      paddingRight: rightIcon || rightAvatar || rightIconButton || nestedItems.length && autoGenerateNestedIndicator ? 56 : rightToggle ? 72 : 16,
	      paddingBottom: singleAvatar ? 20 : 16,
	      paddingTop: singleNoAvatar || threeLine ? 16 : 20,
	      position: 'relative'
	    },

	    icons: {
	      height: 24,
	      width: 24,
	      display: 'block',
	      position: 'absolute',
	      top: twoLine ? 12 : singleAvatar ? 4 : 0,
	      margin: 12
	    },

	    leftIcon: {
	      left: 4
	    },

	    rightIcon: {
	      right: 4
	    },

	    avatars: {
	      position: 'absolute',
	      top: singleAvatar ? 8 : 16
	    },

	    label: {
	      cursor: 'pointer'
	    },

	    leftAvatar: {
	      left: 16
	    },

	    rightAvatar: {
	      right: 16
	    },

	    leftCheckbox: {
	      position: 'absolute',
	      display: 'block',
	      width: 24,
	      top: twoLine ? 24 : singleAvatar ? 16 : 12,
	      left: 16
	    },

	    primaryText: {},

	    rightIconButton: {
	      position: 'absolute',
	      display: 'block',
	      top: twoLine ? 12 : singleAvatar ? 4 : 0,
	      right: 4
	    },

	    rightToggle: {
	      position: 'absolute',
	      display: 'block',
	      width: 54,
	      top: twoLine ? 25 : singleAvatar ? 17 : 13,
	      right: 8
	    },

	    secondaryText: {
	      fontSize: 14,
	      lineHeight: threeLine ? '18px' : '16px',
	      height: threeLine ? 36 : 16,
	      margin: 0,
	      marginTop: 4,
	      color: listItem.secondaryTextColor,

	      // needed for 2 and 3 line ellipsis
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      whiteSpace: threeLine ? null : 'nowrap',
	      display: threeLine ? '-webkit-box' : null,
	      WebkitLineClamp: threeLine ? 2 : null,
	      WebkitBoxOrient: threeLine ? 'vertical' : null
	    }
	  };

	  return styles;
	}

	var ListItem = function (_Component) {
	  (0, _inherits3.default)(ListItem, _Component);

	  function ListItem() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, ListItem);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ListItem.__proto__ || (0, _getPrototypeOf2.default)(ListItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      hovered: false,
	      isKeyboardFocused: false,
	      open: false,
	      rightIconButtonHovered: false,
	      rightIconButtonKeyboardFocused: false,
	      touch: false
	    }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
	      _this.setState({ isKeyboardFocused: isKeyboardFocused });
	      _this.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleMouseEnter = function (event) {
	      if (!_this.state.touch) _this.setState({ hovered: true });
	      _this.props.onMouseEnter(event);
	    }, _this.handleMouseLeave = function (event) {
	      _this.setState({ hovered: false });
	      _this.props.onMouseLeave(event);
	    }, _this.handleTouchTap = function (event) {
	      if (_this.props.onClick) {
	        _this.props.onClick(event);
	      }

	      if (_this.props.primaryTogglesNestedList) {
	        _this.handleNestedListToggle(event);
	      }
	    }, _this.handleNestedListToggle = function (event) {
	      if (_this.props.leftCheckbox) {
	        event.preventDefault();
	      }
	      event.stopPropagation();

	      if (_this.props.open === null) {
	        _this.setState({ open: !_this.state.open }, function () {
	          _this.props.onNestedListToggle(_this);
	        });
	      } else {
	        // Exposing `this` in the callback is quite a bad API.
	        // I'm doing a one level deep clone to expose a fake state.open.
	        _this.props.onNestedListToggle((0, _extends3.default)({}, _this, {
	          state: {
	            open: !_this.state.open
	          }
	        }));
	      }
	    }, _this.handleRightIconButtonKeyboardFocus = function (event, isKeyboardFocused) {
	      if (isKeyboardFocused) {
	        _this.setState({
	          isKeyboardFocused: false,
	          rightIconButtonKeyboardFocused: isKeyboardFocused
	        });
	      }

	      var iconButton = _this.props.rightIconButton;

	      if (iconButton && iconButton.props.onKeyboardFocus) iconButton.props.onKeyboardFocus(event, isKeyboardFocused);
	    }, _this.handleRightIconButtonMouseLeave = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      _this.setState({ rightIconButtonHovered: false });
	      if (iconButton && iconButton.props.onMouseLeave) iconButton.props.onMouseLeave(event);
	    }, _this.handleRightIconButtonMouseEnter = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      _this.setState({ rightIconButtonHovered: true });
	      if (iconButton && iconButton.props.onMouseEnter) iconButton.props.onMouseEnter(event);
	    }, _this.handleRightIconButtonMouseUp = function (event) {
	      var iconButton = _this.props.rightIconButton;
	      event.stopPropagation();
	      if (iconButton && iconButton.props.onMouseUp) iconButton.props.onMouseUp(event);
	    }, _this.handleRightIconButtonTouchTap = function (event) {
	      var iconButton = _this.props.rightIconButton;

	      // Stop the event from bubbling up to the list-item
	      event.stopPropagation();
	      if (iconButton && iconButton.props.onClick) iconButton.props.onClick(event);
	    }, _this.handleTouchStart = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchStart(event);
	    }, _this.handleTouchEnd = function (event) {
	      _this.setState({ touch: true });
	      _this.props.onTouchEnd(event);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(ListItem, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        open: this.props.open === null ? this.props.initiallyOpen === true : this.props.open
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // update the state when the component is controlled.
	      if (nextProps.open !== null) this.setState({ open: nextProps.open });
	      if (nextProps.disabled && this.state.hovered) this.setState({ hovered: false });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);
	    }

	    // This method is needed by the `MenuItem` component.

	  }, {
	    key: 'applyFocusState',
	    value: function applyFocusState(focusState) {
	      if (this.button) {
	        var buttonEl = _reactDom2.default.findDOMNode(this.button);

	        switch (focusState) {
	          case 'none':
	            buttonEl.blur();
	            break;
	          case 'focused':
	            buttonEl.focus();
	            break;
	          case 'keyboard-focused':
	            this.button.setKeyboardFocus();
	            buttonEl.focus();
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'createDisabledElement',
	    value: function createDisabledElement(styles, contentChildren, additionalProps) {
	      var _props = this.props,
	          innerDivStyle = _props.innerDivStyle,
	          style = _props.style;


	      var mergedDivStyles = (0, _simpleAssign2.default)({}, styles.root, styles.innerDiv, innerDivStyle, style);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, additionalProps, {
	          style: this.context.muiTheme.prepareStyles(mergedDivStyles)
	        }),
	        contentChildren
	      );
	    }
	  }, {
	    key: 'createLabelElement',
	    value: function createLabelElement(styles, contentChildren, additionalProps) {
	      var _props2 = this.props,
	          innerDivStyle = _props2.innerDivStyle,
	          style = _props2.style;


	      var mergedLabelStyles = (0, _simpleAssign2.default)({}, styles.root, styles.innerDiv, innerDivStyle, styles.label, style);

	      return _react2.default.createElement(
	        'label',
	        (0, _extends3.default)({}, additionalProps, {
	          style: this.context.muiTheme.prepareStyles(mergedLabelStyles)
	        }),
	        contentChildren
	      );
	    }
	  }, {
	    key: 'createTextElement',
	    value: function createTextElement(styles, data, key) {
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      if (_react2.default.isValidElement(data)) {
	        var style = (0, _simpleAssign2.default)({}, styles, data.props.style);
	        if (typeof data.type === 'string') {
	          // if element is a native dom node
	          style = prepareStyles(style);
	        }
	        return _react2.default.cloneElement(data, {
	          key: key,
	          style: style
	        });
	      }

	      return _react2.default.createElement(
	        'div',
	        { key: key, style: prepareStyles(styles) },
	        data
	      );
	    }
	  }, {
	    key: 'pushElement',
	    value: function pushElement(children, element, baseStyles, additionalProps) {
	      if (element) {
	        var styles = (0, _simpleAssign2.default)({}, baseStyles, element.props.style);
	        children.push(_react2.default.cloneElement(element, (0, _extends3.default)({
	          key: children.length,
	          style: styles
	        }, additionalProps)));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props3 = this.props,
	          autoGenerateNestedIndicator = _props3.autoGenerateNestedIndicator,
	          children = _props3.children,
	          containerElement = _props3.containerElement,
	          disabled = _props3.disabled,
	          disableKeyboardFocus = _props3.disableKeyboardFocus,
	          hoverColor = _props3.hoverColor,
	          initiallyOpen = _props3.initiallyOpen,
	          innerDivStyle = _props3.innerDivStyle,
	          insetChildren = _props3.insetChildren,
	          leftAvatar = _props3.leftAvatar,
	          leftCheckbox = _props3.leftCheckbox,
	          leftIcon = _props3.leftIcon,
	          nestedItems = _props3.nestedItems,
	          nestedLevel = _props3.nestedLevel,
	          nestedListStyle = _props3.nestedListStyle,
	          onKeyboardFocus = _props3.onKeyboardFocus,
	          isKeyboardFocused = _props3.isKeyboardFocused,
	          onMouseEnter = _props3.onMouseEnter,
	          onMouseLeave = _props3.onMouseLeave,
	          onNestedListToggle = _props3.onNestedListToggle,
	          onTouchStart = _props3.onTouchStart,
	          onClick = _props3.onClick,
	          rightAvatar = _props3.rightAvatar,
	          rightIcon = _props3.rightIcon,
	          rightIconButton = _props3.rightIconButton,
	          rightToggle = _props3.rightToggle,
	          primaryText = _props3.primaryText,
	          primaryTogglesNestedList = _props3.primaryTogglesNestedList,
	          secondaryText = _props3.secondaryText,
	          secondaryTextLines = _props3.secondaryTextLines,
	          style = _props3.style,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['autoGenerateNestedIndicator', 'children', 'containerElement', 'disabled', 'disableKeyboardFocus', 'hoverColor', 'initiallyOpen', 'innerDivStyle', 'insetChildren', 'leftAvatar', 'leftCheckbox', 'leftIcon', 'nestedItems', 'nestedLevel', 'nestedListStyle', 'onKeyboardFocus', 'isKeyboardFocused', 'onMouseEnter', 'onMouseLeave', 'onNestedListToggle', 'onTouchStart', 'onClick', 'rightAvatar', 'rightIcon', 'rightIconButton', 'rightToggle', 'primaryText', 'primaryTogglesNestedList', 'secondaryText', 'secondaryTextLines', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context, this.state);
	      var contentChildren = [children];

	      if (leftIcon) {
	        var additionalProps = {
	          color: leftIcon.props.color || this.context.muiTheme.listItem.leftIconColor
	        };
	        this.pushElement(contentChildren, leftIcon, (0, _simpleAssign2.default)({}, styles.icons, styles.leftIcon), additionalProps);
	      }

	      if (rightIcon) {
	        var _additionalProps = {
	          color: rightIcon.props.color || this.context.muiTheme.listItem.rightIconColor
	        };
	        this.pushElement(contentChildren, rightIcon, (0, _simpleAssign2.default)({}, styles.icons, styles.rightIcon), _additionalProps);
	      }

	      if (leftAvatar) {
	        this.pushElement(contentChildren, leftAvatar, (0, _simpleAssign2.default)({}, styles.avatars, styles.leftAvatar));
	      }

	      if (rightAvatar) {
	        this.pushElement(contentChildren, rightAvatar, (0, _simpleAssign2.default)({}, styles.avatars, styles.rightAvatar));
	      }

	      if (leftCheckbox) {
	        this.pushElement(contentChildren, leftCheckbox, (0, _simpleAssign2.default)({}, styles.leftCheckbox));
	      }

	      // RightIconButtonElement
	      var hasNestListItems = nestedItems.length;
	      var hasRightElement = rightAvatar || rightIcon || rightIconButton || rightToggle;
	      var needsNestedIndicator = hasNestListItems && autoGenerateNestedIndicator && !hasRightElement;

	      if (rightIconButton || needsNestedIndicator) {
	        var rightIconButtonElement = rightIconButton;
	        var rightIconButtonHandlers = {
	          onKeyboardFocus: this.handleRightIconButtonKeyboardFocus,
	          onMouseEnter: this.handleRightIconButtonMouseEnter,
	          onMouseLeave: this.handleRightIconButtonMouseLeave,
	          onClick: this.handleRightIconButtonTouchTap,
	          onMouseDown: this.handleRightIconButtonMouseUp,
	          onMouseUp: this.handleRightIconButtonMouseUp
	        };

	        // Create a nested list indicator icon if we don't have an icon on the right
	        if (needsNestedIndicator) {
	          rightIconButtonElement = this.state.open ? _react2.default.createElement(
	            _IconButton2.default,
	            null,
	            _react2.default.createElement(_expandLess2.default, null)
	          ) : _react2.default.createElement(
	            _IconButton2.default,
	            null,
	            _react2.default.createElement(_expandMore2.default, null)
	          );
	          rightIconButtonHandlers.onClick = this.handleNestedListToggle;
	        }

	        this.pushElement(contentChildren, rightIconButtonElement, (0, _simpleAssign2.default)({}, styles.rightIconButton), rightIconButtonHandlers);
	      }

	      if (rightToggle) {
	        this.pushElement(contentChildren, rightToggle, (0, _simpleAssign2.default)({}, styles.rightToggle));
	      }

	      if (primaryText) {
	        var primaryTextElement = this.createTextElement(styles.primaryText, primaryText, 'primaryText');
	        contentChildren.push(primaryTextElement);
	      }

	      if (secondaryText) {
	        var secondaryTextElement = this.createTextElement(styles.secondaryText, secondaryText, 'secondaryText');
	        contentChildren.push(secondaryTextElement);
	      }

	      var nestedList = nestedItems.length ? _react2.default.createElement(
	        _NestedList2.default,
	        { nestedLevel: nestedLevel, open: this.state.open, style: nestedListStyle },
	        nestedItems
	      ) : undefined;

	      var simpleLabel = !primaryTogglesNestedList && (leftCheckbox || rightToggle);

	      return _react2.default.createElement(
	        'div',
	        null,
	        simpleLabel ? this.createLabelElement(styles, contentChildren, other) : disabled ? this.createDisabledElement(styles, contentChildren, other) : _react2.default.createElement(
	          _EnhancedButton2.default,
	          (0, _extends3.default)({
	            containerElement: containerElement
	          }, other, {
	            disableKeyboardFocus: disableKeyboardFocus || this.state.rightIconButtonKeyboardFocused,
	            onKeyboardFocus: this.handleKeyboardFocus,
	            onMouseLeave: this.handleMouseLeave,
	            onMouseEnter: this.handleMouseEnter,
	            onTouchStart: this.handleTouchStart,
	            onTouchEnd: this.handleTouchEnd,
	            onClick: this.handleTouchTap,
	            disabled: disabled,
	            ref: function ref(node) {
	              return _this2.button = node;
	            },
	            style: (0, _simpleAssign2.default)({}, styles.root, style)
	          }),
	          _react2.default.createElement(
	            'div',
	            { style: prepareStyles((0, _simpleAssign2.default)(styles.innerDiv, innerDivStyle)) },
	            contentChildren
	          )
	        ),
	        nestedList
	      );
	    }
	  }]);
	  return ListItem;
	}(_react.Component);

	ListItem.muiName = 'ListItem';
	ListItem.defaultProps = {
	  autoGenerateNestedIndicator: true,
	  containerElement: 'span',
	  disableKeyboardFocus: false,
	  disabled: false,
	  initiallyOpen: false,
	  insetChildren: false,
	  nestedItems: [],
	  nestedLevel: 0,
	  onKeyboardFocus: function onKeyboardFocus() {},
	  onMouseEnter: function onMouseEnter() {},
	  onMouseLeave: function onMouseLeave() {},
	  onNestedListToggle: function onNestedListToggle() {},
	  onTouchEnd: function onTouchEnd() {},
	  onTouchStart: function onTouchStart() {},
	  open: null,
	  primaryTogglesNestedList: false,
	  secondaryTextLines: 1
	};
	ListItem.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	ListItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * If true, generate a nested-list-indicator icon when nested list
	   * items are detected. Note that an indicator will not be created
	   * if a `rightIcon` or `rightIconButton` has been provided to
	   * the element.
	   */
	  autoGenerateNestedIndicator: _propTypes2.default.bool,
	  /**
	   * Children passed into the `ListItem`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The element to use as the container for the ListItem. Either a string to
	   * use a DOM element or a ReactElement. This is useful for wrapping the
	   * ListItem in a custom Link component. If a ReactElement is given, ensure
	   * that it passes all of its given props through to the underlying DOM
	   * element and renders its children prop for proper integration.
	   */
	  containerElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	  /**
	   * If true, the element will not be able to be focused by the keyboard.
	   */
	  disableKeyboardFocus: _propTypes2.default.bool,
	  /**
	   * If true, the element will not be clickable
	   * and will not display hover effects.
	   * This is automatically disabled if either `leftCheckbox`
	   * or `rightToggle` is set.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	  * Override the hover background color.
	  */
	  hoverColor: _propTypes2.default.string,
	  /**
	   * If true, the nested `ListItem`s are initially displayed.
	   */
	  initiallyOpen: _propTypes2.default.bool,
	  /**
	   * Override the inline-styles of the inner div element.
	   */
	  innerDivStyle: _propTypes2.default.object,
	  /**
	   * If true, the children will be indented by 72px.
	   * This is useful if there is no left avatar or left icon.
	   */
	  insetChildren: _propTypes2.default.bool,
	  /**
	   * Use to control if the list item should render as keyboard focused.  If
	   * undefined (default), this will be automatically managed.  If provided,
	   * it will change the components style.  Note that this will not change the
	   * actual focus - and should only be used when you want to simulate
	   * keyboard focus (eg. in a rich text input autocomplete).
	   */
	  isKeyboardFocused: _propTypes2.default.bool,
	  /**
	   * This is the `Avatar` element to be displayed on the left side.
	   */
	  leftAvatar: _propTypes2.default.element,
	  /**
	   * This is the `Checkbox` element to be displayed on the left side.
	   */
	  leftCheckbox: _propTypes2.default.element,
	  /**
	   * This is the `SvgIcon` or `FontIcon` to be displayed on the left side.
	   */
	  leftIcon: _propTypes2.default.element,
	  /**
	   * An array of `ListItem`s to nest underneath the current `ListItem`.
	   */
	  nestedItems: _propTypes2.default.arrayOf(_propTypes2.default.element),
	  /**
	   * Controls how deep a `ListItem` appears.
	   * This property is automatically managed, so modify at your own risk.
	   */
	  nestedLevel: _propTypes2.default.number,
	  /**
	   * Override the inline-styles of the nested items' `NestedList`.
	   */
	  nestedListStyle: _propTypes2.default.object,
	  /**
	   * Callback function fired when the list item is touch-tapped.
	   *
	   * @param {object} event TouchTap event targeting the list item.
	   */
	  onClick: _propTypes2.default.func,
	  /**
	   * Callback function fired when the `ListItem` is focused or blurred by the keyboard.
	   *
	   * @param {object} event `focus` or `blur` event targeting the `ListItem`.
	   * @param {boolean} isKeyboardFocused If true, the `ListItem` is focused.
	   */
	  onKeyboardFocus: _propTypes2.default.func,
	  /** @ignore */
	  onMouseEnter: _propTypes2.default.func,
	  /** @ignore */
	  onMouseLeave: _propTypes2.default.func,
	  /**
	   * Callback function fired when the `ListItem` toggles its nested list.
	   *
	   * @param {object} listItem The `ListItem`.
	   */
	  onNestedListToggle: _propTypes2.default.func,
	  /** @ignore */
	  onTouchEnd: _propTypes2.default.func,
	  /** @ignore */
	  onTouchStart: _propTypes2.default.func,
	  /**
	   * Control toggle state of nested list.
	   */
	  open: _propTypes2.default.bool,
	  /**
	   * This is the block element that contains the primary text.
	   * If a string is passed in, a div tag will be rendered.
	   */
	  primaryText: _propTypes2.default.node,
	  /**
	   * If true, clicking or tapping the primary text of the `ListItem`
	   * toggles the nested list.
	   */
	  primaryTogglesNestedList: _propTypes2.default.bool,
	  /**
	   * This is the `Avatar` element to be displayed on the right side.
	   */
	  rightAvatar: _propTypes2.default.element,
	  /**
	   * This is the `SvgIcon` or `FontIcon` to be displayed on the right side.
	   */
	  rightIcon: _propTypes2.default.element,
	  /**
	   * This is the `IconButton` to be displayed on the right side.
	   * Hovering over this button will remove the `ListItem` hover.
	   * Also, clicking on this button will not trigger a
	   * ripple on the `ListItem`; the event will be stopped and prevented
	   * from bubbling up to cause a `ListItem` click.
	   */
	  rightIconButton: _propTypes2.default.element,
	  /**
	   * This is the `Toggle` element to display on the right side.
	   */
	  rightToggle: _propTypes2.default.element,
	  /**
	   * This is the block element that contains the secondary text.
	   * If a string is passed in, a div tag will be rendered.
	   */
	  secondaryText: _propTypes2.default.node,
	  /**
	   * Can be 1 or 2. This is the number of secondary
	   * text lines before ellipsis will show.
	   */
	  secondaryTextLines: _propTypes2.default.oneOf([1, 2]),
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};
	exports.default = ListItem;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(524);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(532);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var NavigationExpandLess = function NavigationExpandLess(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _react2.default.createElement('path', { d: 'M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z' })
	  );
	};
	NavigationExpandLess = (0, _pure2.default)(NavigationExpandLess);
	NavigationExpandLess.displayName = 'NavigationExpandLess';
	NavigationExpandLess.muiName = 'SvgIcon';

	exports.default = NavigationExpandLess;

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _pure = __webpack_require__(524);

	var _pure2 = _interopRequireDefault(_pure);

	var _SvgIcon = __webpack_require__(532);

	var _SvgIcon2 = _interopRequireDefault(_SvgIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var NavigationExpandMore = function NavigationExpandMore(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _react2.default.createElement('path', { d: 'M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z' })
	  );
	};
	NavigationExpandMore = (0, _pure2.default)(NavigationExpandMore);
	NavigationExpandMore.displayName = 'NavigationExpandMore';
	NavigationExpandMore.muiName = 'SvgIcon';

	exports.default = NavigationExpandMore;

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _List = __webpack_require__(590);

	var _List2 = _interopRequireDefault(_List);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var NestedList = function NestedList(props) {
	  var children = props.children,
	      open = props.open,
	      nestedLevel = props.nestedLevel,
	      style = props.style;


	  if (!open) {
	    return null;
	  }

	  return _react2.default.createElement(
	    _List2.default,
	    { style: style },
	    _react.Children.map(children, function (child) {
	      return (0, _react.isValidElement)(child) ? (0, _react.cloneElement)(child, {
	        nestedLevel: nestedLevel + 1
	      }) : child;
	    })
	  );
	};

	NestedList.propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.default.node,
	  nestedLevel: _propTypes2.default.number.isRequired,
	  open: _propTypes2.default.bool.isRequired,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object
	} : {};

	exports.default = NestedList;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.makeSelectable = undefined;

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _colorManipulator = __webpack_require__(574);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var makeSelectable = function makeSelectable(MyComponent) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_Component) {
	    (0, _inherits3.default)(_class, _Component);

	    function _class() {
	      var _ref;

	      var _temp, _this, _ret;

	      (0, _classCallCheck3.default)(this, _class);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = _class.__proto__ || (0, _getPrototypeOf2.default)(_class)).call.apply(_ref, [this].concat(args))), _this), _this.hasSelectedDescendant = function (previousValue, child) {
	        if (_react2.default.isValidElement(child) && child.props.nestedItems && child.props.nestedItems.length > 0) {
	          return child.props.nestedItems.reduce(_this.hasSelectedDescendant, previousValue);
	        }
	        return previousValue || _this.isChildSelected(child, _this.props);
	      }, _this.handleItemTouchTap = function (event, item) {
	        var itemValue = item.props.value;

	        if (itemValue !== _this.props.value) {
	          if (_this.props.onChange) {
	            _this.props.onChange(event, itemValue);
	          }
	        }
	      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	    }

	    (0, _createClass3.default)(_class, [{
	      key: 'extendChild',
	      value: function extendChild(child, styles, selectedItemStyle) {
	        var _this2 = this;

	        if (child && child.type && child.type.muiName === 'ListItem') {
	          var selected = this.isChildSelected(child, this.props);
	          var selectedChildrenStyles = void 0;
	          if (selected) {
	            selectedChildrenStyles = (0, _simpleAssign2.default)({}, styles, selectedItemStyle);
	          }

	          var mergedChildrenStyles = (0, _simpleAssign2.default)({}, child.props.style, selectedChildrenStyles);

	          this.keyIndex += 1;

	          return _react2.default.cloneElement(child, {
	            onClick: function onClick(event) {
	              _this2.handleItemTouchTap(event, child);
	              if (child.props.onClick) {
	                child.props.onClick(event);
	              }
	            },
	            key: this.keyIndex,
	            style: mergedChildrenStyles,
	            nestedItems: child.props.nestedItems.map(function (child) {
	              return _this2.extendChild(child, styles, selectedItemStyle);
	            }),
	            initiallyOpen: this.isInitiallyOpen(child)
	          });
	        } else {
	          return child;
	        }
	      }
	    }, {
	      key: 'isInitiallyOpen',
	      value: function isInitiallyOpen(child) {
	        if (child.props.initiallyOpen) {
	          return child.props.initiallyOpen;
	        }
	        return this.hasSelectedDescendant(false, child);
	      }
	    }, {
	      key: 'isChildSelected',
	      value: function isChildSelected(child, props) {
	        return props.value === child.props.value;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this3 = this;

	        var _props = this.props,
	            children = _props.children,
	            selectedItemStyle = _props.selectedItemStyle,
	            other = (0, _objectWithoutProperties3.default)(_props, ['children', 'selectedItemStyle']);


	        this.keyIndex = 0;
	        var styles = {};

	        if (!selectedItemStyle) {
	          var textColor = this.context.muiTheme.baseTheme.palette.textColor;
	          styles.backgroundColor = (0, _colorManipulator.fade)(textColor, 0.2);
	        }

	        return _react2.default.createElement(
	          MyComponent,
	          (0, _extends3.default)({}, other, this.state),
	          _react.Children.map(children, function (child) {
	            return _this3.extendChild(child, styles, selectedItemStyle);
	          })
	        );
	      }
	    }]);
	    return _class;
	  }(_react.Component), _class.propTypes = {
	    children: _propTypes2.default.node,
	    onChange: _propTypes2.default.func,
	    selectedItemStyle: _propTypes2.default.object,
	    value: _propTypes2.default.any
	  }, _class.contextTypes = {
	    muiTheme: _propTypes2.default.object.isRequired
	  }, _temp2;
	};

	exports.makeSelectable = makeSelectable;
	exports.default = makeSelectable;

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;

	var _CircularProgress = __webpack_require__(599);

	var _CircularProgress2 = _interopRequireDefault(_CircularProgress);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _CircularProgress2.default;

/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends2 = __webpack_require__(426);

	var _extends3 = _interopRequireDefault(_extends2);

	var _objectWithoutProperties2 = __webpack_require__(464);

	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _simpleAssign = __webpack_require__(517);

	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _autoPrefix = __webpack_require__(541);

	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);

	var _transitions = __webpack_require__(521);

	var _transitions2 = _interopRequireDefault(_transitions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getRelativeValue(value, min, max) {
	  var clampedValue = Math.min(Math.max(min, value), max);
	  return clampedValue / (max - min);
	}

	function getArcLength(fraction, props) {
	  return fraction * Math.PI * (props.size - props.thickness);
	}

	function getStyles(props, context) {
	  var max = props.max,
	      min = props.min,
	      size = props.size,
	      value = props.value;
	  var palette = context.muiTheme.baseTheme.palette;


	  var styles = {
	    root: {
	      position: 'relative',
	      display: 'inline-block',
	      width: size,
	      height: size
	    },
	    wrapper: {
	      width: size,
	      height: size,
	      display: 'inline-block',
	      transition: _transitions2.default.create('transform', '20s', null, 'linear'),
	      transitionTimingFunction: 'linear'
	    },
	    svg: {
	      width: size,
	      height: size,
	      position: 'relative'
	    },
	    path: {
	      stroke: props.color || palette.primary1Color,
	      strokeLinecap: 'round',
	      transition: _transitions2.default.create('all', '1.5s', null, 'ease-in-out')
	    }
	  };

	  if (props.mode === 'determinate') {
	    var relVal = getRelativeValue(value, min, max);
	    styles.path.transition = _transitions2.default.create('all', '0.3s', null, 'linear');
	    styles.path.strokeDasharray = getArcLength(relVal, props) + ', ' + getArcLength(1, props);
	  }

	  return styles;
	}

	var CircularProgress = function (_Component) {
	  (0, _inherits3.default)(CircularProgress, _Component);

	  function CircularProgress() {
	    (0, _classCallCheck3.default)(this, CircularProgress);
	    return (0, _possibleConstructorReturn3.default)(this, (CircularProgress.__proto__ || (0, _getPrototypeOf2.default)(CircularProgress)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CircularProgress, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.scalePath(this.refs.path);
	      this.rotateWrapper(this.refs.wrapper);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.scalePathTimer);
	      clearTimeout(this.rotateWrapperTimer);
	    }
	  }, {
	    key: 'scalePath',
	    value: function scalePath(path) {
	      var _this2 = this;

	      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      if (this.props.mode !== 'indeterminate') return;

	      step %= 3;

	      if (step === 0) {
	        path.style.strokeDasharray = getArcLength(0, this.props) + ', ' + getArcLength(1, this.props);
	        path.style.strokeDashoffset = 0;
	        path.style.transitionDuration = '0ms';
	      } else if (step === 1) {
	        path.style.strokeDasharray = getArcLength(0.7, this.props) + ', ' + getArcLength(1, this.props);
	        path.style.strokeDashoffset = getArcLength(-0.3, this.props);
	        path.style.transitionDuration = '750ms';
	      } else {
	        path.style.strokeDasharray = getArcLength(0.7, this.props) + ', ' + getArcLength(1, this.props);
	        path.style.strokeDashoffset = getArcLength(-1, this.props);
	        path.style.transitionDuration = '850ms';
	      }

	      this.scalePathTimer = setTimeout(function () {
	        return _this2.scalePath(path, step + 1);
	      }, step ? 750 : 250);
	    }
	  }, {
	    key: 'rotateWrapper',
	    value: function rotateWrapper(wrapper) {
	      var _this3 = this;

	      if (this.props.mode !== 'indeterminate') return;

	      _autoPrefix2.default.set(wrapper.style, 'transform', 'rotate(0deg)');
	      _autoPrefix2.default.set(wrapper.style, 'transitionDuration', '0ms');

	      setTimeout(function () {
	        _autoPrefix2.default.set(wrapper.style, 'transform', 'rotate(1800deg)');
	        _autoPrefix2.default.set(wrapper.style, 'transitionDuration', '10s');
	        _autoPrefix2.default.set(wrapper.style, 'transitionTimingFunction', 'linear');
	      }, 50);

	      this.rotateWrapperTimer = setTimeout(function () {
	        return _this3.rotateWrapper(wrapper);
	      }, 10050);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          innerStyle = _props.innerStyle,
	          size = _props.size,
	          thickness = _props.thickness,
	          other = (0, _objectWithoutProperties3.default)(_props, ['style', 'innerStyle', 'size', 'thickness']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;

	      var styles = getStyles(this.props, this.context);

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
	        _react2.default.createElement(
	          'div',
	          { ref: 'wrapper', style: prepareStyles((0, _simpleAssign2.default)(styles.wrapper, innerStyle)) },
	          _react2.default.createElement(
	            'svg',
	            {
	              viewBox: '0 0 ' + size + ' ' + size,
	              style: prepareStyles(styles.svg)
	            },
	            _react2.default.createElement('circle', {
	              ref: 'path',
	              style: prepareStyles(styles.path),
	              cx: size / 2,
	              cy: size / 2,
	              r: (size - thickness) / 2,
	              fill: 'none',
	              strokeWidth: thickness,
	              strokeMiterlimit: '20'
	            })
	          )
	        )
	      );
	    }
	  }]);
	  return CircularProgress;
	}(_react.Component);

	CircularProgress.defaultProps = {
	  mode: 'indeterminate',
	  value: 0,
	  min: 0,
	  max: 100,
	  size: 40,
	  thickness: 3.5
	};
	CircularProgress.contextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	CircularProgress.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Override the progress's color.
	   */
	  color: _propTypes2.default.string,
	  /**
	   * Style for inner wrapper div.
	   */
	  innerStyle: _propTypes2.default.object,
	  /**
	   * The max value of progress, only works in determinate mode.
	   */
	  max: _propTypes2.default.number,
	  /**
	   * The min value of progress, only works in determinate mode.
	   */
	  min: _propTypes2.default.number,
	  /**
	   * The mode of show your progress, indeterminate
	   * for when there is no value for progress.
	   */
	  mode: _propTypes2.default.oneOf(['determinate', 'indeterminate']),
	  /**
	   * The diameter of the progress in pixels.
	   */
	  size: _propTypes2.default.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * Stroke width in pixels.
	   */
	  thickness: _propTypes2.default.number,
	  /**
	   * The value of progress, only works in determinate mode.
	   */
	  value: _propTypes2.default.number
	} : {};
	exports.default = CircularProgress;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _redux = __webpack_require__(166);

	var _pokedex_reducer = __webpack_require__(601);

	var _pokedex_reducer2 = _interopRequireDefault(_pokedex_reducer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _redux.combineReducers)({
	    pokedux: _pokedex_reducer2.default
	});

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _types = __webpack_require__(251);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var INITIAL_STATE = { data: '', loading: false, error: '', pokedux_data: [], pokedux_details: '' };

	exports.default = function () {
	    var _extends2;

	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
	    var action = arguments[1];

	    switch (action.type) {
	        case _types.FETCH_START:
	            return _extends({}, state, { loading: true });
	        case _types.FETCH_END:
	            return _extends({}, state, { loading: false });
	        case _types.FETCH_GET_SUCCESS:
	            return _extends({}, state, { pokedux_data: action.payload, error: '', loading: false });
	        case _types.FETCH_GETBYID_SUCCESS:
	            return _extends({}, state, { pokedux_details: action.payload, error: '', loading: false });
	        case _types.FETCH_GET_FAIL:
	            return _extends({}, state, (_extends2 = { error: action.payload }, _defineProperty(_extends2, 'error', 'Some thing is wrong,Please try again'), _defineProperty(_extends2, 'loading', false), _extends2));
	        default:
	            return state;
	    }
	};

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(465);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(471);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(475);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(509);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _react = __webpack_require__(2);

	var _propTypes = __webpack_require__(205);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _getMuiTheme = __webpack_require__(603);

	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var MuiThemeProvider = function (_Component) {
	  (0, _inherits3.default)(MuiThemeProvider, _Component);

	  function MuiThemeProvider() {
	    (0, _classCallCheck3.default)(this, MuiThemeProvider);
	    return (0, _possibleConstructorReturn3.default)(this, (MuiThemeProvider.__proto__ || (0, _getPrototypeOf2.default)(MuiThemeProvider)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(MuiThemeProvider, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        muiTheme: this.props.muiTheme || (0, _getMuiTheme2.default)()
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return MuiThemeProvider;
	}(_react.Component);

	MuiThemeProvider.childContextTypes = {
	  muiTheme: _propTypes2.default.object.isRequired
	};
	MuiThemeProvider.propTypes = process.env.NODE_ENV !== "production" ? {
	  children: _propTypes2.default.element,
	  muiTheme: _propTypes2.default.object
	} : {};
	exports.default = MuiThemeProvider;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _toConsumableArray2 = __webpack_require__(548);

	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

	exports.default = getMuiTheme;

	var _lodash = __webpack_require__(604);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _colorManipulator = __webpack_require__(574);

	var _lightBaseTheme = __webpack_require__(605);

	var _lightBaseTheme2 = _interopRequireDefault(_lightBaseTheme);

	var _zIndex = __webpack_require__(608);

	var _zIndex2 = _interopRequireDefault(_zIndex);

	var _autoprefixer = __webpack_require__(609);

	var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

	var _callOnce = __webpack_require__(641);

	var _callOnce2 = _interopRequireDefault(_callOnce);

	var _rtl = __webpack_require__(642);

	var _rtl2 = _interopRequireDefault(_rtl);

	var _compose = __webpack_require__(643);

	var _compose2 = _interopRequireDefault(_compose);

	var _typography = __webpack_require__(644);

	var _typography2 = _interopRequireDefault(_typography);

	var _colors = __webpack_require__(606);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Get the MUI theme corresponding to a base theme.
	 * It's possible to override the computed theme values
	 * by providing a second argument. The calculated
	 * theme will be deeply merged with the second argument.
	 */
	function getMuiTheme(muiTheme) {
	  for (var _len = arguments.length, more = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    more[_key - 1] = arguments[_key];
	  }

	  muiTheme = _lodash2.default.apply(undefined, [{
	    zIndex: _zIndex2.default,
	    isRtl: false,
	    userAgent: undefined
	  }, _lightBaseTheme2.default, muiTheme].concat(more));

	  var _muiTheme = muiTheme,
	      spacing = _muiTheme.spacing,
	      fontFamily = _muiTheme.fontFamily,
	      palette = _muiTheme.palette;

	  var baseTheme = { spacing: spacing, fontFamily: fontFamily, palette: palette };

	  muiTheme = (0, _lodash2.default)({
	    appBar: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      height: spacing.desktopKeylineIncrement,
	      titleFontWeight: _typography2.default.fontWeightNormal,
	      padding: spacing.desktopGutter
	    },
	    avatar: {
	      color: palette.canvasColor,
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.26)
	    },
	    badge: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    bottomNavigation: {
	      backgroundColor: palette.canvasColor,
	      unselectedColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      selectedColor: palette.primary1Color,
	      height: 56,
	      unselectedFontSize: 12,
	      selectedFontSize: 14
	    },
	    button: {
	      height: 36,
	      minWidth: 88,
	      iconButtonSize: spacing.iconSize * 2
	    },
	    card: {
	      titleColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      subtitleColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    cardMedia: {
	      color: _colors.darkWhite,
	      overlayContentBackground: _colors.lightBlack,
	      titleColor: _colors.darkWhite,
	      subtitleColor: _colors.lightWhite
	    },
	    cardText: {
	      textColor: palette.textColor
	    },
	    checkbox: {
	      boxColor: palette.textColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    chip: {
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12),
	      deleteIconColor: (0, _colorManipulator.fade)(palette.textColor, 0.26),
	      textColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      fontSize: 14,
	      fontWeight: _typography2.default.fontWeightNormal,
	      shadow: '0 1px 6px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12) + ',\n        0 1px 4px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12)
	    },
	    datePicker: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      calendarTextColor: palette.textColor,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor,
	      calendarYearBackgroundColor: palette.canvasColor,
	      headerColor: palette.pickerHeaderColor || palette.primary1Color
	    },
	    dialog: {
	      titleFontSize: 22,
	      bodyFontSize: 16,
	      bodyColor: (0, _colorManipulator.fade)(palette.textColor, 0.6)
	    },
	    dropDownMenu: {
	      accentColor: palette.borderColor
	    },
	    enhancedButton: {
	      tapHighlightColor: _colors.transparent
	    },
	    flatButton: {
	      color: _colors.transparent,
	      buttonFilterColor: '#999999',
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      textColor: palette.textColor,
	      primaryTextColor: palette.primary1Color,
	      secondaryTextColor: palette.accent1Color,
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    floatingActionButton: {
	      buttonSize: 56,
	      miniSize: 40,
	      color: palette.primary1Color,
	      iconColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryIconColor: palette.alternateTextColor,
	      disabledTextColor: palette.disabledColor,
	      disabledColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12)
	    },
	    gridTile: {
	      textColor: _colors.white
	    },
	    icon: {
	      color: palette.canvasColor,
	      backgroundColor: palette.primary1Color
	    },
	    inkBar: {
	      backgroundColor: palette.accent1Color
	    },
	    drawer: {
	      width: spacing.desktopKeylineIncrement * 4,
	      color: palette.canvasColor
	    },
	    listItem: {
	      nestedLevelDepth: 18,
	      secondaryTextColor: palette.secondaryTextColor,
	      leftIconColor: _colors.grey600,
	      rightIconColor: _colors.grey600
	    },
	    menu: {
	      backgroundColor: palette.canvasColor,
	      containerBackgroundColor: palette.canvasColor
	    },
	    menuItem: {
	      dataHeight: 32,
	      height: 48,
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1),
	      padding: spacing.desktopGutter,
	      selectedTextColor: palette.accent1Color,
	      rightIconDesktopFill: _colors.grey600
	    },
	    menuSubheader: {
	      padding: spacing.desktopGutter,
	      borderColor: palette.borderColor,
	      textColor: palette.primary1Color
	    },
	    overlay: {
	      backgroundColor: _colors.lightBlack
	    },
	    paper: {
	      color: palette.textColor,
	      backgroundColor: palette.canvasColor,
	      zDepthShadows: [[1, 6, 0.12, 1, 4, 0.12], [3, 10, 0.16, 3, 10, 0.23], [10, 30, 0.19, 6, 10, 0.23], [14, 45, 0.25, 10, 18, 0.22], [19, 60, 0.30, 15, 20, 0.22]].map(function (d) {
	        return '0 ' + d[0] + 'px ' + d[1] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[2]) + ',\n         0 ' + d[3] + 'px ' + d[4] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[5]);
	      })
	    },
	    radioButton: {
	      borderColor: palette.textColor,
	      backgroundColor: palette.alternateTextColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      size: 24,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    raisedButton: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      disabledColor: (0, _colorManipulator.darken)(palette.alternateTextColor, 0.1),
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    refreshIndicator: {
	      strokeColor: palette.borderColor,
	      loadingStrokeColor: palette.primary1Color
	    },
	    ripple: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.87)
	    },
	    slider: {
	      trackSize: 2,
	      trackColor: palette.primary3Color,
	      trackColorSelected: palette.accent3Color,
	      handleSize: 12,
	      handleSizeDisabled: 8,
	      handleSizeActive: 18,
	      handleColorZero: palette.primary3Color,
	      handleFillColor: palette.alternateTextColor,
	      selectionColor: palette.primary1Color,
	      rippleColor: palette.primary1Color
	    },
	    snackbar: {
	      textColor: palette.alternateTextColor,
	      backgroundColor: palette.textColor,
	      actionColor: palette.accent1Color
	    },
	    subheader: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    stepper: {
	      backgroundColor: 'transparent',
	      hoverBackgroundColor: (0, _colorManipulator.fade)(_colors.black, 0.06),
	      iconColor: palette.primary1Color,
	      hoveredIconColor: _colors.grey700,
	      inactiveIconColor: _colors.grey500,
	      textColor: (0, _colorManipulator.fade)(_colors.black, 0.87),
	      disabledTextColor: (0, _colorManipulator.fade)(_colors.black, 0.26),
	      connectorLineColor: _colors.grey400
	    },
	    svgIcon: {
	      color: palette.textColor
	    },
	    table: {
	      backgroundColor: palette.canvasColor
	    },
	    tableFooter: {
	      borderColor: palette.borderColor,
	      textColor: palette.accent3Color
	    },
	    tableHeader: {
	      borderColor: palette.borderColor
	    },
	    tableHeaderColumn: {
	      textColor: palette.accent3Color,
	      height: 56,
	      spacing: 24
	    },
	    tableRow: {
	      hoverColor: palette.accent2Color,
	      stripeColor: (0, _colorManipulator.fade)((0, _colorManipulator.lighten)(palette.primary1Color, 0.5), 0.4),
	      selectedColor: palette.borderColor,
	      textColor: palette.textColor,
	      borderColor: palette.borderColor,
	      height: 48
	    },
	    tableRowColumn: {
	      height: 48,
	      spacing: 24
	    },
	    tabs: {
	      backgroundColor: palette.primary1Color,
	      textColor: (0, _colorManipulator.fade)(palette.alternateTextColor, 0.7),
	      selectedTextColor: palette.alternateTextColor
	    },
	    textField: {
	      textColor: palette.textColor,
	      hintColor: palette.disabledColor,
	      floatingLabelColor: palette.disabledColor,
	      disabledTextColor: palette.disabledColor,
	      errorColor: _colors.red500,
	      focusColor: palette.primary1Color,
	      backgroundColor: 'transparent',
	      borderColor: palette.borderColor
	    },
	    timePicker: {
	      color: palette.alternateTextColor,
	      textColor: palette.alternateTextColor,
	      accentColor: palette.primary1Color,
	      clockColor: palette.textColor,
	      clockCircleColor: palette.clockCircleColor,
	      headerColor: palette.pickerHeaderColor || palette.primary1Color,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor
	    },
	    toggle: {
	      thumbOnColor: palette.primary1Color,
	      thumbOffColor: palette.accent2Color,
	      thumbDisabledColor: palette.borderColor,
	      thumbRequiredColor: palette.primary1Color,
	      trackOnColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5),
	      trackOffColor: palette.primary3Color,
	      trackDisabledColor: palette.primary3Color,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor,
	      trackRequiredColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5)
	    },
	    toolbar: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      backgroundColor: (0, _colorManipulator.darken)(palette.accent2Color, 0.05),
	      height: 56,
	      titleFontSize: 20,
	      iconColor: (0, _colorManipulator.fade)(palette.textColor, 0.4),
	      separatorColor: (0, _colorManipulator.fade)(palette.textColor, 0.175),
	      menuHoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1)
	    },
	    tooltip: {
	      color: _colors.white,
	      rippleBackgroundColor: _colors.grey700,
	      opacity: 0.9
	    }
	  }, muiTheme, {
	    baseTheme: baseTheme, // To provide backward compatibility.
	    rawTheme: baseTheme // To provide backward compatibility.
	  });

	  var transformers = [_autoprefixer2.default, _rtl2.default, _callOnce2.default].map(function (t) {
	    return t(muiTheme);
	  }).filter(function (t) {
	    return t;
	  });

	  muiTheme.prepareStyles = _compose2.default.apply(undefined, (0, _toConsumableArray3.default)(transformers));

	  return muiTheme;
	}

/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (typeof key == 'number' && value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = baseKeysIn(source);
	  }
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	      else {
	        newValue = objValue;
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function(object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = merge;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(180)(module)))

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _colors = __webpack_require__(606);

	var _colorManipulator = __webpack_require__(574);

	var _spacing = __webpack_require__(607);

	var _spacing2 = _interopRequireDefault(_spacing);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *  Light Theme is the default theme used in material-ui. It is guaranteed to
	 *  have all theme variables needed for every component. Variables not defined
	 *  in a custom theme will default to these values.
	 */
	exports.default = {
	  spacing: _spacing2.default,
	  fontFamily: 'Roboto, sans-serif',
	  borderRadius: 2,
	  palette: {
	    primary1Color: _colors.cyan500,
	    primary2Color: _colors.cyan700,
	    primary3Color: _colors.grey400,
	    accent1Color: _colors.pinkA200,
	    accent2Color: _colors.grey100,
	    accent3Color: _colors.grey500,
	    textColor: _colors.darkBlack,
	    secondaryTextColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.54),
	    alternateTextColor: _colors.white,
	    canvasColor: _colors.white,
	    borderColor: _colors.grey300,
	    disabledColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.3),
	    pickerHeaderColor: _colors.cyan500,
	    clockCircleColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.07),
	    shadowColor: _colors.fullBlack
	  }
	}; /**
	    * NB: If you update this file, please also update `docs/src/app/customization/Themes.js`
	    */

/***/ }),
/* 606 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var red50 = exports.red50 = '#ffebee';
	var red100 = exports.red100 = '#ffcdd2';
	var red200 = exports.red200 = '#ef9a9a';
	var red300 = exports.red300 = '#e57373';
	var red400 = exports.red400 = '#ef5350';
	var red500 = exports.red500 = '#f44336';
	var red600 = exports.red600 = '#e53935';
	var red700 = exports.red700 = '#d32f2f';
	var red800 = exports.red800 = '#c62828';
	var red900 = exports.red900 = '#b71c1c';
	var redA100 = exports.redA100 = '#ff8a80';
	var redA200 = exports.redA200 = '#ff5252';
	var redA400 = exports.redA400 = '#ff1744';
	var redA700 = exports.redA700 = '#d50000';

	var pink50 = exports.pink50 = '#fce4ec';
	var pink100 = exports.pink100 = '#f8bbd0';
	var pink200 = exports.pink200 = '#f48fb1';
	var pink300 = exports.pink300 = '#f06292';
	var pink400 = exports.pink400 = '#ec407a';
	var pink500 = exports.pink500 = '#e91e63';
	var pink600 = exports.pink600 = '#d81b60';
	var pink700 = exports.pink700 = '#c2185b';
	var pink800 = exports.pink800 = '#ad1457';
	var pink900 = exports.pink900 = '#880e4f';
	var pinkA100 = exports.pinkA100 = '#ff80ab';
	var pinkA200 = exports.pinkA200 = '#ff4081';
	var pinkA400 = exports.pinkA400 = '#f50057';
	var pinkA700 = exports.pinkA700 = '#c51162';

	var purple50 = exports.purple50 = '#f3e5f5';
	var purple100 = exports.purple100 = '#e1bee7';
	var purple200 = exports.purple200 = '#ce93d8';
	var purple300 = exports.purple300 = '#ba68c8';
	var purple400 = exports.purple400 = '#ab47bc';
	var purple500 = exports.purple500 = '#9c27b0';
	var purple600 = exports.purple600 = '#8e24aa';
	var purple700 = exports.purple700 = '#7b1fa2';
	var purple800 = exports.purple800 = '#6a1b9a';
	var purple900 = exports.purple900 = '#4a148c';
	var purpleA100 = exports.purpleA100 = '#ea80fc';
	var purpleA200 = exports.purpleA200 = '#e040fb';
	var purpleA400 = exports.purpleA400 = '#d500f9';
	var purpleA700 = exports.purpleA700 = '#aa00ff';

	var deepPurple50 = exports.deepPurple50 = '#ede7f6';
	var deepPurple100 = exports.deepPurple100 = '#d1c4e9';
	var deepPurple200 = exports.deepPurple200 = '#b39ddb';
	var deepPurple300 = exports.deepPurple300 = '#9575cd';
	var deepPurple400 = exports.deepPurple400 = '#7e57c2';
	var deepPurple500 = exports.deepPurple500 = '#673ab7';
	var deepPurple600 = exports.deepPurple600 = '#5e35b1';
	var deepPurple700 = exports.deepPurple700 = '#512da8';
	var deepPurple800 = exports.deepPurple800 = '#4527a0';
	var deepPurple900 = exports.deepPurple900 = '#311b92';
	var deepPurpleA100 = exports.deepPurpleA100 = '#b388ff';
	var deepPurpleA200 = exports.deepPurpleA200 = '#7c4dff';
	var deepPurpleA400 = exports.deepPurpleA400 = '#651fff';
	var deepPurpleA700 = exports.deepPurpleA700 = '#6200ea';

	var indigo50 = exports.indigo50 = '#e8eaf6';
	var indigo100 = exports.indigo100 = '#c5cae9';
	var indigo200 = exports.indigo200 = '#9fa8da';
	var indigo300 = exports.indigo300 = '#7986cb';
	var indigo400 = exports.indigo400 = '#5c6bc0';
	var indigo500 = exports.indigo500 = '#3f51b5';
	var indigo600 = exports.indigo600 = '#3949ab';
	var indigo700 = exports.indigo700 = '#303f9f';
	var indigo800 = exports.indigo800 = '#283593';
	var indigo900 = exports.indigo900 = '#1a237e';
	var indigoA100 = exports.indigoA100 = '#8c9eff';
	var indigoA200 = exports.indigoA200 = '#536dfe';
	var indigoA400 = exports.indigoA400 = '#3d5afe';
	var indigoA700 = exports.indigoA700 = '#304ffe';

	var blue50 = exports.blue50 = '#e3f2fd';
	var blue100 = exports.blue100 = '#bbdefb';
	var blue200 = exports.blue200 = '#90caf9';
	var blue300 = exports.blue300 = '#64b5f6';
	var blue400 = exports.blue400 = '#42a5f5';
	var blue500 = exports.blue500 = '#2196f3';
	var blue600 = exports.blue600 = '#1e88e5';
	var blue700 = exports.blue700 = '#1976d2';
	var blue800 = exports.blue800 = '#1565c0';
	var blue900 = exports.blue900 = '#0d47a1';
	var blueA100 = exports.blueA100 = '#82b1ff';
	var blueA200 = exports.blueA200 = '#448aff';
	var blueA400 = exports.blueA400 = '#2979ff';
	var blueA700 = exports.blueA700 = '#2962ff';

	var lightBlue50 = exports.lightBlue50 = '#e1f5fe';
	var lightBlue100 = exports.lightBlue100 = '#b3e5fc';
	var lightBlue200 = exports.lightBlue200 = '#81d4fa';
	var lightBlue300 = exports.lightBlue300 = '#4fc3f7';
	var lightBlue400 = exports.lightBlue400 = '#29b6f6';
	var lightBlue500 = exports.lightBlue500 = '#03a9f4';
	var lightBlue600 = exports.lightBlue600 = '#039be5';
	var lightBlue700 = exports.lightBlue700 = '#0288d1';
	var lightBlue800 = exports.lightBlue800 = '#0277bd';
	var lightBlue900 = exports.lightBlue900 = '#01579b';
	var lightBlueA100 = exports.lightBlueA100 = '#80d8ff';
	var lightBlueA200 = exports.lightBlueA200 = '#40c4ff';
	var lightBlueA400 = exports.lightBlueA400 = '#00b0ff';
	var lightBlueA700 = exports.lightBlueA700 = '#0091ea';

	var cyan50 = exports.cyan50 = '#e0f7fa';
	var cyan100 = exports.cyan100 = '#b2ebf2';
	var cyan200 = exports.cyan200 = '#80deea';
	var cyan300 = exports.cyan300 = '#4dd0e1';
	var cyan400 = exports.cyan400 = '#26c6da';
	var cyan500 = exports.cyan500 = '#00bcd4';
	var cyan600 = exports.cyan600 = '#00acc1';
	var cyan700 = exports.cyan700 = '#0097a7';
	var cyan800 = exports.cyan800 = '#00838f';
	var cyan900 = exports.cyan900 = '#006064';
	var cyanA100 = exports.cyanA100 = '#84ffff';
	var cyanA200 = exports.cyanA200 = '#18ffff';
	var cyanA400 = exports.cyanA400 = '#00e5ff';
	var cyanA700 = exports.cyanA700 = '#00b8d4';

	var teal50 = exports.teal50 = '#e0f2f1';
	var teal100 = exports.teal100 = '#b2dfdb';
	var teal200 = exports.teal200 = '#80cbc4';
	var teal300 = exports.teal300 = '#4db6ac';
	var teal400 = exports.teal400 = '#26a69a';
	var teal500 = exports.teal500 = '#009688';
	var teal600 = exports.teal600 = '#00897b';
	var teal700 = exports.teal700 = '#00796b';
	var teal800 = exports.teal800 = '#00695c';
	var teal900 = exports.teal900 = '#004d40';
	var tealA100 = exports.tealA100 = '#a7ffeb';
	var tealA200 = exports.tealA200 = '#64ffda';
	var tealA400 = exports.tealA400 = '#1de9b6';
	var tealA700 = exports.tealA700 = '#00bfa5';

	var green50 = exports.green50 = '#e8f5e9';
	var green100 = exports.green100 = '#c8e6c9';
	var green200 = exports.green200 = '#a5d6a7';
	var green300 = exports.green300 = '#81c784';
	var green400 = exports.green400 = '#66bb6a';
	var green500 = exports.green500 = '#4caf50';
	var green600 = exports.green600 = '#43a047';
	var green700 = exports.green700 = '#388e3c';
	var green800 = exports.green800 = '#2e7d32';
	var green900 = exports.green900 = '#1b5e20';
	var greenA100 = exports.greenA100 = '#b9f6ca';
	var greenA200 = exports.greenA200 = '#69f0ae';
	var greenA400 = exports.greenA400 = '#00e676';
	var greenA700 = exports.greenA700 = '#00c853';

	var lightGreen50 = exports.lightGreen50 = '#f1f8e9';
	var lightGreen100 = exports.lightGreen100 = '#dcedc8';
	var lightGreen200 = exports.lightGreen200 = '#c5e1a5';
	var lightGreen300 = exports.lightGreen300 = '#aed581';
	var lightGreen400 = exports.lightGreen400 = '#9ccc65';
	var lightGreen500 = exports.lightGreen500 = '#8bc34a';
	var lightGreen600 = exports.lightGreen600 = '#7cb342';
	var lightGreen700 = exports.lightGreen700 = '#689f38';
	var lightGreen800 = exports.lightGreen800 = '#558b2f';
	var lightGreen900 = exports.lightGreen900 = '#33691e';
	var lightGreenA100 = exports.lightGreenA100 = '#ccff90';
	var lightGreenA200 = exports.lightGreenA200 = '#b2ff59';
	var lightGreenA400 = exports.lightGreenA400 = '#76ff03';
	var lightGreenA700 = exports.lightGreenA700 = '#64dd17';

	var lime50 = exports.lime50 = '#f9fbe7';
	var lime100 = exports.lime100 = '#f0f4c3';
	var lime200 = exports.lime200 = '#e6ee9c';
	var lime300 = exports.lime300 = '#dce775';
	var lime400 = exports.lime400 = '#d4e157';
	var lime500 = exports.lime500 = '#cddc39';
	var lime600 = exports.lime600 = '#c0ca33';
	var lime700 = exports.lime700 = '#afb42b';
	var lime800 = exports.lime800 = '#9e9d24';
	var lime900 = exports.lime900 = '#827717';
	var limeA100 = exports.limeA100 = '#f4ff81';
	var limeA200 = exports.limeA200 = '#eeff41';
	var limeA400 = exports.limeA400 = '#c6ff00';
	var limeA700 = exports.limeA700 = '#aeea00';

	var yellow50 = exports.yellow50 = '#fffde7';
	var yellow100 = exports.yellow100 = '#fff9c4';
	var yellow200 = exports.yellow200 = '#fff59d';
	var yellow300 = exports.yellow300 = '#fff176';
	var yellow400 = exports.yellow400 = '#ffee58';
	var yellow500 = exports.yellow500 = '#ffeb3b';
	var yellow600 = exports.yellow600 = '#fdd835';
	var yellow700 = exports.yellow700 = '#fbc02d';
	var yellow800 = exports.yellow800 = '#f9a825';
	var yellow900 = exports.yellow900 = '#f57f17';
	var yellowA100 = exports.yellowA100 = '#ffff8d';
	var yellowA200 = exports.yellowA200 = '#ffff00';
	var yellowA400 = exports.yellowA400 = '#ffea00';
	var yellowA700 = exports.yellowA700 = '#ffd600';

	var amber50 = exports.amber50 = '#fff8e1';
	var amber100 = exports.amber100 = '#ffecb3';
	var amber200 = exports.amber200 = '#ffe082';
	var amber300 = exports.amber300 = '#ffd54f';
	var amber400 = exports.amber400 = '#ffca28';
	var amber500 = exports.amber500 = '#ffc107';
	var amber600 = exports.amber600 = '#ffb300';
	var amber700 = exports.amber700 = '#ffa000';
	var amber800 = exports.amber800 = '#ff8f00';
	var amber900 = exports.amber900 = '#ff6f00';
	var amberA100 = exports.amberA100 = '#ffe57f';
	var amberA200 = exports.amberA200 = '#ffd740';
	var amberA400 = exports.amberA400 = '#ffc400';
	var amberA700 = exports.amberA700 = '#ffab00';

	var orange50 = exports.orange50 = '#fff3e0';
	var orange100 = exports.orange100 = '#ffe0b2';
	var orange200 = exports.orange200 = '#ffcc80';
	var orange300 = exports.orange300 = '#ffb74d';
	var orange400 = exports.orange400 = '#ffa726';
	var orange500 = exports.orange500 = '#ff9800';
	var orange600 = exports.orange600 = '#fb8c00';
	var orange700 = exports.orange700 = '#f57c00';
	var orange800 = exports.orange800 = '#ef6c00';
	var orange900 = exports.orange900 = '#e65100';
	var orangeA100 = exports.orangeA100 = '#ffd180';
	var orangeA200 = exports.orangeA200 = '#ffab40';
	var orangeA400 = exports.orangeA400 = '#ff9100';
	var orangeA700 = exports.orangeA700 = '#ff6d00';

	var deepOrange50 = exports.deepOrange50 = '#fbe9e7';
	var deepOrange100 = exports.deepOrange100 = '#ffccbc';
	var deepOrange200 = exports.deepOrange200 = '#ffab91';
	var deepOrange300 = exports.deepOrange300 = '#ff8a65';
	var deepOrange400 = exports.deepOrange400 = '#ff7043';
	var deepOrange500 = exports.deepOrange500 = '#ff5722';
	var deepOrange600 = exports.deepOrange600 = '#f4511e';
	var deepOrange700 = exports.deepOrange700 = '#e64a19';
	var deepOrange800 = exports.deepOrange800 = '#d84315';
	var deepOrange900 = exports.deepOrange900 = '#bf360c';
	var deepOrangeA100 = exports.deepOrangeA100 = '#ff9e80';
	var deepOrangeA200 = exports.deepOrangeA200 = '#ff6e40';
	var deepOrangeA400 = exports.deepOrangeA400 = '#ff3d00';
	var deepOrangeA700 = exports.deepOrangeA700 = '#dd2c00';

	var brown50 = exports.brown50 = '#efebe9';
	var brown100 = exports.brown100 = '#d7ccc8';
	var brown200 = exports.brown200 = '#bcaaa4';
	var brown300 = exports.brown300 = '#a1887f';
	var brown400 = exports.brown400 = '#8d6e63';
	var brown500 = exports.brown500 = '#795548';
	var brown600 = exports.brown600 = '#6d4c41';
	var brown700 = exports.brown700 = '#5d4037';
	var brown800 = exports.brown800 = '#4e342e';
	var brown900 = exports.brown900 = '#3e2723';

	var blueGrey50 = exports.blueGrey50 = '#eceff1';
	var blueGrey100 = exports.blueGrey100 = '#cfd8dc';
	var blueGrey200 = exports.blueGrey200 = '#b0bec5';
	var blueGrey300 = exports.blueGrey300 = '#90a4ae';
	var blueGrey400 = exports.blueGrey400 = '#78909c';
	var blueGrey500 = exports.blueGrey500 = '#607d8b';
	var blueGrey600 = exports.blueGrey600 = '#546e7a';
	var blueGrey700 = exports.blueGrey700 = '#455a64';
	var blueGrey800 = exports.blueGrey800 = '#37474f';
	var blueGrey900 = exports.blueGrey900 = '#263238';

	var grey50 = exports.grey50 = '#fafafa';
	var grey100 = exports.grey100 = '#f5f5f5';
	var grey200 = exports.grey200 = '#eeeeee';
	var grey300 = exports.grey300 = '#e0e0e0';
	var grey400 = exports.grey400 = '#bdbdbd';
	var grey500 = exports.grey500 = '#9e9e9e';
	var grey600 = exports.grey600 = '#757575';
	var grey700 = exports.grey700 = '#616161';
	var grey800 = exports.grey800 = '#424242';
	var grey900 = exports.grey900 = '#212121';

	var black = exports.black = '#000000';
	var white = exports.white = '#ffffff';

	var transparent = exports.transparent = 'rgba(0, 0, 0, 0)';
	var fullBlack = exports.fullBlack = 'rgba(0, 0, 0, 1)';
	var darkBlack = exports.darkBlack = 'rgba(0, 0, 0, 0.87)';
	var lightBlack = exports.lightBlack = 'rgba(0, 0, 0, 0.54)';
	var minBlack = exports.minBlack = 'rgba(0, 0, 0, 0.26)';
	var faintBlack = exports.faintBlack = 'rgba(0, 0, 0, 0.12)';
	var fullWhite = exports.fullWhite = 'rgba(255, 255, 255, 1)';
	var darkWhite = exports.darkWhite = 'rgba(255, 255, 255, 0.87)';
	var lightWhite = exports.lightWhite = 'rgba(255, 255, 255, 0.54)';

/***/ }),
/* 607 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  iconSize: 24,

	  desktopGutter: 24,
	  desktopGutterMore: 32,
	  desktopGutterLess: 16,
	  desktopGutterMini: 8,
	  desktopKeylineIncrement: 64,
	  desktopDropDownMenuItemHeight: 32,
	  desktopDropDownMenuFontSize: 15,
	  desktopDrawerMenuItemHeight: 48,
	  desktopSubheaderHeight: 48,
	  desktopToolbarHeight: 56
	};

/***/ }),
/* 608 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  menu: 1000,
	  appBar: 1100,
	  drawerOverlay: 1200,
	  drawer: 1300,
	  dialogOverlay: 1400,
	  dialog: 1500,
	  layer: 2000,
	  popover: 2100,
	  snackbar: 2900,
	  tooltip: 3000
	};

/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (muiTheme) {
	  var isClient = typeof navigator !== 'undefined';
	  var userAgent = muiTheme.userAgent;

	  if (userAgent === undefined && isClient) {
	    userAgent = navigator.userAgent;
	  }

	  if (userAgent === undefined && !hasWarnedAboutUserAgent) {
	    process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: userAgent should be supplied in the muiTheme context\n      for server-side rendering.') : void 0;

	    hasWarnedAboutUserAgent = true;
	  }

	  var prefixAll = (0, _createPrefixer2.default)(_autoprefixerStatic2.default);

	  if (userAgent === false) {
	    // Disabled autoprefixer
	    return null;
	  } else if (userAgent === 'all' || userAgent === undefined) {
	    // Prefix for all user agent
	    return function (style) {
	      var isFlex = ['flex', 'inline-flex'].indexOf(style.display) !== -1;
	      var stylePrefixed = prefixAll(style);

	      if (isFlex) {
	        var display = stylePrefixed.display;
	        if (isClient) {
	          // We can't apply this join with react-dom:
	          // #https://github.com/facebook/react/issues/6467
	          stylePrefixed.display = display[display.length - 1];
	        } else {
	          stylePrefixed.display = display.join('; display: ');
	        }
	      }

	      return stylePrefixed;
	    };
	  } else {
	    var Prefixer = (0, _createPrefixer4.default)(_autoprefixerDynamic2.default, prefixAll);
	    var prefixer = new Prefixer({
	      userAgent: userAgent
	    });

	    return function (style) {
	      return prefixer.prefix(style);
	    };
	  }
	};

	var _createPrefixer = __webpack_require__(610);

	var _createPrefixer2 = _interopRequireDefault(_createPrefixer);

	var _createPrefixer3 = __webpack_require__(616);

	var _createPrefixer4 = _interopRequireDefault(_createPrefixer3);

	var _autoprefixerDynamic = __webpack_require__(621);

	var _autoprefixerDynamic2 = _interopRequireDefault(_autoprefixerDynamic);

	var _autoprefixerStatic = __webpack_require__(632);

	var _autoprefixerStatic2 = _interopRequireDefault(_autoprefixerStatic);

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var hasWarnedAboutUserAgent = false;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createPrefixer;

	var _prefixProperty = __webpack_require__(611);

	var _prefixProperty2 = _interopRequireDefault(_prefixProperty);

	var _prefixValue = __webpack_require__(613);

	var _prefixValue2 = _interopRequireDefault(_prefixValue);

	var _addNewValuesOnly = __webpack_require__(614);

	var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);

	var _isObject = __webpack_require__(615);

	var _isObject2 = _interopRequireDefault(_isObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createPrefixer(_ref) {
	  var prefixMap = _ref.prefixMap,
	      plugins = _ref.plugins;

	  function prefixAll(style) {
	    for (var property in style) {
	      var value = style[property];

	      // handle nested objects
	      if ((0, _isObject2.default)(value)) {
	        style[property] = prefixAll(value);
	        // handle array values
	      } else if (Array.isArray(value)) {
	        var combinedValue = [];

	        for (var i = 0, len = value.length; i < len; ++i) {
	          var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);
	          (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
	        }

	        // only modify the value if it was touched
	        // by any plugin to prevent unnecessary mutations
	        if (combinedValue.length > 0) {
	          style[property] = combinedValue;
	        }
	      } else {
	        var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

	        // only modify the value if it was touched
	        // by any plugin to prevent unnecessary mutations
	        if (_processedValue) {
	          style[property] = _processedValue;
	        }

	        (0, _prefixProperty2.default)(prefixMap, property, style);
	      }
	    }

	    return style;
	  }

	  return prefixAll;
	}
	module.exports = exports['default'];

/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixProperty;

	var _capitalizeString = __webpack_require__(612);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function prefixProperty(prefixProperties, property, style) {
	  if (prefixProperties.hasOwnProperty(property)) {
	    var requiredPrefixes = prefixProperties[property];
	    for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
	      style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 612 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = capitalizeString;
	function capitalizeString(str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	}
	module.exports = exports["default"];

/***/ }),
/* 613 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixValue;
	function prefixValue(plugins, property, value, style, metaData) {
	  for (var i = 0, len = plugins.length; i < len; ++i) {
	    var processedValue = plugins[i](property, value, style, metaData);

	    // we can stop processing if a value is returned
	    // as all plugin criteria are unique
	    if (processedValue) {
	      return processedValue;
	    }
	  }
	}
	module.exports = exports["default"];

/***/ }),
/* 614 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addNewValuesOnly;
	function addIfNew(list, value) {
	  if (list.indexOf(value) === -1) {
	    list.push(value);
	  }
	}

	function addNewValuesOnly(list, values) {
	  if (Array.isArray(values)) {
	    for (var i = 0, len = values.length; i < len; ++i) {
	      addIfNew(list, values[i]);
	    }
	  } else {
	    addIfNew(list, values);
	  }
	}
	module.exports = exports["default"];

/***/ }),
/* 615 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isObject;
	function isObject(value) {
	  return value instanceof Object && !Array.isArray(value);
	}
	module.exports = exports["default"];

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports.default = createPrefixer;

	var _getBrowserInformation = __webpack_require__(617);

	var _getBrowserInformation2 = _interopRequireDefault(_getBrowserInformation);

	var _getPrefixedKeyframes = __webpack_require__(620);

	var _getPrefixedKeyframes2 = _interopRequireDefault(_getPrefixedKeyframes);

	var _capitalizeString = __webpack_require__(612);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _addNewValuesOnly = __webpack_require__(614);

	var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);

	var _isObject = __webpack_require__(615);

	var _isObject2 = _interopRequireDefault(_isObject);

	var _prefixValue = __webpack_require__(613);

	var _prefixValue2 = _interopRequireDefault(_prefixValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function createPrefixer(_ref) {
	  var prefixMap = _ref.prefixMap,
	      plugins = _ref.plugins;
	  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (style) {
	    return style;
	  };

	  return function () {
	    /**
	    * Instantiante a new prefixer
	    * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
	    * @param {string} keepUnprefixed - keeps unprefixed properties and values
	    */
	    function Prefixer() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      _classCallCheck(this, Prefixer);

	      var defaultUserAgent = typeof navigator !== 'undefined' ? navigator.userAgent : undefined;

	      this._userAgent = options.userAgent || defaultUserAgent;
	      this._keepUnprefixed = options.keepUnprefixed || false;

	      if (this._userAgent) {
	        this._browserInfo = (0, _getBrowserInformation2.default)(this._userAgent);
	      }

	      // Checks if the userAgent was resolved correctly
	      if (this._browserInfo && this._browserInfo.cssPrefix) {
	        this.prefixedKeyframes = (0, _getPrefixedKeyframes2.default)(this._browserInfo.browserName, this._browserInfo.browserVersion, this._browserInfo.cssPrefix);
	      } else {
	        this._useFallback = true;
	        return false;
	      }

	      var prefixData = this._browserInfo.browserName && prefixMap[this._browserInfo.browserName];
	      if (prefixData) {
	        this._requiresPrefix = {};

	        for (var property in prefixData) {
	          if (prefixData[property] >= this._browserInfo.browserVersion) {
	            this._requiresPrefix[property] = true;
	          }
	        }

	        this._hasPropsRequiringPrefix = Object.keys(this._requiresPrefix).length > 0;
	      } else {
	        this._useFallback = true;
	      }

	      this._metaData = {
	        browserVersion: this._browserInfo.browserVersion,
	        browserName: this._browserInfo.browserName,
	        cssPrefix: this._browserInfo.cssPrefix,
	        jsPrefix: this._browserInfo.jsPrefix,
	        keepUnprefixed: this._keepUnprefixed,
	        requiresPrefix: this._requiresPrefix
	      };
	    }

	    _createClass(Prefixer, [{
	      key: 'prefix',
	      value: function prefix(style) {
	        // use static prefixer as fallback if userAgent can not be resolved
	        if (this._useFallback) {
	          return fallback(style);
	        }

	        // only add prefixes if needed
	        if (!this._hasPropsRequiringPrefix) {
	          return style;
	        }

	        return this._prefixStyle(style);
	      }
	    }, {
	      key: '_prefixStyle',
	      value: function _prefixStyle(style) {
	        for (var property in style) {
	          var value = style[property];

	          // handle nested objects
	          if ((0, _isObject2.default)(value)) {
	            style[property] = this.prefix(value);
	            // handle array values
	          } else if (Array.isArray(value)) {
	            var combinedValue = [];

	            for (var i = 0, len = value.length; i < len; ++i) {
	              var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, this._metaData);
	              (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
	            }

	            // only modify the value if it was touched
	            // by any plugin to prevent unnecessary mutations
	            if (combinedValue.length > 0) {
	              style[property] = combinedValue;
	            }
	          } else {
	            var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, this._metaData);

	            // only modify the value if it was touched
	            // by any plugin to prevent unnecessary mutations
	            if (_processedValue) {
	              style[property] = _processedValue;
	            }

	            // add prefixes to properties
	            if (this._requiresPrefix.hasOwnProperty(property)) {
	              style[this._browserInfo.jsPrefix + (0, _capitalizeString2.default)(property)] = value;
	              if (!this._keepUnprefixed) {
	                delete style[property];
	              }
	            }
	          }
	        }

	        return style;
	      }

	      /**
	      * Returns a prefixed version of the style object using all vendor prefixes
	      * @param {Object} styles - Style object that gets prefixed properties added
	      * @returns {Object} - Style object with prefixed properties and values
	      */

	    }], [{
	      key: 'prefixAll',
	      value: function prefixAll(styles) {
	        return fallback(styles);
	      }
	    }]);

	    return Prefixer;
	  }();
	}
	module.exports = exports['default'];

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getBrowserInformation;

	var _bowser = __webpack_require__(618);

	var _bowser2 = _interopRequireDefault(_bowser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var prefixByBrowser = {
	  chrome: 'Webkit',
	  safari: 'Webkit',
	  ios: 'Webkit',
	  android: 'Webkit',
	  phantom: 'Webkit',
	  opera: 'Webkit',
	  webos: 'Webkit',
	  blackberry: 'Webkit',
	  bada: 'Webkit',
	  tizen: 'Webkit',
	  chromium: 'Webkit',
	  vivaldi: 'Webkit',
	  firefox: 'Moz',
	  seamoney: 'Moz',
	  sailfish: 'Moz',
	  msie: 'ms',
	  msedge: 'ms'
	};


	var browserByCanIuseAlias = {
	  chrome: 'chrome',
	  chromium: 'chrome',
	  safari: 'safari',
	  firfox: 'firefox',
	  msedge: 'edge',
	  opera: 'opera',
	  vivaldi: 'opera',
	  msie: 'ie'
	};

	function getBrowserName(browserInfo) {
	  if (browserInfo.firefox) {
	    return 'firefox';
	  }

	  if (browserInfo.mobile || browserInfo.tablet) {
	    if (browserInfo.ios) {
	      return 'ios_saf';
	    } else if (browserInfo.android) {
	      return 'android';
	    } else if (browserInfo.opera) {
	      return 'op_mini';
	    }
	  }

	  for (var browser in browserByCanIuseAlias) {
	    if (browserInfo.hasOwnProperty(browser)) {
	      return browserByCanIuseAlias[browser];
	    }
	  }
	}

	/**
	 * Uses bowser to get default browser browserInformation such as version and name
	 * Evaluates bowser browserInfo and adds vendorPrefix browserInformation
	 * @param {string} userAgent - userAgent that gets evaluated
	 */
	function getBrowserInformation(userAgent) {
	  var browserInfo = _bowser2.default._detect(userAgent);

	  if (browserInfo.yandexbrowser) {
	    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\/[0-9.]*/, ''));
	  }

	  for (var browser in prefixByBrowser) {
	    if (browserInfo.hasOwnProperty(browser)) {
	      var prefix = prefixByBrowser[browser];

	      browserInfo.jsPrefix = prefix;
	      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';
	      break;
	    }
	  }

	  browserInfo.browserName = getBrowserName(browserInfo);

	  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
	  if (browserInfo.version) {
	    browserInfo.browserVersion = parseFloat(browserInfo.version);
	  } else {
	    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);
	  }

	  browserInfo.osVersion = parseFloat(browserInfo.osversion);

	  // iOS forces all browsers to use Safari under the hood
	  // as the Safari version seems to match the iOS version
	  // we just explicitely use the osversion instead
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/72
	  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {
	    browserInfo.browserVersion = browserInfo.osVersion;
	  }

	  // seperate native android chrome
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
	  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {
	    browserInfo.browserName = 'and_chr';
	  }

	  // For android < 4.4 we want to check the osversion
	  // not the chrome version, see issue #26
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
	  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {
	    browserInfo.browserVersion = browserInfo.osVersion;
	  }

	  // Samsung browser are basically build on Chrome > 44
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/102
	  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {
	    browserInfo.browserName = 'and_chr';
	    browserInfo.browserVersion = 44;
	  }

	  return browserInfo;
	}
	module.exports = exports['default'];

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Bowser - a browser detector
	 * https://github.com/ded/bowser
	 * MIT License | (c) Dustin Diaz 2015
	 */

	!function (root, name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) __webpack_require__(619)(name, definition)
	  else root[name] = definition()
	}(this, 'bowser', function () {
	  /**
	    * See useragents.js for examples of navigator.userAgent
	    */

	  var t = true

	  function detect(ua) {

	    function getFirstMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[1]) || '';
	    }

	    function getSecondMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[2]) || '';
	    }

	    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
	      , likeAndroid = /like android/i.test(ua)
	      , android = !likeAndroid && /android/i.test(ua)
	      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
	      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
	      , chromeos = /CrOS/.test(ua)
	      , silk = /silk/i.test(ua)
	      , sailfish = /sailfish/i.test(ua)
	      , tizen = /tizen/i.test(ua)
	      , webos = /(web|hpw)os/i.test(ua)
	      , windowsphone = /windows phone/i.test(ua)
	      , samsungBrowser = /SamsungBrowser/i.test(ua)
	      , windows = !windowsphone && /windows/i.test(ua)
	      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
	      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
	      , edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i)
	      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
	      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)
	      , mobile = !tablet && /[^-]mobi/i.test(ua)
	      , xbox = /xbox/i.test(ua)
	      , result

	    if (/opera/i.test(ua)) {
	      //  an old Opera
	      result = {
	        name: 'Opera'
	      , opera: t
	      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
	      }
	    } else if (/opr\/|opios/i.test(ua)) {
	      // a new Opera
	      result = {
	        name: 'Opera'
	        , opera: t
	        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/SamsungBrowser/i.test(ua)) {
	      result = {
	        name: 'Samsung Internet for Android'
	        , samsungBrowser: t
	        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/coast/i.test(ua)) {
	      result = {
	        name: 'Opera Coast'
	        , coast: t
	        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/yabrowser/i.test(ua)) {
	      result = {
	        name: 'Yandex Browser'
	      , yandexbrowser: t
	      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/ucbrowser/i.test(ua)) {
	      result = {
	          name: 'UC Browser'
	        , ucbrowser: t
	        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/mxios/i.test(ua)) {
	      result = {
	        name: 'Maxthon'
	        , maxthon: t
	        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/epiphany/i.test(ua)) {
	      result = {
	        name: 'Epiphany'
	        , epiphany: t
	        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/puffin/i.test(ua)) {
	      result = {
	        name: 'Puffin'
	        , puffin: t
	        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
	      }
	    }
	    else if (/sleipnir/i.test(ua)) {
	      result = {
	        name: 'Sleipnir'
	        , sleipnir: t
	        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/k-meleon/i.test(ua)) {
	      result = {
	        name: 'K-Meleon'
	        , kMeleon: t
	        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (windowsphone) {
	      result = {
	        name: 'Windows Phone'
	      , osname: 'Windows Phone'
	      , windowsphone: t
	      }
	      if (edgeVersion) {
	        result.msedge = t
	        result.version = edgeVersion
	      }
	      else {
	        result.msie = t
	        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/msie|trident/i.test(ua)) {
	      result = {
	        name: 'Internet Explorer'
	      , msie: t
	      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
	      }
	    } else if (chromeos) {
	      result = {
	        name: 'Chrome'
	      , osname: 'Chrome OS'
	      , chromeos: t
	      , chromeBook: t
	      , chrome: t
	      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    } else if (/edg([ea]|ios)/i.test(ua)) {
	      result = {
	        name: 'Microsoft Edge'
	      , msedge: t
	      , version: edgeVersion
	      }
	    }
	    else if (/vivaldi/i.test(ua)) {
	      result = {
	        name: 'Vivaldi'
	        , vivaldi: t
	        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (sailfish) {
	      result = {
	        name: 'Sailfish'
	      , osname: 'Sailfish OS'
	      , sailfish: t
	      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/seamonkey\//i.test(ua)) {
	      result = {
	        name: 'SeaMonkey'
	      , seamonkey: t
	      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/firefox|iceweasel|fxios/i.test(ua)) {
	      result = {
	        name: 'Firefox'
	      , firefox: t
	      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
	      }
	      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
	        result.firefoxos = t
	        result.osname = 'Firefox OS'
	      }
	    }
	    else if (silk) {
	      result =  {
	        name: 'Amazon Silk'
	      , silk: t
	      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/phantom/i.test(ua)) {
	      result = {
	        name: 'PhantomJS'
	      , phantom: t
	      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/slimerjs/i.test(ua)) {
	      result = {
	        name: 'SlimerJS'
	        , slimer: t
	        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
	      result = {
	        name: 'BlackBerry'
	      , osname: 'BlackBerry OS'
	      , blackberry: t
	      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (webos) {
	      result = {
	        name: 'WebOS'
	      , osname: 'WebOS'
	      , webos: t
	      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
	      };
	      /touchpad\//i.test(ua) && (result.touchpad = t)
	    }
	    else if (/bada/i.test(ua)) {
	      result = {
	        name: 'Bada'
	      , osname: 'Bada'
	      , bada: t
	      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
	      };
	    }
	    else if (tizen) {
	      result = {
	        name: 'Tizen'
	      , osname: 'Tizen'
	      , tizen: t
	      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    }
	    else if (/qupzilla/i.test(ua)) {
	      result = {
	        name: 'QupZilla'
	        , qupzilla: t
	        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
	      }
	    }
	    else if (/chromium/i.test(ua)) {
	      result = {
	        name: 'Chromium'
	        , chromium: t
	        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/chrome|crios|crmo/i.test(ua)) {
	      result = {
	        name: 'Chrome'
	        , chrome: t
	        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (android) {
	      result = {
	        name: 'Android'
	        , version: versionIdentifier
	      }
	    }
	    else if (/safari|applewebkit/i.test(ua)) {
	      result = {
	        name: 'Safari'
	      , safari: t
	      }
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if (iosdevice) {
	      result = {
	        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
	      }
	      // WTF: version is not part of user agent in web apps
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if(/googlebot/i.test(ua)) {
	      result = {
	        name: 'Googlebot'
	      , googlebot: t
	      , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
	      }
	    }
	    else {
	      result = {
	        name: getFirstMatch(/^(.*)\/(.*) /),
	        version: getSecondMatch(/^(.*)\/(.*) /)
	     };
	   }

	    // set webkit or gecko flag for browsers based on these engines
	    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
	      if (/(apple)?webkit\/537\.36/i.test(ua)) {
	        result.name = result.name || "Blink"
	        result.blink = t
	      } else {
	        result.name = result.name || "Webkit"
	        result.webkit = t
	      }
	      if (!result.version && versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    } else if (!result.opera && /gecko\//i.test(ua)) {
	      result.name = result.name || "Gecko"
	      result.gecko = t
	      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
	    }

	    // set OS flags for platforms that have multiple browsers
	    if (!result.windowsphone && (android || result.silk)) {
	      result.android = t
	      result.osname = 'Android'
	    } else if (!result.windowsphone && iosdevice) {
	      result[iosdevice] = t
	      result.ios = t
	      result.osname = 'iOS'
	    } else if (mac) {
	      result.mac = t
	      result.osname = 'macOS'
	    } else if (xbox) {
	      result.xbox = t
	      result.osname = 'Xbox'
	    } else if (windows) {
	      result.windows = t
	      result.osname = 'Windows'
	    } else if (linux) {
	      result.linux = t
	      result.osname = 'Linux'
	    }

	    function getWindowsVersion (s) {
	      switch (s) {
	        case 'NT': return 'NT'
	        case 'XP': return 'XP'
	        case 'NT 5.0': return '2000'
	        case 'NT 5.1': return 'XP'
	        case 'NT 5.2': return '2003'
	        case 'NT 6.0': return 'Vista'
	        case 'NT 6.1': return '7'
	        case 'NT 6.2': return '8'
	        case 'NT 6.3': return '8.1'
	        case 'NT 10.0': return '10'
	        default: return undefined
	      }
	    }

	    // OS version extraction
	    var osVersion = '';
	    if (result.windows) {
	      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i))
	    } else if (result.windowsphone) {
	      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
	    } else if (result.mac) {
	      osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (iosdevice) {
	      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (android) {
	      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
	    } else if (result.webos) {
	      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
	    } else if (result.blackberry) {
	      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
	    } else if (result.bada) {
	      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
	    } else if (result.tizen) {
	      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
	    }
	    if (osVersion) {
	      result.osversion = osVersion;
	    }

	    // device type extraction
	    var osMajorVersion = !result.windows && osVersion.split('.')[0];
	    if (
	         tablet
	      || nexusTablet
	      || iosdevice == 'ipad'
	      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
	      || result.silk
	    ) {
	      result.tablet = t
	    } else if (
	         mobile
	      || iosdevice == 'iphone'
	      || iosdevice == 'ipod'
	      || android
	      || nexusMobile
	      || result.blackberry
	      || result.webos
	      || result.bada
	    ) {
	      result.mobile = t
	    }

	    // Graded Browser Support
	    // http://developer.yahoo.com/yui/articles/gbs
	    if (result.msedge ||
	        (result.msie && result.version >= 10) ||
	        (result.yandexbrowser && result.version >= 15) ||
			    (result.vivaldi && result.version >= 1.0) ||
	        (result.chrome && result.version >= 20) ||
	        (result.samsungBrowser && result.version >= 4) ||
	        (result.firefox && result.version >= 20.0) ||
	        (result.safari && result.version >= 6) ||
	        (result.opera && result.version >= 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
	        (result.blackberry && result.version >= 10.1)
	        || (result.chromium && result.version >= 20)
	        ) {
	      result.a = t;
	    }
	    else if ((result.msie && result.version < 10) ||
	        (result.chrome && result.version < 20) ||
	        (result.firefox && result.version < 20.0) ||
	        (result.safari && result.version < 6) ||
	        (result.opera && result.version < 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
	        || (result.chromium && result.version < 20)
	        ) {
	      result.c = t
	    } else result.x = t

	    return result
	  }

	  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')

	  bowser.test = function (browserList) {
	    for (var i = 0; i < browserList.length; ++i) {
	      var browserItem = browserList[i];
	      if (typeof browserItem=== 'string') {
	        if (browserItem in bowser) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }

	  /**
	   * Get version precisions count
	   *
	   * @example
	   *   getVersionPrecision("1.10.3") // 3
	   *
	   * @param  {string} version
	   * @return {number}
	   */
	  function getVersionPrecision(version) {
	    return version.split(".").length;
	  }

	  /**
	   * Array::map polyfill
	   *
	   * @param  {Array} arr
	   * @param  {Function} iterator
	   * @return {Array}
	   */
	  function map(arr, iterator) {
	    var result = [], i;
	    if (Array.prototype.map) {
	      return Array.prototype.map.call(arr, iterator);
	    }
	    for (i = 0; i < arr.length; i++) {
	      result.push(iterator(arr[i]));
	    }
	    return result;
	  }

	  /**
	   * Calculate browser version weight
	   *
	   * @example
	   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
	   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
	   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
	   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
	   *
	   * @param  {Array<String>} versions versions to compare
	   * @return {Number} comparison result
	   */
	  function compareVersions(versions) {
	    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
	    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
	    var chunks = map(versions, function (version) {
	      var delta = precision - getVersionPrecision(version);

	      // 2) "9" -> "9.0" (for precision = 2)
	      version = version + new Array(delta + 1).join(".0");

	      // 3) "9.0" -> ["000000000"", "000000009"]
	      return map(version.split("."), function (chunk) {
	        return new Array(20 - chunk.length).join("0") + chunk;
	      }).reverse();
	    });

	    // iterate in reverse order by reversed chunks array
	    while (--precision >= 0) {
	      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
	      if (chunks[0][precision] > chunks[1][precision]) {
	        return 1;
	      }
	      else if (chunks[0][precision] === chunks[1][precision]) {
	        if (precision === 0) {
	          // all version chunks are same
	          return 0;
	        }
	      }
	      else {
	        return -1;
	      }
	    }
	  }

	  /**
	   * Check if browser is unsupported
	   *
	   * @example
	   *   bowser.isUnsupportedBrowser({
	   *     msie: "10",
	   *     firefox: "23",
	   *     chrome: "29",
	   *     safari: "5.1",
	   *     opera: "16",
	   *     phantom: "534"
	   *   });
	   *
	   * @param  {Object}  minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function isUnsupportedBrowser(minVersions, strictMode, ua) {
	    var _bowser = bowser;

	    // make strictMode param optional with ua param usage
	    if (typeof strictMode === 'string') {
	      ua = strictMode;
	      strictMode = void(0);
	    }

	    if (strictMode === void(0)) {
	      strictMode = false;
	    }
	    if (ua) {
	      _bowser = detect(ua);
	    }

	    var version = "" + _bowser.version;
	    for (var browser in minVersions) {
	      if (minVersions.hasOwnProperty(browser)) {
	        if (_bowser[browser]) {
	          if (typeof minVersions[browser] !== 'string') {
	            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
	          }

	          // browser version and min supported version.
	          return compareVersions([version, minVersions[browser]]) < 0;
	        }
	      }
	    }

	    return strictMode; // not found
	  }

	  /**
	   * Check if browser is supported
	   *
	   * @param  {Object} minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function check(minVersions, strictMode, ua) {
	    return !isUnsupportedBrowser(minVersions, strictMode, ua);
	  }

	  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
	  bowser.compareVersions = compareVersions;
	  bowser.check = check;

	  /*
	   * Set our detect method to the main bowser object so we can
	   * reuse it to test other user agents.
	   * This is needed to implement future tests.
	   */
	  bowser._detect = detect;

	  return bowser
	});


/***/ }),
/* 619 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 620 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getPrefixedKeyframes;
	function getPrefixedKeyframes(browserName, browserVersion, cssPrefix) {
	  var prefixedKeyframes = 'keyframes';

	  if (browserName === 'chrome' && browserVersion < 43 || (browserName === 'safari' || browserName === 'ios_saf') && browserVersion < 9 || browserName === 'opera' && browserVersion < 30 || browserName === 'android' && browserVersion <= 4.4 || browserName === 'and_uc') {
	    return cssPrefix + prefixedKeyframes;
	  }
	  return prefixedKeyframes;
	}
	module.exports = exports['default'];

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _calc = __webpack_require__(622);

	var _calc2 = _interopRequireDefault(_calc);

	var _flex = __webpack_require__(624);

	var _flex2 = _interopRequireDefault(_flex);

	var _flexboxIE = __webpack_require__(625);

	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

	var _flexboxOld = __webpack_require__(626);

	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

	var _gradient = __webpack_require__(627);

	var _gradient2 = _interopRequireDefault(_gradient);

	var _sizing = __webpack_require__(628);

	var _sizing2 = _interopRequireDefault(_sizing);

	var _transition = __webpack_require__(629);

	var _transition2 = _interopRequireDefault(_transition);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  plugins: [_calc2.default, _flex2.default, _flexboxIE2.default, _flexboxOld2.default, _gradient2.default, _sizing2.default, _transition2.default],
	  prefixMap: { "chrome": { "transform": 35, "transformOrigin": 35, "transformOriginX": 35, "transformOriginY": 35, "backfaceVisibility": 35, "perspective": 35, "perspectiveOrigin": 35, "transformStyle": 35, "transformOriginZ": 35, "animation": 42, "animationDelay": 42, "animationDirection": 42, "animationFillMode": 42, "animationDuration": 42, "animationIterationCount": 42, "animationName": 42, "animationPlayState": 42, "animationTimingFunction": 42, "appearance": 60, "userSelect": 53, "fontKerning": 32, "textEmphasisPosition": 60, "textEmphasis": 60, "textEmphasisStyle": 60, "textEmphasisColor": 60, "boxDecorationBreak": 60, "clipPath": 54, "maskImage": 60, "maskMode": 60, "maskRepeat": 60, "maskPosition": 60, "maskClip": 60, "maskOrigin": 60, "maskSize": 60, "maskComposite": 60, "mask": 60, "maskBorderSource": 60, "maskBorderMode": 60, "maskBorderSlice": 60, "maskBorderWidth": 60, "maskBorderOutset": 60, "maskBorderRepeat": 60, "maskBorder": 60, "maskType": 60, "textDecorationStyle": 56, "textDecorationSkip": 56, "textDecorationLine": 56, "textDecorationColor": 56, "filter": 52, "fontFeatureSettings": 47, "breakAfter": 49, "breakBefore": 49, "breakInside": 49, "columnCount": 49, "columnFill": 49, "columnGap": 49, "columnRule": 49, "columnRuleColor": 49, "columnRuleStyle": 49, "columnRuleWidth": 49, "columns": 49, "columnSpan": 49, "columnWidth": 49 }, "safari": { "flex": 8, "flexBasis": 8, "flexDirection": 8, "flexGrow": 8, "flexFlow": 8, "flexShrink": 8, "flexWrap": 8, "alignContent": 8, "alignItems": 8, "alignSelf": 8, "justifyContent": 8, "order": 8, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8, "transformOrigin": 8, "transformOriginX": 8, "transformOriginY": 8, "backfaceVisibility": 8, "perspective": 8, "perspectiveOrigin": 8, "transformStyle": 8, "transformOriginZ": 8, "animation": 8, "animationDelay": 8, "animationDirection": 8, "animationFillMode": 8, "animationDuration": 8, "animationIterationCount": 8, "animationName": 8, "animationPlayState": 8, "animationTimingFunction": 8, "appearance": 10.1, "userSelect": 10.1, "backdropFilter": 10.1, "fontKerning": 9, "scrollSnapType": 10, "scrollSnapPointsX": 10, "scrollSnapPointsY": 10, "scrollSnapDestination": 10, "scrollSnapCoordinate": 10, "textEmphasisPosition": 7, "textEmphasis": 7, "textEmphasisStyle": 7, "textEmphasisColor": 7, "boxDecorationBreak": 10.1, "clipPath": 10.1, "maskImage": 10.1, "maskMode": 10.1, "maskRepeat": 10.1, "maskPosition": 10.1, "maskClip": 10.1, "maskOrigin": 10.1, "maskSize": 10.1, "maskComposite": 10.1, "mask": 10.1, "maskBorderSource": 10.1, "maskBorderMode": 10.1, "maskBorderSlice": 10.1, "maskBorderWidth": 10.1, "maskBorderOutset": 10.1, "maskBorderRepeat": 10.1, "maskBorder": 10.1, "maskType": 10.1, "textDecorationStyle": 10.1, "textDecorationSkip": 10.1, "textDecorationLine": 10.1, "textDecorationColor": 10.1, "shapeImageThreshold": 10, "shapeImageMargin": 10, "shapeImageOutside": 10, "filter": 9, "hyphens": 10.1, "flowInto": 10.1, "flowFrom": 10.1, "breakBefore": 8, "breakAfter": 8, "breakInside": 8, "regionFragment": 10.1, "columnCount": 8, "columnFill": 8, "columnGap": 8, "columnRule": 8, "columnRuleColor": 8, "columnRuleStyle": 8, "columnRuleWidth": 8, "columns": 8, "columnSpan": 8, "columnWidth": 8 }, "firefox": { "appearance": 55, "userSelect": 55, "boxSizing": 28, "textAlignLast": 48, "textDecorationStyle": 35, "textDecorationSkip": 35, "textDecorationLine": 35, "textDecorationColor": 35, "tabSize": 55, "hyphens": 42, "fontFeatureSettings": 33, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "opera": { "flex": 16, "flexBasis": 16, "flexDirection": 16, "flexGrow": 16, "flexFlow": 16, "flexShrink": 16, "flexWrap": 16, "alignContent": 16, "alignItems": 16, "alignSelf": 16, "justifyContent": 16, "order": 16, "transform": 22, "transformOrigin": 22, "transformOriginX": 22, "transformOriginY": 22, "backfaceVisibility": 22, "perspective": 22, "perspectiveOrigin": 22, "transformStyle": 22, "transformOriginZ": 22, "animation": 29, "animationDelay": 29, "animationDirection": 29, "animationFillMode": 29, "animationDuration": 29, "animationIterationCount": 29, "animationName": 29, "animationPlayState": 29, "animationTimingFunction": 29, "appearance": 45, "userSelect": 40, "fontKerning": 19, "textEmphasisPosition": 45, "textEmphasis": 45, "textEmphasisStyle": 45, "textEmphasisColor": 45, "boxDecorationBreak": 45, "clipPath": 41, "maskImage": 45, "maskMode": 45, "maskRepeat": 45, "maskPosition": 45, "maskClip": 45, "maskOrigin": 45, "maskSize": 45, "maskComposite": 45, "mask": 45, "maskBorderSource": 45, "maskBorderMode": 45, "maskBorderSlice": 45, "maskBorderWidth": 45, "maskBorderOutset": 45, "maskBorderRepeat": 45, "maskBorder": 45, "maskType": 45, "textDecorationStyle": 43, "textDecorationSkip": 43, "textDecorationLine": 43, "textDecorationColor": 43, "filter": 39, "fontFeatureSettings": 34, "breakAfter": 36, "breakBefore": 36, "breakInside": 36, "columnCount": 36, "columnFill": 36, "columnGap": 36, "columnRule": 36, "columnRuleColor": 36, "columnRuleStyle": 36, "columnRuleWidth": 36, "columns": 36, "columnSpan": 36, "columnWidth": 36 }, "ie": { "flex": 10, "flexDirection": 10, "flexFlow": 10, "flexWrap": 10, "transform": 9, "transformOrigin": 9, "transformOriginX": 9, "transformOriginY": 9, "userSelect": 11, "wrapFlow": 11, "wrapThrough": 11, "wrapMargin": 11, "scrollSnapType": 11, "scrollSnapPointsX": 11, "scrollSnapPointsY": 11, "scrollSnapDestination": 11, "scrollSnapCoordinate": 11, "touchAction": 10, "hyphens": 11, "flowInto": 11, "flowFrom": 11, "breakBefore": 11, "breakAfter": 11, "breakInside": 11, "regionFragment": 11, "gridTemplateColumns": 11, "gridTemplateRows": 11, "gridTemplateAreas": 11, "gridTemplate": 11, "gridAutoColumns": 11, "gridAutoRows": 11, "gridAutoFlow": 11, "grid": 11, "gridRowStart": 11, "gridColumnStart": 11, "gridRowEnd": 11, "gridRow": 11, "gridColumn": 11, "gridColumnEnd": 11, "gridColumnGap": 11, "gridRowGap": 11, "gridArea": 11, "gridGap": 11, "textSizeAdjust": 11 }, "edge": { "userSelect": 15, "wrapFlow": 15, "wrapThrough": 15, "wrapMargin": 15, "scrollSnapType": 15, "scrollSnapPointsX": 15, "scrollSnapPointsY": 15, "scrollSnapDestination": 15, "scrollSnapCoordinate": 15, "hyphens": 15, "flowInto": 15, "flowFrom": 15, "breakBefore": 15, "breakAfter": 15, "breakInside": 15, "regionFragment": 15, "gridTemplateColumns": 15, "gridTemplateRows": 15, "gridTemplateAreas": 15, "gridTemplate": 15, "gridAutoColumns": 15, "gridAutoRows": 15, "gridAutoFlow": 15, "grid": 15, "gridRowStart": 15, "gridColumnStart": 15, "gridRowEnd": 15, "gridRow": 15, "gridColumn": 15, "gridColumnEnd": 15, "gridColumnGap": 15, "gridRowGap": 15, "gridArea": 15, "gridGap": 15 }, "ios_saf": { "flex": 8.1, "flexBasis": 8.1, "flexDirection": 8.1, "flexGrow": 8.1, "flexFlow": 8.1, "flexShrink": 8.1, "flexWrap": 8.1, "alignContent": 8.1, "alignItems": 8.1, "alignSelf": 8.1, "justifyContent": 8.1, "order": 8.1, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8.1, "transformOrigin": 8.1, "transformOriginX": 8.1, "transformOriginY": 8.1, "backfaceVisibility": 8.1, "perspective": 8.1, "perspectiveOrigin": 8.1, "transformStyle": 8.1, "transformOriginZ": 8.1, "animation": 8.1, "animationDelay": 8.1, "animationDirection": 8.1, "animationFillMode": 8.1, "animationDuration": 8.1, "animationIterationCount": 8.1, "animationName": 8.1, "animationPlayState": 8.1, "animationTimingFunction": 8.1, "appearance": 10, "userSelect": 10, "backdropFilter": 10, "fontKerning": 10, "scrollSnapType": 10, "scrollSnapPointsX": 10, "scrollSnapPointsY": 10, "scrollSnapDestination": 10, "scrollSnapCoordinate": 10, "boxDecorationBreak": 10, "clipPath": 10, "maskImage": 10, "maskMode": 10, "maskRepeat": 10, "maskPosition": 10, "maskClip": 10, "maskOrigin": 10, "maskSize": 10, "maskComposite": 10, "mask": 10, "maskBorderSource": 10, "maskBorderMode": 10, "maskBorderSlice": 10, "maskBorderWidth": 10, "maskBorderOutset": 10, "maskBorderRepeat": 10, "maskBorder": 10, "maskType": 10, "textSizeAdjust": 10, "textDecorationStyle": 10, "textDecorationSkip": 10, "textDecorationLine": 10, "textDecorationColor": 10, "shapeImageThreshold": 10, "shapeImageMargin": 10, "shapeImageOutside": 10, "filter": 9, "hyphens": 10, "flowInto": 10, "flowFrom": 10, "breakBefore": 8.1, "breakAfter": 8.1, "breakInside": 8.1, "regionFragment": 10, "columnCount": 8.1, "columnFill": 8.1, "columnGap": 8.1, "columnRule": 8.1, "columnRuleColor": 8.1, "columnRuleStyle": 8.1, "columnRuleWidth": 8.1, "columns": 8.1, "columnSpan": 8.1, "columnWidth": 8.1 }, "android": { "borderImage": 4.2, "borderImageOutset": 4.2, "borderImageRepeat": 4.2, "borderImageSlice": 4.2, "borderImageSource": 4.2, "borderImageWidth": 4.2, "flex": 4.2, "flexBasis": 4.2, "flexDirection": 4.2, "flexGrow": 4.2, "flexFlow": 4.2, "flexShrink": 4.2, "flexWrap": 4.2, "alignContent": 4.2, "alignItems": 4.2, "alignSelf": 4.2, "justifyContent": 4.2, "order": 4.2, "transition": 4.2, "transitionDelay": 4.2, "transitionDuration": 4.2, "transitionProperty": 4.2, "transitionTimingFunction": 4.2, "transform": 4.4, "transformOrigin": 4.4, "transformOriginX": 4.4, "transformOriginY": 4.4, "backfaceVisibility": 4.4, "perspective": 4.4, "perspectiveOrigin": 4.4, "transformStyle": 4.4, "transformOriginZ": 4.4, "animation": 4.4, "animationDelay": 4.4, "animationDirection": 4.4, "animationFillMode": 4.4, "animationDuration": 4.4, "animationIterationCount": 4.4, "animationName": 4.4, "animationPlayState": 4.4, "animationTimingFunction": 4.4, "appearance": 53, "userSelect": 53, "fontKerning": 4.4, "textEmphasisPosition": 53, "textEmphasis": 53, "textEmphasisStyle": 53, "textEmphasisColor": 53, "boxDecorationBreak": 53, "clipPath": 53, "maskImage": 53, "maskMode": 53, "maskRepeat": 53, "maskPosition": 53, "maskClip": 53, "maskOrigin": 53, "maskSize": 53, "maskComposite": 53, "mask": 53, "maskBorderSource": 53, "maskBorderMode": 53, "maskBorderSlice": 53, "maskBorderWidth": 53, "maskBorderOutset": 53, "maskBorderRepeat": 53, "maskBorder": 53, "maskType": 53, "filter": 4.4, "fontFeatureSettings": 4.4, "breakAfter": 53, "breakBefore": 53, "breakInside": 53, "columnCount": 53, "columnFill": 53, "columnGap": 53, "columnRule": 53, "columnRuleColor": 53, "columnRuleStyle": 53, "columnRuleWidth": 53, "columns": 53, "columnSpan": 53, "columnWidth": 53 }, "and_chr": { "appearance": 56, "textEmphasisPosition": 56, "textEmphasis": 56, "textEmphasisStyle": 56, "textEmphasisColor": 56, "boxDecorationBreak": 56, "maskImage": 56, "maskMode": 56, "maskRepeat": 56, "maskPosition": 56, "maskClip": 56, "maskOrigin": 56, "maskSize": 56, "maskComposite": 56, "mask": 56, "maskBorderSource": 56, "maskBorderMode": 56, "maskBorderSlice": 56, "maskBorderWidth": 56, "maskBorderOutset": 56, "maskBorderRepeat": 56, "maskBorder": 56, "maskType": 56, "textDecorationStyle": 56, "textDecorationSkip": 56, "textDecorationLine": 56, "textDecorationColor": 56 }, "and_uc": { "flex": 11, "flexBasis": 11, "flexDirection": 11, "flexGrow": 11, "flexFlow": 11, "flexShrink": 11, "flexWrap": 11, "alignContent": 11, "alignItems": 11, "alignSelf": 11, "justifyContent": 11, "order": 11, "transition": 11, "transitionDelay": 11, "transitionDuration": 11, "transitionProperty": 11, "transitionTimingFunction": 11, "transform": 11, "transformOrigin": 11, "transformOriginX": 11, "transformOriginY": 11, "backfaceVisibility": 11, "perspective": 11, "perspectiveOrigin": 11, "transformStyle": 11, "transformOriginZ": 11, "animation": 11, "animationDelay": 11, "animationDirection": 11, "animationFillMode": 11, "animationDuration": 11, "animationIterationCount": 11, "animationName": 11, "animationPlayState": 11, "animationTimingFunction": 11, "appearance": 11, "userSelect": 11, "fontKerning": 11, "textEmphasisPosition": 11, "textEmphasis": 11, "textEmphasisStyle": 11, "textEmphasisColor": 11, "maskImage": 11, "maskMode": 11, "maskRepeat": 11, "maskPosition": 11, "maskClip": 11, "maskOrigin": 11, "maskSize": 11, "maskComposite": 11, "mask": 11, "maskBorderSource": 11, "maskBorderMode": 11, "maskBorderSlice": 11, "maskBorderWidth": 11, "maskBorderOutset": 11, "maskBorderRepeat": 11, "maskBorder": 11, "maskType": 11, "textSizeAdjust": 11, "filter": 11, "hyphens": 11, "flowInto": 11, "flowFrom": 11, "breakBefore": 11, "breakAfter": 11, "breakInside": 11, "regionFragment": 11, "fontFeatureSettings": 11, "columnCount": 11, "columnFill": 11, "columnGap": 11, "columnRule": 11, "columnRuleColor": 11, "columnRuleStyle": 11, "columnRuleWidth": 11, "columns": 11, "columnSpan": 11, "columnWidth": 11 }, "op_mini": {} }
	}; /* eslint-disable */

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function calc(property, value, style, _ref) {
	  var browserName = _ref.browserName,
	      browserVersion = _ref.browserVersion,
	      cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed;

	  if (typeof value === 'string' && value.indexOf('calc(') > -1 && (browserName === 'firefox' && browserVersion < 15 || browserName === 'chrome' && browserVersion < 25 || browserName === 'safari' && browserVersion < 6.1 || browserName === 'ios_saf' && browserVersion < 7)) {
	    return (0, _getPrefixedValue2.default)(value.replace(/calc\(/g, cssPrefix + 'calc('), value, keepUnprefixed);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 623 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getPrefixedValue;
	function getPrefixedValue(prefixedValue, value, keepUnprefixed) {
	  if (keepUnprefixed) {
	    return [prefixedValue, value];
	  }
	  return prefixedValue;
	}
	module.exports = exports["default"];

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var values = {
	  flex: true,
	  'inline-flex': true
	};
	function flex(property, value, style, _ref) {
	  var browserName = _ref.browserName,
	      browserVersion = _ref.browserVersion,
	      cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed;

	  if (property === 'display' && values[value] && (browserName === 'chrome' && browserVersion < 29 && browserVersion > 20 || (browserName === 'safari' || browserName === 'ios_saf') && browserVersion < 9 && browserVersion > 6 || browserName === 'opera' && (browserVersion === 15 || browserVersion === 16))) {
	    return (0, _getPrefixedValue2.default)(cssPrefix + value, value, keepUnprefixed);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  flex: 'flexbox',
	  'inline-flex': 'inline-flexbox'
	};

	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msFlexPreferredSize'
	};

	function flexboxIE(property, value, style, _ref) {
	  var browserName = _ref.browserName,
	      browserVersion = _ref.browserVersion,
	      cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed,
	      requiresPrefix = _ref.requiresPrefix;

	  if ((alternativeProps.hasOwnProperty(property) || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browserName === 'ie_mob' || browserName === 'ie') && browserVersion === 10) {
	    delete requiresPrefix[property];

	    if (!keepUnprefixed && !Array.isArray(style[property])) {
	      delete style[property];
	    }
	    if (property === 'display' && alternativeValues.hasOwnProperty(value)) {
	      return (0, _getPrefixedValue2.default)(cssPrefix + alternativeValues[value], value, keepUnprefixed);
	    }
	    if (alternativeProps.hasOwnProperty(property)) {
	      style[alternativeProps[property]] = alternativeValues[value] || value;
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple',
	  flex: 'box',
	  'inline-flex': 'inline-box'
	};


	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	var otherProps = ['alignContent', 'alignSelf', 'order', 'flexGrow', 'flexShrink', 'flexBasis', 'flexDirection'];
	var properties = Object.keys(alternativeProps).concat(otherProps);

	function flexboxOld(property, value, style, _ref) {
	  var browserName = _ref.browserName,
	      browserVersion = _ref.browserVersion,
	      cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed,
	      requiresPrefix = _ref.requiresPrefix;

	  if ((properties.indexOf(property) > -1 || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browserName === 'firefox' && browserVersion < 22 || browserName === 'chrome' && browserVersion < 21 || (browserName === 'safari' || browserName === 'ios_saf') && browserVersion <= 6.1 || browserName === 'android' && browserVersion < 4.4 || browserName === 'and_uc')) {
	    delete requiresPrefix[property];

	    if (!keepUnprefixed && !Array.isArray(style[property])) {
	      delete style[property];
	    }
	    if (property === 'flexDirection' && typeof value === 'string') {
	      if (value.indexOf('column') > -1) {
	        style.WebkitBoxOrient = 'vertical';
	      } else {
	        style.WebkitBoxOrient = 'horizontal';
	      }
	      if (value.indexOf('reverse') > -1) {
	        style.WebkitBoxDirection = 'reverse';
	      } else {
	        style.WebkitBoxDirection = 'normal';
	      }
	    }
	    if (property === 'display' && alternativeValues.hasOwnProperty(value)) {
	      return (0, _getPrefixedValue2.default)(cssPrefix + alternativeValues[value], value, keepUnprefixed);
	    }
	    if (alternativeProps.hasOwnProperty(property)) {
	      style[alternativeProps[property]] = alternativeValues[value] || value;
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;
	function gradient(property, value, style, _ref) {
	  var browserName = _ref.browserName,
	      browserVersion = _ref.browserVersion,
	      cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed;

	  if (typeof value === 'string' && values.test(value) && (browserName === 'firefox' && browserVersion < 16 || browserName === 'chrome' && browserVersion < 26 || (browserName === 'safari' || browserName === 'ios_saf') && browserVersion < 7 || (browserName === 'opera' || browserName === 'op_mini') && browserVersion < 12.1 || browserName === 'android' && browserVersion < 4.4 || browserName === 'and_uc')) {
	    return (0, _getPrefixedValue2.default)(cssPrefix + value, value, keepUnprefixed);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;

	var _getPrefixedValue = __webpack_require__(623);

	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};

	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true

	  // TODO: chrome & opera support it
	};function sizing(property, value, style, _ref) {
	  var cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed;

	  // This might change in the future
	  // Keep an eye on it
	  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
	    return (0, _getPrefixedValue2.default)(cssPrefix + value, value, keepUnprefixed);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;

	var _hyphenateProperty = __webpack_require__(630);

	var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true,
	  MozTransition: true,
	  MozTransitionProperty: true
	};


	var requiresPrefixDashCased = void 0;

	function transition(property, value, style, _ref) {
	  var cssPrefix = _ref.cssPrefix,
	      keepUnprefixed = _ref.keepUnprefixed,
	      requiresPrefix = _ref.requiresPrefix;

	  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
	    // memoize the prefix array for later use
	    if (!requiresPrefixDashCased) {
	      requiresPrefixDashCased = Object.keys(requiresPrefix).map(function (prop) {
	        return (0, _hyphenateProperty2.default)(prop);
	      });
	    }

	    // only split multi values, not cubic beziers
	    var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	    requiresPrefixDashCased.forEach(function (prop) {
	      multipleValues.forEach(function (val, index) {
	        if (val.indexOf(prop) > -1 && prop !== 'order') {
	          multipleValues[index] = val.replace(prop, cssPrefix + prop) + (keepUnprefixed ? ',' + val : '');
	        }
	      });
	    });

	    return multipleValues.join(',');
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hyphenateProperty;

	var _hyphenateStyleName = __webpack_require__(631);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hyphenateProperty(property) {
	  return (0, _hyphenateStyleName2.default)(property);
	}
	module.exports = exports['default'];

/***/ }),
/* 631 */
/***/ (function(module, exports) {

	'use strict';

	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};

	function hyphenateStyleName(string) {
	    return string in cache
	    ? cache[string]
	    : cache[string] = string
	      .replace(uppercasePattern, '-$&')
	      .toLowerCase()
	      .replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _calc = __webpack_require__(633);

	var _calc2 = _interopRequireDefault(_calc);

	var _flex = __webpack_require__(635);

	var _flex2 = _interopRequireDefault(_flex);

	var _flexboxIE = __webpack_require__(636);

	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

	var _flexboxOld = __webpack_require__(637);

	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

	var _gradient = __webpack_require__(638);

	var _gradient2 = _interopRequireDefault(_gradient);

	var _sizing = __webpack_require__(639);

	var _sizing2 = _interopRequireDefault(_sizing);

	var _transition = __webpack_require__(640);

	var _transition2 = _interopRequireDefault(_transition);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  plugins: [_calc2.default, _flex2.default, _flexboxIE2.default, _flexboxOld2.default, _gradient2.default, _sizing2.default, _transition2.default],
	  prefixMap: { "transform": ["Webkit", "ms"], "transformOrigin": ["Webkit", "ms"], "transformOriginX": ["Webkit", "ms"], "transformOriginY": ["Webkit", "ms"], "backfaceVisibility": ["Webkit"], "perspective": ["Webkit"], "perspectiveOrigin": ["Webkit"], "transformStyle": ["Webkit"], "transformOriginZ": ["Webkit"], "animation": ["Webkit"], "animationDelay": ["Webkit"], "animationDirection": ["Webkit"], "animationFillMode": ["Webkit"], "animationDuration": ["Webkit"], "animationIterationCount": ["Webkit"], "animationName": ["Webkit"], "animationPlayState": ["Webkit"], "animationTimingFunction": ["Webkit"], "appearance": ["Webkit", "Moz"], "userSelect": ["Webkit", "Moz", "ms"], "fontKerning": ["Webkit"], "textEmphasisPosition": ["Webkit"], "textEmphasis": ["Webkit"], "textEmphasisStyle": ["Webkit"], "textEmphasisColor": ["Webkit"], "boxDecorationBreak": ["Webkit"], "clipPath": ["Webkit"], "maskImage": ["Webkit"], "maskMode": ["Webkit"], "maskRepeat": ["Webkit"], "maskPosition": ["Webkit"], "maskClip": ["Webkit"], "maskOrigin": ["Webkit"], "maskSize": ["Webkit"], "maskComposite": ["Webkit"], "mask": ["Webkit"], "maskBorderSource": ["Webkit"], "maskBorderMode": ["Webkit"], "maskBorderSlice": ["Webkit"], "maskBorderWidth": ["Webkit"], "maskBorderOutset": ["Webkit"], "maskBorderRepeat": ["Webkit"], "maskBorder": ["Webkit"], "maskType": ["Webkit"], "textDecorationStyle": ["Webkit", "Moz"], "textDecorationSkip": ["Webkit", "Moz"], "textDecorationLine": ["Webkit", "Moz"], "textDecorationColor": ["Webkit", "Moz"], "filter": ["Webkit"], "fontFeatureSettings": ["Webkit", "Moz"], "breakAfter": ["Webkit", "Moz", "ms"], "breakBefore": ["Webkit", "Moz", "ms"], "breakInside": ["Webkit", "Moz", "ms"], "columnCount": ["Webkit", "Moz"], "columnFill": ["Webkit", "Moz"], "columnGap": ["Webkit", "Moz"], "columnRule": ["Webkit", "Moz"], "columnRuleColor": ["Webkit", "Moz"], "columnRuleStyle": ["Webkit", "Moz"], "columnRuleWidth": ["Webkit", "Moz"], "columns": ["Webkit", "Moz"], "columnSpan": ["Webkit", "Moz"], "columnWidth": ["Webkit", "Moz"], "flex": ["Webkit", "ms"], "flexBasis": ["Webkit"], "flexDirection": ["Webkit", "ms"], "flexGrow": ["Webkit"], "flexFlow": ["Webkit", "ms"], "flexShrink": ["Webkit"], "flexWrap": ["Webkit", "ms"], "alignContent": ["Webkit"], "alignItems": ["Webkit"], "alignSelf": ["Webkit"], "justifyContent": ["Webkit"], "order": ["Webkit"], "transitionDelay": ["Webkit"], "transitionDuration": ["Webkit"], "transitionProperty": ["Webkit"], "transitionTimingFunction": ["Webkit"], "backdropFilter": ["Webkit"], "scrollSnapType": ["Webkit", "ms"], "scrollSnapPointsX": ["Webkit", "ms"], "scrollSnapPointsY": ["Webkit", "ms"], "scrollSnapDestination": ["Webkit", "ms"], "scrollSnapCoordinate": ["Webkit", "ms"], "shapeImageThreshold": ["Webkit"], "shapeImageMargin": ["Webkit"], "shapeImageOutside": ["Webkit"], "hyphens": ["Webkit", "Moz", "ms"], "flowInto": ["Webkit", "ms"], "flowFrom": ["Webkit", "ms"], "regionFragment": ["Webkit", "ms"], "boxSizing": ["Moz"], "textAlignLast": ["Moz"], "tabSize": ["Moz"], "wrapFlow": ["ms"], "wrapThrough": ["ms"], "wrapMargin": ["ms"], "touchAction": ["ms"], "gridTemplateColumns": ["ms"], "gridTemplateRows": ["ms"], "gridTemplateAreas": ["ms"], "gridTemplate": ["ms"], "gridAutoColumns": ["ms"], "gridAutoRows": ["ms"], "gridAutoFlow": ["ms"], "grid": ["ms"], "gridRowStart": ["ms"], "gridColumnStart": ["ms"], "gridRowEnd": ["ms"], "gridRow": ["ms"], "gridColumn": ["ms"], "gridColumnEnd": ["ms"], "gridColumnGap": ["ms"], "gridRowGap": ["ms"], "gridArea": ["ms"], "gridGap": ["ms"], "textSizeAdjust": ["Webkit", "ms"], "borderImage": ["Webkit"], "borderImageOutset": ["Webkit"], "borderImageRepeat": ["Webkit"], "borderImageSlice": ["Webkit"], "borderImageSource": ["Webkit"], "borderImageWidth": ["Webkit"] }
	}; /* eslint-disable */

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;

	var _isPrefixedValue = __webpack_require__(634);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var prefixes = ['-webkit-', '-moz-', ''];
	function calc(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
	    return prefixes.map(function (prefix) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 634 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isPrefixedValue;
	var regex = /-webkit-|-moz-|-ms-/;

	function isPrefixedValue(value) {
	  return typeof value === 'string' && regex.test(value);
	}
	module.exports = exports['default'];

/***/ }),
/* 635 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	var values = {
	  flex: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],
	  'inline-flex': ['-webkit-inline-box', '-moz-inline-box', '-ms-inline-flexbox', '-webkit-inline-flex', 'inline-flex']
	};

	function flex(property, value) {
	  if (property === 'display' && values.hasOwnProperty(value)) {
	    return values[value];
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 636 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;
	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msFlexPreferredSize'
	};

	function flexboxIE(property, value, style) {
	  if (alternativeProps.hasOwnProperty(property)) {
	    style[alternativeProps[property]] = alternativeValues[value] || value;
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 637 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;
	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	function flexboxOld(property, value, style) {
	  if (property === 'flexDirection' && typeof value === 'string') {
	    if (value.indexOf('column') > -1) {
	      style.WebkitBoxOrient = 'vertical';
	    } else {
	      style.WebkitBoxOrient = 'horizontal';
	    }
	    if (value.indexOf('reverse') > -1) {
	      style.WebkitBoxDirection = 'reverse';
	    } else {
	      style.WebkitBoxDirection = 'normal';
	    }
	  }
	  if (alternativeProps.hasOwnProperty(property)) {
	    style[alternativeProps[property]] = alternativeValues[value] || value;
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;

	var _isPrefixedValue = __webpack_require__(634);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var prefixes = ['-webkit-', '-moz-', ''];

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
	    return prefixes.map(function (prefix) {
	      return prefix + value;
	    });
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 639 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;
	var prefixes = ['-webkit-', '-moz-', ''];

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(property, value) {
	  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
	    return prefixes.map(function (prefix) {
	      return prefix + value;
	    });
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;

	var _hyphenateProperty = __webpack_require__(630);

	var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

	var _isPrefixedValue = __webpack_require__(634);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	var _capitalizeString = __webpack_require__(612);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true,
	  MozTransition: true,
	  MozTransitionProperty: true
	};


	var prefixMapping = {
	  Webkit: '-webkit-',
	  Moz: '-moz-',
	  ms: '-ms-'
	};

	function prefixValue(value, propertyPrefixMap) {
	  if ((0, _isPrefixedValue2.default)(value)) {
	    return value;
	  }

	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	  for (var i = 0, len = multipleValues.length; i < len; ++i) {
	    var singleValue = multipleValues[i];
	    var values = [singleValue];
	    for (var property in propertyPrefixMap) {
	      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

	      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
	        var prefixes = propertyPrefixMap[property];
	        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
	          // join all prefixes and create a new value
	          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
	        }
	      }
	    }

	    multipleValues[i] = values.join(',');
	  }

	  return multipleValues.join(',');
	}

	function transition(property, value, style, propertyPrefixMap) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
	    var outputValue = prefixValue(value, propertyPrefixMap);
	    // if the property is already prefixed
	    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
	      return !/-moz-|-ms-/.test(val);
	    }).join(',');

	    if (property.indexOf('Webkit') > -1) {
	      return webkitOutput;
	    }

	    var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
	      return !/-webkit-|-ms-/.test(val);
	    }).join(',');

	    if (property.indexOf('Moz') > -1) {
	      return mozOutput;
	    }

	    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
	    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
	    return outputValue;
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = callOnce;

	var _warning = __webpack_require__(204);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var CALLED_ONCE = 'muiPrepared';

	function callOnce() {
	  if (process.env.NODE_ENV !== 'production') {
	    return function (style) {
	      if (style[CALLED_ONCE]) {
	        process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: You cannot call prepareStyles() on the same style object more than once.') : void 0;
	      }
	      style[CALLED_ONCE] = true;
	      return style;
	    };
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _keys = __webpack_require__(580);

	var _keys2 = _interopRequireDefault(_keys);

	exports.default = rtl;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var reTranslate = /((^|\s)translate(3d|X)?\()(\-?[\d]+)/;
	var reSkew = /((^|\s)skew(x|y)?\()\s*(\-?[\d]+)(deg|rad|grad)(,\s*(\-?[\d]+)(deg|rad|grad))?/;

	/**
	 * This function ensures that `style` supports both ltr and rtl directions by
	 * checking `styleConstants` in `muiTheme` and replacing attribute keys if
	 * necessary.
	 */
	function rtl(muiTheme) {
	  if (muiTheme.isRtl) {
	    return function (style) {
	      if (style.directionInvariant === true) {
	        return style;
	      }

	      var flippedAttributes = {
	        // Keys and their replacements.
	        right: 'left',
	        left: 'right',
	        marginRight: 'marginLeft',
	        marginLeft: 'marginRight',
	        paddingRight: 'paddingLeft',
	        paddingLeft: 'paddingRight',
	        borderRight: 'borderLeft',
	        borderLeft: 'borderRight'
	      };

	      var newStyle = {};

	      (0, _keys2.default)(style).forEach(function (attribute) {
	        var value = style[attribute];
	        var key = attribute;

	        if (flippedAttributes.hasOwnProperty(attribute)) {
	          key = flippedAttributes[attribute];
	        }

	        switch (attribute) {
	          case 'float':
	          case 'textAlign':
	            if (value === 'right') {
	              value = 'left';
	            } else if (value === 'left') {
	              value = 'right';
	            }
	            break;

	          case 'direction':
	            if (value === 'ltr') {
	              value = 'rtl';
	            } else if (value === 'rtl') {
	              value = 'ltr';
	            }
	            break;

	          case 'transform':
	            if (!value) break;
	            var matches = void 0;
	            if (matches = value.match(reTranslate)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]));
	            }
	            if (matches = value.match(reSkew)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]) + matches[5] + matches[6] ? ', ' + (-parseFloat(matches[7]) + matches[8]) : '');
	            }
	            break;

	          case 'transformOrigin':
	            if (!value) break;
	            if (value.indexOf('right') > -1) {
	              value = value.replace('right', 'left');
	            } else if (value.indexOf('left') > -1) {
	              value = value.replace('left', 'right');
	            }
	            break;
	        }

	        newStyle[key] = value;
	      });

	      return newStyle;
	    };
	  }
	}

/***/ }),
/* 643 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.default = compose;
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(470);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _colors = __webpack_require__(606);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Typography = function Typography() {
	  (0, _classCallCheck3.default)(this, Typography);

	  // text colors
	  this.textFullBlack = _colors.fullBlack;
	  this.textDarkBlack = _colors.darkBlack;
	  this.textLightBlack = _colors.lightBlack;
	  this.textMinBlack = _colors.minBlack;
	  this.textFullWhite = _colors.fullWhite;
	  this.textDarkWhite = _colors.darkWhite;
	  this.textLightWhite = _colors.lightWhite;

	  // font weight
	  this.fontWeightLight = 300;
	  this.fontWeightNormal = 400;
	  this.fontWeightMedium = 500;

	  this.fontStyleButtonFontSize = 14;
	};

	exports.default = new Typography();

/***/ })
/******/ ]);